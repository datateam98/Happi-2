// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.quittancement201901_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Quittancement201901 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Quittancement201901 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Quittancement201901";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Quittancement201901.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Quittancement201901.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLoop_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLoop_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLoop_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:NQP5iHWhcTVpcAx+niCZ4jZokFp8Bsi/K76fcg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tLoop_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement201901 = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement201901 = new byte[0];

	
			    public BigDecimal DT_MOIS;

				public BigDecimal getDT_MOIS () {
					return this.DT_MOIS;
				}
				
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement201901.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement201901.length == 0) {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement201901, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement201901, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement201901) {

        	try {

        		int length = 0;
		
						this.DT_MOIS = (BigDecimal) dis.readObject();
					
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DT_MOIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_MOIS="+String.valueOf(DT_MOIS));
		sb.append(",CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement201901 = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement201901 = new byte[0];

	
			    public BigDecimal DT_MOIS;

				public BigDecimal getDT_MOIS () {
					return this.DT_MOIS;
				}
				
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement201901.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement201901.length == 0) {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement201901, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement201901, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement201901) {

        	try {

        		int length = 0;
		
						this.DT_MOIS = (BigDecimal) dis.readObject();
					
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DT_MOIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_MOIS="+String.valueOf(DT_MOIS));
		sb.append(",CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement201901 = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement201901 = new byte[0];

	
			    public BigDecimal DT_MOIS;

				public BigDecimal getDT_MOIS () {
					return this.DT_MOIS;
				}
				
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement201901.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement201901.length == 0) {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement201901, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement201901, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement201901) {

        	try {

        		int length = 0;
		
						this.DT_MOIS = (BigDecimal) dis.readObject();
					
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DT_MOIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_MOIS="+String.valueOf(DT_MOIS));
		sb.append(",CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement201901 = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement201901 = new byte[0];

	
			    public BigDecimal DT_MOIS;

				public BigDecimal getDT_MOIS () {
					return this.DT_MOIS;
				}
				
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement201901.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement201901.length == 0) {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement201901, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement201901, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement201901) {

        	try {

        		int length = 0;
		
						this.DT_MOIS = (BigDecimal) dis.readObject();
					
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DT_MOIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_MOIS="+String.valueOf(DT_MOIS));
		sb.append(",CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement201901 = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement201901 = new byte[0];

	
			    public BigDecimal DT_MOIS;

				public BigDecimal getDT_MOIS () {
					return this.DT_MOIS;
				}
				
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement201901.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement201901.length == 0) {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement201901 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement201901, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement201901, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement201901) {

        	try {

        		int length = 0;
		
						this.DT_MOIS = (BigDecimal) dis.readObject();
					
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DT_MOIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_MOIS="+String.valueOf(DT_MOIS));
		sb.append(",CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tLoop_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLoop_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
row2Struct row2 = new row2Struct();
row2Struct row4 = row2;



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 begin ] start
	 */

	
				TalendThreadPool mtp_tDBInput_1 = new TalendThreadPool(4);

				globalMap.put("lockWrite_tDBInput_1", new Object[0]);
				int threadIdCounter_tDBInput_1 =0;
						
			int NB_ITERATE_tDBInput_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tLoop_1", false);
		start_Hash.put("tLoop_1", System.currentTimeMillis());
		
	
	currentComponent="tLoop_1";

	
		int tos_count_tLoop_1 = 0;
		

int current_iteration_tLoop_1 = 0;

for(int looptLoop_1 =1; looptLoop_1<=12; looptLoop_1=looptLoop_1+1){
	
current_iteration_tLoop_1++;
globalMap.put("tLoop_1_CURRENT_VALUE",looptLoop_1);
globalMap.put("tLoop_1_CURRENT_ITERATION",current_iteration_tLoop_1);


 



/**
 * [tLoop_1 begin ] stop
 */
	
	/**
	 * [tLoop_1 main ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 


	tos_count_tLoop_1++;

/**
 * [tLoop_1 main ] stop
 */
	
	/**
	 * [tLoop_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_begin ] stop
 */
	NB_ITERATE_tDBInput_1++;
	
				
			class tDBInput_1Thread extends TalendThread {//implements routines.system.TalendThreadPool.PropertySettable
				class ThreadedMap extends java.util.HashMap<String, Object> {
			
					private static final long serialVersionUID = 0L;
		
					public ThreadedMap(java.util.Map<String, Object> globalMap) {
						super(globalMap);
					}
		
					@Override
					public Object put(String key, Object value) {
						
							super.put(key, value);
							return Quittancement201901.this.globalMap.put(key, value);
						
					}
				}	
				
				private java.util.Map<String, Object> globalMap = null;
				boolean isRunning = false;
				String iterateId = "";
				
						  
							row1Struct row1 = new row1Struct();
row3Struct row3 = new row3Struct();
row2Struct row2 = new row2Struct();
row2Struct row4 = row2;

						
	
				public tDBInput_1Thread(java.util.Map<String, Object> globalMap,row1Struct row1,row3Struct row3,row2Struct row2,row2Struct row4, int threadID) {
					super();
					
		        		if(row1 != null){
		            		
		    					this.row1.DT_MOIS = row1.DT_MOIS;
		    	            
		    					this.row1.CD_SOCPROP = row1.CD_SOCPROP;
		    	            
		    					this.row1.NO_DOSFACT = row1.NO_DOSFACT;
		    	            
		    					this.row1.LB_NATFACT = row1.LB_NATFACT;
		    	            
		    					this.row1.CD_TYPE_FA = row1.CD_TYPE_FA;
		    	            
		    					this.row1.SIO_LB_NATLOC = row1.SIO_LB_NATLOC;
		    	            
		    					this.row1.SID_LB_FAM_RUB = row1.SID_LB_FAM_RUB;
		    	            
		    					this.row1.NO_RUB_FA = row1.NO_RUB_FA;
		    	            
		    					this.row1.LB_RUBCOUR = row1.LB_RUBCOUR;
		    	            
		    					this.row1.TOU_FACT_TOT = row1.TOU_FACT_TOT;
		    	            
		        		}
		        		
		        		if(row3 != null){
		            		
		    					this.row3.DT_MOIS = row3.DT_MOIS;
		    	            
		    					this.row3.CD_SOCPROP = row3.CD_SOCPROP;
		    	            
		    					this.row3.NO_DOSFACT = row3.NO_DOSFACT;
		    	            
		    					this.row3.LB_NATFACT = row3.LB_NATFACT;
		    	            
		    					this.row3.CD_TYPE_FA = row3.CD_TYPE_FA;
		    	            
		    					this.row3.SIO_LB_NATLOC = row3.SIO_LB_NATLOC;
		    	            
		    					this.row3.SID_LB_FAM_RUB = row3.SID_LB_FAM_RUB;
		    	            
		    					this.row3.NO_RUB_FA = row3.NO_RUB_FA;
		    	            
		    					this.row3.LB_RUBCOUR = row3.LB_RUBCOUR;
		    	            
		    					this.row3.TOU_FACT_TOT = row3.TOU_FACT_TOT;
		    	            
		        		}
		        		
		        		if(row2 != null){
		            		
		    					this.row2.DT_MOIS = row2.DT_MOIS;
		    	            
		    					this.row2.CD_SOCPROP = row2.CD_SOCPROP;
		    	            
		    					this.row2.NO_DOSFACT = row2.NO_DOSFACT;
		    	            
		    					this.row2.LB_NATFACT = row2.LB_NATFACT;
		    	            
		    					this.row2.CD_TYPE_FA = row2.CD_TYPE_FA;
		    	            
		    					this.row2.SIO_LB_NATLOC = row2.SIO_LB_NATLOC;
		    	            
		    					this.row2.SID_LB_FAM_RUB = row2.SID_LB_FAM_RUB;
		    	            
		    					this.row2.NO_RUB_FA = row2.NO_RUB_FA;
		    	            
		    					this.row2.LB_RUBCOUR = row2.LB_RUBCOUR;
		    	            
		    					this.row2.TOU_FACT_TOT = row2.TOU_FACT_TOT;
		    	            
		        		}
		        		
		        		if(row4 != null){
		            		
		    					this.row4.DT_MOIS = row4.DT_MOIS;
		    	            
		    					this.row4.CD_SOCPROP = row4.CD_SOCPROP;
		    	            
		    					this.row4.NO_DOSFACT = row4.NO_DOSFACT;
		    	            
		    					this.row4.LB_NATFACT = row4.LB_NATFACT;
		    	            
		    					this.row4.CD_TYPE_FA = row4.CD_TYPE_FA;
		    	            
		    					this.row4.SIO_LB_NATLOC = row4.SIO_LB_NATLOC;
		    	            
		    					this.row4.SID_LB_FAM_RUB = row4.SID_LB_FAM_RUB;
		    	            
		    					this.row4.NO_RUB_FA = row4.NO_RUB_FA;
		    	            
		    					this.row4.LB_RUBCOUR = row4.LB_RUBCOUR;
		    	            
		    					this.row4.TOU_FACT_TOT = row4.TOU_FACT_TOT;
		    	            
		        		}
		        		
					
						synchronized (globalMap) {
							this.globalMap = java.util.Collections.synchronizedMap(new ThreadedMap(globalMap));
					
						}
					iterateId = "." + threadID;
					
					
				}


				public void run() {		
		
					java.util.Map threadRunResultMap = new java.util.HashMap();
					threadRunResultMap.put("errorCode", null);
					threadRunResultMap.put("status", "");
					threadLocal.set(threadRunResultMap);
					
					this.isRunning = true;
					String currentComponent = "";
					java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();
					
						String currentVirtualComponent = null;
					
					try {			
						
							if(execStat){
								runStat.updateStatOnConnection("iterate1",0,"exec"+iterateId);
							}				
						



	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal DT_MOIS;
    				BigDecimal CD_SOCPROP;
    				String LB_NATFACT;
    				String CD_TYPE_FA;
    				String SIO_LB_NATLOC;
    				String SID_LB_FAM_RUB;
    				BigDecimal NO_RUB_FA;
    				String LB_RUBCOUR;
         			BigDecimal TOU_FACT_TOT_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DT_MOIS == null) ? 0 : this.DT_MOIS.hashCode());
							
							result = prime * result + ((this.CD_SOCPROP == null) ? 0 : this.CD_SOCPROP.hashCode());
							
							result = prime * result + ((this.LB_NATFACT == null) ? 0 : this.LB_NATFACT.hashCode());
							
							result = prime * result + ((this.CD_TYPE_FA == null) ? 0 : this.CD_TYPE_FA.hashCode());
							
							result = prime * result + ((this.SIO_LB_NATLOC == null) ? 0 : this.SIO_LB_NATLOC.hashCode());
							
							result = prime * result + ((this.SID_LB_FAM_RUB == null) ? 0 : this.SID_LB_FAM_RUB.hashCode());
							
							result = prime * result + ((this.NO_RUB_FA == null) ? 0 : this.NO_RUB_FA.hashCode());
							
							result = prime * result + ((this.LB_RUBCOUR == null) ? 0 : this.LB_RUBCOUR.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.DT_MOIS == null) {
								if (other.DT_MOIS != null) 
									return false;
							} else if (!this.DT_MOIS.equals(other.DT_MOIS)) 
								return false;
						
							if (this.CD_SOCPROP == null) {
								if (other.CD_SOCPROP != null) 
									return false;
							} else if (!this.CD_SOCPROP.equals(other.CD_SOCPROP)) 
								return false;
						
							if (this.LB_NATFACT == null) {
								if (other.LB_NATFACT != null) 
									return false;
							} else if (!this.LB_NATFACT.equals(other.LB_NATFACT)) 
								return false;
						
							if (this.CD_TYPE_FA == null) {
								if (other.CD_TYPE_FA != null) 
									return false;
							} else if (!this.CD_TYPE_FA.equals(other.CD_TYPE_FA)) 
								return false;
						
							if (this.SIO_LB_NATLOC == null) {
								if (other.SIO_LB_NATLOC != null) 
									return false;
							} else if (!this.SIO_LB_NATLOC.equals(other.SIO_LB_NATLOC)) 
								return false;
						
							if (this.SID_LB_FAM_RUB == null) {
								if (other.SID_LB_FAM_RUB != null) 
									return false;
							} else if (!this.SID_LB_FAM_RUB.equals(other.SID_LB_FAM_RUB)) 
								return false;
						
							if (this.NO_RUB_FA == null) {
								if (other.NO_RUB_FA != null) 
									return false;
							} else if (!this.NO_RUB_FA.equals(other.NO_RUB_FA)) 
								return false;
						
							if (this.LB_RUBCOUR == null) {
								if (other.LB_RUBCOUR != null) 
									return false;
							} else if (!this.LB_RUBCOUR.equals(other.LB_RUBCOUR)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT\n		SID_FACTURA_GIM.DT_MOIS,\n		SID_FACTURA_GIM.CD_SOCPROP,\n		SID_FACTURA_GIM.NO_DOSFACT,\n		SID_FACTURA_GIM.LB_"
+"NATFACT,\n		SID_FACTURA_GIM.CD_TYPE_FA,\n		SID_FACTURA_GIM.SIO_LB_NATLOC,\n		SID_FACTURA_GIM.SID_LB_FAM_RUB,\n		SID_FACT"
+"URA_GIM.NO_RUB_FA,\n		SID_FACTURA_GIM.LB_RUBCOUR,\n		SID_FACTURA_GIM.TOU_FACT_TOT\nFROM	SID_FACTURA_GIM\nwhere SID_FACTU"
+"RA_GIM.DT_ANNEE = 2019\nand SID_FACTURA_GIM.DT_MOIS  = " + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")) + "\nand SID_FACTURA_GIM.SIO_CD_FAM_RUB='CHA'\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.DT_MOIS = null;
							} else {
		                          
            row1.DT_MOIS = rs_tDBInput_1.getBigDecimal(1);
            if(rs_tDBInput_1.wasNull()){
                    row1.DT_MOIS = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.CD_SOCPROP = null;
							} else {
		                          
            row1.CD_SOCPROP = rs_tDBInput_1.getBigDecimal(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.CD_SOCPROP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.NO_DOSFACT = null;
							} else {
		                          
            row1.NO_DOSFACT = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.NO_DOSFACT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.LB_NATFACT = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_NATFACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LB_NATFACT = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.LB_NATFACT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.CD_TYPE_FA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_TYPE_FA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_TYPE_FA = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_TYPE_FA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.SIO_LB_NATLOC = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIO_LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SIO_LB_NATLOC = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.SIO_LB_NATLOC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.SID_LB_FAM_RUB = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SID_LB_FAM_RUB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SID_LB_FAM_RUB = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.SID_LB_FAM_RUB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.NO_RUB_FA = null;
							} else {
		                          
            row1.NO_RUB_FA = rs_tDBInput_1.getBigDecimal(8);
            if(rs_tDBInput_1.wasNull()){
                    row1.NO_RUB_FA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.LB_RUBCOUR = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_RUBCOUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LB_RUBCOUR = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.LB_RUBCOUR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.TOU_FACT_TOT = null;
							} else {
		                          
            row1.TOU_FACT_TOT = rs_tDBInput_1.getBigDecimal(10);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOU_FACT_TOT = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					


	row3 = new row3Struct();
						
	row3.DT_MOIS = row1.DT_MOIS;								
	row3.CD_SOCPROP = row1.CD_SOCPROP;								
	row3.NO_DOSFACT = row1.NO_DOSFACT;								
	row3.LB_NATFACT = row1.LB_NATFACT;								
	row3.CD_TYPE_FA = row1.CD_TYPE_FA;								
	row3.SIO_LB_NATLOC = row1.SIO_LB_NATLOC;								
	row3.SID_LB_FAM_RUB = row1.SID_LB_FAM_RUB;								
	row3.NO_RUB_FA = row1.NO_RUB_FA;								
	row3.LB_RUBCOUR = row1.LB_RUBCOUR;								
	row3.TOU_FACT_TOT = row1.TOU_FACT_TOT;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					
	
operation_finder_tAggregateRow_1.DT_MOIS = row3.DT_MOIS;
			operation_finder_tAggregateRow_1.CD_SOCPROP = row3.CD_SOCPROP;
			operation_finder_tAggregateRow_1.LB_NATFACT = row3.LB_NATFACT;
			operation_finder_tAggregateRow_1.CD_TYPE_FA = row3.CD_TYPE_FA;
			operation_finder_tAggregateRow_1.SIO_LB_NATLOC = row3.SIO_LB_NATLOC;
			operation_finder_tAggregateRow_1.SID_LB_FAM_RUB = row3.SID_LB_FAM_RUB;
			operation_finder_tAggregateRow_1.NO_RUB_FA = row3.NO_RUB_FA;
			operation_finder_tAggregateRow_1.LB_RUBCOUR = row3.LB_RUBCOUR;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.DT_MOIS = operation_finder_tAggregateRow_1.DT_MOIS;
				operation_result_tAggregateRow_1.CD_SOCPROP = operation_finder_tAggregateRow_1.CD_SOCPROP;
				operation_result_tAggregateRow_1.LB_NATFACT = operation_finder_tAggregateRow_1.LB_NATFACT;
				operation_result_tAggregateRow_1.CD_TYPE_FA = operation_finder_tAggregateRow_1.CD_TYPE_FA;
				operation_result_tAggregateRow_1.SIO_LB_NATLOC = operation_finder_tAggregateRow_1.SIO_LB_NATLOC;
				operation_result_tAggregateRow_1.SID_LB_FAM_RUB = operation_finder_tAggregateRow_1.SID_LB_FAM_RUB;
				operation_result_tAggregateRow_1.NO_RUB_FA = operation_finder_tAggregateRow_1.NO_RUB_FA;
				operation_result_tAggregateRow_1.LB_RUBCOUR = operation_finder_tAggregateRow_1.LB_RUBCOUR;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.TOU_FACT_TOT_sum == null) {
						operation_result_tAggregateRow_1.TOU_FACT_TOT_sum = new BigDecimal(0).setScale(4);
					}
					operation_result_tAggregateRow_1.TOU_FACT_TOT_sum = operation_result_tAggregateRow_1.TOU_FACT_TOT_sum.add(
						
							
								row3.TOU_FACT_TOT
							
						
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/DKHUON/Desktop/HAPPI/Export/Quittancement 2019 par mois " + ((Integer)globalMap.get("tLoop_1_CURRENT_VALUE")) + ".xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DT_MOIS");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CD_SOCPROP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NO_DOSFACT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LB_NATFACT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("CD_TYPE_FA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SIO_LB_NATLOC");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("SID_LB_FAM_RUB");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NO_RUB_FA");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("LB_RUBCOUR");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("TOU_FACT_TOT");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

            				    row2.DT_MOIS = aggregated_row_tAggregateRow_1.DT_MOIS;
            				    
            				    row2.CD_SOCPROP = aggregated_row_tAggregateRow_1.CD_SOCPROP;
            				    
            				    row2.LB_NATFACT = aggregated_row_tAggregateRow_1.LB_NATFACT;
            				    
            				    row2.CD_TYPE_FA = aggregated_row_tAggregateRow_1.CD_TYPE_FA;
            				    
            				    row2.SIO_LB_NATLOC = aggregated_row_tAggregateRow_1.SIO_LB_NATLOC;
            				    
            				    row2.SID_LB_FAM_RUB = aggregated_row_tAggregateRow_1.SID_LB_FAM_RUB;
            				    
            				    row2.NO_RUB_FA = aggregated_row_tAggregateRow_1.NO_RUB_FA;
            				    
            				    row2.LB_RUBCOUR = aggregated_row_tAggregateRow_1.LB_RUBCOUR;
            				    row2.TOU_FACT_TOT = aggregated_row_tAggregateRow_1.TOU_FACT_TOT_sum;
                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row2.DT_MOIS != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row2.DT_MOIS.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.CD_SOCPROP != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row2.CD_SOCPROP.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NO_DOSFACT != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row2.NO_DOSFACT.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.LB_NATFACT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.LB_NATFACT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.CD_TYPE_FA != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.CD_TYPE_FA));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.SIO_LB_NATLOC != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.SIO_LB_NATLOC));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.SID_LB_FAM_RUB != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.SID_LB_FAM_RUB));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.NO_RUB_FA != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row2.NO_RUB_FA.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.LB_RUBCOUR != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row2.LB_RUBCOUR));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row2.TOU_FACT_TOT != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row2.TOU_FACT_TOT.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 
     row4 = row2;


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1,"row4");
						}
						
//////////
 

// for output

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */
	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

							columnIndex_tFileOutputExcel_1 = 0;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 1;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 2;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 3;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 4;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 5;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 6;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 7;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 8;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
							columnIndex_tFileOutputExcel_1 = 9;
						
					xlsxTool_tFileOutputExcel_1.setColAutoSize(columnIndex_tFileOutputExcel_1);
	
	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */












					if(execStat){
						runStat.updateStatOnConnection("iterate1",2,"exec"+iterateId);
					}				
				
						} catch (java.lang.Exception e) {
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
				            		            
		                    TalendException te = new TalendException(e, currentComponent, globalMap);
							
								te.setVirtualComponentName(currentVirtualComponent);
							
							this.exception = te;
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
	
						} catch (java.lang.Error error){
							this.status = "failure";
							Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
							if (localErrorCode != null) {
								if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
									this.errorCode = localErrorCode;
								}
							}					
							this.error = error;				            		            
							talendThreadPool.setErrorThread(this);
				            talendThreadPool.stopAllWorkers();
						} finally {
							try{
								
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */












							}catch(java.lang.Exception e){	
								//ignore
							}catch(java.lang.Error error){
								//ignore
							}
							resourceMap = null;
						}
						this.isRunning = false;
				
						Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
						String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
						if (localErrorCode != null) {
							if (this.errorCode == null || localErrorCode.compareTo(this.errorCode) > 0) {
								this.errorCode = localErrorCode;
							}
						} 
						if (!this.status.equals("failure")) {
							this.status = localStatus;
						}
						
						talendThreadPool.getTalendThreadResult().setErrorCode(this.errorCode);
						talendThreadPool.getTalendThreadResult().setStatus(this.status);						
					}
				}

				tDBInput_1Thread bt_tDBInput_1 = new tDBInput_1Thread(globalMap,row1,row3,row2,row4,threadIdCounter_tDBInput_1++);
				mtp_tDBInput_1.execute(bt_tDBInput_1);

				




	
	/**
	 * [tLoop_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 process_data_end ] stop
 */
	
	/**
	 * [tLoop_1 end ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	


	}


 

ok_Hash.put("tLoop_1", true);
end_Hash.put("tLoop_1", System.currentTimeMillis());


			mtp_tDBInput_1.waitForEndOfQueue();
			
			TalendThread errorThread_tDBInput_1 = mtp_tDBInput_1.getErrorThread();

	if(errorThread_tDBInput_1 != null) {
		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal.get()).get("status"));
		
		if (errorThread_tDBInput_1.errorCode != null) {
			if (localErrorCode == null || errorThread_tDBInput_1.errorCode.compareTo(localErrorCode) > 0) {
				((java.util.Map) threadLocal.get()).put("errorCode", errorThread_tDBInput_1.errorCode);
			}
		} 
		if (!localStatus.equals("failure")) {
			((java.util.Map) threadLocal.get()).put("status", errorThread_tDBInput_1.status);
		}
		if(errorThread_tDBInput_1.exception!=null){
			throw errorThread_tDBInput_1.exception;
		}		
	}else{
		Integer threadErrorCode = mtp_tDBInput_1.getTalendThreadResult().getErrorCode();
		String threadStatus = mtp_tDBInput_1.getTalendThreadResult().getStatus();
		
		Integer localErrorCode = (Integer) (((java.util.Map) threadLocal
				.get()).get("errorCode"));
		String localStatus = (String) (((java.util.Map) threadLocal
				.get()).get("status"));

		if (threadErrorCode != null) {
			if (localErrorCode == null
					|| threadErrorCode.compareTo(localErrorCode) > 0) {
				((java.util.Map) threadLocal.get()).put("errorCode",
						threadErrorCode);
			}
		} 
		if (!localStatus.equals("failure")) {
			((java.util.Map) threadLocal.get()).put("status",
					threadStatus);
		}
	}
			
			


/**
 * [tLoop_1 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tLoop_1 finally ] start
	 */

	

	
	
	currentComponent="tLoop_1";

	

 



/**
 * [tLoop_1 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";

	

 



/**
 * [tUnite_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLoop_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Quittancement201901 Quittancement201901Class = new Quittancement201901();

        int exitCode = Quittancement201901Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Quittancement201901.class.getClassLoader().getResourceAsStream("happi/quittancement201901_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Quittancement201901.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {
                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tDBConnection_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}catch (java.lang.Error e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tDBConnection_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Quittancement201901");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     111955 characters generated by Talend Open Studio for Data Integration 
 *     on the 30 mars 2021 10:55:16 CEST
 ************************************************************************************************/