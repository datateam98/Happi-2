// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package happi.mv_socprop_1_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: MV_SOCPROP_1 Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class MV_SOCPROP_1 implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "MV_SOCPROP_1";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					MV_SOCPROP_1.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(MV_SOCPROP_1.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tRunJob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_5_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_6_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_8_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_9_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_10_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_12_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_12_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_13_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_14_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_16_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_17_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_19_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_19_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_20_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_21_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_22_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_22_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_24_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_25_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_25_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_26_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_28_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_28_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_29_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_29_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_30_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_30_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_31_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_31_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_33_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_33_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_35_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tRunJob_35_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tRunJob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_5_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_6_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_8_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_9_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_10_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_12_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_13_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_14_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_16_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_17_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_19_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_20_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_21_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_22_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_24_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_25_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_26_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_28_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_29_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_30_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_31_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_33_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_35_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tRunJob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_1 begin ] start
				 */

				ok_Hash.put("tRunJob_1", false);
				start_Hash.put("tRunJob_1", System.currentTimeMillis());

				currentComponent = "tRunJob_1";

				int tos_count_tRunJob_1 = 0;

				class DealChildJobLibrary_tRunJob_1 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

				class JVMArgumentHelper_tRunJob_1 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();

				/**
				 * [tRunJob_1 begin ] stop
				 */

				/**
				 * [tRunJob_1 main ] start
				 */

				currentComponent = "tRunJob_1";

				java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();

				String osName_tRunJob_1 = System.getProperty("os.name");
				if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase().startsWith("win")) {

					paraList_tRunJob_1.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");

				} else {

					paraList_tRunJob_1.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_1.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_1.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null) {
					paraList_tRunJob_1.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");

				java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_1 = null;

				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

				Runtime runtime_tRunJob_1 = Runtime.getRuntime();
				Process ps_tRunJob_1 = null;

				// 0 indicates normal termination
				int result_tRunJob_1;
				StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
				try {
					ps_tRunJob_1 = runtime_tRunJob_1
							.exec((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

					Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
					normal_tRunJob_1.start();

					Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
					error_tRunJob_1.start();

					result_tRunJob_1 = ps_tRunJob_1.waitFor();
					normal_tRunJob_1.join(10000);
					error_tRunJob_1.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_1.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_1_CHILD_RETURN_CODE", result_tRunJob_1);
				if (result_tRunJob_1 != 0) {
					globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_1.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_1
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());

				}

				tos_count_tRunJob_1++;

				/**
				 * [tRunJob_1 main ] stop
				 */

				/**
				 * [tRunJob_1 process_data_begin ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_1 process_data_end ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 process_data_end ] stop
				 */

				/**
				 * [tRunJob_1 end ] start
				 */

				currentComponent = "tRunJob_1";

				ok_Hash.put("tRunJob_1", true);
				end_Hash.put("tRunJob_1", System.currentTimeMillis());

				/**
				 * [tRunJob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_1 finally ] start
				 */

				currentComponent = "tRunJob_1";

				/**
				 * [tRunJob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_1_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_2 begin ] start
				 */

				ok_Hash.put("tRunJob_2", false);
				start_Hash.put("tRunJob_2", System.currentTimeMillis());

				currentComponent = "tRunJob_2";

				int tos_count_tRunJob_2 = 0;

				class DealChildJobLibrary_tRunJob_2 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

				class JVMArgumentHelper_tRunJob_2 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();

				/**
				 * [tRunJob_2 begin ] stop
				 */

				/**
				 * [tRunJob_2 main ] start
				 */

				currentComponent = "tRunJob_2";

				java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();

				String osName_tRunJob_2 = System.getProperty("os.name");
				if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase().startsWith("win")) {

					paraList_tRunJob_2.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");

				} else {

					paraList_tRunJob_2.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_2.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_2.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null) {
					paraList_tRunJob_2.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");

				java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_2 = null;

				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

				Runtime runtime_tRunJob_2 = Runtime.getRuntime();
				Process ps_tRunJob_2 = null;

				// 0 indicates normal termination
				int result_tRunJob_2;
				StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
				try {
					ps_tRunJob_2 = runtime_tRunJob_2
							.exec((String[]) paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

					Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
					normal_tRunJob_2.start();

					Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
					error_tRunJob_2.start();

					result_tRunJob_2 = ps_tRunJob_2.waitFor();
					normal_tRunJob_2.join(10000);
					error_tRunJob_2.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_2.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_2_CHILD_RETURN_CODE", result_tRunJob_2);
				if (result_tRunJob_2 != 0) {
					globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_2.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_2
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());

				}

				tos_count_tRunJob_2++;

				/**
				 * [tRunJob_2 main ] stop
				 */

				/**
				 * [tRunJob_2 process_data_begin ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_2 process_data_end ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 process_data_end ] stop
				 */

				/**
				 * [tRunJob_2 end ] start
				 */

				currentComponent = "tRunJob_2";

				ok_Hash.put("tRunJob_2", true);
				end_Hash.put("tRunJob_2", System.currentTimeMillis());

				/**
				 * [tRunJob_2 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_2 finally ] start
				 */

				currentComponent = "tRunJob_2";

				/**
				 * [tRunJob_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_2_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_4 begin ] start
				 */

				ok_Hash.put("tRunJob_4", false);
				start_Hash.put("tRunJob_4", System.currentTimeMillis());

				currentComponent = "tRunJob_4";

				int tos_count_tRunJob_4 = 0;

				class DealChildJobLibrary_tRunJob_4 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_4 dealChildJobLibrary_tRunJob_4 = new DealChildJobLibrary_tRunJob_4();

				class JVMArgumentHelper_tRunJob_4 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_4 jvm_argument_helper_tRunJob_4 = new JVMArgumentHelper_tRunJob_4();

				/**
				 * [tRunJob_4 begin ] stop
				 */

				/**
				 * [tRunJob_4 main ] start
				 */

				currentComponent = "tRunJob_4";

				java.util.List<String> paraList_tRunJob_4 = new java.util.ArrayList<String>();

				String osName_tRunJob_4 = System.getProperty("os.name");
				if (osName_tRunJob_4 != null && osName_tRunJob_4.toLowerCase().startsWith("win")) {

					paraList_tRunJob_4.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xms256M");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xmx1024M");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-cp");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4,
							dealChildJobLibrary_tRunJob_4.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_node=tRunJob_4");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "%*");

				} else {

					paraList_tRunJob_4.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xms256M");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Xmx1024M");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "-cp");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4,
							dealChildJobLibrary_tRunJob_4.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--father_node=tRunJob_4");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "--context=BAGNEUX");

					jvm_argument_helper_tRunJob_4.addArgumentsTo(paraList_tRunJob_4, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_4.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_4.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_4.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_4 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_4 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_4".equals(tRunJobName_tRunJob_4) && childResumePath_tRunJob_4 != null) {
					paraList_tRunJob_4.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_4.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_4");

				java.util.Map<String, Object> parentContextMap_tRunJob_4 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_4 = null;

				class ConsoleHelper_tRunJob_4 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_4 consoleHelper_tRunJob_4 = new ConsoleHelper_tRunJob_4();

				Runtime runtime_tRunJob_4 = Runtime.getRuntime();
				Process ps_tRunJob_4 = null;

				// 0 indicates normal termination
				int result_tRunJob_4;
				StringBuffer errorMsg_tRunJob_4 = new StringBuffer();
				try {
					ps_tRunJob_4 = runtime_tRunJob_4
							.exec((String[]) paraList_tRunJob_4.toArray(new String[paraList_tRunJob_4.size()]));

					Thread normal_tRunJob_4 = consoleHelper_tRunJob_4.getNormalThread(ps_tRunJob_4);
					normal_tRunJob_4.start();

					Thread error_tRunJob_4 = consoleHelper_tRunJob_4.getErrorThread(ps_tRunJob_4, errorMsg_tRunJob_4);
					error_tRunJob_4.start();

					result_tRunJob_4 = ps_tRunJob_4.waitFor();
					normal_tRunJob_4.join(10000);
					error_tRunJob_4.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_4.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_4_CHILD_RETURN_CODE", result_tRunJob_4);
				if (result_tRunJob_4 != 0) {
					globalMap.put("tRunJob_4_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_4.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_4
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_4.toString());

				}

				tos_count_tRunJob_4++;

				/**
				 * [tRunJob_4 main ] stop
				 */

				/**
				 * [tRunJob_4 process_data_begin ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_4 process_data_end ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 process_data_end ] stop
				 */

				/**
				 * [tRunJob_4 end ] start
				 */

				currentComponent = "tRunJob_4";

				ok_Hash.put("tRunJob_4", true);
				end_Hash.put("tRunJob_4", System.currentTimeMillis());

				/**
				 * [tRunJob_4 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_4 finally ] start
				 */

				currentComponent = "tRunJob_4";

				/**
				 * [tRunJob_4 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_4_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_5 begin ] start
				 */

				ok_Hash.put("tRunJob_5", false);
				start_Hash.put("tRunJob_5", System.currentTimeMillis());

				currentComponent = "tRunJob_5";

				int tos_count_tRunJob_5 = 0;

				class DealChildJobLibrary_tRunJob_5 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_5 dealChildJobLibrary_tRunJob_5 = new DealChildJobLibrary_tRunJob_5();

				class JVMArgumentHelper_tRunJob_5 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_5 jvm_argument_helper_tRunJob_5 = new JVMArgumentHelper_tRunJob_5();

				/**
				 * [tRunJob_5 begin ] stop
				 */

				/**
				 * [tRunJob_5 main ] start
				 */

				currentComponent = "tRunJob_5";

				java.util.List<String> paraList_tRunJob_5 = new java.util.ArrayList<String>();

				String osName_tRunJob_5 = System.getProperty("os.name");
				if (osName_tRunJob_5 != null && osName_tRunJob_5.toLowerCase().startsWith("win")) {

					paraList_tRunJob_5.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Xms256M");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Xmx1024M");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-cp");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5,
							dealChildJobLibrary_tRunJob_5.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--father_node=tRunJob_5");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "%*");

				} else {

					paraList_tRunJob_5.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Xms256M");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Xmx1024M");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "-cp");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5,
							dealChildJobLibrary_tRunJob_5.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--father_node=tRunJob_5");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_5.addArgumentsTo(paraList_tRunJob_5, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_5.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_5.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_5.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_5 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_5 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_5".equals(tRunJobName_tRunJob_5) && childResumePath_tRunJob_5 != null) {
					paraList_tRunJob_5.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_5.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_5");

				java.util.Map<String, Object> parentContextMap_tRunJob_5 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_5 = null;

				class ConsoleHelper_tRunJob_5 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_5 consoleHelper_tRunJob_5 = new ConsoleHelper_tRunJob_5();

				Runtime runtime_tRunJob_5 = Runtime.getRuntime();
				Process ps_tRunJob_5 = null;

				// 0 indicates normal termination
				int result_tRunJob_5;
				StringBuffer errorMsg_tRunJob_5 = new StringBuffer();
				try {
					ps_tRunJob_5 = runtime_tRunJob_5
							.exec((String[]) paraList_tRunJob_5.toArray(new String[paraList_tRunJob_5.size()]));

					Thread normal_tRunJob_5 = consoleHelper_tRunJob_5.getNormalThread(ps_tRunJob_5);
					normal_tRunJob_5.start();

					Thread error_tRunJob_5 = consoleHelper_tRunJob_5.getErrorThread(ps_tRunJob_5, errorMsg_tRunJob_5);
					error_tRunJob_5.start();

					result_tRunJob_5 = ps_tRunJob_5.waitFor();
					normal_tRunJob_5.join(10000);
					error_tRunJob_5.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_5.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_5_CHILD_RETURN_CODE", result_tRunJob_5);
				if (result_tRunJob_5 != 0) {
					globalMap.put("tRunJob_5_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_5.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_5
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_5.toString());

				}

				tos_count_tRunJob_5++;

				/**
				 * [tRunJob_5 main ] stop
				 */

				/**
				 * [tRunJob_5 process_data_begin ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_5 process_data_end ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 process_data_end ] stop
				 */

				/**
				 * [tRunJob_5 end ] start
				 */

				currentComponent = "tRunJob_5";

				ok_Hash.put("tRunJob_5", true);
				end_Hash.put("tRunJob_5", System.currentTimeMillis());

				/**
				 * [tRunJob_5 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_5 finally ] start
				 */

				currentComponent = "tRunJob_5";

				/**
				 * [tRunJob_5 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_5_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_6 begin ] start
				 */

				ok_Hash.put("tRunJob_6", false);
				start_Hash.put("tRunJob_6", System.currentTimeMillis());

				currentComponent = "tRunJob_6";

				int tos_count_tRunJob_6 = 0;

				class DealChildJobLibrary_tRunJob_6 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_6 dealChildJobLibrary_tRunJob_6 = new DealChildJobLibrary_tRunJob_6();

				class JVMArgumentHelper_tRunJob_6 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_6 jvm_argument_helper_tRunJob_6 = new JVMArgumentHelper_tRunJob_6();

				/**
				 * [tRunJob_6 begin ] stop
				 */

				/**
				 * [tRunJob_6 main ] start
				 */

				currentComponent = "tRunJob_6";

				java.util.List<String> paraList_tRunJob_6 = new java.util.ArrayList<String>();

				String osName_tRunJob_6 = System.getProperty("os.name");
				if (osName_tRunJob_6 != null && osName_tRunJob_6.toLowerCase().startsWith("win")) {

					paraList_tRunJob_6.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xms256M");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xmx1024M");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-cp");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6,
							dealChildJobLibrary_tRunJob_6.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_node=tRunJob_6");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "%*");

				} else {

					paraList_tRunJob_6.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xms256M");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Xmx1024M");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "-cp");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6,
							dealChildJobLibrary_tRunJob_6.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--father_node=tRunJob_6");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_6.addArgumentsTo(paraList_tRunJob_6, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_6.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_6.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_6.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_6 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_6 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_6".equals(tRunJobName_tRunJob_6) && childResumePath_tRunJob_6 != null) {
					paraList_tRunJob_6.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_6.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_6");

				java.util.Map<String, Object> parentContextMap_tRunJob_6 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_6 = null;

				class ConsoleHelper_tRunJob_6 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_6 consoleHelper_tRunJob_6 = new ConsoleHelper_tRunJob_6();

				Runtime runtime_tRunJob_6 = Runtime.getRuntime();
				Process ps_tRunJob_6 = null;

				// 0 indicates normal termination
				int result_tRunJob_6;
				StringBuffer errorMsg_tRunJob_6 = new StringBuffer();
				try {
					ps_tRunJob_6 = runtime_tRunJob_6
							.exec((String[]) paraList_tRunJob_6.toArray(new String[paraList_tRunJob_6.size()]));

					Thread normal_tRunJob_6 = consoleHelper_tRunJob_6.getNormalThread(ps_tRunJob_6);
					normal_tRunJob_6.start();

					Thread error_tRunJob_6 = consoleHelper_tRunJob_6.getErrorThread(ps_tRunJob_6, errorMsg_tRunJob_6);
					error_tRunJob_6.start();

					result_tRunJob_6 = ps_tRunJob_6.waitFor();
					normal_tRunJob_6.join(10000);
					error_tRunJob_6.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_6.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_6_CHILD_RETURN_CODE", result_tRunJob_6);
				if (result_tRunJob_6 != 0) {
					globalMap.put("tRunJob_6_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_6.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_6
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_6.toString());

				}

				tos_count_tRunJob_6++;

				/**
				 * [tRunJob_6 main ] stop
				 */

				/**
				 * [tRunJob_6 process_data_begin ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_6 process_data_end ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 process_data_end ] stop
				 */

				/**
				 * [tRunJob_6 end ] start
				 */

				currentComponent = "tRunJob_6";

				ok_Hash.put("tRunJob_6", true);
				end_Hash.put("tRunJob_6", System.currentTimeMillis());

				/**
				 * [tRunJob_6 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_6 finally ] start
				 */

				currentComponent = "tRunJob_6";

				/**
				 * [tRunJob_6 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_6_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_8 begin ] start
				 */

				ok_Hash.put("tRunJob_8", false);
				start_Hash.put("tRunJob_8", System.currentTimeMillis());

				currentComponent = "tRunJob_8";

				int tos_count_tRunJob_8 = 0;

				class DealChildJobLibrary_tRunJob_8 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_8 dealChildJobLibrary_tRunJob_8 = new DealChildJobLibrary_tRunJob_8();

				class JVMArgumentHelper_tRunJob_8 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_8 jvm_argument_helper_tRunJob_8 = new JVMArgumentHelper_tRunJob_8();

				/**
				 * [tRunJob_8 begin ] stop
				 */

				/**
				 * [tRunJob_8 main ] start
				 */

				currentComponent = "tRunJob_8";

				java.util.List<String> paraList_tRunJob_8 = new java.util.ArrayList<String>();

				String osName_tRunJob_8 = System.getProperty("os.name");
				if (osName_tRunJob_8 != null && osName_tRunJob_8.toLowerCase().startsWith("win")) {

					paraList_tRunJob_8.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xms256M");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xmx1024M");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-cp");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8,
							dealChildJobLibrary_tRunJob_8.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_node=tRunJob_8");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "%*");

				} else {

					paraList_tRunJob_8.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xms256M");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Xmx1024M");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "-cp");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8,
							dealChildJobLibrary_tRunJob_8.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--father_node=tRunJob_8");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "--context=BOIS_COLOMBES");

					jvm_argument_helper_tRunJob_8.addArgumentsTo(paraList_tRunJob_8, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_8.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_8.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_8.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_8 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_8 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_8".equals(tRunJobName_tRunJob_8) && childResumePath_tRunJob_8 != null) {
					paraList_tRunJob_8.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_8.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_8");

				java.util.Map<String, Object> parentContextMap_tRunJob_8 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_8 = null;

				class ConsoleHelper_tRunJob_8 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_8 consoleHelper_tRunJob_8 = new ConsoleHelper_tRunJob_8();

				Runtime runtime_tRunJob_8 = Runtime.getRuntime();
				Process ps_tRunJob_8 = null;

				// 0 indicates normal termination
				int result_tRunJob_8;
				StringBuffer errorMsg_tRunJob_8 = new StringBuffer();
				try {
					ps_tRunJob_8 = runtime_tRunJob_8
							.exec((String[]) paraList_tRunJob_8.toArray(new String[paraList_tRunJob_8.size()]));

					Thread normal_tRunJob_8 = consoleHelper_tRunJob_8.getNormalThread(ps_tRunJob_8);
					normal_tRunJob_8.start();

					Thread error_tRunJob_8 = consoleHelper_tRunJob_8.getErrorThread(ps_tRunJob_8, errorMsg_tRunJob_8);
					error_tRunJob_8.start();

					result_tRunJob_8 = ps_tRunJob_8.waitFor();
					normal_tRunJob_8.join(10000);
					error_tRunJob_8.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_8.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_8_CHILD_RETURN_CODE", result_tRunJob_8);
				if (result_tRunJob_8 != 0) {
					globalMap.put("tRunJob_8_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_8.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_8
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_8.toString());

				}

				tos_count_tRunJob_8++;

				/**
				 * [tRunJob_8 main ] stop
				 */

				/**
				 * [tRunJob_8 process_data_begin ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_8 process_data_end ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 process_data_end ] stop
				 */

				/**
				 * [tRunJob_8 end ] start
				 */

				currentComponent = "tRunJob_8";

				ok_Hash.put("tRunJob_8", true);
				end_Hash.put("tRunJob_8", System.currentTimeMillis());

				/**
				 * [tRunJob_8 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_8 finally ] start
				 */

				currentComponent = "tRunJob_8";

				/**
				 * [tRunJob_8 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_8_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_9 begin ] start
				 */

				ok_Hash.put("tRunJob_9", false);
				start_Hash.put("tRunJob_9", System.currentTimeMillis());

				currentComponent = "tRunJob_9";

				int tos_count_tRunJob_9 = 0;

				class DealChildJobLibrary_tRunJob_9 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_9 dealChildJobLibrary_tRunJob_9 = new DealChildJobLibrary_tRunJob_9();

				class JVMArgumentHelper_tRunJob_9 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_9 jvm_argument_helper_tRunJob_9 = new JVMArgumentHelper_tRunJob_9();

				/**
				 * [tRunJob_9 begin ] stop
				 */

				/**
				 * [tRunJob_9 main ] start
				 */

				currentComponent = "tRunJob_9";

				java.util.List<String> paraList_tRunJob_9 = new java.util.ArrayList<String>();

				String osName_tRunJob_9 = System.getProperty("os.name");
				if (osName_tRunJob_9 != null && osName_tRunJob_9.toLowerCase().startsWith("win")) {

					paraList_tRunJob_9.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xms256M");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xmx1024M");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-cp");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9,
							dealChildJobLibrary_tRunJob_9.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_node=tRunJob_9");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "%*");

				} else {

					paraList_tRunJob_9.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xms256M");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Xmx1024M");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "-cp");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9,
							dealChildJobLibrary_tRunJob_9.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--father_node=tRunJob_9");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_9.addArgumentsTo(paraList_tRunJob_9, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_9.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_9.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_9.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_9 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_9 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_9".equals(tRunJobName_tRunJob_9) && childResumePath_tRunJob_9 != null) {
					paraList_tRunJob_9.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_9.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_9");

				java.util.Map<String, Object> parentContextMap_tRunJob_9 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_9 = null;

				class ConsoleHelper_tRunJob_9 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_9 consoleHelper_tRunJob_9 = new ConsoleHelper_tRunJob_9();

				Runtime runtime_tRunJob_9 = Runtime.getRuntime();
				Process ps_tRunJob_9 = null;

				// 0 indicates normal termination
				int result_tRunJob_9;
				StringBuffer errorMsg_tRunJob_9 = new StringBuffer();
				try {
					ps_tRunJob_9 = runtime_tRunJob_9
							.exec((String[]) paraList_tRunJob_9.toArray(new String[paraList_tRunJob_9.size()]));

					Thread normal_tRunJob_9 = consoleHelper_tRunJob_9.getNormalThread(ps_tRunJob_9);
					normal_tRunJob_9.start();

					Thread error_tRunJob_9 = consoleHelper_tRunJob_9.getErrorThread(ps_tRunJob_9, errorMsg_tRunJob_9);
					error_tRunJob_9.start();

					result_tRunJob_9 = ps_tRunJob_9.waitFor();
					normal_tRunJob_9.join(10000);
					error_tRunJob_9.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_9.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_9_CHILD_RETURN_CODE", result_tRunJob_9);
				if (result_tRunJob_9 != 0) {
					globalMap.put("tRunJob_9_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_9.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_9
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_9.toString());

				}

				tos_count_tRunJob_9++;

				/**
				 * [tRunJob_9 main ] stop
				 */

				/**
				 * [tRunJob_9 process_data_begin ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_9 process_data_end ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 process_data_end ] stop
				 */

				/**
				 * [tRunJob_9 end ] start
				 */

				currentComponent = "tRunJob_9";

				ok_Hash.put("tRunJob_9", true);
				end_Hash.put("tRunJob_9", System.currentTimeMillis());

				/**
				 * [tRunJob_9 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_9 finally ] start
				 */

				currentComponent = "tRunJob_9";

				/**
				 * [tRunJob_9 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_9_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_10 begin ] start
				 */

				ok_Hash.put("tRunJob_10", false);
				start_Hash.put("tRunJob_10", System.currentTimeMillis());

				currentComponent = "tRunJob_10";

				int tos_count_tRunJob_10 = 0;

				class DealChildJobLibrary_tRunJob_10 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_10 dealChildJobLibrary_tRunJob_10 = new DealChildJobLibrary_tRunJob_10();

				class JVMArgumentHelper_tRunJob_10 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_10 jvm_argument_helper_tRunJob_10 = new JVMArgumentHelper_tRunJob_10();

				/**
				 * [tRunJob_10 begin ] stop
				 */

				/**
				 * [tRunJob_10 main ] start
				 */

				currentComponent = "tRunJob_10";

				java.util.List<String> paraList_tRunJob_10 = new java.util.ArrayList<String>();

				String osName_tRunJob_10 = System.getProperty("os.name");
				if (osName_tRunJob_10 != null && osName_tRunJob_10.toLowerCase().startsWith("win")) {

					paraList_tRunJob_10.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Xms256M");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Xmx1024M");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-cp");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10,
							dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--father_node=tRunJob_10");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "%*");

				} else {

					paraList_tRunJob_10.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Xms256M");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Xmx1024M");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "-cp");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10,
							dealChildJobLibrary_tRunJob_10.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--father_node=tRunJob_10");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_10.addArgumentsTo(paraList_tRunJob_10, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_10.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_10.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_10.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_10 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_10 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_10".equals(tRunJobName_tRunJob_10) && childResumePath_tRunJob_10 != null) {
					paraList_tRunJob_10.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_10.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_10");

				java.util.Map<String, Object> parentContextMap_tRunJob_10 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_10 = null;

				class ConsoleHelper_tRunJob_10 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_10 consoleHelper_tRunJob_10 = new ConsoleHelper_tRunJob_10();

				Runtime runtime_tRunJob_10 = Runtime.getRuntime();
				Process ps_tRunJob_10 = null;

				// 0 indicates normal termination
				int result_tRunJob_10;
				StringBuffer errorMsg_tRunJob_10 = new StringBuffer();
				try {
					ps_tRunJob_10 = runtime_tRunJob_10
							.exec((String[]) paraList_tRunJob_10.toArray(new String[paraList_tRunJob_10.size()]));

					Thread normal_tRunJob_10 = consoleHelper_tRunJob_10.getNormalThread(ps_tRunJob_10);
					normal_tRunJob_10.start();

					Thread error_tRunJob_10 = consoleHelper_tRunJob_10.getErrorThread(ps_tRunJob_10,
							errorMsg_tRunJob_10);
					error_tRunJob_10.start();

					result_tRunJob_10 = ps_tRunJob_10.waitFor();
					normal_tRunJob_10.join(10000);
					error_tRunJob_10.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_10.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_10_CHILD_RETURN_CODE", result_tRunJob_10);
				if (result_tRunJob_10 != 0) {
					globalMap.put("tRunJob_10_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_10.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_10
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_10.toString());

				}

				tos_count_tRunJob_10++;

				/**
				 * [tRunJob_10 main ] stop
				 */

				/**
				 * [tRunJob_10 process_data_begin ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_10 process_data_end ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 process_data_end ] stop
				 */

				/**
				 * [tRunJob_10 end ] start
				 */

				currentComponent = "tRunJob_10";

				ok_Hash.put("tRunJob_10", true);
				end_Hash.put("tRunJob_10", System.currentTimeMillis());

				/**
				 * [tRunJob_10 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_10 finally ] start
				 */

				currentComponent = "tRunJob_10";

				/**
				 * [tRunJob_10 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_10_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_12 begin ] start
				 */

				ok_Hash.put("tRunJob_12", false);
				start_Hash.put("tRunJob_12", System.currentTimeMillis());

				currentComponent = "tRunJob_12";

				int tos_count_tRunJob_12 = 0;

				class DealChildJobLibrary_tRunJob_12 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_12 dealChildJobLibrary_tRunJob_12 = new DealChildJobLibrary_tRunJob_12();

				class JVMArgumentHelper_tRunJob_12 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_12 jvm_argument_helper_tRunJob_12 = new JVMArgumentHelper_tRunJob_12();

				/**
				 * [tRunJob_12 begin ] stop
				 */

				/**
				 * [tRunJob_12 main ] start
				 */

				currentComponent = "tRunJob_12";

				java.util.List<String> paraList_tRunJob_12 = new java.util.ArrayList<String>();

				String osName_tRunJob_12 = System.getProperty("os.name");
				if (osName_tRunJob_12 != null && osName_tRunJob_12.toLowerCase().startsWith("win")) {

					paraList_tRunJob_12.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xms256M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xmx1024M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-cp");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							dealChildJobLibrary_tRunJob_12.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_node=tRunJob_12");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "%*");

				} else {

					paraList_tRunJob_12.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xms256M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Xmx1024M");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "-cp");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							dealChildJobLibrary_tRunJob_12.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--father_node=tRunJob_12");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "--context=BOULOGNE");

					jvm_argument_helper_tRunJob_12.addArgumentsTo(paraList_tRunJob_12, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_12.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_12.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_12.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_12 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_12 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_12".equals(tRunJobName_tRunJob_12) && childResumePath_tRunJob_12 != null) {
					paraList_tRunJob_12.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_12.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_12");

				java.util.Map<String, Object> parentContextMap_tRunJob_12 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_12 = null;

				class ConsoleHelper_tRunJob_12 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_12 consoleHelper_tRunJob_12 = new ConsoleHelper_tRunJob_12();

				Runtime runtime_tRunJob_12 = Runtime.getRuntime();
				Process ps_tRunJob_12 = null;

				// 0 indicates normal termination
				int result_tRunJob_12;
				StringBuffer errorMsg_tRunJob_12 = new StringBuffer();
				try {
					ps_tRunJob_12 = runtime_tRunJob_12
							.exec((String[]) paraList_tRunJob_12.toArray(new String[paraList_tRunJob_12.size()]));

					Thread normal_tRunJob_12 = consoleHelper_tRunJob_12.getNormalThread(ps_tRunJob_12);
					normal_tRunJob_12.start();

					Thread error_tRunJob_12 = consoleHelper_tRunJob_12.getErrorThread(ps_tRunJob_12,
							errorMsg_tRunJob_12);
					error_tRunJob_12.start();

					result_tRunJob_12 = ps_tRunJob_12.waitFor();
					normal_tRunJob_12.join(10000);
					error_tRunJob_12.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_12.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_12_CHILD_RETURN_CODE", result_tRunJob_12);
				if (result_tRunJob_12 != 0) {
					globalMap.put("tRunJob_12_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_12.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_12
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_12.toString());

				}

				tos_count_tRunJob_12++;

				/**
				 * [tRunJob_12 main ] stop
				 */

				/**
				 * [tRunJob_12 process_data_begin ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_12 process_data_end ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 process_data_end ] stop
				 */

				/**
				 * [tRunJob_12 end ] start
				 */

				currentComponent = "tRunJob_12";

				ok_Hash.put("tRunJob_12", true);
				end_Hash.put("tRunJob_12", System.currentTimeMillis());

				/**
				 * [tRunJob_12 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_12 finally ] start
				 */

				currentComponent = "tRunJob_12";

				/**
				 * [tRunJob_12 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_12_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_13 begin ] start
				 */

				ok_Hash.put("tRunJob_13", false);
				start_Hash.put("tRunJob_13", System.currentTimeMillis());

				currentComponent = "tRunJob_13";

				int tos_count_tRunJob_13 = 0;

				class DealChildJobLibrary_tRunJob_13 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_13 dealChildJobLibrary_tRunJob_13 = new DealChildJobLibrary_tRunJob_13();

				class JVMArgumentHelper_tRunJob_13 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_13 jvm_argument_helper_tRunJob_13 = new JVMArgumentHelper_tRunJob_13();

				/**
				 * [tRunJob_13 begin ] stop
				 */

				/**
				 * [tRunJob_13 main ] start
				 */

				currentComponent = "tRunJob_13";

				java.util.List<String> paraList_tRunJob_13 = new java.util.ArrayList<String>();

				String osName_tRunJob_13 = System.getProperty("os.name");
				if (osName_tRunJob_13 != null && osName_tRunJob_13.toLowerCase().startsWith("win")) {

					paraList_tRunJob_13.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Xms256M");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Xmx1024M");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-cp");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13,
							dealChildJobLibrary_tRunJob_13.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--father_node=tRunJob_13");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--context=CLICHY");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "%*");

				} else {

					paraList_tRunJob_13.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Xms256M");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Xmx1024M");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "-cp");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13,
							dealChildJobLibrary_tRunJob_13.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--father_node=tRunJob_13");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "--context=CLICHY");

					jvm_argument_helper_tRunJob_13.addArgumentsTo(paraList_tRunJob_13, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_13.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_13.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_13.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_13 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_13 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_13".equals(tRunJobName_tRunJob_13) && childResumePath_tRunJob_13 != null) {
					paraList_tRunJob_13.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_13.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_13");

				java.util.Map<String, Object> parentContextMap_tRunJob_13 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_13 = null;

				class ConsoleHelper_tRunJob_13 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_13 consoleHelper_tRunJob_13 = new ConsoleHelper_tRunJob_13();

				Runtime runtime_tRunJob_13 = Runtime.getRuntime();
				Process ps_tRunJob_13 = null;

				// 0 indicates normal termination
				int result_tRunJob_13;
				StringBuffer errorMsg_tRunJob_13 = new StringBuffer();
				try {
					ps_tRunJob_13 = runtime_tRunJob_13
							.exec((String[]) paraList_tRunJob_13.toArray(new String[paraList_tRunJob_13.size()]));

					Thread normal_tRunJob_13 = consoleHelper_tRunJob_13.getNormalThread(ps_tRunJob_13);
					normal_tRunJob_13.start();

					Thread error_tRunJob_13 = consoleHelper_tRunJob_13.getErrorThread(ps_tRunJob_13,
							errorMsg_tRunJob_13);
					error_tRunJob_13.start();

					result_tRunJob_13 = ps_tRunJob_13.waitFor();
					normal_tRunJob_13.join(10000);
					error_tRunJob_13.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_13.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_13_CHILD_RETURN_CODE", result_tRunJob_13);
				if (result_tRunJob_13 != 0) {
					globalMap.put("tRunJob_13_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_13.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_13
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_13.toString());

				}

				tos_count_tRunJob_13++;

				/**
				 * [tRunJob_13 main ] stop
				 */

				/**
				 * [tRunJob_13 process_data_begin ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_13 process_data_end ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 process_data_end ] stop
				 */

				/**
				 * [tRunJob_13 end ] start
				 */

				currentComponent = "tRunJob_13";

				ok_Hash.put("tRunJob_13", true);
				end_Hash.put("tRunJob_13", System.currentTimeMillis());

				/**
				 * [tRunJob_13 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_13 finally ] start
				 */

				currentComponent = "tRunJob_13";

				/**
				 * [tRunJob_13 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_13_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_14 begin ] start
				 */

				ok_Hash.put("tRunJob_14", false);
				start_Hash.put("tRunJob_14", System.currentTimeMillis());

				currentComponent = "tRunJob_14";

				int tos_count_tRunJob_14 = 0;

				class DealChildJobLibrary_tRunJob_14 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_14 dealChildJobLibrary_tRunJob_14 = new DealChildJobLibrary_tRunJob_14();

				class JVMArgumentHelper_tRunJob_14 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_14 jvm_argument_helper_tRunJob_14 = new JVMArgumentHelper_tRunJob_14();

				/**
				 * [tRunJob_14 begin ] stop
				 */

				/**
				 * [tRunJob_14 main ] start
				 */

				currentComponent = "tRunJob_14";

				java.util.List<String> paraList_tRunJob_14 = new java.util.ArrayList<String>();

				String osName_tRunJob_14 = System.getProperty("os.name");
				if (osName_tRunJob_14 != null && osName_tRunJob_14.toLowerCase().startsWith("win")) {

					paraList_tRunJob_14.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Xms256M");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Xmx1024M");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-cp");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14,
							dealChildJobLibrary_tRunJob_14.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--father_node=tRunJob_14");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--context=CLICHY");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "%*");

				} else {

					paraList_tRunJob_14.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Xms256M");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Xmx1024M");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "-cp");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14,
							dealChildJobLibrary_tRunJob_14.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--father_node=tRunJob_14");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "--context=CLICHY");

					jvm_argument_helper_tRunJob_14.addArgumentsTo(paraList_tRunJob_14, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_14.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_14.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_14.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_14 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_14 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_14".equals(tRunJobName_tRunJob_14) && childResumePath_tRunJob_14 != null) {
					paraList_tRunJob_14.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_14.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_14");

				java.util.Map<String, Object> parentContextMap_tRunJob_14 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_14 = null;

				class ConsoleHelper_tRunJob_14 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_14 consoleHelper_tRunJob_14 = new ConsoleHelper_tRunJob_14();

				Runtime runtime_tRunJob_14 = Runtime.getRuntime();
				Process ps_tRunJob_14 = null;

				// 0 indicates normal termination
				int result_tRunJob_14;
				StringBuffer errorMsg_tRunJob_14 = new StringBuffer();
				try {
					ps_tRunJob_14 = runtime_tRunJob_14
							.exec((String[]) paraList_tRunJob_14.toArray(new String[paraList_tRunJob_14.size()]));

					Thread normal_tRunJob_14 = consoleHelper_tRunJob_14.getNormalThread(ps_tRunJob_14);
					normal_tRunJob_14.start();

					Thread error_tRunJob_14 = consoleHelper_tRunJob_14.getErrorThread(ps_tRunJob_14,
							errorMsg_tRunJob_14);
					error_tRunJob_14.start();

					result_tRunJob_14 = ps_tRunJob_14.waitFor();
					normal_tRunJob_14.join(10000);
					error_tRunJob_14.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_14.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_14_CHILD_RETURN_CODE", result_tRunJob_14);
				if (result_tRunJob_14 != 0) {
					globalMap.put("tRunJob_14_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_14.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_14
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_14.toString());

				}

				tos_count_tRunJob_14++;

				/**
				 * [tRunJob_14 main ] stop
				 */

				/**
				 * [tRunJob_14 process_data_begin ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_14 process_data_end ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 process_data_end ] stop
				 */

				/**
				 * [tRunJob_14 end ] start
				 */

				currentComponent = "tRunJob_14";

				ok_Hash.put("tRunJob_14", true);
				end_Hash.put("tRunJob_14", System.currentTimeMillis());

				/**
				 * [tRunJob_14 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_14 finally ] start
				 */

				currentComponent = "tRunJob_14";

				/**
				 * [tRunJob_14 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_14_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_16 begin ] start
				 */

				ok_Hash.put("tRunJob_16", false);
				start_Hash.put("tRunJob_16", System.currentTimeMillis());

				currentComponent = "tRunJob_16";

				int tos_count_tRunJob_16 = 0;

				class DealChildJobLibrary_tRunJob_16 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_16 dealChildJobLibrary_tRunJob_16 = new DealChildJobLibrary_tRunJob_16();

				class JVMArgumentHelper_tRunJob_16 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_16 jvm_argument_helper_tRunJob_16 = new JVMArgumentHelper_tRunJob_16();

				/**
				 * [tRunJob_16 begin ] stop
				 */

				/**
				 * [tRunJob_16 main ] start
				 */

				currentComponent = "tRunJob_16";

				java.util.List<String> paraList_tRunJob_16 = new java.util.ArrayList<String>();

				String osName_tRunJob_16 = System.getProperty("os.name");
				if (osName_tRunJob_16 != null && osName_tRunJob_16.toLowerCase().startsWith("win")) {

					paraList_tRunJob_16.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Xms256M");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Xmx1024M");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-cp");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16,
							dealChildJobLibrary_tRunJob_16.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--father_node=tRunJob_16");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "%*");

				} else {

					paraList_tRunJob_16.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Xms256M");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Xmx1024M");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "-cp");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16,
							dealChildJobLibrary_tRunJob_16.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--father_node=tRunJob_16");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_16.addArgumentsTo(paraList_tRunJob_16, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_16.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_16.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_16.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_16 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_16 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_16".equals(tRunJobName_tRunJob_16) && childResumePath_tRunJob_16 != null) {
					paraList_tRunJob_16.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_16.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_16");

				java.util.Map<String, Object> parentContextMap_tRunJob_16 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_16 = null;

				class ConsoleHelper_tRunJob_16 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_16 consoleHelper_tRunJob_16 = new ConsoleHelper_tRunJob_16();

				Runtime runtime_tRunJob_16 = Runtime.getRuntime();
				Process ps_tRunJob_16 = null;

				// 0 indicates normal termination
				int result_tRunJob_16;
				StringBuffer errorMsg_tRunJob_16 = new StringBuffer();
				try {
					ps_tRunJob_16 = runtime_tRunJob_16
							.exec((String[]) paraList_tRunJob_16.toArray(new String[paraList_tRunJob_16.size()]));

					Thread normal_tRunJob_16 = consoleHelper_tRunJob_16.getNormalThread(ps_tRunJob_16);
					normal_tRunJob_16.start();

					Thread error_tRunJob_16 = consoleHelper_tRunJob_16.getErrorThread(ps_tRunJob_16,
							errorMsg_tRunJob_16);
					error_tRunJob_16.start();

					result_tRunJob_16 = ps_tRunJob_16.waitFor();
					normal_tRunJob_16.join(10000);
					error_tRunJob_16.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_16.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_16_CHILD_RETURN_CODE", result_tRunJob_16);
				if (result_tRunJob_16 != 0) {
					globalMap.put("tRunJob_16_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_16.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_16
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_16.toString());

				}

				tos_count_tRunJob_16++;

				/**
				 * [tRunJob_16 main ] stop
				 */

				/**
				 * [tRunJob_16 process_data_begin ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_16 process_data_end ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 process_data_end ] stop
				 */

				/**
				 * [tRunJob_16 end ] start
				 */

				currentComponent = "tRunJob_16";

				ok_Hash.put("tRunJob_16", true);
				end_Hash.put("tRunJob_16", System.currentTimeMillis());

				/**
				 * [tRunJob_16 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_16 finally ] start
				 */

				currentComponent = "tRunJob_16";

				/**
				 * [tRunJob_16 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_16_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_17 begin ] start
				 */

				ok_Hash.put("tRunJob_17", false);
				start_Hash.put("tRunJob_17", System.currentTimeMillis());

				currentComponent = "tRunJob_17";

				int tos_count_tRunJob_17 = 0;

				class DealChildJobLibrary_tRunJob_17 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_17 dealChildJobLibrary_tRunJob_17 = new DealChildJobLibrary_tRunJob_17();

				class JVMArgumentHelper_tRunJob_17 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_17 jvm_argument_helper_tRunJob_17 = new JVMArgumentHelper_tRunJob_17();

				/**
				 * [tRunJob_17 begin ] stop
				 */

				/**
				 * [tRunJob_17 main ] start
				 */

				currentComponent = "tRunJob_17";

				java.util.List<String> paraList_tRunJob_17 = new java.util.ArrayList<String>();

				String osName_tRunJob_17 = System.getProperty("os.name");
				if (osName_tRunJob_17 != null && osName_tRunJob_17.toLowerCase().startsWith("win")) {

					paraList_tRunJob_17.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xms256M");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xmx1024M");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-cp");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17,
							dealChildJobLibrary_tRunJob_17.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_node=tRunJob_17");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "%*");

				} else {

					paraList_tRunJob_17.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xms256M");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Xmx1024M");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "-cp");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17,
							dealChildJobLibrary_tRunJob_17.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--father_node=tRunJob_17");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_17.addArgumentsTo(paraList_tRunJob_17, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_17.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_17.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_17.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_17 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_17 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_17".equals(tRunJobName_tRunJob_17) && childResumePath_tRunJob_17 != null) {
					paraList_tRunJob_17.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_17.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_17");

				java.util.Map<String, Object> parentContextMap_tRunJob_17 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_17 = null;

				class ConsoleHelper_tRunJob_17 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_17 consoleHelper_tRunJob_17 = new ConsoleHelper_tRunJob_17();

				Runtime runtime_tRunJob_17 = Runtime.getRuntime();
				Process ps_tRunJob_17 = null;

				// 0 indicates normal termination
				int result_tRunJob_17;
				StringBuffer errorMsg_tRunJob_17 = new StringBuffer();
				try {
					ps_tRunJob_17 = runtime_tRunJob_17
							.exec((String[]) paraList_tRunJob_17.toArray(new String[paraList_tRunJob_17.size()]));

					Thread normal_tRunJob_17 = consoleHelper_tRunJob_17.getNormalThread(ps_tRunJob_17);
					normal_tRunJob_17.start();

					Thread error_tRunJob_17 = consoleHelper_tRunJob_17.getErrorThread(ps_tRunJob_17,
							errorMsg_tRunJob_17);
					error_tRunJob_17.start();

					result_tRunJob_17 = ps_tRunJob_17.waitFor();
					normal_tRunJob_17.join(10000);
					error_tRunJob_17.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_17.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_17_CHILD_RETURN_CODE", result_tRunJob_17);
				if (result_tRunJob_17 != 0) {
					globalMap.put("tRunJob_17_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_17.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_17
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_17.toString());

				}

				tos_count_tRunJob_17++;

				/**
				 * [tRunJob_17 main ] stop
				 */

				/**
				 * [tRunJob_17 process_data_begin ] start
				 */

				currentComponent = "tRunJob_17";

				/**
				 * [tRunJob_17 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_17 process_data_end ] start
				 */

				currentComponent = "tRunJob_17";

				/**
				 * [tRunJob_17 process_data_end ] stop
				 */

				/**
				 * [tRunJob_17 end ] start
				 */

				currentComponent = "tRunJob_17";

				ok_Hash.put("tRunJob_17", true);
				end_Hash.put("tRunJob_17", System.currentTimeMillis());

				/**
				 * [tRunJob_17 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_17 finally ] start
				 */

				currentComponent = "tRunJob_17";

				/**
				 * [tRunJob_17 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_17_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_19 begin ] start
				 */

				ok_Hash.put("tRunJob_19", false);
				start_Hash.put("tRunJob_19", System.currentTimeMillis());

				currentComponent = "tRunJob_19";

				int tos_count_tRunJob_19 = 0;

				class DealChildJobLibrary_tRunJob_19 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_19 dealChildJobLibrary_tRunJob_19 = new DealChildJobLibrary_tRunJob_19();

				class JVMArgumentHelper_tRunJob_19 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_19 jvm_argument_helper_tRunJob_19 = new JVMArgumentHelper_tRunJob_19();

				/**
				 * [tRunJob_19 begin ] stop
				 */

				/**
				 * [tRunJob_19 main ] start
				 */

				currentComponent = "tRunJob_19";

				java.util.List<String> paraList_tRunJob_19 = new java.util.ArrayList<String>();

				String osName_tRunJob_19 = System.getProperty("os.name");
				if (osName_tRunJob_19 != null && osName_tRunJob_19.toLowerCase().startsWith("win")) {

					paraList_tRunJob_19.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Xms256M");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Xmx1024M");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-cp");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19,
							dealChildJobLibrary_tRunJob_19.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--father_node=tRunJob_19");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "%*");

				} else {

					paraList_tRunJob_19.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Xms256M");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Xmx1024M");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "-cp");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19,
							dealChildJobLibrary_tRunJob_19.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--father_node=tRunJob_19");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "--context=NANTERRE");

					jvm_argument_helper_tRunJob_19.addArgumentsTo(paraList_tRunJob_19, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_19.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_19.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_19.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_19 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_19 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_19".equals(tRunJobName_tRunJob_19) && childResumePath_tRunJob_19 != null) {
					paraList_tRunJob_19.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_19.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_19");

				java.util.Map<String, Object> parentContextMap_tRunJob_19 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_19 = null;

				class ConsoleHelper_tRunJob_19 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_19 consoleHelper_tRunJob_19 = new ConsoleHelper_tRunJob_19();

				Runtime runtime_tRunJob_19 = Runtime.getRuntime();
				Process ps_tRunJob_19 = null;

				// 0 indicates normal termination
				int result_tRunJob_19;
				StringBuffer errorMsg_tRunJob_19 = new StringBuffer();
				try {
					ps_tRunJob_19 = runtime_tRunJob_19
							.exec((String[]) paraList_tRunJob_19.toArray(new String[paraList_tRunJob_19.size()]));

					Thread normal_tRunJob_19 = consoleHelper_tRunJob_19.getNormalThread(ps_tRunJob_19);
					normal_tRunJob_19.start();

					Thread error_tRunJob_19 = consoleHelper_tRunJob_19.getErrorThread(ps_tRunJob_19,
							errorMsg_tRunJob_19);
					error_tRunJob_19.start();

					result_tRunJob_19 = ps_tRunJob_19.waitFor();
					normal_tRunJob_19.join(10000);
					error_tRunJob_19.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_19.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_19_CHILD_RETURN_CODE", result_tRunJob_19);
				if (result_tRunJob_19 != 0) {
					globalMap.put("tRunJob_19_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_19.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_19
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_19.toString());

				}

				tos_count_tRunJob_19++;

				/**
				 * [tRunJob_19 main ] stop
				 */

				/**
				 * [tRunJob_19 process_data_begin ] start
				 */

				currentComponent = "tRunJob_19";

				/**
				 * [tRunJob_19 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_19 process_data_end ] start
				 */

				currentComponent = "tRunJob_19";

				/**
				 * [tRunJob_19 process_data_end ] stop
				 */

				/**
				 * [tRunJob_19 end ] start
				 */

				currentComponent = "tRunJob_19";

				ok_Hash.put("tRunJob_19", true);
				end_Hash.put("tRunJob_19", System.currentTimeMillis());

				/**
				 * [tRunJob_19 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_19 finally ] start
				 */

				currentComponent = "tRunJob_19";

				/**
				 * [tRunJob_19 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_19_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_20 begin ] start
				 */

				ok_Hash.put("tRunJob_20", false);
				start_Hash.put("tRunJob_20", System.currentTimeMillis());

				currentComponent = "tRunJob_20";

				int tos_count_tRunJob_20 = 0;

				class DealChildJobLibrary_tRunJob_20 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_20 dealChildJobLibrary_tRunJob_20 = new DealChildJobLibrary_tRunJob_20();

				class JVMArgumentHelper_tRunJob_20 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_20 jvm_argument_helper_tRunJob_20 = new JVMArgumentHelper_tRunJob_20();

				/**
				 * [tRunJob_20 begin ] stop
				 */

				/**
				 * [tRunJob_20 main ] start
				 */

				currentComponent = "tRunJob_20";

				java.util.List<String> paraList_tRunJob_20 = new java.util.ArrayList<String>();

				String osName_tRunJob_20 = System.getProperty("os.name");
				if (osName_tRunJob_20 != null && osName_tRunJob_20.toLowerCase().startsWith("win")) {

					paraList_tRunJob_20.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Xms256M");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Xmx1024M");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-cp");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20,
							dealChildJobLibrary_tRunJob_20.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--father_node=tRunJob_20");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "%*");

				} else {

					paraList_tRunJob_20.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Xms256M");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Xmx1024M");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "-cp");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20,
							dealChildJobLibrary_tRunJob_20.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--father_node=tRunJob_20");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_20.addArgumentsTo(paraList_tRunJob_20, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_20.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_20.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_20.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_20 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_20 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_20".equals(tRunJobName_tRunJob_20) && childResumePath_tRunJob_20 != null) {
					paraList_tRunJob_20.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_20.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_20");

				java.util.Map<String, Object> parentContextMap_tRunJob_20 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_20 = null;

				class ConsoleHelper_tRunJob_20 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_20 consoleHelper_tRunJob_20 = new ConsoleHelper_tRunJob_20();

				Runtime runtime_tRunJob_20 = Runtime.getRuntime();
				Process ps_tRunJob_20 = null;

				// 0 indicates normal termination
				int result_tRunJob_20;
				StringBuffer errorMsg_tRunJob_20 = new StringBuffer();
				try {
					ps_tRunJob_20 = runtime_tRunJob_20
							.exec((String[]) paraList_tRunJob_20.toArray(new String[paraList_tRunJob_20.size()]));

					Thread normal_tRunJob_20 = consoleHelper_tRunJob_20.getNormalThread(ps_tRunJob_20);
					normal_tRunJob_20.start();

					Thread error_tRunJob_20 = consoleHelper_tRunJob_20.getErrorThread(ps_tRunJob_20,
							errorMsg_tRunJob_20);
					error_tRunJob_20.start();

					result_tRunJob_20 = ps_tRunJob_20.waitFor();
					normal_tRunJob_20.join(10000);
					error_tRunJob_20.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_20.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_20_CHILD_RETURN_CODE", result_tRunJob_20);
				if (result_tRunJob_20 != 0) {
					globalMap.put("tRunJob_20_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_20.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_20
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_20.toString());

				}

				tos_count_tRunJob_20++;

				/**
				 * [tRunJob_20 main ] stop
				 */

				/**
				 * [tRunJob_20 process_data_begin ] start
				 */

				currentComponent = "tRunJob_20";

				/**
				 * [tRunJob_20 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_20 process_data_end ] start
				 */

				currentComponent = "tRunJob_20";

				/**
				 * [tRunJob_20 process_data_end ] stop
				 */

				/**
				 * [tRunJob_20 end ] start
				 */

				currentComponent = "tRunJob_20";

				ok_Hash.put("tRunJob_20", true);
				end_Hash.put("tRunJob_20", System.currentTimeMillis());

				/**
				 * [tRunJob_20 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_20 finally ] start
				 */

				currentComponent = "tRunJob_20";

				/**
				 * [tRunJob_20 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_20_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_21 begin ] start
				 */

				ok_Hash.put("tRunJob_21", false);
				start_Hash.put("tRunJob_21", System.currentTimeMillis());

				currentComponent = "tRunJob_21";

				int tos_count_tRunJob_21 = 0;

				class DealChildJobLibrary_tRunJob_21 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_21 dealChildJobLibrary_tRunJob_21 = new DealChildJobLibrary_tRunJob_21();

				class JVMArgumentHelper_tRunJob_21 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_21 jvm_argument_helper_tRunJob_21 = new JVMArgumentHelper_tRunJob_21();

				/**
				 * [tRunJob_21 begin ] stop
				 */

				/**
				 * [tRunJob_21 main ] start
				 */

				currentComponent = "tRunJob_21";

				java.util.List<String> paraList_tRunJob_21 = new java.util.ArrayList<String>();

				String osName_tRunJob_21 = System.getProperty("os.name");
				if (osName_tRunJob_21 != null && osName_tRunJob_21.toLowerCase().startsWith("win")) {

					paraList_tRunJob_21.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Xms256M");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Xmx1024M");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-cp");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21,
							dealChildJobLibrary_tRunJob_21.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--father_node=tRunJob_21");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--context=CLICHY");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "%*");

				} else {

					paraList_tRunJob_21.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Xms256M");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Xmx1024M");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "-cp");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21,
							dealChildJobLibrary_tRunJob_21.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--father_node=tRunJob_21");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "--context=CLICHY");

					jvm_argument_helper_tRunJob_21.addArgumentsTo(paraList_tRunJob_21, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_21.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_21.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_21.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_21 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_21 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_21".equals(tRunJobName_tRunJob_21) && childResumePath_tRunJob_21 != null) {
					paraList_tRunJob_21.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_21.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_21");

				java.util.Map<String, Object> parentContextMap_tRunJob_21 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_21 = null;

				class ConsoleHelper_tRunJob_21 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_21 consoleHelper_tRunJob_21 = new ConsoleHelper_tRunJob_21();

				Runtime runtime_tRunJob_21 = Runtime.getRuntime();
				Process ps_tRunJob_21 = null;

				// 0 indicates normal termination
				int result_tRunJob_21;
				StringBuffer errorMsg_tRunJob_21 = new StringBuffer();
				try {
					ps_tRunJob_21 = runtime_tRunJob_21
							.exec((String[]) paraList_tRunJob_21.toArray(new String[paraList_tRunJob_21.size()]));

					Thread normal_tRunJob_21 = consoleHelper_tRunJob_21.getNormalThread(ps_tRunJob_21);
					normal_tRunJob_21.start();

					Thread error_tRunJob_21 = consoleHelper_tRunJob_21.getErrorThread(ps_tRunJob_21,
							errorMsg_tRunJob_21);
					error_tRunJob_21.start();

					result_tRunJob_21 = ps_tRunJob_21.waitFor();
					normal_tRunJob_21.join(10000);
					error_tRunJob_21.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_21.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_21_CHILD_RETURN_CODE", result_tRunJob_21);
				if (result_tRunJob_21 != 0) {
					globalMap.put("tRunJob_21_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_21.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_21
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_21.toString());

				}

				tos_count_tRunJob_21++;

				/**
				 * [tRunJob_21 main ] stop
				 */

				/**
				 * [tRunJob_21 process_data_begin ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_21 process_data_end ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 process_data_end ] stop
				 */

				/**
				 * [tRunJob_21 end ] start
				 */

				currentComponent = "tRunJob_21";

				ok_Hash.put("tRunJob_21", true);
				end_Hash.put("tRunJob_21", System.currentTimeMillis());

				/**
				 * [tRunJob_21 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_21 finally ] start
				 */

				currentComponent = "tRunJob_21";

				/**
				 * [tRunJob_21 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_21_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_22_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_22 begin ] start
				 */

				ok_Hash.put("tRunJob_22", false);
				start_Hash.put("tRunJob_22", System.currentTimeMillis());

				currentComponent = "tRunJob_22";

				int tos_count_tRunJob_22 = 0;

				class DealChildJobLibrary_tRunJob_22 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_22 dealChildJobLibrary_tRunJob_22 = new DealChildJobLibrary_tRunJob_22();

				class JVMArgumentHelper_tRunJob_22 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_22 jvm_argument_helper_tRunJob_22 = new JVMArgumentHelper_tRunJob_22();

				/**
				 * [tRunJob_22 begin ] stop
				 */

				/**
				 * [tRunJob_22 main ] start
				 */

				currentComponent = "tRunJob_22";

				java.util.List<String> paraList_tRunJob_22 = new java.util.ArrayList<String>();

				String osName_tRunJob_22 = System.getProperty("os.name");
				if (osName_tRunJob_22 != null && osName_tRunJob_22.toLowerCase().startsWith("win")) {

					paraList_tRunJob_22.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Xms256M");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Xmx1024M");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-cp");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22,
							dealChildJobLibrary_tRunJob_22.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--father_node=tRunJob_22");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "%*");

				} else {

					paraList_tRunJob_22.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Xms256M");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Xmx1024M");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "-cp");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22,
							dealChildJobLibrary_tRunJob_22.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--father_node=tRunJob_22");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_22.addArgumentsTo(paraList_tRunJob_22, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_22.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_22.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_22.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_22 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_22 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_22".equals(tRunJobName_tRunJob_22) && childResumePath_tRunJob_22 != null) {
					paraList_tRunJob_22.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_22.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_22");

				java.util.Map<String, Object> parentContextMap_tRunJob_22 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_22 = null;

				class ConsoleHelper_tRunJob_22 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_22 consoleHelper_tRunJob_22 = new ConsoleHelper_tRunJob_22();

				Runtime runtime_tRunJob_22 = Runtime.getRuntime();
				Process ps_tRunJob_22 = null;

				// 0 indicates normal termination
				int result_tRunJob_22;
				StringBuffer errorMsg_tRunJob_22 = new StringBuffer();
				try {
					ps_tRunJob_22 = runtime_tRunJob_22
							.exec((String[]) paraList_tRunJob_22.toArray(new String[paraList_tRunJob_22.size()]));

					Thread normal_tRunJob_22 = consoleHelper_tRunJob_22.getNormalThread(ps_tRunJob_22);
					normal_tRunJob_22.start();

					Thread error_tRunJob_22 = consoleHelper_tRunJob_22.getErrorThread(ps_tRunJob_22,
							errorMsg_tRunJob_22);
					error_tRunJob_22.start();

					result_tRunJob_22 = ps_tRunJob_22.waitFor();
					normal_tRunJob_22.join(10000);
					error_tRunJob_22.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_22.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_22_CHILD_RETURN_CODE", result_tRunJob_22);
				if (result_tRunJob_22 != 0) {
					globalMap.put("tRunJob_22_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_22.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_22
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_22.toString());

				}

				tos_count_tRunJob_22++;

				/**
				 * [tRunJob_22 main ] stop
				 */

				/**
				 * [tRunJob_22 process_data_begin ] start
				 */

				currentComponent = "tRunJob_22";

				/**
				 * [tRunJob_22 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_22 process_data_end ] start
				 */

				currentComponent = "tRunJob_22";

				/**
				 * [tRunJob_22 process_data_end ] stop
				 */

				/**
				 * [tRunJob_22 end ] start
				 */

				currentComponent = "tRunJob_22";

				ok_Hash.put("tRunJob_22", true);
				end_Hash.put("tRunJob_22", System.currentTimeMillis());

				/**
				 * [tRunJob_22 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_22 finally ] start
				 */

				currentComponent = "tRunJob_22";

				/**
				 * [tRunJob_22 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_22_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_24_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_24 begin ] start
				 */

				ok_Hash.put("tRunJob_24", false);
				start_Hash.put("tRunJob_24", System.currentTimeMillis());

				currentComponent = "tRunJob_24";

				int tos_count_tRunJob_24 = 0;

				class DealChildJobLibrary_tRunJob_24 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_24 dealChildJobLibrary_tRunJob_24 = new DealChildJobLibrary_tRunJob_24();

				class JVMArgumentHelper_tRunJob_24 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_24 jvm_argument_helper_tRunJob_24 = new JVMArgumentHelper_tRunJob_24();

				/**
				 * [tRunJob_24 begin ] stop
				 */

				/**
				 * [tRunJob_24 main ] start
				 */

				currentComponent = "tRunJob_24";

				java.util.List<String> paraList_tRunJob_24 = new java.util.ArrayList<String>();

				String osName_tRunJob_24 = System.getProperty("os.name");
				if (osName_tRunJob_24 != null && osName_tRunJob_24.toLowerCase().startsWith("win")) {

					paraList_tRunJob_24.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Xms256M");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Xmx1024M");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-cp");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24,
							dealChildJobLibrary_tRunJob_24.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--father_node=tRunJob_24");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "%*");

				} else {

					paraList_tRunJob_24.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Xms256M");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Xmx1024M");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "-cp");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24,
							dealChildJobLibrary_tRunJob_24.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--father_node=tRunJob_24");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "--context=PLESSIS");

					jvm_argument_helper_tRunJob_24.addArgumentsTo(paraList_tRunJob_24, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_24.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_24.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_24.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_24 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_24 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_24".equals(tRunJobName_tRunJob_24) && childResumePath_tRunJob_24 != null) {
					paraList_tRunJob_24.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_24.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_24");

				java.util.Map<String, Object> parentContextMap_tRunJob_24 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_24 = null;

				class ConsoleHelper_tRunJob_24 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_24 consoleHelper_tRunJob_24 = new ConsoleHelper_tRunJob_24();

				Runtime runtime_tRunJob_24 = Runtime.getRuntime();
				Process ps_tRunJob_24 = null;

				// 0 indicates normal termination
				int result_tRunJob_24;
				StringBuffer errorMsg_tRunJob_24 = new StringBuffer();
				try {
					ps_tRunJob_24 = runtime_tRunJob_24
							.exec((String[]) paraList_tRunJob_24.toArray(new String[paraList_tRunJob_24.size()]));

					Thread normal_tRunJob_24 = consoleHelper_tRunJob_24.getNormalThread(ps_tRunJob_24);
					normal_tRunJob_24.start();

					Thread error_tRunJob_24 = consoleHelper_tRunJob_24.getErrorThread(ps_tRunJob_24,
							errorMsg_tRunJob_24);
					error_tRunJob_24.start();

					result_tRunJob_24 = ps_tRunJob_24.waitFor();
					normal_tRunJob_24.join(10000);
					error_tRunJob_24.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_24.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_24_CHILD_RETURN_CODE", result_tRunJob_24);
				if (result_tRunJob_24 != 0) {
					globalMap.put("tRunJob_24_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_24.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_24
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_24.toString());

				}

				tos_count_tRunJob_24++;

				/**
				 * [tRunJob_24 main ] stop
				 */

				/**
				 * [tRunJob_24 process_data_begin ] start
				 */

				currentComponent = "tRunJob_24";

				/**
				 * [tRunJob_24 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_24 process_data_end ] start
				 */

				currentComponent = "tRunJob_24";

				/**
				 * [tRunJob_24 process_data_end ] stop
				 */

				/**
				 * [tRunJob_24 end ] start
				 */

				currentComponent = "tRunJob_24";

				ok_Hash.put("tRunJob_24", true);
				end_Hash.put("tRunJob_24", System.currentTimeMillis());

				/**
				 * [tRunJob_24 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_24 finally ] start
				 */

				currentComponent = "tRunJob_24";

				/**
				 * [tRunJob_24 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_24_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_25_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_25 begin ] start
				 */

				ok_Hash.put("tRunJob_25", false);
				start_Hash.put("tRunJob_25", System.currentTimeMillis());

				currentComponent = "tRunJob_25";

				int tos_count_tRunJob_25 = 0;

				class DealChildJobLibrary_tRunJob_25 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_25 dealChildJobLibrary_tRunJob_25 = new DealChildJobLibrary_tRunJob_25();

				class JVMArgumentHelper_tRunJob_25 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_25 jvm_argument_helper_tRunJob_25 = new JVMArgumentHelper_tRunJob_25();

				/**
				 * [tRunJob_25 begin ] stop
				 */

				/**
				 * [tRunJob_25 main ] start
				 */

				currentComponent = "tRunJob_25";

				java.util.List<String> paraList_tRunJob_25 = new java.util.ArrayList<String>();

				String osName_tRunJob_25 = System.getProperty("os.name");
				if (osName_tRunJob_25 != null && osName_tRunJob_25.toLowerCase().startsWith("win")) {

					paraList_tRunJob_25.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Xms256M");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Xmx1024M");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-cp");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25,
							dealChildJobLibrary_tRunJob_25.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--father_node=tRunJob_25");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--context=RUEIL");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "%*");

				} else {

					paraList_tRunJob_25.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Xms256M");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Xmx1024M");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "-cp");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25,
							dealChildJobLibrary_tRunJob_25.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--father_node=tRunJob_25");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "--context=RUEIL");

					jvm_argument_helper_tRunJob_25.addArgumentsTo(paraList_tRunJob_25, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_25.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_25.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_25.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_25 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_25 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_25".equals(tRunJobName_tRunJob_25) && childResumePath_tRunJob_25 != null) {
					paraList_tRunJob_25.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_25.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_25");

				java.util.Map<String, Object> parentContextMap_tRunJob_25 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_25 = null;

				class ConsoleHelper_tRunJob_25 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_25 consoleHelper_tRunJob_25 = new ConsoleHelper_tRunJob_25();

				Runtime runtime_tRunJob_25 = Runtime.getRuntime();
				Process ps_tRunJob_25 = null;

				// 0 indicates normal termination
				int result_tRunJob_25;
				StringBuffer errorMsg_tRunJob_25 = new StringBuffer();
				try {
					ps_tRunJob_25 = runtime_tRunJob_25
							.exec((String[]) paraList_tRunJob_25.toArray(new String[paraList_tRunJob_25.size()]));

					Thread normal_tRunJob_25 = consoleHelper_tRunJob_25.getNormalThread(ps_tRunJob_25);
					normal_tRunJob_25.start();

					Thread error_tRunJob_25 = consoleHelper_tRunJob_25.getErrorThread(ps_tRunJob_25,
							errorMsg_tRunJob_25);
					error_tRunJob_25.start();

					result_tRunJob_25 = ps_tRunJob_25.waitFor();
					normal_tRunJob_25.join(10000);
					error_tRunJob_25.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_25.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_25_CHILD_RETURN_CODE", result_tRunJob_25);
				if (result_tRunJob_25 != 0) {
					globalMap.put("tRunJob_25_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_25.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_25
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_25.toString());

				}

				tos_count_tRunJob_25++;

				/**
				 * [tRunJob_25 main ] stop
				 */

				/**
				 * [tRunJob_25 process_data_begin ] start
				 */

				currentComponent = "tRunJob_25";

				/**
				 * [tRunJob_25 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_25 process_data_end ] start
				 */

				currentComponent = "tRunJob_25";

				/**
				 * [tRunJob_25 process_data_end ] stop
				 */

				/**
				 * [tRunJob_25 end ] start
				 */

				currentComponent = "tRunJob_25";

				ok_Hash.put("tRunJob_25", true);
				end_Hash.put("tRunJob_25", System.currentTimeMillis());

				/**
				 * [tRunJob_25 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_25 finally ] start
				 */

				currentComponent = "tRunJob_25";

				/**
				 * [tRunJob_25 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_25_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_26_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_26 begin ] start
				 */

				ok_Hash.put("tRunJob_26", false);
				start_Hash.put("tRunJob_26", System.currentTimeMillis());

				currentComponent = "tRunJob_26";

				int tos_count_tRunJob_26 = 0;

				class DealChildJobLibrary_tRunJob_26 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_26 dealChildJobLibrary_tRunJob_26 = new DealChildJobLibrary_tRunJob_26();

				class JVMArgumentHelper_tRunJob_26 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_26 jvm_argument_helper_tRunJob_26 = new JVMArgumentHelper_tRunJob_26();

				/**
				 * [tRunJob_26 begin ] stop
				 */

				/**
				 * [tRunJob_26 main ] start
				 */

				currentComponent = "tRunJob_26";

				java.util.List<String> paraList_tRunJob_26 = new java.util.ArrayList<String>();

				String osName_tRunJob_26 = System.getProperty("os.name");
				if (osName_tRunJob_26 != null && osName_tRunJob_26.toLowerCase().startsWith("win")) {

					paraList_tRunJob_26.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Xms256M");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Xmx1024M");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-cp");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26,
							dealChildJobLibrary_tRunJob_26.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--father_node=tRunJob_26");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--context=RUEIL");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "%*");

				} else {

					paraList_tRunJob_26.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Xms256M");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Xmx1024M");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "-cp");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26,
							dealChildJobLibrary_tRunJob_26.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--father_node=tRunJob_26");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "--context=RUEIL");

					jvm_argument_helper_tRunJob_26.addArgumentsTo(paraList_tRunJob_26, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_26.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_26.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_26.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_26 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_26 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_26".equals(tRunJobName_tRunJob_26) && childResumePath_tRunJob_26 != null) {
					paraList_tRunJob_26.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_26.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_26");

				java.util.Map<String, Object> parentContextMap_tRunJob_26 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_26 = null;

				class ConsoleHelper_tRunJob_26 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_26 consoleHelper_tRunJob_26 = new ConsoleHelper_tRunJob_26();

				Runtime runtime_tRunJob_26 = Runtime.getRuntime();
				Process ps_tRunJob_26 = null;

				// 0 indicates normal termination
				int result_tRunJob_26;
				StringBuffer errorMsg_tRunJob_26 = new StringBuffer();
				try {
					ps_tRunJob_26 = runtime_tRunJob_26
							.exec((String[]) paraList_tRunJob_26.toArray(new String[paraList_tRunJob_26.size()]));

					Thread normal_tRunJob_26 = consoleHelper_tRunJob_26.getNormalThread(ps_tRunJob_26);
					normal_tRunJob_26.start();

					Thread error_tRunJob_26 = consoleHelper_tRunJob_26.getErrorThread(ps_tRunJob_26,
							errorMsg_tRunJob_26);
					error_tRunJob_26.start();

					result_tRunJob_26 = ps_tRunJob_26.waitFor();
					normal_tRunJob_26.join(10000);
					error_tRunJob_26.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_26.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_26_CHILD_RETURN_CODE", result_tRunJob_26);
				if (result_tRunJob_26 != 0) {
					globalMap.put("tRunJob_26_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_26.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_26
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_26.toString());

				}

				tos_count_tRunJob_26++;

				/**
				 * [tRunJob_26 main ] stop
				 */

				/**
				 * [tRunJob_26 process_data_begin ] start
				 */

				currentComponent = "tRunJob_26";

				/**
				 * [tRunJob_26 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_26 process_data_end ] start
				 */

				currentComponent = "tRunJob_26";

				/**
				 * [tRunJob_26 process_data_end ] stop
				 */

				/**
				 * [tRunJob_26 end ] start
				 */

				currentComponent = "tRunJob_26";

				ok_Hash.put("tRunJob_26", true);
				end_Hash.put("tRunJob_26", System.currentTimeMillis());

				/**
				 * [tRunJob_26 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_26 finally ] start
				 */

				currentComponent = "tRunJob_26";

				/**
				 * [tRunJob_26 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_26_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_28 begin ] start
				 */

				ok_Hash.put("tRunJob_28", false);
				start_Hash.put("tRunJob_28", System.currentTimeMillis());

				currentComponent = "tRunJob_28";

				int tos_count_tRunJob_28 = 0;

				class DealChildJobLibrary_tRunJob_28 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_28 dealChildJobLibrary_tRunJob_28 = new DealChildJobLibrary_tRunJob_28();

				class JVMArgumentHelper_tRunJob_28 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_28 jvm_argument_helper_tRunJob_28 = new JVMArgumentHelper_tRunJob_28();

				/**
				 * [tRunJob_28 begin ] stop
				 */

				/**
				 * [tRunJob_28 main ] start
				 */

				currentComponent = "tRunJob_28";

				java.util.List<String> paraList_tRunJob_28 = new java.util.ArrayList<String>();

				String osName_tRunJob_28 = System.getProperty("os.name");
				if (osName_tRunJob_28 != null && osName_tRunJob_28.toLowerCase().startsWith("win")) {

					paraList_tRunJob_28.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Xms256M");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Xmx1024M");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-cp");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28,
							dealChildJobLibrary_tRunJob_28.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--father_node=tRunJob_28");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--context=RUEIL");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "%*");

				} else {

					paraList_tRunJob_28.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Xms256M");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Xmx1024M");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "-cp");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28,
							dealChildJobLibrary_tRunJob_28.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--father_node=tRunJob_28");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "--context=RUEIL");

					jvm_argument_helper_tRunJob_28.addArgumentsTo(paraList_tRunJob_28, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_28.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_28.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_28.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_28 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_28 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_28".equals(tRunJobName_tRunJob_28) && childResumePath_tRunJob_28 != null) {
					paraList_tRunJob_28.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_28.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_28");

				java.util.Map<String, Object> parentContextMap_tRunJob_28 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_28 = null;

				class ConsoleHelper_tRunJob_28 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_28 consoleHelper_tRunJob_28 = new ConsoleHelper_tRunJob_28();

				Runtime runtime_tRunJob_28 = Runtime.getRuntime();
				Process ps_tRunJob_28 = null;

				// 0 indicates normal termination
				int result_tRunJob_28;
				StringBuffer errorMsg_tRunJob_28 = new StringBuffer();
				try {
					ps_tRunJob_28 = runtime_tRunJob_28
							.exec((String[]) paraList_tRunJob_28.toArray(new String[paraList_tRunJob_28.size()]));

					Thread normal_tRunJob_28 = consoleHelper_tRunJob_28.getNormalThread(ps_tRunJob_28);
					normal_tRunJob_28.start();

					Thread error_tRunJob_28 = consoleHelper_tRunJob_28.getErrorThread(ps_tRunJob_28,
							errorMsg_tRunJob_28);
					error_tRunJob_28.start();

					result_tRunJob_28 = ps_tRunJob_28.waitFor();
					normal_tRunJob_28.join(10000);
					error_tRunJob_28.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_28.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_28_CHILD_RETURN_CODE", result_tRunJob_28);
				if (result_tRunJob_28 != 0) {
					globalMap.put("tRunJob_28_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_28.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_28
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_28.toString());

				}

				tos_count_tRunJob_28++;

				/**
				 * [tRunJob_28 main ] stop
				 */

				/**
				 * [tRunJob_28 process_data_begin ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_28 process_data_end ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 process_data_end ] stop
				 */

				/**
				 * [tRunJob_28 end ] start
				 */

				currentComponent = "tRunJob_28";

				ok_Hash.put("tRunJob_28", true);
				end_Hash.put("tRunJob_28", System.currentTimeMillis());

				/**
				 * [tRunJob_28 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_28 finally ] start
				 */

				currentComponent = "tRunJob_28";

				/**
				 * [tRunJob_28 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_28_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_29_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_29 begin ] start
				 */

				ok_Hash.put("tRunJob_29", false);
				start_Hash.put("tRunJob_29", System.currentTimeMillis());

				currentComponent = "tRunJob_29";

				int tos_count_tRunJob_29 = 0;

				class DealChildJobLibrary_tRunJob_29 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_29 dealChildJobLibrary_tRunJob_29 = new DealChildJobLibrary_tRunJob_29();

				class JVMArgumentHelper_tRunJob_29 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_29 jvm_argument_helper_tRunJob_29 = new JVMArgumentHelper_tRunJob_29();

				/**
				 * [tRunJob_29 begin ] stop
				 */

				/**
				 * [tRunJob_29 main ] start
				 */

				currentComponent = "tRunJob_29";

				java.util.List<String> paraList_tRunJob_29 = new java.util.ArrayList<String>();

				String osName_tRunJob_29 = System.getProperty("os.name");
				if (osName_tRunJob_29 != null && osName_tRunJob_29.toLowerCase().startsWith("win")) {

					paraList_tRunJob_29.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Xms256M");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Xmx1024M");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-cp");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29,
							dealChildJobLibrary_tRunJob_29.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--father_node=tRunJob_29");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--context=ANTENNE_SURESNES");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "%*");

				} else {

					paraList_tRunJob_29.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Xms256M");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Xmx1024M");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "-cp");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29,
							dealChildJobLibrary_tRunJob_29.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--father_node=tRunJob_29");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "--context=ANTENNE_SURESNES");

					jvm_argument_helper_tRunJob_29.addArgumentsTo(paraList_tRunJob_29, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_29.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_29.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_29.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_29 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_29 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_29".equals(tRunJobName_tRunJob_29) && childResumePath_tRunJob_29 != null) {
					paraList_tRunJob_29.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_29.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_29");

				java.util.Map<String, Object> parentContextMap_tRunJob_29 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_29 = null;

				class ConsoleHelper_tRunJob_29 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_29 consoleHelper_tRunJob_29 = new ConsoleHelper_tRunJob_29();

				Runtime runtime_tRunJob_29 = Runtime.getRuntime();
				Process ps_tRunJob_29 = null;

				// 0 indicates normal termination
				int result_tRunJob_29;
				StringBuffer errorMsg_tRunJob_29 = new StringBuffer();
				try {
					ps_tRunJob_29 = runtime_tRunJob_29
							.exec((String[]) paraList_tRunJob_29.toArray(new String[paraList_tRunJob_29.size()]));

					Thread normal_tRunJob_29 = consoleHelper_tRunJob_29.getNormalThread(ps_tRunJob_29);
					normal_tRunJob_29.start();

					Thread error_tRunJob_29 = consoleHelper_tRunJob_29.getErrorThread(ps_tRunJob_29,
							errorMsg_tRunJob_29);
					error_tRunJob_29.start();

					result_tRunJob_29 = ps_tRunJob_29.waitFor();
					normal_tRunJob_29.join(10000);
					error_tRunJob_29.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_29.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_29_CHILD_RETURN_CODE", result_tRunJob_29);
				if (result_tRunJob_29 != 0) {
					globalMap.put("tRunJob_29_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_29.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_29
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_29.toString());

				}

				tos_count_tRunJob_29++;

				/**
				 * [tRunJob_29 main ] stop
				 */

				/**
				 * [tRunJob_29 process_data_begin ] start
				 */

				currentComponent = "tRunJob_29";

				/**
				 * [tRunJob_29 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_29 process_data_end ] start
				 */

				currentComponent = "tRunJob_29";

				/**
				 * [tRunJob_29 process_data_end ] stop
				 */

				/**
				 * [tRunJob_29 end ] start
				 */

				currentComponent = "tRunJob_29";

				ok_Hash.put("tRunJob_29", true);
				end_Hash.put("tRunJob_29", System.currentTimeMillis());

				/**
				 * [tRunJob_29 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_29 finally ] start
				 */

				currentComponent = "tRunJob_29";

				/**
				 * [tRunJob_29 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_29_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_30_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_30 begin ] start
				 */

				ok_Hash.put("tRunJob_30", false);
				start_Hash.put("tRunJob_30", System.currentTimeMillis());

				currentComponent = "tRunJob_30";

				int tos_count_tRunJob_30 = 0;

				class DealChildJobLibrary_tRunJob_30 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_30 dealChildJobLibrary_tRunJob_30 = new DealChildJobLibrary_tRunJob_30();

				class JVMArgumentHelper_tRunJob_30 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_30 jvm_argument_helper_tRunJob_30 = new JVMArgumentHelper_tRunJob_30();

				/**
				 * [tRunJob_30 begin ] stop
				 */

				/**
				 * [tRunJob_30 main ] start
				 */

				currentComponent = "tRunJob_30";

				java.util.List<String> paraList_tRunJob_30 = new java.util.ArrayList<String>();

				String osName_tRunJob_30 = System.getProperty("os.name");
				if (osName_tRunJob_30 != null && osName_tRunJob_30.toLowerCase().startsWith("win")) {

					paraList_tRunJob_30.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Xms256M");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Xmx1024M");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-cp");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30,
							dealChildJobLibrary_tRunJob_30.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--father_node=tRunJob_30");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--context=SURESNES");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "%*");

				} else {

					paraList_tRunJob_30.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Xms256M");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Xmx1024M");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "-cp");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30,
							dealChildJobLibrary_tRunJob_30.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_budget_socprop_1_0.2/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30,
							"happi.mv_dp_budget_socprop_1_0_2.MV_DP_BUDGET_SOCPROP_1");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--father_node=tRunJob_30");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "--context=SURESNES");

					jvm_argument_helper_tRunJob_30.addArgumentsTo(paraList_tRunJob_30, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_30.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_30.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_30.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_30 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_30 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_30".equals(tRunJobName_tRunJob_30) && childResumePath_tRunJob_30 != null) {
					paraList_tRunJob_30.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_30.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_30");

				java.util.Map<String, Object> parentContextMap_tRunJob_30 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_30 = null;

				class ConsoleHelper_tRunJob_30 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_30 consoleHelper_tRunJob_30 = new ConsoleHelper_tRunJob_30();

				Runtime runtime_tRunJob_30 = Runtime.getRuntime();
				Process ps_tRunJob_30 = null;

				// 0 indicates normal termination
				int result_tRunJob_30;
				StringBuffer errorMsg_tRunJob_30 = new StringBuffer();
				try {
					ps_tRunJob_30 = runtime_tRunJob_30
							.exec((String[]) paraList_tRunJob_30.toArray(new String[paraList_tRunJob_30.size()]));

					Thread normal_tRunJob_30 = consoleHelper_tRunJob_30.getNormalThread(ps_tRunJob_30);
					normal_tRunJob_30.start();

					Thread error_tRunJob_30 = consoleHelper_tRunJob_30.getErrorThread(ps_tRunJob_30,
							errorMsg_tRunJob_30);
					error_tRunJob_30.start();

					result_tRunJob_30 = ps_tRunJob_30.waitFor();
					normal_tRunJob_30.join(10000);
					error_tRunJob_30.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_30.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_30_CHILD_RETURN_CODE", result_tRunJob_30);
				if (result_tRunJob_30 != 0) {
					globalMap.put("tRunJob_30_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_30.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_30
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_30.toString());

				}

				tos_count_tRunJob_30++;

				/**
				 * [tRunJob_30 main ] stop
				 */

				/**
				 * [tRunJob_30 process_data_begin ] start
				 */

				currentComponent = "tRunJob_30";

				/**
				 * [tRunJob_30 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_30 process_data_end ] start
				 */

				currentComponent = "tRunJob_30";

				/**
				 * [tRunJob_30 process_data_end ] stop
				 */

				/**
				 * [tRunJob_30 end ] start
				 */

				currentComponent = "tRunJob_30";

				ok_Hash.put("tRunJob_30", true);
				end_Hash.put("tRunJob_30", System.currentTimeMillis());

				/**
				 * [tRunJob_30 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_30 finally ] start
				 */

				currentComponent = "tRunJob_30";

				/**
				 * [tRunJob_30 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_30_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_31Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_31_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_31 begin ] start
				 */

				ok_Hash.put("tRunJob_31", false);
				start_Hash.put("tRunJob_31", System.currentTimeMillis());

				currentComponent = "tRunJob_31";

				int tos_count_tRunJob_31 = 0;

				class DealChildJobLibrary_tRunJob_31 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_31 dealChildJobLibrary_tRunJob_31 = new DealChildJobLibrary_tRunJob_31();

				class JVMArgumentHelper_tRunJob_31 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_31 jvm_argument_helper_tRunJob_31 = new JVMArgumentHelper_tRunJob_31();

				/**
				 * [tRunJob_31 begin ] stop
				 */

				/**
				 * [tRunJob_31 main ] start
				 */

				currentComponent = "tRunJob_31";

				java.util.List<String> paraList_tRunJob_31 = new java.util.ArrayList<String>();

				String osName_tRunJob_31 = System.getProperty("os.name");
				if (osName_tRunJob_31 != null && osName_tRunJob_31.toLowerCase().startsWith("win")) {

					paraList_tRunJob_31.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Xms256M");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Xmx1024M");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-cp");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							dealChildJobLibrary_tRunJob_31.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--father_node=tRunJob_31");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							"--context=SURESNES_HORS_ANTENNE");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "%*");

				} else {

					paraList_tRunJob_31.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Xms256M");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Xmx1024M");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "-cp");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							dealChildJobLibrary_tRunJob_31.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_vacance_autre_mot_vac_0.1/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/external_sort/6.0.0/external_sort-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							"happi.mv_dp_vacance_autre_mot_vac_0_1.MV_DP_VACANCE_AUTRE_MOT_VAC");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "--father_node=tRunJob_31");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31,
							"--context=SURESNES_HORS_ANTENNE");

					jvm_argument_helper_tRunJob_31.addArgumentsTo(paraList_tRunJob_31, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_31.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_31.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_31.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_31 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_31 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_31".equals(tRunJobName_tRunJob_31) && childResumePath_tRunJob_31 != null) {
					paraList_tRunJob_31.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_31.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_31");

				java.util.Map<String, Object> parentContextMap_tRunJob_31 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_31 = null;

				class ConsoleHelper_tRunJob_31 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_31 consoleHelper_tRunJob_31 = new ConsoleHelper_tRunJob_31();

				Runtime runtime_tRunJob_31 = Runtime.getRuntime();
				Process ps_tRunJob_31 = null;

				// 0 indicates normal termination
				int result_tRunJob_31;
				StringBuffer errorMsg_tRunJob_31 = new StringBuffer();
				try {
					ps_tRunJob_31 = runtime_tRunJob_31
							.exec((String[]) paraList_tRunJob_31.toArray(new String[paraList_tRunJob_31.size()]));

					Thread normal_tRunJob_31 = consoleHelper_tRunJob_31.getNormalThread(ps_tRunJob_31);
					normal_tRunJob_31.start();

					Thread error_tRunJob_31 = consoleHelper_tRunJob_31.getErrorThread(ps_tRunJob_31,
							errorMsg_tRunJob_31);
					error_tRunJob_31.start();

					result_tRunJob_31 = ps_tRunJob_31.waitFor();
					normal_tRunJob_31.join(10000);
					error_tRunJob_31.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_31.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_31_CHILD_RETURN_CODE", result_tRunJob_31);
				if (result_tRunJob_31 != 0) {
					globalMap.put("tRunJob_31_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_31.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_31
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_31.toString());

				}

				tos_count_tRunJob_31++;

				/**
				 * [tRunJob_31 main ] stop
				 */

				/**
				 * [tRunJob_31 process_data_begin ] start
				 */

				currentComponent = "tRunJob_31";

				/**
				 * [tRunJob_31 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_31 process_data_end ] start
				 */

				currentComponent = "tRunJob_31";

				/**
				 * [tRunJob_31 process_data_end ] stop
				 */

				/**
				 * [tRunJob_31 end ] start
				 */

				currentComponent = "tRunJob_31";

				ok_Hash.put("tRunJob_31", true);
				end_Hash.put("tRunJob_31", System.currentTimeMillis());

				/**
				 * [tRunJob_31 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_31 finally ] start
				 */

				currentComponent = "tRunJob_31";

				/**
				 * [tRunJob_31 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_31_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_33Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_33_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_33 begin ] start
				 */

				ok_Hash.put("tRunJob_33", false);
				start_Hash.put("tRunJob_33", System.currentTimeMillis());

				currentComponent = "tRunJob_33";

				int tos_count_tRunJob_33 = 0;

				class DealChildJobLibrary_tRunJob_33 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_33 dealChildJobLibrary_tRunJob_33 = new DealChildJobLibrary_tRunJob_33();

				class JVMArgumentHelper_tRunJob_33 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_33 jvm_argument_helper_tRunJob_33 = new JVMArgumentHelper_tRunJob_33();

				/**
				 * [tRunJob_33 begin ] stop
				 */

				/**
				 * [tRunJob_33 main ] start
				 */

				currentComponent = "tRunJob_33";

				java.util.List<String> paraList_tRunJob_33 = new java.util.ArrayList<String>();

				String osName_tRunJob_33 = System.getProperty("os.name");
				if (osName_tRunJob_33 != null && osName_tRunJob_33.toLowerCase().startsWith("win")) {

					paraList_tRunJob_33.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Xms256M");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Xmx1024M");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-cp");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33,
							dealChildJobLibrary_tRunJob_33.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--father_node=tRunJob_33");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--context=ANTENNE_SURESNES");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "%*");

				} else {

					paraList_tRunJob_33.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Xms256M");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Xmx1024M");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "-cp");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33,
							dealChildJobLibrary_tRunJob_33.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--father_node=tRunJob_33");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "--context=ANTENNE_SURESNES");

					jvm_argument_helper_tRunJob_33.addArgumentsTo(paraList_tRunJob_33, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_33.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_33.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_33.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_33 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_33 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_33".equals(tRunJobName_tRunJob_33) && childResumePath_tRunJob_33 != null) {
					paraList_tRunJob_33.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_33.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_33");

				java.util.Map<String, Object> parentContextMap_tRunJob_33 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_33 = null;

				class ConsoleHelper_tRunJob_33 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_33 consoleHelper_tRunJob_33 = new ConsoleHelper_tRunJob_33();

				Runtime runtime_tRunJob_33 = Runtime.getRuntime();
				Process ps_tRunJob_33 = null;

				// 0 indicates normal termination
				int result_tRunJob_33;
				StringBuffer errorMsg_tRunJob_33 = new StringBuffer();
				try {
					ps_tRunJob_33 = runtime_tRunJob_33
							.exec((String[]) paraList_tRunJob_33.toArray(new String[paraList_tRunJob_33.size()]));

					Thread normal_tRunJob_33 = consoleHelper_tRunJob_33.getNormalThread(ps_tRunJob_33);
					normal_tRunJob_33.start();

					Thread error_tRunJob_33 = consoleHelper_tRunJob_33.getErrorThread(ps_tRunJob_33,
							errorMsg_tRunJob_33);
					error_tRunJob_33.start();

					result_tRunJob_33 = ps_tRunJob_33.waitFor();
					normal_tRunJob_33.join(10000);
					error_tRunJob_33.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_33.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_33_CHILD_RETURN_CODE", result_tRunJob_33);
				if (result_tRunJob_33 != 0) {
					globalMap.put("tRunJob_33_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_33.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_33
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_33.toString());

				}

				tos_count_tRunJob_33++;

				/**
				 * [tRunJob_33 main ] stop
				 */

				/**
				 * [tRunJob_33 process_data_begin ] start
				 */

				currentComponent = "tRunJob_33";

				/**
				 * [tRunJob_33 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_33 process_data_end ] start
				 */

				currentComponent = "tRunJob_33";

				/**
				 * [tRunJob_33 process_data_end ] stop
				 */

				/**
				 * [tRunJob_33 end ] start
				 */

				currentComponent = "tRunJob_33";

				ok_Hash.put("tRunJob_33", true);
				end_Hash.put("tRunJob_33", System.currentTimeMillis());

				/**
				 * [tRunJob_33 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_33 finally ] start
				 */

				currentComponent = "tRunJob_33";

				/**
				 * [tRunJob_33 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_33_SUBPROCESS_STATE", 1);
	}

	public void tRunJob_35Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tRunJob_35_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tRunJob_35 begin ] start
				 */

				ok_Hash.put("tRunJob_35", false);
				start_Hash.put("tRunJob_35", System.currentTimeMillis());

				currentComponent = "tRunJob_35";

				int tos_count_tRunJob_35 = 0;

				class DealChildJobLibrary_tRunJob_35 {

					public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
						String classPathLine = "";
						String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
						if (isNeedAddLibsPath(crcMapPath)) {
							java.util.Map<String, String> crcMap = null;
							java.io.ObjectInputStream ois = new ObjectInputStream(
									new java.io.FileInputStream(crcMapPath));
							crcMap = (java.util.Map<String, String>) ois.readObject();
							ois.close();
							classPathLine = addLibsPath(originalClassPathLine, crcMap);
						} else {
							classPathLine = originalClassPathLine;
						}
						return classPathLine;
					}

					private boolean isNeedAddLibsPath(String crcMapPath) {
						if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
							return false;
						}
						return true;
					}

					private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
						for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
							line = adaptLibPaths(line, entry);
						}
						return line;
					}

					private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
						String jarName = entry.getValue();
						String crc = entry.getKey();
						String libStringFinder = "../lib/" + jarName;
						if (line.contains(libStringFinder)) {
							line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
						} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
							line = line.replace(":$ROOT_PATH/" + jarName + ":",
									":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
						} else if (line.contains(";" + jarName + ";")) {
							line = line.replace(";" + jarName + ";",
									";../../../cache/lib/" + crc + "/" + jarName + ";");
						}
						return line;
					}

				}
				DealChildJobLibrary_tRunJob_35 dealChildJobLibrary_tRunJob_35 = new DealChildJobLibrary_tRunJob_35();

				class JVMArgumentHelper_tRunJob_35 {

					public void addArgumentsTo(java.util.List<String> target_argument_list,
							String argument_from_child) {

						target_argument_list.add(argument_from_child);
					}

				}

				JVMArgumentHelper_tRunJob_35 jvm_argument_helper_tRunJob_35 = new JVMArgumentHelper_tRunJob_35();

				/**
				 * [tRunJob_35 begin ] stop
				 */

				/**
				 * [tRunJob_35 main ] start
				 */

				currentComponent = "tRunJob_35";

				java.util.List<String> paraList_tRunJob_35 = new java.util.ArrayList<String>();

				String osName_tRunJob_35 = System.getProperty("os.name");
				if (osName_tRunJob_35 != null && osName_tRunJob_35.toLowerCase().startsWith("win")) {

					paraList_tRunJob_35.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Xms256M");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Xmx1024M");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-cp");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							dealChildJobLibrary_tRunJob_35.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classpath.jar;/C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar;"));

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--father_node=tRunJob_35");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							"--context=SURESNES_HORS_ANTENNE");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "%*");

				} else {

					paraList_tRunJob_35.add("C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/jre/bin/java.exe");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Xms256M");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Xmx1024M");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-Dfile.encoding=UTF-8");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "-cp");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							dealChildJobLibrary_tRunJob_35.replaceJarPathsFromCrcMap(
									"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/target/classes:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/jobs/process/Management_Visuel/SOC_PROP_1/mv_dp_recouvrement_socprop_1_0.3/src/main/ext-resources:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/HAPPI/poms/code/routines/target/classes:.:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-slf4j-impl/2.12.1/log4j-slf4j-impl-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-api/2.12.1/log4j-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-core/2.12.1/log4j-core-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/logging/log4j/log4j-1.2-api/2.12.1/log4j-1.2-api-2.12.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/commons-collections/commons-collections/3.2.2/commons-collections-3.2.2.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/geronimo-stax-api_1.0_spec-1.0.1/6.0.0/geronimo-stax-api_1.0_spec-1.0.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-lang3/3.8.1/commons-lang3-3.8.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml/4.1.0-20190523141255_modified_talend/poi-ooxml-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-compress/1.19/commons-compress-1.19.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/talendExcel-1.5-20190731/6.0.0/talendExcel-1.5-20190731-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-scratchpad/4.1.0-20190523141255_modified_talend/poi-scratchpad-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi-ooxml-schemas/4.1.0-20190523141255_modified_talend/poi-ooxml-schemas-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/filecopy/2.0.0/filecopy-2.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/slf4j/slf4j-api/1.7.25/slf4j-api-1.7.25.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/commons/commons-math3/3.6.1/commons-math3-3.6.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/xmlbeans/xmlbeans/3.1.0/xmlbeans-3.1.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/commons-collections4-4.1/6.0.0/commons-collections4-4.1-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/net/sourceforge/jtds/jtds/1.3.1-patch-20190523/jtds-1.3.1-patch-20190523.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/jboss-serialization/6.0.0/jboss-serialization-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/advancedPersistentLookupLib-1.2/6.0.0/advancedPersistentLookupLib-1.2-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/dom4j/dom4j/2.1.1/dom4j-2.1.1.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/apache/poi/poi/4.1.0-20190523141255_modified_talend/poi-4.1.0-20190523141255_modified_talend.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/components/lib/talend_DB_mssqlUtil/1.4/talend_DB_mssqlUtil-1.4.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/trove/6.0.0/trove-6.0.0.jar:C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/configuration/.m2/repository/org/talend/libraries/crypto-utils/6.0.0-SNAPSHOT/crypto-utils-6.0.0-SNAPSHOT.jar:")
									.replace("$ROOT_PATH", System.getProperty("user.dir")));

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							"happi.mv_dp_recouvrement_socprop_1_0_3.MV_DP_RECOUVREMENT_SOCPROP_1");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--father_pid=" + pid);

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--root_pid=" + rootPid);

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "--father_node=tRunJob_35");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35,
							"--context=SURESNES_HORS_ANTENNE");

					jvm_argument_helper_tRunJob_35.addArgumentsTo(paraList_tRunJob_35, "$@");

				}

				if (enableLogStash) {
					paraList_tRunJob_35.add("--monitoring=" + enableLogStash);
				}

				// for feature:10589

				paraList_tRunJob_35.add("--stat_port=" + null);

				if (resuming_logs_dir_path != null) {
					paraList_tRunJob_35.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
				}
				String childResumePath_tRunJob_35 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
				String tRunJobName_tRunJob_35 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
				if ("tRunJob_35".equals(tRunJobName_tRunJob_35) && childResumePath_tRunJob_35 != null) {
					paraList_tRunJob_35.add("--resuming_checkpoint_path="
							+ ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
				}
				paraList_tRunJob_35.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_35");

				java.util.Map<String, Object> parentContextMap_tRunJob_35 = new java.util.HashMap<String, Object>();

				Object obj_tRunJob_35 = null;

				class ConsoleHelper_tRunJob_35 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line).append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {

									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_35 consoleHelper_tRunJob_35 = new ConsoleHelper_tRunJob_35();

				Runtime runtime_tRunJob_35 = Runtime.getRuntime();
				Process ps_tRunJob_35 = null;

				// 0 indicates normal termination
				int result_tRunJob_35;
				StringBuffer errorMsg_tRunJob_35 = new StringBuffer();
				try {
					ps_tRunJob_35 = runtime_tRunJob_35
							.exec((String[]) paraList_tRunJob_35.toArray(new String[paraList_tRunJob_35.size()]));

					Thread normal_tRunJob_35 = consoleHelper_tRunJob_35.getNormalThread(ps_tRunJob_35);
					normal_tRunJob_35.start();

					Thread error_tRunJob_35 = consoleHelper_tRunJob_35.getErrorThread(ps_tRunJob_35,
							errorMsg_tRunJob_35);
					error_tRunJob_35.start();

					result_tRunJob_35 = ps_tRunJob_35.waitFor();
					normal_tRunJob_35.join(10000);
					error_tRunJob_35.join(10000);
				} catch (ThreadDeath tde) {
					ps_tRunJob_35.destroy();
					throw tde;
				}

				globalMap.put("tRunJob_35_CHILD_RETURN_CODE", result_tRunJob_35);
				if (result_tRunJob_35 != 0) {
					globalMap.put("tRunJob_35_CHILD_EXCEPTION_STACKTRACE", errorMsg_tRunJob_35.toString());

					throw new RuntimeException("Child job returns " + result_tRunJob_35
							+ ". It doesn't terminate normally.\n" + errorMsg_tRunJob_35.toString());

				}

				tos_count_tRunJob_35++;

				/**
				 * [tRunJob_35 main ] stop
				 */

				/**
				 * [tRunJob_35 process_data_begin ] start
				 */

				currentComponent = "tRunJob_35";

				/**
				 * [tRunJob_35 process_data_begin ] stop
				 */

				/**
				 * [tRunJob_35 process_data_end ] start
				 */

				currentComponent = "tRunJob_35";

				/**
				 * [tRunJob_35 process_data_end ] stop
				 */

				/**
				 * [tRunJob_35 end ] start
				 */

				currentComponent = "tRunJob_35";

				ok_Hash.put("tRunJob_35", true);
				end_Hash.put("tRunJob_35", System.currentTimeMillis());

				/**
				 * [tRunJob_35 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tRunJob_35 finally ] start
				 */

				currentComponent = "tRunJob_35";

				/**
				 * [tRunJob_35 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tRunJob_35_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final MV_SOCPROP_1 MV_SOCPROP_1Class = new MV_SOCPROP_1();

		int exitCode = MV_SOCPROP_1Class.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = MV_SOCPROP_1.class.getClassLoader()
					.getResourceAsStream("happi/mv_socprop_1_0_2/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = MV_SOCPROP_1.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tRunJob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_1) {
			globalMap.put("tRunJob_1_SUBPROCESS_STATE", -1);

			e_tRunJob_1.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_2) {
			globalMap.put("tRunJob_2_SUBPROCESS_STATE", -1);

			e_tRunJob_2.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_4Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_4) {
			globalMap.put("tRunJob_4_SUBPROCESS_STATE", -1);

			e_tRunJob_4.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_5Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_5) {
			globalMap.put("tRunJob_5_SUBPROCESS_STATE", -1);

			e_tRunJob_5.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_6Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_6) {
			globalMap.put("tRunJob_6_SUBPROCESS_STATE", -1);

			e_tRunJob_6.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_8Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_8) {
			globalMap.put("tRunJob_8_SUBPROCESS_STATE", -1);

			e_tRunJob_8.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_9Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_9) {
			globalMap.put("tRunJob_9_SUBPROCESS_STATE", -1);

			e_tRunJob_9.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_10Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_10) {
			globalMap.put("tRunJob_10_SUBPROCESS_STATE", -1);

			e_tRunJob_10.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_12Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_12) {
			globalMap.put("tRunJob_12_SUBPROCESS_STATE", -1);

			e_tRunJob_12.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_13Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_13) {
			globalMap.put("tRunJob_13_SUBPROCESS_STATE", -1);

			e_tRunJob_13.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_14Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_14) {
			globalMap.put("tRunJob_14_SUBPROCESS_STATE", -1);

			e_tRunJob_14.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_16Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_16) {
			globalMap.put("tRunJob_16_SUBPROCESS_STATE", -1);

			e_tRunJob_16.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_17Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_17) {
			globalMap.put("tRunJob_17_SUBPROCESS_STATE", -1);

			e_tRunJob_17.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_19Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_19) {
			globalMap.put("tRunJob_19_SUBPROCESS_STATE", -1);

			e_tRunJob_19.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_20Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_20) {
			globalMap.put("tRunJob_20_SUBPROCESS_STATE", -1);

			e_tRunJob_20.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_21Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_21) {
			globalMap.put("tRunJob_21_SUBPROCESS_STATE", -1);

			e_tRunJob_21.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_22Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_22) {
			globalMap.put("tRunJob_22_SUBPROCESS_STATE", -1);

			e_tRunJob_22.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_24Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_24) {
			globalMap.put("tRunJob_24_SUBPROCESS_STATE", -1);

			e_tRunJob_24.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_25Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_25) {
			globalMap.put("tRunJob_25_SUBPROCESS_STATE", -1);

			e_tRunJob_25.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_26Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_26) {
			globalMap.put("tRunJob_26_SUBPROCESS_STATE", -1);

			e_tRunJob_26.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_28Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_28) {
			globalMap.put("tRunJob_28_SUBPROCESS_STATE", -1);

			e_tRunJob_28.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_29Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_29) {
			globalMap.put("tRunJob_29_SUBPROCESS_STATE", -1);

			e_tRunJob_29.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_30Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_30) {
			globalMap.put("tRunJob_30_SUBPROCESS_STATE", -1);

			e_tRunJob_30.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_31Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_31) {
			globalMap.put("tRunJob_31_SUBPROCESS_STATE", -1);

			e_tRunJob_31.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_33Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_33) {
			globalMap.put("tRunJob_33_SUBPROCESS_STATE", -1);

			e_tRunJob_33.printStackTrace();

		}
		try {
			errorCode = null;
			tRunJob_35Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tRunJob_35) {
			globalMap.put("tRunJob_35_SUBPROCESS_STATE", -1);

			e_tRunJob_35.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out
					.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MV_SOCPROP_1");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 463240 characters generated by Talend Open Studio for Data Integration on the
 * 6 février 2023 10:07:32 CET
 ************************************************************************************************/