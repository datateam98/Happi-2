// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.mv_dp_recouvrement_socprop_1_0_3;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: MV_DP_RECOUVREMENT_SOCPROP_1 Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class MV_DP_RECOUVREMENT_SOCPROP_1 implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Nom != null){
				
					this.setProperty("Nom", Nom.toString());
				
			}
			
			if(Mail1 != null){
				
					this.setProperty("Mail1", Mail1.toString());
				
			}
			
		}

public String Nom;
public String getNom(){
	return this.Nom;
}
public String Mail1;
public String getMail1(){
	return this.Mail1;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.3";
	private final String jobName = "MV_DP_RECOUVREMENT_SOCPROP_1";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MV_DP_RECOUVREMENT_SOCPROP_1.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MV_DP_RECOUVREMENT_SOCPROP_1.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row31_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_8_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_8_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_8_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = "S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/05 - Template/MV/DP/RECOUVREMENT.xlsx";

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = "C:/MV";

		String desFileName_tFileCopy_1 =  "MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx" ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tFileCopy_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MT_RECOUVRE_TOT;

				public Float getMT_RECOUVRE_TOT () {
					return this.MT_RECOUVRE_TOT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE_TOT = null;
           				} else {
           			    	this.MT_RECOUVRE_TOT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MT_RECOUVRE_TOT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE_TOT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MT_RECOUVRE_TOT="+String.valueOf(MT_RECOUVRE_TOT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public String newColumn;

				public String getNewColumn () {
					return this.newColumn;
				}
				
			    public Float Reste_a_recouvrer;

				public Float getReste_a_recouvrer () {
					return this.Reste_a_recouvrer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.newColumn = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Reste_a_recouvrer = null;
           				} else {
           			    	this.Reste_a_recouvrer = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// String
				
						writeString(this.newColumn,dos);
					
					// Float
				
						if(this.Reste_a_recouvrer == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Reste_a_recouvrer);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",newColumn="+newColumn);
		sb.append(",Reste_a_recouvrer="+String.valueOf(Reste_a_recouvrer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_8 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_8> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_8 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT_ECHEANC;

				public String getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
					this.DT_ECHEANC = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
					this.DT_ALIM = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT_ECHEANC,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
					// Float
				
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",DT_ECHEANC="+DT_ECHEANC);
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
		sb.append(",DT_ALIM="+String.valueOf(DT_ALIM));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				
			    public java.util.Date DT_ECHEANC;

				public java.util.Date getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DT_ALIM = readDate(dis);
					
					this.DT_ECHEANC = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ECHEANC,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_ALIM="+String.valueOf(DT_ALIM));
		sb.append(",DT_ECHEANC="+String.valueOf(DT_ECHEANC));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DT_ALIM;

				public java.util.Date getDT_ALIM () {
					return this.DT_ALIM;
				}
				
			    public java.util.Date DT_ECHEANC;

				public java.util.Date getDT_ECHEANC () {
					return this.DT_ECHEANC;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float MT_RECOUVRE;

				public Float getMT_RECOUVRE () {
					return this.MT_RECOUVRE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DT_ALIM = readDate(dis);
					
					this.DT_ECHEANC = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_RECOUVRE = null;
           				} else {
           			    	this.MT_RECOUVRE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DT_ALIM,dos);
					
					// java.util.Date
				
						writeDate(this.DT_ECHEANC,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.MT_RECOUVRE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_RECOUVRE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DT_ALIM="+String.valueOf(DT_ALIM));
		sb.append(",DT_ECHEANC="+String.valueOf(DT_ECHEANC));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",MT_RECOUVRE="+String.valueOf(MT_RECOUVRE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);
		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
copyOfout1Struct copyOfout1 = new copyOfout1Struct();
row6Struct row6 = new row6Struct();
row32Struct row32 = new row32Struct();
out9Struct out9 = new out9Struct();
row33Struct row33 = new row33Struct();
row7Struct row7 = new row7Struct();
row36Struct row36 = new row36Struct();
out10Struct out10 = new out10Struct();
row3Struct row3 = new row3Struct();
out1Struct out1 = new out1Struct();
row34Struct row34 = new row34Struct();
row10Struct row10 = new row10Struct();
out2Struct out2 = new out2Struct();









	
	/**
	 * [tFileOutputExcel_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_8", false);
		start_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFileOutputExcel_8 = 0;
		


		int columnIndex_tFileOutputExcel_8 = 0;
		
		String fileName_tFileOutputExcel_8="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_8 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_8 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_8.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_8.setAppend(true,true);
		xlsxTool_tFileOutputExcel_8.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_8.setXY(true,0,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_8 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_8 = chm_tFileOutputExcel_8.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_8", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_8) {
			
				xlsxTool_tFileOutputExcel_8.prepareXlsxFile(fileName_tFileOutputExcel_8);
			
		}
		
		xlsxTool_tFileOutputExcel_8.setFont("");
		

 



/**
 * [tFileOutputExcel_8 begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = "1".split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */






	
	/**
	 * [tAggregateRow_8_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGOUT", false);
		start_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out10");
					}
				
		int tos_count_tAggregateRow_8_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_8 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_8 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_8 utilClass_tAggregateRow_8 = new UtilClass_tAggregateRow_8();

	

	class AggOperationStruct_tAggregateRow_8 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal MT_RECOUVRE_sum;
           			BigDecimal MT_FACTURE_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_8 other = (AggOperationStruct_tAggregateRow_8) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_8 operation_result_tAggregateRow_8 = null;
	AggOperationStruct_tAggregateRow_8 operation_finder_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();
	java.util.Map<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8> hash_tAggregateRow_8 = new java.util.HashMap<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8>();
	

 



/**
 * [tAggregateRow_8_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
	float MT_RECOUVRE;
	float MT_FACTURE;
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */




	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal MT_RECOUVRE_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String DP;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "\nselect \nDT_ALIM,\nDT_ECHEANC ,\nCD_LOCALI1,\nCD_PATRIM1,\n--LB_MODRGLT,\nsum(MT_RECOUVRE) as MT_RECOUVRE\nfrom AUXI_"
+"CLIEN ac \nwhere \nCD_SOCIETE = 1\nand CD_SOCPROP = 1\n--and CD_EXEC = datepart(year, dateadd(mm, -1, GETDATE())) -- à v"
+"erif\nand DT_AA_MVT =  datepart(year, dateadd(mm, -1, GETDATE()))\nand DT_MM_MVT =  datepart(month, dateadd(mm, -1, GETD"
+"ATE()))\nand ON_RECOUVT ='O'\nand CD_NATMVT <>'*RM'\n--and LB_NATLOC in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LO"
+"GEMENT CIAL.','PAVILLON')\ngroup by DT_ALIM, DT_ECHEANC, CD_LOCALI1, CD_PATRIM1--, LB_MODRGLT\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.DT_ALIM = null;
							} else {
										
			row1.DT_ALIM = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 1);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.DT_ECHEANC = null;
							} else {
										
			row1.DT_ECHEANC = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 2);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.CD_LOCALI1 = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.CD_PATRIM1 = null;
							} else {
		                          
            row1.CD_PATRIM1 = rs_tDBInput_2.getInt(4);
            if(rs_tDBInput_2.wasNull()){
                    row1.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.MT_RECOUVRE = null;
							} else {
		                          
            row1.MT_RECOUVRE = rs_tDBInput_2.getFloat(5);
            if(rs_tDBInput_2.wasNull()){
                    row1.MT_RECOUVRE = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row5HashKey.CD_LOCALI1 = row1.CD_LOCALI1 ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.CD_LOCALI1 = '" + row5HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row2HashKey.CD_LOCALI1 = row1.CD_LOCALI1 ;
                        		    		
                        		    		    row2HashKey.CD_PATRIM1 = row1.CD_PATRIM1 ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CD_LOCALI1 = '" + row2HashKey.CD_LOCALI1 + "', row2.CD_PATRIM1 = '" + row2HashKey.CD_PATRIM1 + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.DP = row5.DP != null ?
	(row5.DP.equals("SURESNES") ?
		(row1.CD_PATRIM1 == 3023 
		|| row1.CD_PATRIM1 == 3800
		|| row1.CD_PATRIM1 == 3804
		|| row1.CD_PATRIM1 == 3801
		|| row1.CD_PATRIM1 == 3802
		|| row1.CD_PATRIM1 == 3806
		|| row1.CD_PATRIM1 == 3024
		|| row1.CD_PATRIM1 == 3025
		|| row1.CD_PATRIM1 == 3701
		|| row1.CD_PATRIM1 == 3027
		|| row1.CD_PATRIM1 == 11013
		|| row1.CD_PATRIM1 == 11022
		|| row1.CD_PATRIM1 == 3803 
		|| row1.CD_PATRIM1 == 3700
		|| row1.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row5.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfout1 = null;


// # Output table : 'copyOfout1'
copyOfout1_tmp.DP = Var.DP ;
copyOfout1_tmp.DT_ECHEANC = TalendDate.formatDate("dd/MM/yyyy", row1.DT_ECHEANC);
copyOfout1_tmp.MT_RECOUVRE = row1.MT_RECOUVRE ;
copyOfout1_tmp.MT_FACTURE = row2.MT_FACTURE ;
copyOfout1_tmp.DT_ALIM = row1.DT_ALIM ;
copyOfout1 = copyOfout1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfout1"
if(copyOfout1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout1");
					}
					

          row6 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((copyOfout1.DP == null? false : copyOfout1.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.DP = copyOfout1.DP;
               row6.DT_ECHEANC = copyOfout1.DT_ECHEANC;
               row6.MT_RECOUVRE = copyOfout1.MT_RECOUVRE;
               row6.MT_FACTURE = copyOfout1.MT_FACTURE;
               row6.DT_ALIM = copyOfout1.DT_ALIM;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


	row32 = new row32Struct();
						
	row32.DP = row6.DP;								
	row32.DT_ECHEANC = row6.DT_ECHEANC;								
	row32.MT_RECOUVRE = row6.MT_RECOUVRE;								
	row32.MT_FACTURE = row6.MT_FACTURE;								
	row32.DT_ALIM = row6.DT_ALIM;			
	row7 = new row7Struct();
						
	row7.DP = row6.DP;								
	row7.DT_ECHEANC = row6.DT_ECHEANC;								
	row7.MT_RECOUVRE = row6.MT_RECOUVRE;								
	row7.MT_FACTURE = row6.MT_FACTURE;								
	row7.DT_ALIM = row6.DT_ALIM;			
	row34 = new row34Struct();
						
	row34.DP = row6.DP;								
	row34.DT_ECHEANC = row6.DT_ECHEANC;								
	row34.MT_RECOUVRE = row6.MT_RECOUVRE;								
	row34.MT_FACTURE = row6.MT_FACTURE;								
	row34.DT_ALIM = row6.DT_ALIM;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

out9 = null;


// # Output table : 'out9'
out9_tmp.DT_ALIM = row32.DT_ALIM ;
out9 = out9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out9");
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row33 = null;            	
 	}else{  	
 	   row33 = new row33Struct();
 	   

       row33.DT_ALIM = out9.DT_ALIM;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row33"
if(row33 != null) { 



	
	/**
	 * [tFileOutputExcel_8 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

				xlsxTool_tFileOutputExcel_8.addRow();
									   				
	    				if(row33.DT_ALIM != null) {
    				
							xlsxTool_tFileOutputExcel_8.addCellValue(row33.DT_ALIM, "MMM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_8.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_8++;
				
 


	tos_count_tFileOutputExcel_8++;

/**
 * [tFileOutputExcel_8 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 process_data_end ] stop
 */

} // End of branch "row33"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */

} // End of branch "out9"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */




	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

          row36 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
            ope_tFilterRow_8.matches((row7.DT_ECHEANC == null? false : row7.DT_ECHEANC.compareTo(TalendDate.formatDate("dd/MM/yyyy", TalendDate.getFirstDayOfMonth(TalendDate.addDate(TalendDate.getCurrentDate(), -2 , "MM")))) == 0)
                           , "DT_ECHEANC.compareTo(TalendDate.formatDate(\"dd/MM/yyyy\", TalendDate.getFirstDayOfMonth(TalendDate.addDate(TalendDate.getCurrentDate(), -2 , \"MM\")))) == 0 failed");
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row36 == null){ 
                row36 = new row36Struct();
              }
               row36.DP = row7.DP;
               row36.DT_ECHEANC = row7.DT_ECHEANC;
               row36.MT_RECOUVRE = row7.MT_RECOUVRE;
               row36.MT_FACTURE = row7.MT_FACTURE;
               row36.DT_ALIM = row7.DT_ALIM;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row36"
if(row36 != null) { 



	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_14 = false;
		  boolean mainRowRejected_tMap_14 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;
Var.MT_RECOUVRE = row36.MT_RECOUVRE == null ? 0 : row36.MT_RECOUVRE;
Var.MT_FACTURE = row36.MT_FACTURE == null ? 0 : row36.MT_FACTURE;// ###############################
        // ###############################
        // # Output tables

out10 = null;


// # Output table : 'out10'
out10_tmp.DP = row36.DP ;
out10_tmp.DT_ECHEANC = row36.DT_ECHEANC ;
out10_tmp.MT_RECOUVRE = Var.MT_RECOUVRE ;
out10_tmp.MT_FACTURE = Var.MT_FACTURE ;
out10_tmp.DT_ALIM = row36.DT_ALIM ;
out10 = out10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tAggregateRow_8_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out10");
					}
					
	


	operation_finder_tAggregateRow_8.hashCodeDirty = true;
	
	operation_result_tAggregateRow_8 = hash_tAggregateRow_8.get(operation_finder_tAggregateRow_8);

	

	if(operation_result_tAggregateRow_8 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();

		
		
		

		hash_tAggregateRow_8.put(operation_result_tAggregateRow_8, operation_result_tAggregateRow_8);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_8.MT_RECOUVRE_sum == null) {
						operation_result_tAggregateRow_8.MT_RECOUVRE_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_8.MT_RECOUVRE_sum = operation_result_tAggregateRow_8.MT_RECOUVRE_sum.add(
						new BigDecimal(
							String.valueOf(
								out10.MT_RECOUVRE
							)
						)
					);
					
					if(operation_result_tAggregateRow_8.MT_FACTURE_sum == null) {
						operation_result_tAggregateRow_8.MT_FACTURE_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_8.MT_FACTURE_sum = operation_result_tAggregateRow_8.MT_FACTURE_sum.add(
						new BigDecimal(
							String.valueOf(
								out10.MT_FACTURE
							)
						)
					);
					


 


	tos_count_tAggregateRow_8_AGGOUT++;

/**
 * [tAggregateRow_8_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 process_data_end ] stop
 */

} // End of branch "row36"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */




	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					
	


	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_1.MT_RECOUVRE_sum == null) {
						operation_result_tAggregateRow_1.MT_RECOUVRE_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_1.MT_RECOUVRE_sum = operation_result_tAggregateRow_1.MT_RECOUVRE_sum.add(
						new BigDecimal(
							String.valueOf(
								row34.MT_RECOUVRE
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "copyOfout1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

	
	
	
			xlsxTool_tFileOutputExcel_8.writeExcel(fileName_tFileOutputExcel_8,true);
	
		
		globalMap.put("tFileOutputExcel_8_NB_LINE",nb_line_tFileOutputExcel_8);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_8", true);
end_Hash.put("tFileOutputExcel_8", System.currentTimeMillis());




/**
 * [tFileOutputExcel_8 end ] stop
 */










	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out10");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_8_AGGOUT", true);
end_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_2.setAppend(true,true);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_2.setXY(true,2,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGIN", false);
		start_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	
		int tos_count_tAggregateRow_8_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_8> values_tAggregateRow_8 = hash_tAggregateRow_8.values();

globalMap.put("tAggregateRow_8_NB_LINE", values_tAggregateRow_8.size());

for(AggOperationStruct_tAggregateRow_8 aggregated_row_tAggregateRow_8 : values_tAggregateRow_8) { // G_AggR_600



 



/**
 * [tAggregateRow_8_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

    								if(aggregated_row_tAggregateRow_8.MT_RECOUVRE_sum != null) {
    								row3.MT_RECOUVRE = aggregated_row_tAggregateRow_8.MT_RECOUVRE_sum.floatValue();
										
    								}else{
    								
    									row3.MT_RECOUVRE = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_8.MT_FACTURE_sum != null) {
    								row3.MT_FACTURE = aggregated_row_tAggregateRow_8.MT_FACTURE_sum.floatValue();
										
    								}else{
    								
    									row3.MT_FACTURE = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_8_AGGIN++;

/**
 * [tAggregateRow_8_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.MT_FACTURE = row3.MT_FACTURE ;
out1_tmp.newColumn = null;
out1_tmp.Reste_a_recouvrer = row3.MT_FACTURE -  row3.MT_RECOUVRE ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(out1.MT_FACTURE != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(out1.MT_FACTURE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out1.newColumn != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(out1.newColumn));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(out1.Reste_a_recouvrer != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(out1.Reste_a_recouvrer)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_8_AGGIN", true);
end_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGIN end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */



















	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_1.setXY(true,3,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

    								if(aggregated_row_tAggregateRow_1.MT_RECOUVRE_sum != null) {
    								row10.MT_RECOUVRE = aggregated_row_tAggregateRow_1.MT_RECOUVRE_sum.floatValue();
										
    								}else{
    								
    									row10.MT_RECOUVRE = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.MT_RECOUVRE_TOT = row10.MT_RECOUVRE ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(out2.MT_RECOUVRE_TOT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(out2.MT_RECOUVRE_TOT)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */





















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
							//free memory for "tAggregateRow_8_AGGIN"
							globalMap.remove("tAggregateRow_8");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_8 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_8";

	

 



/**
 * [tFileOutputExcel_8 finally ] stop
 */










	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";

	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */



















	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float TX_PRL;

				public Float getTX_PRL () {
					return this.TX_PRL;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TX_PRL = null;
           				} else {
           			    	this.TX_PRL = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.TX_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TX_PRL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("TX_PRL="+String.valueOf(TX_PRL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB_PRL;

				public Float getNB_PRL () {
					return this.NB_PRL;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PRL = null;
           				} else {
           			    	this.NB_PRL = dis.readFloat();
           				}
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PRL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PRL);
		            	}
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PRL="+String.valueOf(NB_PRL));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);
		tDBInput_6Process(globalMap);

		row4Struct row4 = new row4Struct();
out5Struct out5 = new out5Struct();
row17Struct row17 = new row17Struct();
row12Struct row12 = new row12Struct();
out3Struct out3 = new out3Struct();






	
	/**
	 * [tAggregateRow_5_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGOUT", false);
		start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAggregateRow_5_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

	

	class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_PRL_sum;
           			BigDecimal NB_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
	AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
	java.util.Map<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5>();
	

 



/**
 * [tAggregateRow_5_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String DP;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect \ncount(*) as 'NB_PRL',\nCD_LOCALI1,\nCD_PATRIM1\nfrom AUXI_CLIEN ac \nwhere \nCD_SOCIETE = 1\nand DT_AA_MVT ="
+"  datepart(year, dateadd(mm, -1, GETDATE()))\nand DT_MM_MVT =  datepart(month, dateadd(mm, -1, GETDATE()))\nand ac.ON_RE"
+"COUVT = 'O'\nAND CD_SOCPROP = 1\nand ac.LB_MODRGLT like 'PRELEVEMENT%'\ngroup by CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row4.NB_PRL = null;
							} else {
		                          
            row4.NB_PRL = rs_tDBInput_3.getFloat(1);
            if(rs_tDBInput_3.wasNull()){
                    row4.NB_PRL = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row4.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row4.CD_LOCALI1 = tmpContent_tDBInput_3.trim();
                }
            } else {
                row4.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row4.CD_PATRIM1 = null;
							} else {
		                          
            row4.CD_PATRIM1 = rs_tDBInput_3.getInt(3);
            if(rs_tDBInput_3.wasNull()){
                    row4.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row11HashKey.CD_LOCALI1 = row4.CD_LOCALI1 ;
                        		    		
                        		    		    row11HashKey.CD_PATRIM1 = row4.CD_PATRIM1 ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.CD_LOCALI1 = '" + row11HashKey.CD_LOCALI1 + "', row11.CD_PATRIM1 = '" + row11HashKey.CD_PATRIM1 + "'");
								} // G 071
							

							row11Struct row11 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row16HashKey.CD_LOCALI1 = row4.CD_LOCALI1 ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.CD_LOCALI1 = '" + row16HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row16Struct row16 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.DP = row16.DP != null ?
	(row16.DP.equals("SURESNES") ?
		(row4.CD_PATRIM1 == 3023 
		|| row4.CD_PATRIM1 == 3800
		|| row4.CD_PATRIM1 == 3804
		|| row4.CD_PATRIM1 == 3801
		|| row4.CD_PATRIM1 == 3802
		|| row4.CD_PATRIM1 == 3806
		|| row4.CD_PATRIM1 == 3024
		|| row4.CD_PATRIM1 == 3025
		|| row4.CD_PATRIM1 == 3701
		|| row4.CD_PATRIM1 == 3027
		|| row4.CD_PATRIM1 == 11013
		|| row4.CD_PATRIM1 == 11022
		|| row4.CD_PATRIM1 == 3803 
		|| row4.CD_PATRIM1 == 3700
		|| row4.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row16.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.DP = Var.DP ;
out5_tmp.NB_PRL = row4.NB_PRL ;
out5_tmp.NB = row11.NB ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					

          row17 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((out5.DP == null? false : out5.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row17 == null){ 
                row17 = new row17Struct();
              }
               row17.DP = out5.DP;
               row17.NB_PRL = out5.NB_PRL;
               row17.NB = out5.NB;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row17"
if(row17 != null) { 



	
	/**
	 * [tAggregateRow_5_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					
	


	operation_finder_tAggregateRow_5.hashCodeDirty = true;
	
	operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

	

	if(operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

		
		
		

		hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_5.NB_PRL_sum == null) {
						operation_result_tAggregateRow_5.NB_PRL_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_5.NB_PRL_sum = operation_result_tAggregateRow_5.NB_PRL_sum.add(
						new BigDecimal(
							String.valueOf(
								row17.NB_PRL
							)
						)
					);
					
					if(operation_result_tAggregateRow_5.NB_sum == null) {
						operation_result_tAggregateRow_5.NB_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_5.NB_sum = operation_result_tAggregateRow_5.NB_sum.add(
						new BigDecimal(
							String.valueOf(
								row17.NB
							)
						)
					);
					


 


	tos_count_tAggregateRow_5_AGGOUT++;

/**
 * [tAggregateRow_5_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_end ] stop
 */

} // End of branch "row17"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_5_AGGOUT", true);
end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_3.setAppend(true,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_3.setXY(true,7,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGIN", false);
		start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	
		int tos_count_tAggregateRow_5_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5.values();

globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

for(AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600



 



/**
 * [tAggregateRow_5_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

    								if(aggregated_row_tAggregateRow_5.NB_PRL_sum != null) {
    								row12.NB_PRL = aggregated_row_tAggregateRow_5.NB_PRL_sum.floatValue();
										
    								}else{
    								
    									row12.NB_PRL = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_5.NB_sum != null) {
    								row12.NB = aggregated_row_tAggregateRow_5.NB_sum.floatValue();
										
    								}else{
    								
    									row12.NB = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_5_AGGIN++;

/**
 * [tAggregateRow_5_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.TX_PRL = row12.NB_PRL /  row12.NB ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(out3.TX_PRL != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(Double.parseDouble(String.valueOf(out3.TX_PRL)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_5_AGGIN", true);
end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGIN end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_5_AGGIN"
							globalMap.remove("tAggregateRow_5");
						
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB_LOC_DETTE;

				public Float getNB_LOC_DETTE () {
					return this.NB_LOC_DETTE;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_LOC_DETTE = null;
           				} else {
           			    	this.NB_LOC_DETTE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB_LOC_DETTE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_LOC_DETTE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB_LOC_DETTE="+String.valueOf(NB_LOC_DETTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_8Process(globalMap);

		row13Struct row13 = new row13Struct();
out4Struct out4 = new out4Struct();
row18Struct row18 = new row18Struct();
row19Struct row19 = new row19Struct();






	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date DATE;BigDecimal NB_LOC_DETTE_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATE == null) ? 0 : this.DATE.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
							if (this.DATE == null) {
								if (other.DATE != null) 
									return false;
							} else if (!this.DATE.equals(other.DATE)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String DP;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "\nselect s.DATE, \ns.CD_LOCALI1, \nCD_PATRIM1,\ncount(*) from SID_IMP_CLIEN_GIM s\nwhere s.DT_ANNEE >=   datepart(year,"
+" dateadd(mm, -7, GETDATE()))\nand s.DT_MOIS >= datepart(month, dateadd(mm, -7, GETDATE()))\nAND CD_SOCPROP = 1\ngroup by"
+" s.date, s.CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row13.DATE = null;
							} else {
										
			row13.DATE = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 1);
			
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row13.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(2);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row13.CD_LOCALI1 = tmpContent_tDBInput_7.trim();
                }
            } else {
                row13.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row13.CD_PATRIM1 = null;
							} else {
		                          
            row13.CD_PATRIM1 = rs_tDBInput_7.getInt(3);
            if(rs_tDBInput_7.wasNull()){
                    row13.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 4) {
								row13.NB_LOC_DETTE = null;
							} else {
		                          
            row13.NB_LOC_DETTE = rs_tDBInput_7.getFloat(4);
            if(rs_tDBInput_7.wasNull()){
                    row13.NB_LOC_DETTE = null;
            }
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row14HashKey.CD_LOCALI1 = row13.CD_LOCALI1 ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.CD_LOCALI1 = '" + row14HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row14Struct row14 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.DP = row14.DP != null ?
	(row14.DP.equals("SURESNES") ?
		(row13.CD_PATRIM1 == 3023 
		|| row13.CD_PATRIM1 == 3800
		|| row13.CD_PATRIM1 == 3804
		|| row13.CD_PATRIM1 == 3801
		|| row13.CD_PATRIM1 == 3802
		|| row13.CD_PATRIM1 == 3806
		|| row13.CD_PATRIM1 == 3024
		|| row13.CD_PATRIM1 == 3025
		|| row13.CD_PATRIM1 == 3701
		|| row13.CD_PATRIM1 == 3027
		|| row13.CD_PATRIM1 == 11013
		|| row13.CD_PATRIM1 == 11022
		|| row13.CD_PATRIM1 == 3803 
		|| row13.CD_PATRIM1 == 3700
		|| row13.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row14.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.DATE = row13.DATE ;
out4_tmp.NB_LOC_DETTE = row13.NB_LOC_DETTE ;
out4_tmp.DP = Var.DP ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					

          row18 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((out4.DP == null? false : out4.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row18 == null){ 
                row18 = new row18Struct();
              }
               row18.DATE = out4.DATE;
               row18.NB_LOC_DETTE = out4.NB_LOC_DETTE;
               row18.DP = out4.DP;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					
	
operation_finder_tAggregateRow_3.DATE = row18.DATE;
			

	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		operation_result_tAggregateRow_3.DATE = operation_finder_tAggregateRow_3.DATE;
				
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_3.NB_LOC_DETTE_sum == null) {
						operation_result_tAggregateRow_3.NB_LOC_DETTE_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_3.NB_LOC_DETTE_sum = operation_result_tAggregateRow_3.NB_LOC_DETTE_sum.add(
						new BigDecimal(
							String.valueOf(
								row18.NB_LOC_DETTE
							)
						)
					);
					


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_4.setAppend(true,true);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_4.setXY(true,0,20,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

            				    row19.DATE = aggregated_row_tAggregateRow_3.DATE;
            				    
    								if(aggregated_row_tAggregateRow_3.NB_LOC_DETTE_sum != null) {
    								row19.NB_LOC_DETTE = aggregated_row_tAggregateRow_3.NB_LOC_DETTE_sum.floatValue();
										
    								}else{
    								
    									row19.NB_LOC_DETTE = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row19.DATE != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(row19.DATE, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row19.NB_LOC_DETTE != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(Double.parseDouble(String.valueOf(row19.NB_LOC_DETTE)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MONTANT;

				public Float getMONTANT () {
					return this.MONTANT;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MONTANT = null;
           				} else {
           			    	this.MONTANT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MONTANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MONTANT);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MONTANT="+String.valueOf(MONTANT));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);

		row21Struct row21 = new row21Struct();
out6Struct out6 = new out6Struct();
row20Struct row20 = new row20Struct();
row23Struct row23 = new row23Struct();
out7Struct out7 = new out7Struct();






	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

	

	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_sum;
           			BigDecimal MT_SOLD_DEB_sum;
           			BigDecimal NB_MOIS_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	String DP;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
out6Struct out6_tmp = new out6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_9  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9); 
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_9 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "\nselect s.CD_LOCALI1, \nCD_PATRIM1,\ncount(*) as NB, \nsum(MT_SOLD_DEB) as MT_SOLD_DEB, \nsum(NB_MOIS_PREIMP) as NB_MO"
+"IS \nfrom SID_IMP_CLIEN_GIM s\nwhere s.DT_ANNEE =   datepart(year, dateadd(mm, -1, GETDATE()))\nand s.DT_MOIS = datepart"
+"(month, dateadd(mm, -1, GETDATE()))\nAND CD_SOCPROP = 1\ngroup by s.CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row21.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
            if(tmpContent_tDBInput_9 != null) {
            	if (talendToDBList_tDBInput_9 .contains(rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row21.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
            	} else {
                	row21.CD_LOCALI1 = tmpContent_tDBInput_9.trim();
                }
            } else {
                row21.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row21.CD_PATRIM1 = null;
							} else {
		                          
            row21.CD_PATRIM1 = rs_tDBInput_9.getInt(2);
            if(rs_tDBInput_9.wasNull()){
                    row21.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row21.NB = null;
							} else {
		                          
            row21.NB = rs_tDBInput_9.getFloat(3);
            if(rs_tDBInput_9.wasNull()){
                    row21.NB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 4) {
								row21.MT_SOLD_DEB = null;
							} else {
		                          
            row21.MT_SOLD_DEB = rs_tDBInput_9.getFloat(4);
            if(rs_tDBInput_9.wasNull()){
                    row21.MT_SOLD_DEB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 5) {
								row21.NB_MOIS = null;
							} else {
		                          
            row21.NB_MOIS = rs_tDBInput_9.getFloat(5);
            if(rs_tDBInput_9.wasNull()){
                    row21.NB_MOIS = null;
            }
		                    }
					





 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row22HashKey.CD_LOCALI1 = row21.CD_LOCALI1 ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.CD_LOCALI1 = '" + row22HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row22Struct row22 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.DP = row22.DP != null ?
	(row22.DP.equals("SURESNES") ?
		(row21.CD_PATRIM1 == 3023 
		|| row21.CD_PATRIM1 == 3800
		|| row21.CD_PATRIM1 == 3804
		|| row21.CD_PATRIM1 == 3801
		|| row21.CD_PATRIM1 == 3802
		|| row21.CD_PATRIM1 == 3806
		|| row21.CD_PATRIM1 == 3024
		|| row21.CD_PATRIM1 == 3025
		|| row21.CD_PATRIM1 == 3701
		|| row21.CD_PATRIM1 == 3027
		|| row21.CD_PATRIM1 == 11013
		|| row21.CD_PATRIM1 == 11022
		|| row21.CD_PATRIM1 == 3803 
		|| row21.CD_PATRIM1 == 3700
		|| row21.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row22.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out6 = null;


// # Output table : 'out6'
out6_tmp.NB = row21.NB ;
out6_tmp.MT_SOLD_DEB = row21.MT_SOLD_DEB ;
out6_tmp.NB_MOIS = row21.NB_MOIS ;
out6_tmp.DP = Var.DP ;
out6 = out6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out6");
					}
					

          row20 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((out6.DP == null? false : out6.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row20 == null){ 
                row20 = new row20Struct();
              }
               row20.NB = out6.NB;
               row20.MT_SOLD_DEB = out6.MT_SOLD_DEB;
               row20.NB_MOIS = out6.NB_MOIS;
               row20.DP = out6.DP;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row20"
if(row20 != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					
	


	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		
		
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_4.NB_sum == null) {
						operation_result_tAggregateRow_4.NB_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_4.NB_sum = operation_result_tAggregateRow_4.NB_sum.add(
						new BigDecimal(
							String.valueOf(
								row20.NB
							)
						)
					);
					
					if(operation_result_tAggregateRow_4.MT_SOLD_DEB_sum == null) {
						operation_result_tAggregateRow_4.MT_SOLD_DEB_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_4.MT_SOLD_DEB_sum = operation_result_tAggregateRow_4.MT_SOLD_DEB_sum.add(
						new BigDecimal(
							String.valueOf(
								row20.MT_SOLD_DEB
							)
						)
					);
					
					if(operation_result_tAggregateRow_4.NB_MOIS_sum == null) {
						operation_result_tAggregateRow_4.NB_MOIS_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_4.NB_MOIS_sum = operation_result_tAggregateRow_4.NB_MOIS_sum.add(
						new BigDecimal(
							String.valueOf(
								row20.NB_MOIS
							)
						)
					);
					


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "row20"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "out6"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);

 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_5", false);
		start_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tFileOutputExcel_5 = 0;
		


		int columnIndex_tFileOutputExcel_5 = 0;
		
		String fileName_tFileOutputExcel_5="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_5 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_5 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_5.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_5.setAppend(true,true);
		xlsxTool_tFileOutputExcel_5.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_5.setXY(true,5,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_5 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_5 = chm_tFileOutputExcel_5.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_5", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_5) {
			
				xlsxTool_tFileOutputExcel_5.prepareXlsxFile(fileName_tFileOutputExcel_5);
			
		}
		
		xlsxTool_tFileOutputExcel_5.setFont("");
		

 



/**
 * [tFileOutputExcel_5 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out7Struct out7_tmp = new out7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

    								if(aggregated_row_tAggregateRow_4.NB_sum != null) {
    								row23.NB = aggregated_row_tAggregateRow_4.NB_sum.floatValue();
										
    								}else{
    								
    									row23.NB = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_4.MT_SOLD_DEB_sum != null) {
    								row23.MT_SOLD_DEB = aggregated_row_tAggregateRow_4.MT_SOLD_DEB_sum.floatValue();
										
    								}else{
    								
    									row23.MT_SOLD_DEB = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_4.NB_MOIS_sum != null) {
    								row23.NB_MOIS = aggregated_row_tAggregateRow_4.NB_MOIS_sum.floatValue();
										
    								}else{
    								
    									row23.NB_MOIS = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

out7 = null;


// # Output table : 'out7'
out7_tmp.MONTANT = row23.MT_SOLD_DEB /  row23.NB ;
out7_tmp.NB_MOIS = row23.NB_MOIS /  row23.NB ;
out7 = out7_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tFileOutputExcel_5 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out7");
					}
					

				xlsxTool_tFileOutputExcel_5.addRow();
									   				
	    				if(out7.MONTANT != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(Double.parseDouble(String.valueOf(out7.MONTANT)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
									   				
	    				if(out7.NB_MOIS != null) {
    				
							xlsxTool_tFileOutputExcel_5.addCellValue(Double.parseDouble(String.valueOf(out7.NB_MOIS)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_5.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_5++;
				
 


	tos_count_tFileOutputExcel_5++;

/**
 * [tFileOutputExcel_5 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 process_data_end ] stop
 */

} // End of branch "out7"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

	
	
	
			xlsxTool_tFileOutputExcel_5.writeExcel(fileName_tFileOutputExcel_5,true);
	
		
		globalMap.put("tFileOutputExcel_5_NB_LINE",nb_line_tFileOutputExcel_5);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_5", true);
end_Hash.put("tFileOutputExcel_5", System.currentTimeMillis());




/**
 * [tFileOutputExcel_5 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tDBInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_5 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_5";

	

 



/**
 * [tFileOutputExcel_5 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout7Struct implements routines.system.IPersistableRow<copyOfout7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float MONTANT;

				public Float getMONTANT () {
					return this.MONTANT;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MONTANT = null;
           				} else {
           			    	this.MONTANT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.MONTANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MONTANT);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MONTANT="+String.valueOf(MONTANT));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout6Struct implements routines.system.IPersistableRow<copyOfout6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public Float MT_SOLD_DEB;

				public Float getMT_SOLD_DEB () {
					return this.MT_SOLD_DEB;
				}
				
			    public Float NB_MOIS;

				public Float getNB_MOIS () {
					return this.NB_MOIS;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_SOLD_DEB = null;
           				} else {
           			    	this.MT_SOLD_DEB = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_MOIS = null;
           				} else {
           			    	this.NB_MOIS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
					// Float
				
						if(this.MT_SOLD_DEB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_SOLD_DEB);
		            	}
					
					// Float
				
						if(this.NB_MOIS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_MOIS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",MT_SOLD_DEB="+String.valueOf(MT_SOLD_DEB));
		sb.append(",NB_MOIS="+String.valueOf(NB_MOIS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_12Process(globalMap);

		row24Struct row24 = new row24Struct();
copyOfout6Struct copyOfout6 = new copyOfout6Struct();
row26Struct row26 = new row26Struct();
row27Struct row27 = new row27Struct();
copyOfout7Struct copyOfout7 = new copyOfout7Struct();






	
	/**
	 * [tAggregateRow_6_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGOUT", false);
		start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAggregateRow_6_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

	

	class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_sum;
           			BigDecimal MT_SOLD_DEB_sum;
           			BigDecimal NB_MOIS_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
	AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
	java.util.Map<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6>();
	

 



/**
 * [tAggregateRow_6_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout6");
					}
				
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct>) 
					globalMap.get( "tHash_Lookup_row25" ))
					;					
					
	

row25Struct row25HashKey = new row25Struct();
row25Struct row25Default = new row25Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
	String DP;
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout6Struct copyOfout6_tmp = new copyOfout6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_11  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11); 
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_11 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "\nselect s.CD_LOCALI1, \nCD_PATRIM1,\ncount(*) as NB, \nsum(MT_SOLD_DEB) as MT_SOLD_DEB, \nsum(NB_MOIS_PREIMP) as NB_MO"
+"IS \nfrom SID_IMP_CLIEN_GIM s\nwhere s.DT_ANNEE =   datepart(year, dateadd(mm, -1, GETDATE())) -1\nand s.DT_MOIS = 12\nA"
+"ND CD_SOCPROP = 1\ngroup by s.CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row24.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(1);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row24.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row24.CD_LOCALI1 = tmpContent_tDBInput_11.trim();
                }
            } else {
                row24.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row24.CD_PATRIM1 = null;
							} else {
		                          
            row24.CD_PATRIM1 = rs_tDBInput_11.getInt(2);
            if(rs_tDBInput_11.wasNull()){
                    row24.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row24.NB = null;
							} else {
		                          
            row24.NB = rs_tDBInput_11.getFloat(3);
            if(rs_tDBInput_11.wasNull()){
                    row24.NB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row24.MT_SOLD_DEB = null;
							} else {
		                          
            row24.MT_SOLD_DEB = rs_tDBInput_11.getFloat(4);
            if(rs_tDBInput_11.wasNull()){
                    row24.MT_SOLD_DEB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 5) {
								row24.NB_MOIS = null;
							} else {
		                          
            row24.NB_MOIS = rs_tDBInput_11.getFloat(5);
            if(rs_tDBInput_11.wasNull()){
                    row24.NB_MOIS = null;
            }
		                    }
					





 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row25" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow25 = false;
       		  	    	
       		  	    	
 							row25Struct row25ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row25HashKey.CD_LOCALI1 = row24.CD_LOCALI1 ;
                        		    		

								
		                        	row25HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row25.lookup( row25HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row25 != null && tHash_Lookup_row25.getCount(row25HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row25' and it contains more one result from keys :  row25.CD_LOCALI1 = '" + row25HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row25Struct row25 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row25Struct fromLookup_row25 = null;
							row25 = row25Default;
										 
							
								 
							
							
								if (tHash_Lookup_row25 !=null && tHash_Lookup_row25.hasNext()) { // G 099
								
							
								
								fromLookup_row25 = tHash_Lookup_row25.next();

							
							
								} // G 099
							
							

							if(fromLookup_row25 != null) {
								row25 = fromLookup_row25;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;
Var.DP = row25.DP != null ?
	(row25.DP.equals("SURESNES") ?
		(row24.CD_PATRIM1 == 3023 
		|| row24.CD_PATRIM1 == 3800
		|| row24.CD_PATRIM1 == 3804
		|| row24.CD_PATRIM1 == 3801
		|| row24.CD_PATRIM1 == 3802
		|| row24.CD_PATRIM1 == 3806
		|| row24.CD_PATRIM1 == 3024
		|| row24.CD_PATRIM1 == 3025
		|| row24.CD_PATRIM1 == 3701
		|| row24.CD_PATRIM1 == 3027
		|| row24.CD_PATRIM1 == 11013
		|| row24.CD_PATRIM1 == 11022
		|| row24.CD_PATRIM1 == 3803 
		|| row24.CD_PATRIM1 == 3700
		|| row24.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row25.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfout6 = null;


// # Output table : 'copyOfout6'
copyOfout6_tmp.NB = row24.NB ;
copyOfout6_tmp.MT_SOLD_DEB = row24.MT_SOLD_DEB ;
copyOfout6_tmp.NB_MOIS = row24.NB_MOIS ;
copyOfout6_tmp.DP = Var.DP ;
copyOfout6 = copyOfout6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "copyOfout6"
if(copyOfout6 != null) { 



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout6");
					}
					

          row26 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
            ope_tFilterRow_6.matches((copyOfout6.DP == null? false : copyOfout6.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row26 == null){ 
                row26 = new row26Struct();
              }
               row26.NB = copyOfout6.NB;
               row26.MT_SOLD_DEB = copyOfout6.MT_SOLD_DEB;
               row26.NB_MOIS = copyOfout6.NB_MOIS;
               row26.DP = copyOfout6.DP;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tAggregateRow_6_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					
	


	operation_finder_tAggregateRow_6.hashCodeDirty = true;
	
	operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

	

	if(operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

		
		
		

		hash_tAggregateRow_6.put(operation_result_tAggregateRow_6, operation_result_tAggregateRow_6);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_6.NB_sum == null) {
						operation_result_tAggregateRow_6.NB_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_6.NB_sum = operation_result_tAggregateRow_6.NB_sum.add(
						new BigDecimal(
							String.valueOf(
								row26.NB
							)
						)
					);
					
					if(operation_result_tAggregateRow_6.MT_SOLD_DEB_sum == null) {
						operation_result_tAggregateRow_6.MT_SOLD_DEB_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_6.MT_SOLD_DEB_sum = operation_result_tAggregateRow_6.MT_SOLD_DEB_sum.add(
						new BigDecimal(
							String.valueOf(
								row26.MT_SOLD_DEB
							)
						)
					);
					
					if(operation_result_tAggregateRow_6.NB_MOIS_sum == null) {
						operation_result_tAggregateRow_6.NB_MOIS_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_6.NB_MOIS_sum = operation_result_tAggregateRow_6.NB_MOIS_sum.add(
						new BigDecimal(
							String.valueOf(
								row26.NB_MOIS
							)
						)
					);
					


 


	tos_count_tAggregateRow_6_AGGOUT++;

/**
 * [tAggregateRow_6_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */

} // End of branch "copyOfout6"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);

 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row25 != null) {
						tHash_Lookup_row25.endGet();
					}
					globalMap.remove( "tHash_Lookup_row25" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout6");
			  	}
			  	
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_6_AGGOUT", true);
end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_6", false);
		start_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout7");
					}
				
		int tos_count_tFileOutputExcel_6 = 0;
		


		int columnIndex_tFileOutputExcel_6 = 0;
		
		String fileName_tFileOutputExcel_6="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_6 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_6 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_6.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_6.setAppend(true,true);
		xlsxTool_tFileOutputExcel_6.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_6.setXY(true,8,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_6 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_6 = chm_tFileOutputExcel_6.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_6", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_6) {
			
				xlsxTool_tFileOutputExcel_6.prepareXlsxFile(fileName_tFileOutputExcel_6);
			
		}
		
		xlsxTool_tFileOutputExcel_6.setFont("");
		

 



/**
 * [tFileOutputExcel_6 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout7Struct copyOfout7_tmp = new copyOfout7Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGIN", false);
		start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	
		int tos_count_tAggregateRow_6_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6.values();

globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

for(AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600



 



/**
 * [tAggregateRow_6_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

    								if(aggregated_row_tAggregateRow_6.NB_sum != null) {
    								row27.NB = aggregated_row_tAggregateRow_6.NB_sum.floatValue();
										
    								}else{
    								
    									row27.NB = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_6.MT_SOLD_DEB_sum != null) {
    								row27.MT_SOLD_DEB = aggregated_row_tAggregateRow_6.MT_SOLD_DEB_sum.floatValue();
										
    								}else{
    								
    									row27.MT_SOLD_DEB = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_6.NB_MOIS_sum != null) {
    								row27.NB_MOIS = aggregated_row_tAggregateRow_6.NB_MOIS_sum.floatValue();
										
    								}else{
    								
    									row27.NB_MOIS = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_6_AGGIN++;

/**
 * [tAggregateRow_6_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfout7 = null;


// # Output table : 'copyOfout7'
copyOfout7_tmp.MONTANT = row27.MT_SOLD_DEB /  row27.NB ;
copyOfout7_tmp.NB_MOIS = row27.NB_MOIS /  row27.NB ;
copyOfout7 = copyOfout7_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfout7"
if(copyOfout7 != null) { 



	
	/**
	 * [tFileOutputExcel_6 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout7");
					}
					

				xlsxTool_tFileOutputExcel_6.addRow();
									   				
	    				if(copyOfout7.MONTANT != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(Double.parseDouble(String.valueOf(copyOfout7.MONTANT)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
									   				
	    				if(copyOfout7.NB_MOIS != null) {
    				
							xlsxTool_tFileOutputExcel_6.addCellValue(Double.parseDouble(String.valueOf(copyOfout7.NB_MOIS)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_6.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_6++;
				
 


	tos_count_tFileOutputExcel_6++;

/**
 * [tFileOutputExcel_6 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 process_data_end ] stop
 */

} // End of branch "copyOfout7"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_6_AGGIN", true);
end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGIN end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

	
	
	
			xlsxTool_tFileOutputExcel_6.writeExcel(fileName_tFileOutputExcel_6,true);
	
		
		globalMap.put("tFileOutputExcel_6_NB_LINE",nb_line_tFileOutputExcel_6);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout7");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_6", true);
end_Hash.put("tFileOutputExcel_6", System.currentTimeMillis());




/**
 * [tFileOutputExcel_6 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tDBInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_6_AGGIN"
							globalMap.remove("tAggregateRow_6");
						
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row25"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_6 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_6";

	

 



/**
 * [tFileOutputExcel_6 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfout6Struct implements routines.system.IPersistableRow<copyOfcopyOfout6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];

	
			    public java.util.Date DATE;

				public java.util.Date getDATE () {
					return this.DATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float Amiable;

				public Float getAmiable () {
					return this.Amiable;
				}
				
			    public Float CTX;

				public Float getCTX () {
					return this.CTX;
				}
				
			    public Float SLS;

				public Float getSLS () {
					return this.SLS;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.DATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Amiable = null;
           				} else {
           			    	this.Amiable = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.CTX = null;
           				} else {
           			    	this.CTX = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SLS = null;
           				} else {
           			    	this.SLS = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.DATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.Amiable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Amiable);
		            	}
					
					// Float
				
						if(this.CTX == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.CTX);
		            	}
					
					// Float
				
						if(this.SLS == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.SLS);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DATE="+String.valueOf(DATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Amiable="+String.valueOf(Amiable));
		sb.append(",CTX="+String.valueOf(CTX));
		sb.append(",SLS="+String.valueOf(SLS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_14Process(globalMap);

		row28Struct row28 = new row28Struct();
copyOfcopyOfout6Struct copyOfcopyOfout6 = new copyOfcopyOfout6Struct();
row29Struct row29 = new row29Struct();
row30Struct row30 = new row30Struct();
out8Struct out8 = new out8Struct();






	
	/**
	 * [tAggregateRow_7_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGOUT", false);
		start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAggregateRow_7_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

	

	class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date DATE;BigDecimal Amiable_sum;
           			BigDecimal CTX_sum;
           			BigDecimal SLS_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.DATE == null) ? 0 : this.DATE.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;
			
							if (this.DATE == null) {
								if (other.DATE != null) 
									return false;
							} else if (!this.DATE.equals(other.DATE)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
	AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
	java.util.Map<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7>();
	

 



/**
 * [tAggregateRow_7_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout6");
					}
				
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct>) 
					globalMap.get( "tHash_Lookup_row31" ))
					;					
					
	

row31Struct row31HashKey = new row31Struct();
row31Struct row31Default = new row31Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
	String DP;
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout6Struct copyOfcopyOfout6_tmp = new copyOfcopyOfout6Struct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_13 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_13 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_13  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_13, talendToDBArray_tDBInput_13); 
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				conn_tDBInput_13 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_13 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "\nselect DATE, CD_LOCALI1, CD_PATRIM1, [Amiable], [CTX], [SLS]\nfrom \n(\nselect \ns.DATE,\nCASE \n	WHEN s.NO_DOSFACT i"
+"n (select fr.NO_DOSFACT from FA_REELHIS fr \n								where s.[DATE]= fr.DT_FAPERIO \n								and fr.NO_DOSFACT=s.NO_DOSF"
+"ACT\n								and LB_RUBCOUR = 'SLS') THEN 'SLS'\n	WHEN s.ON_CLI_CTX = 'O' then 'CTX'\n	else 'Amiable'\nend as TYPE_CTX,"
+"\ns.CD_LOCALI1 ,\nCD_PATRIM1,\ns.MT_SOLD_DEB \nfrom SID_IMP_CLIEN_GIM s\nwhere s.DT_ANNEE >=   datepart(year, dateadd(mm,"
+" -6, GETDATE()))\nand s.DT_MOIS >=   datepart(month, dateadd(mm, -6, GETDATE()))\nAND CD_SOCPROP = 1\n) BASE\nPIVOT \n("
+"\n	sum(MT_SOLD_DEB )\n	for TYPE_CTX in ([Amiable], [CTX], [SLS])\n) as PVT\n";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row28.DATE = null;
							} else {
										
			row28.DATE = mssqlGTU_tDBInput_13.getDate(rsmd_tDBInput_13, rs_tDBInput_13, 1);
			
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row28.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_13 = rs_tDBInput_13.getString(2);
            if(tmpContent_tDBInput_13 != null) {
            	if (talendToDBList_tDBInput_13 .contains(rsmd_tDBInput_13.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row28.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
            	} else {
                	row28.CD_LOCALI1 = tmpContent_tDBInput_13.trim();
                }
            } else {
                row28.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row28.CD_PATRIM1 = null;
							} else {
		                          
            row28.CD_PATRIM1 = rs_tDBInput_13.getInt(3);
            if(rs_tDBInput_13.wasNull()){
                    row28.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 4) {
								row28.Amiable = null;
							} else {
		                          
            row28.Amiable = rs_tDBInput_13.getFloat(4);
            if(rs_tDBInput_13.wasNull()){
                    row28.Amiable = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 5) {
								row28.CTX = null;
							} else {
		                          
            row28.CTX = rs_tDBInput_13.getFloat(5);
            if(rs_tDBInput_13.wasNull()){
                    row28.CTX = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 6) {
								row28.SLS = null;
							} else {
		                          
            row28.SLS = rs_tDBInput_13.getFloat(6);
            if(rs_tDBInput_13.wasNull()){
                    row28.SLS = null;
            }
		                    }
					





 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_12 = false;
		  boolean mainRowRejected_tMap_12 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row31" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow31 = false;
       		  	    	
       		  	    	
 							row31Struct row31ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_12) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_12 = false;
								
                        		    		    row31HashKey.CD_LOCALI1 = row28.CD_LOCALI1 ;
                        		    		

								
		                        	row31HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row31.lookup( row31HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row31 != null && tHash_Lookup_row31.getCount(row31HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row31' and it contains more one result from keys :  row31.CD_LOCALI1 = '" + row31HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row31Struct row31 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row31Struct fromLookup_row31 = null;
							row31 = row31Default;
										 
							
								 
							
							
								if (tHash_Lookup_row31 !=null && tHash_Lookup_row31.hasNext()) { // G 099
								
							
								
								fromLookup_row31 = tHash_Lookup_row31.next();

							
							
								} // G 099
							
							

							if(fromLookup_row31 != null) {
								row31 = fromLookup_row31;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;
Var.DP = row31.DP != null ?
	(row31.DP.equals("SURESNES") ?
		(row28.CD_PATRIM1 == 3023 
		|| row28.CD_PATRIM1 == 3800
		|| row28.CD_PATRIM1 == 3804
		|| row28.CD_PATRIM1 == 3801
		|| row28.CD_PATRIM1 == 3802
		|| row28.CD_PATRIM1 == 3806
		|| row28.CD_PATRIM1 == 3024
		|| row28.CD_PATRIM1 == 3025
		|| row28.CD_PATRIM1 == 3701
		|| row28.CD_PATRIM1 == 3027
		|| row28.CD_PATRIM1 == 11013
		|| row28.CD_PATRIM1 == 11022
		|| row28.CD_PATRIM1 == 3803 
		|| row28.CD_PATRIM1 == 3700
		|| row28.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row31.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout6 = null;


// # Output table : 'copyOfcopyOfout6'
copyOfcopyOfout6_tmp.DATE = row28.DATE ;
copyOfcopyOfout6_tmp.Amiable = row28.Amiable ;
copyOfcopyOfout6_tmp.CTX = row28.CTX ;
copyOfcopyOfout6_tmp.SLS = row28.SLS ;
copyOfcopyOfout6_tmp.DP = Var.DP ;
copyOfcopyOfout6 = copyOfcopyOfout6_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout6"
if(copyOfcopyOfout6 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfout6");
					}
					

          row29 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
            ope_tFilterRow_7.matches((copyOfcopyOfout6.DP == null? false : copyOfcopyOfout6.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row29 == null){ 
                row29 = new row29Struct();
              }
               row29.DATE = copyOfcopyOfout6.DATE;
               row29.Amiable = copyOfcopyOfout6.Amiable;
               row29.CTX = copyOfcopyOfout6.CTX;
               row29.SLS = copyOfcopyOfout6.SLS;
               row29.DP = copyOfcopyOfout6.DP;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row29"
if(row29 != null) { 



	
	/**
	 * [tAggregateRow_7_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					
	
operation_finder_tAggregateRow_7.DATE = row29.DATE;
			

	operation_finder_tAggregateRow_7.hashCodeDirty = true;
	
	operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

	

	if(operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

		operation_result_tAggregateRow_7.DATE = operation_finder_tAggregateRow_7.DATE;
				
		
		

		hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);
	
	} // G_OutMain_AggR_001


	
				if(row29.Amiable != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_7.Amiable_sum == null) {
						operation_result_tAggregateRow_7.Amiable_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_7.Amiable_sum = operation_result_tAggregateRow_7.Amiable_sum.add(
						new BigDecimal(
							String.valueOf(
								row29.Amiable
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row29.CTX != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_7.CTX_sum == null) {
						operation_result_tAggregateRow_7.CTX_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_7.CTX_sum = operation_result_tAggregateRow_7.CTX_sum.add(
						new BigDecimal(
							String.valueOf(
								row29.CTX
							)
						)
					);
					
				} // G_OutMain_AggR_546
				
				if(row29.SLS != null) { // G_OutMain_AggR_546
				
					if(operation_result_tAggregateRow_7.SLS_sum == null) {
						operation_result_tAggregateRow_7.SLS_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_7.SLS_sum = operation_result_tAggregateRow_7.SLS_sum.add(
						new BigDecimal(
							String.valueOf(
								row29.SLS
							)
						)
					);
					
				} // G_OutMain_AggR_546
				


 


	tos_count_tAggregateRow_7_AGGOUT++;

/**
 * [tAggregateRow_7_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_end ] stop
 */

} // End of branch "row29"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout6"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);

 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row31 != null) {
						tHash_Lookup_row31.endGet();
					}
					globalMap.remove( "tHash_Lookup_row31" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout6");
			  	}
			  	
 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_7_AGGOUT", true);
end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_7", false);
		start_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tFileOutputExcel_7 = 0;
		


		int columnIndex_tFileOutputExcel_7 = 0;
		
		String fileName_tFileOutputExcel_7="C:/MV/MV_DP " + context.Nom +"_Recouvrement_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_7 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_7 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_7.setSheet("DATA RECOUVREMENT");
		xlsxTool_tFileOutputExcel_7.setAppend(true,true);
		xlsxTool_tFileOutputExcel_7.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_7.setXY(true,0,9,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_7 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_7 = chm_tFileOutputExcel_7.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_7", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_7) {
			
				xlsxTool_tFileOutputExcel_7.prepareXlsxFile(fileName_tFileOutputExcel_7);
			
		}
		
		xlsxTool_tFileOutputExcel_7.setFont("");
		

 



/**
 * [tFileOutputExcel_7 begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out8Struct out8_tmp = new out8Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGIN", false);
		start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	
		int tos_count_tAggregateRow_7_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7.values();

globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

for(AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600



 



/**
 * [tAggregateRow_7_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

            				    row30.DATE = aggregated_row_tAggregateRow_7.DATE;
            				    
    								if(aggregated_row_tAggregateRow_7.Amiable_sum != null) {
    								row30.Amiable = aggregated_row_tAggregateRow_7.Amiable_sum.floatValue();
										
    								}else{
    								
    									row30.Amiable = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_7.CTX_sum != null) {
    								row30.CTX = aggregated_row_tAggregateRow_7.CTX_sum.floatValue();
										
    								}else{
    								
    									row30.CTX = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_7.SLS_sum != null) {
    								row30.SLS = aggregated_row_tAggregateRow_7.SLS_sum.floatValue();
										
    								}else{
    								
    									row30.SLS = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_7_AGGIN++;

/**
 * [tAggregateRow_7_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_13 = false;
		  boolean mainRowRejected_tMap_13 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

out8 = null;


// # Output table : 'out8'
out8_tmp.DATE = row30.DATE ;
out8_tmp.Amiable = row30.Amiable ;
out8_tmp.CTX = row30.CTX ;
out8_tmp.SLS = row30.SLS ;
out8 = out8_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tFileOutputExcel_7 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out8");
					}
					

				xlsxTool_tFileOutputExcel_7.addRow();
									   				
	    				if(out8.DATE != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(out8.DATE, "MMM-yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(out8.Amiable != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(Double.parseDouble(String.valueOf(out8.Amiable)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(out8.CTX != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(Double.parseDouble(String.valueOf(out8.CTX)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
									   				
	    				if(out8.SLS != null) {
    				
							xlsxTool_tFileOutputExcel_7.addCellValue(Double.parseDouble(String.valueOf(out8.SLS)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_7.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_7++;
				
 


	tos_count_tFileOutputExcel_7++;

/**
 * [tFileOutputExcel_7 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 process_data_end ] stop
 */

} // End of branch "out8"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_7_AGGIN", true);
end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGIN end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

	
	
	
			xlsxTool_tFileOutputExcel_7.writeExcel(fileName_tFileOutputExcel_7,true);
	
		
		globalMap.put("tFileOutputExcel_7_NB_LINE",nb_line_tFileOutputExcel_7);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_7", true);
end_Hash.put("tFileOutputExcel_7", System.currentTimeMillis());




/**
 * [tFileOutputExcel_7 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_7_AGGIN"
							globalMap.remove("tAggregateRow_7");
						
					     			//free memory for "tMap_12"
					     			globalMap.remove("tHash_Lookup_row31"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";

	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";

	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_7 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_7";

	

 



/**
 * [tFileOutputExcel_7 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	

public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:LMSSNTCbMArvHmzlllUMPNYfli9ehTdKsPVWVA==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_2) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row1,row5,row2) outputs:(copyOfout1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:jLqBY/gk3V6HhVnRzvjhE1D/MU1YFNxbhyF0LA==");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "HDSHData" ;
			String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {
				url_tDBInput_5 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_5 = "";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.CD_LOCALI1 = tmpContent_tDBInput_5;
                }
            } else {
                row5.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.VILLE = tmpContent_tDBInput_5;
                }
            } else {
                row5.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.DP = tmpContent_tDBInput_5;
                }
            } else {
                row5.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row5.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.DT = tmpContent_tDBInput_5;
                }
            } else {
                row5.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.CD_LOCALI1 = row5.CD_LOCALI1;
				
				row5_HashRow.VILLE = row5.VILLE;
				
				row5_HashRow.DP = row5.DP;
				
				row5_HashRow.DT = row5.DT;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float MT_FACTURE;

				public Float getMT_FACTURE () {
					return this.MT_FACTURE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
						result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					
						if (this.CD_PATRIM1 == null) {
							if (other.CD_PATRIM1 != null)
								return false;
						
						} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.CD_PATRIM1 = this.CD_PATRIM1;
	            other.MT_FACTURE = this.MT_FACTURE;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	other.CD_PATRIM1 = this.CD_PATRIM1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.MT_FACTURE = null;
           				} else {
           			    	this.MT_FACTURE = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.MT_FACTURE == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.MT_FACTURE);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",MT_FACTURE="+String.valueOf(MT_FACTURE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_2 - inputs:(row1,row5,row2) outputs:(copyOfout1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "\nselect s.CD_LOCALI1, \nCD_PATRIM1,\n(sum(FACT_TOT) + sum(FACT_SLD_CRE)) as MT_FACTURE\nfrom SID_REC_CLIEN_GIM s\nWHER"
+"E \ns.DT_ANNEE=datepart(year, dateadd(mm, -2, GETDATE()))\nAND s.DT_MOIS=datepart(month, dateadd(mm, -2, GETDATE()))\nAN"
+"D s.CD_SOCPROP = 1\ngroup by CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row2.CD_LOCALI1 = tmpContent_tDBInput_1.trim();
                }
            } else {
                row2.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.CD_PATRIM1 = null;
							} else {
		                          
            row2.CD_PATRIM1 = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row2.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.MT_FACTURE = null;
							} else {
		                          
            row2.MT_FACTURE = rs_tDBInput_1.getFloat(3);
            if(rs_tDBInput_1.wasNull()){
                    row2.MT_FACTURE = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.CD_LOCALI1 = row2.CD_LOCALI1;
				
				row2_HashRow.CD_PATRIM1 = row2.CD_PATRIM1;
				
				row2_HashRow.MT_FACTURE = row2.MT_FACTURE;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public Float NB;

				public Float getNB () {
					return this.NB;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
						result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					
						if (this.CD_PATRIM1 == null) {
							if (other.CD_PATRIM1 != null)
								return false;
						
						} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.NB = this.NB;
	            other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.CD_PATRIM1 = this.CD_PATRIM1;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	other.CD_PATRIM1 = this.CD_PATRIM1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB = null;
           				} else {
           			    	this.NB = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.NB == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB="+String.valueOf(NB));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_3) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_6 - inputs:(row4,row11,row16) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect \ncount(*) as 'NB',\nCD_LOCALI1,\nCD_PATRIM1\nfrom AUXI_CLIEN ac \nwhere \nCD_SOCIETE = 1\nand DT_AA_MVT =  da"
+"tepart(year, dateadd(mm, -1, GETDATE()))\nand DT_MM_MVT =  datepart(month, dateadd(mm, -1, GETDATE()))\nAND CD_SOCPROP ="
+" 1\nand ac.ON_RECOUVT = 'O'\ngroup by CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row11.NB = null;
							} else {
		                          
            row11.NB = rs_tDBInput_4.getFloat(1);
            if(rs_tDBInput_4.wasNull()){
                    row11.NB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row11.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row11.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row11.CD_LOCALI1 = tmpContent_tDBInput_4.trim();
                }
            } else {
                row11.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row11.CD_PATRIM1 = null;
							} else {
		                          
            row11.CD_PATRIM1 = rs_tDBInput_4.getInt(3);
            if(rs_tDBInput_4.wasNull()){
                    row11.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.NB = row11.NB;
				
				row11_HashRow.CD_LOCALI1 = row11.CD_LOCALI1;
				
				row11_HashRow.CD_PATRIM1 = row11.CD_PATRIM1;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";

	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_3) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_6 - inputs:(row4,row11,row16) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:25AT9GBmB8mUYcrfe5VUzc5n0X7MlWtM4Ft0qA==");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
		    String port_tDBInput_6 = "1433";
		    String dbname_tDBInput_6 = "HDSHData" ;
			String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_6)) {
		    	url_tDBInput_6 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_6)) {
				url_tDBInput_6 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_6 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_6 = "";
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row16.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row16.CD_LOCALI1 = tmpContent_tDBInput_6;
                }
            } else {
                row16.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row16.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row16.VILLE = tmpContent_tDBInput_6;
                }
            } else {
                row16.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row16.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row16.DP = tmpContent_tDBInput_6;
                }
            } else {
                row16.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row16.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row16.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row16.DT = tmpContent_tDBInput_6;
                }
            } else {
                row16.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.CD_LOCALI1 = row16.CD_LOCALI1;
				
				row16_HashRow.VILLE = row16.VILLE;
				
				row16_HashRow.DP = row16.DP;
				
				row16_HashRow.DT = row16.DT;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";

	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_7) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_5 - inputs:(row13,row14) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				String driverClass_tDBInput_8 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_8 = java.lang.Class.forName(driverClass_tDBInput_8);
				String dbUser_tDBInput_8 = "";
				
				 
	final String decryptedPassword_tDBInput_8 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:lXAViinFU5Tw4ZpeUPXpHL9mVxXp2UeKu9MuVQ==");
				
				String dbPwd_tDBInput_8 = decryptedPassword_tDBInput_8;
				
		    String port_tDBInput_8 = "1433";
		    String dbname_tDBInput_8 = "HDSHData" ;
			String url_tDBInput_8 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_8)) {
		    	url_tDBInput_8 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_8)) {
				url_tDBInput_8 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_8 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_8 = "";
				
				conn_tDBInput_8 = java.sql.DriverManager.getConnection(url_tDBInput_8,dbUser_tDBInput_8,dbPwd_tDBInput_8);
		        
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row14.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row14.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row14.CD_LOCALI1 = tmpContent_tDBInput_8;
                }
            } else {
                row14.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row14.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(2);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row14.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row14.VILLE = tmpContent_tDBInput_8;
                }
            } else {
                row14.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row14.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(3);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row14.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row14.DP = tmpContent_tDBInput_8;
                }
            } else {
                row14.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 4) {
								row14.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(4);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row14.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row14.DT = tmpContent_tDBInput_8;
                }
            } else {
                row14.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.CD_LOCALI1 = row14.CD_LOCALI1;
				
				row14_HashRow.VILLE = row14.VILLE;
				
				row14_HashRow.DP = row14.DP;
				
				row14_HashRow.DT = row14.DT;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
		if(conn_tDBInput_8 != null && !conn_tDBInput_8.isClosed()) {
			
			conn_tDBInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";

	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_9) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_8 - inputs:(row21,row22) outputs:(out6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_10  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10); 
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "";
				
				 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:tL7bnuXjE2tWgkFRfqMqODB8nA6VxQEd7+4u/g==");
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
		    String port_tDBInput_10 = "1433";
		    String dbname_tDBInput_10 = "HDSHData" ;
			String url_tDBInput_10 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_10)) {
		    	url_tDBInput_10 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_10)) {
				url_tDBInput_10 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_10 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_10 = "";
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row22.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row22.CD_LOCALI1 = tmpContent_tDBInput_10;
                }
            } else {
                row22.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row22.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(2);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row22.VILLE = tmpContent_tDBInput_10;
                }
            } else {
                row22.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row22.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(3);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row22.DP = tmpContent_tDBInput_10;
                }
            } else {
                row22.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row22.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(4);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row22.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row22.DT = tmpContent_tDBInput_10;
                }
            } else {
                row22.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.CD_LOCALI1 = row22.CD_LOCALI1;
				
				row22_HashRow.VILLE = row22.VILLE;
				
				row22_HashRow.DP = row22.DP;
				
				row22_HashRow.DT = row22.DT;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
		if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
			
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);

 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableComparableLookupRow<row25Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row25Struct other = (row25Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row25Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row25Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tAdvancedHash_row25 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row25", false);
		start_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tAdvancedHash_row25 = 0;
		

			   		// connection name:row25
			   		// source node:tDBInput_12 - inputs:(after_tDBInput_11) outputs:(row25,row25) | target node:tAdvancedHash_row25 - inputs:(row25) outputs:()
			   		// linked node: tMap_10 - inputs:(row24,row25) outputs:(copyOfout6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row25 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row25Struct> tHash_Lookup_row25 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row25Struct>getLookup(matchingModeEnum_row25);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row25", tHash_Lookup_row25);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row25 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_12 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_12 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_12  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_12, talendToDBArray_tDBInput_12); 
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = "";
				
				 
	final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:/r344GDvUbpiZVUifbBbgeDbcbMbe57v/83B2g==");
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
		    String port_tDBInput_12 = "1433";
		    String dbname_tDBInput_12 = "HDSHData" ;
			String url_tDBInput_12 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_12)) {
		    	url_tDBInput_12 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_12)) {
				url_tDBInput_12 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_12 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_12 = "";
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row25.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(1);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row25.CD_LOCALI1 = tmpContent_tDBInput_12;
                }
            } else {
                row25.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row25.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(2);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row25.VILLE = tmpContent_tDBInput_12;
                }
            } else {
                row25.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row25.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(3);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row25.DP = tmpContent_tDBInput_12;
                }
            } else {
                row25.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row25.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(4);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row25.DT = tmpContent_tDBInput_12;
                }
            } else {
                row25.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					


			   
			   

					row25Struct row25_HashRow = new row25Struct();
		   	   	   
				
				row25_HashRow.CD_LOCALI1 = row25.CD_LOCALI1;
				
				row25_HashRow.VILLE = row25.VILLE;
				
				row25_HashRow.DP = row25.DP;
				
				row25_HashRow.DT = row25.DT;
				
			tHash_Lookup_row25.put(row25_HashRow);
			
            




 


	tos_count_tAdvancedHash_row25++;

/**
 * [tAdvancedHash_row25 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row25 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
		if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
			
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);

 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

tHash_Lookup_row25.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row25", true);
end_Hash.put("tAdvancedHash_row25", System.currentTimeMillis());




/**
 * [tAdvancedHash_row25 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row25 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row25";

	

 



/**
 * [tAdvancedHash_row25 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableComparableLookupRow<row31Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row31Struct other = (row31Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row31Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row31Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1.length == 0) {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1 = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_RECOUVREMENT_SOCPROP_1) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tAdvancedHash_row31 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row31", false);
		start_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tAdvancedHash_row31 = 0;
		

			   		// connection name:row31
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_13) outputs:(row31,row31) | target node:tAdvancedHash_row31 - inputs:(row31) outputs:()
			   		// linked node: tMap_12 - inputs:(row28,row31) outputs:(copyOfcopyOfout6)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row31 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row31Struct> tHash_Lookup_row31 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row31Struct>getLookup(matchingModeEnum_row31);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row31", tHash_Lookup_row31);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row31 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_14 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_14  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_14, talendToDBArray_tDBInput_14); 
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = "";
				
				 
	final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:mkRbcs6nW/LShaP2VieT24UfK7BVDM132y1aqg==");
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
		    String port_tDBInput_14 = "1433";
		    String dbname_tDBInput_14 = "HDSHData" ;
			String url_tDBInput_14 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_14)) {
		    	url_tDBInput_14 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_14)) {
				url_tDBInput_14 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_14 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_14 = "";
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row31.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(1);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row31.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row31.CD_LOCALI1 = tmpContent_tDBInput_14;
                }
            } else {
                row31.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row31.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(2);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row31.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row31.VILLE = tmpContent_tDBInput_14;
                }
            } else {
                row31.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row31.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(3);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row31.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row31.DP = tmpContent_tDBInput_14;
                }
            } else {
                row31.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row31.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(4);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row31.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row31.DT = tmpContent_tDBInput_14;
                }
            } else {
                row31.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					


			   
			   

					row31Struct row31_HashRow = new row31Struct();
		   	   	   
				
				row31_HashRow.CD_LOCALI1 = row31.CD_LOCALI1;
				
				row31_HashRow.VILLE = row31.VILLE;
				
				row31_HashRow.DP = row31.DP;
				
				row31_HashRow.DT = row31.DT;
				
			tHash_Lookup_row31.put(row31_HashRow);
			
            




 


	tos_count_tAdvancedHash_row31++;

/**
 * [tAdvancedHash_row31 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row31 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
		if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
			
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);

 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

tHash_Lookup_row31.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row31", true);
end_Hash.put("tAdvancedHash_row31", System.currentTimeMillis());




/**
 * [tAdvancedHash_row31 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row31 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row31";

	

 



/**
 * [tAdvancedHash_row31 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "BAGNEUX";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MV_DP_RECOUVREMENT_SOCPROP_1 MV_DP_RECOUVREMENT_SOCPROP_1Class = new MV_DP_RECOUVREMENT_SOCPROP_1();

        int exitCode = MV_DP_RECOUVREMENT_SOCPROP_1Class.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MV_DP_RECOUVREMENT_SOCPROP_1.class.getClassLoader().getResourceAsStream("happi/mv_dp_recouvrement_socprop_1_0_3/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MV_DP_RECOUVREMENT_SOCPROP_1.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Nom", "id_String");
                            context.Nom=(String) context.getProperty("Nom");
                        context.setContextType("Mail1", "id_String");
                            context.Mail1=(String) context.getProperty("Mail1");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Nom")) {
                context.Nom = (String) parentContextMap.get("Nom");
            }if (parentContextMap.containsKey("Mail1")) {
                context.Mail1 = (String) parentContextMap.get("Mail1");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileCopy_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileCopy_1) {
globalMap.put("tFileCopy_1_SUBPROCESS_STATE", -1);

e_tFileCopy_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MV_DP_RECOUVREMENT_SOCPROP_1");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     708820 characters generated by Talend Open Studio for Data Integration 
 *     on the 6 février 2023 08:57:42 CET
 ************************************************************************************************/