// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.mv_dp_vacance_autre_mot_vac_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: MV_DP_VACANCE_AUTRE_MOT_VAC Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class MV_DP_VACANCE_AUTRE_MOT_VAC implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(Nom != null){
				
					this.setProperty("Nom", Nom.toString());
				
			}
			
		}

public String Nom;
public String getNom(){
	return this.Nom;
}
	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "MV_DP_VACANCE_AUTRE_MOT_VAC";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				MV_DP_VACANCE_AUTRE_MOT_VAC.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(MV_DP_VACANCE_AUTRE_MOT_VAC.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileCopy_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileCopy_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSampleRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row32_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row45_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_2_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_2_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_2_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_8_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_8_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_8_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_3_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_3_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_3_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_4_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_4_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_4_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_9_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_9_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_9_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_5_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_5_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_5_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_6_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_6_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_6_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileCopy_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:oRiCUFoSEYInHgDy+L0HlxdfsSDiCCgRanywrg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());




/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFileCopy_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFileCopy_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileCopy_1", false);
		start_Hash.put("tFileCopy_1", System.currentTimeMillis());
		
	
	currentComponent="tFileCopy_1";

	
		int tos_count_tFileCopy_1 = 0;
		

 



/**
 * [tFileCopy_1 begin ] stop
 */
	
	/**
	 * [tFileCopy_1 main ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 


        String srcFileName_tFileCopy_1 = "S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/05 - Template/MV/DP/VACANCE.xlsx";

		java.io.File srcFile_tFileCopy_1 = new java.io.File(srcFileName_tFileCopy_1);

		// here need check first, before mkdirs().
		if (!srcFile_tFileCopy_1.exists() || !srcFile_tFileCopy_1.isFile()) {
			String errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1 = String.format("The source File \"%s\" does not exist or is not a file.", srcFileName_tFileCopy_1);
				System.err.println(errorMessageFileDoesnotExistsOrIsNotAFile_tFileCopy_1);
		}
        String desDirName_tFileCopy_1 = "C:/MV";

		String desFileName_tFileCopy_1 =  "MV_DP " + context.Nom +"_Vacance_" + TalendDate.getDate("CCYYMMDD") +".xlsx" ;

		if (desFileName_tFileCopy_1 != null && ("").equals(desFileName_tFileCopy_1.trim())){
			desFileName_tFileCopy_1 = "NewName.temp";
		}

		java.io.File desFile_tFileCopy_1 = new java.io.File(desDirName_tFileCopy_1, desFileName_tFileCopy_1);

		if (!srcFile_tFileCopy_1.getPath().equals(desFile_tFileCopy_1.getPath())  ) {
				java.io.File parentFile_tFileCopy_1 = desFile_tFileCopy_1.getParentFile();

				if (parentFile_tFileCopy_1 != null && !parentFile_tFileCopy_1.exists()) {
					parentFile_tFileCopy_1.mkdirs();
				}           
				try {
					org.talend.FileCopy.copyFile(srcFile_tFileCopy_1.getPath(), desFile_tFileCopy_1.getPath(), false);
				} catch (Exception e) {
						System.err.println("tFileCopy_1 " + e.getMessage());
				}

		}
		globalMap.put("tFileCopy_1_DESTINATION_FILEPATH",desFile_tFileCopy_1.getPath()); 
		globalMap.put("tFileCopy_1_DESTINATION_FILENAME",desFile_tFileCopy_1.getName()); 

		globalMap.put("tFileCopy_1_SOURCE_DIRECTORY", srcFile_tFileCopy_1.getParent());
		globalMap.put("tFileCopy_1_DESTINATION_DIRECTORY", desFile_tFileCopy_1.getParent());        
        

 


	tos_count_tFileCopy_1++;

/**
 * [tFileCopy_1 main ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileCopy_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 process_data_end ] stop
 */
	
	/**
	 * [tFileCopy_1 end ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 

ok_Hash.put("tFileCopy_1", true);
end_Hash.put("tFileCopy_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tFileCopy_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileCopy_1 finally ] start
	 */

	

	
	
	currentComponent="tFileCopy_1";

	

 



/**
 * [tFileCopy_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileCopy_1_SUBPROCESS_STATE", 1);
	}
	


public static class sortie_finalStruct implements routines.system.IPersistableRow<sortie_finalStruct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date Maj;

				public java.util.Date getMaj () {
					return this.Maj;
				}
				
			    public Float TxVacLgt;

				public Float getTxVacLgt () {
					return this.TxVacLgt;
				}
				
			    public Float TxVacPark;

				public Float getTxVacPark () {
					return this.TxVacPark;
				}
				
			    public Float TxVacLgtM1;

				public Float getTxVacLgtM1 () {
					return this.TxVacLgtM1;
				}
				
			    public Float TxVacParkM1;

				public Float getTxVacParkM1 () {
					return this.TxVacParkM1;
				}
				
			    public Integer ObjLgt;

				public Integer getObjLgt () {
					return this.ObjLgt;
				}
				
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				
			    public Float TxRemplissage;

				public Float getTxRemplissage () {
					return this.TxRemplissage;
				}
				
			    public int LocatairePotentiel;

				public int getLocatairePotentiel () {
					return this.LocatairePotentiel;
				}
				
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public int SQUATT;

				public int getSQUATT () {
					return this.SQUATT;
				}
				
			    public int SINISTRE;

				public int getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public int IMPRODUCTIF;

				public int getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public int ACCESSION;

				public int getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.Maj = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxVacLgt = null;
           				} else {
           			    	this.TxVacLgt = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxVacPark = null;
           				} else {
           			    	this.TxVacPark = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxVacLgtM1 = null;
           				} else {
           			    	this.TxVacLgtM1 = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxVacParkM1 = null;
           				} else {
           			    	this.TxVacParkM1 = dis.readFloat();
           				}
					
						this.ObjLgt = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxRemplissage = null;
           				} else {
           			    	this.TxRemplissage = dis.readFloat();
           				}
					
			        this.LocatairePotentiel = dis.readInt();
					
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
			        this.SQUATT = dis.readInt();
					
			        this.SINISTRE = dis.readInt();
					
			        this.IMPRODUCTIF = dis.readInt();
					
			        this.ACCESSION = dis.readInt();
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.Maj,dos);
					
					// Float
				
						if(this.TxVacLgt == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxVacLgt);
		            	}
					
					// Float
				
						if(this.TxVacPark == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxVacPark);
		            	}
					
					// Float
				
						if(this.TxVacLgtM1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxVacLgtM1);
		            	}
					
					// Float
				
						if(this.TxVacParkM1 == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxVacParkM1);
		            	}
					
					// Integer
				
						writeInteger(this.ObjLgt,dos);
					
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
					// Float
				
						if(this.TxRemplissage == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxRemplissage);
		            	}
					
					// int
				
		            	dos.writeInt(this.LocatairePotentiel);
					
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// int
				
		            	dos.writeInt(this.SQUATT);
					
					// int
				
		            	dos.writeInt(this.SINISTRE);
					
					// int
				
		            	dos.writeInt(this.IMPRODUCTIF);
					
					// int
				
		            	dos.writeInt(this.ACCESSION);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Maj="+String.valueOf(Maj));
		sb.append(",TxVacLgt="+String.valueOf(TxVacLgt));
		sb.append(",TxVacPark="+String.valueOf(TxVacPark));
		sb.append(",TxVacLgtM1="+String.valueOf(TxVacLgtM1));
		sb.append(",TxVacParkM1="+String.valueOf(TxVacParkM1));
		sb.append(",ObjLgt="+String.valueOf(ObjLgt));
		sb.append(",PerteFi="+String.valueOf(PerteFi));
		sb.append(",TxRemplissage="+String.valueOf(TxRemplissage));
		sb.append(",LocatairePotentiel="+String.valueOf(LocatairePotentiel));
		sb.append(",VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(sortie_finalStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.CD_PATRIM1 = readInteger(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public int VACANT;

				public int getVACANT () {
					return this.VACANT;
				}
				
			    public int REHABILITATION;

				public int getREHABILITATION () {
					return this.REHABILITATION;
				}
				
			    public int RELOGEMENT;

				public int getRELOGEMENT () {
					return this.RELOGEMENT;
				}
				
			    public int TECHNIQUE;

				public int getTECHNIQUE () {
					return this.TECHNIQUE;
				}
				
			    public int DIAGNOSTIC_AMIANTE;

				public int getDIAGNOSTIC_AMIANTE () {
					return this.DIAGNOSTIC_AMIANTE;
				}
				
			    public int TRAVAUX_AMIANTE;

				public int getTRAVAUX_AMIANTE () {
					return this.TRAVAUX_AMIANTE;
				}
				
			    public int ADMINISTRATIF;

				public int getADMINISTRATIF () {
					return this.ADMINISTRATIF;
				}
				
			    public Integer SQUATT;

				public Integer getSQUATT () {
					return this.SQUATT;
				}
				
			    public Integer SINISTRE;

				public Integer getSINISTRE () {
					return this.SINISTRE;
				}
				
			    public Integer IMPRODUCTIF;

				public Integer getIMPRODUCTIF () {
					return this.IMPRODUCTIF;
				}
				
			    public Integer ACCESSION;

				public Integer getACCESSION () {
					return this.ACCESSION;
				}
				
			    public Integer ACQUISITION;

				public Integer getACQUISITION () {
					return this.ACQUISITION;
				}
				
			    public Integer COMMERCIALISATION;

				public Integer getCOMMERCIALISATION () {
					return this.COMMERCIALISATION;
				}
				
			    public Integer LIVRAISON;

				public Integer getLIVRAISON () {
					return this.LIVRAISON;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.CD_PATRIM1 = readInteger(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
			        this.VACANT = dis.readInt();
					
			        this.REHABILITATION = dis.readInt();
					
			        this.RELOGEMENT = dis.readInt();
					
			        this.TECHNIQUE = dis.readInt();
					
			        this.DIAGNOSTIC_AMIANTE = dis.readInt();
					
			        this.TRAVAUX_AMIANTE = dis.readInt();
					
			        this.ADMINISTRATIF = dis.readInt();
					
						this.SQUATT = readInteger(dis);
					
						this.SINISTRE = readInteger(dis);
					
						this.IMPRODUCTIF = readInteger(dis);
					
						this.ACCESSION = readInteger(dis);
					
						this.ACQUISITION = readInteger(dis);
					
						this.COMMERCIALISATION = readInteger(dis);
					
						this.LIVRAISON = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// int
				
		            	dos.writeInt(this.VACANT);
					
					// int
				
		            	dos.writeInt(this.REHABILITATION);
					
					// int
				
		            	dos.writeInt(this.RELOGEMENT);
					
					// int
				
		            	dos.writeInt(this.TECHNIQUE);
					
					// int
				
		            	dos.writeInt(this.DIAGNOSTIC_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.TRAVAUX_AMIANTE);
					
					// int
				
		            	dos.writeInt(this.ADMINISTRATIF);
					
					// Integer
				
						writeInteger(this.SQUATT,dos);
					
					// Integer
				
						writeInteger(this.SINISTRE,dos);
					
					// Integer
				
						writeInteger(this.IMPRODUCTIF,dos);
					
					// Integer
				
						writeInteger(this.ACCESSION,dos);
					
					// Integer
				
						writeInteger(this.ACQUISITION,dos);
					
					// Integer
				
						writeInteger(this.COMMERCIALISATION,dos);
					
					// Integer
				
						writeInteger(this.LIVRAISON,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VACANT="+String.valueOf(VACANT));
		sb.append(",REHABILITATION="+String.valueOf(REHABILITATION));
		sb.append(",RELOGEMENT="+String.valueOf(RELOGEMENT));
		sb.append(",TECHNIQUE="+String.valueOf(TECHNIQUE));
		sb.append(",DIAGNOSTIC_AMIANTE="+String.valueOf(DIAGNOSTIC_AMIANTE));
		sb.append(",TRAVAUX_AMIANTE="+String.valueOf(TRAVAUX_AMIANTE));
		sb.append(",ADMINISTRATIF="+String.valueOf(ADMINISTRATIF));
		sb.append(",SQUATT="+String.valueOf(SQUATT));
		sb.append(",SINISTRE="+String.valueOf(SINISTRE));
		sb.append(",IMPRODUCTIF="+String.valueOf(IMPRODUCTIF));
		sb.append(",ACCESSION="+String.valueOf(ACCESSION));
		sb.append(",ACQUISITION="+String.valueOf(ACQUISITION));
		sb.append(",COMMERCIALISATION="+String.valueOf(COMMERCIALISATION));
		sb.append(",LIVRAISON="+String.valueOf(LIVRAISON));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);
		tDBInput_5Process(globalMap);
		tDBInput_6Process(globalMap);
		tDBInput_7Process(globalMap);

		row4Struct row4 = new row4Struct();
out1Struct out1 = new out1Struct();
row6Struct row6 = new row6Struct();
row7Struct row7 = new row7Struct();
sortie_finalStruct sortie_final = new sortie_finalStruct();






	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

         			int VACANT_sum;
         			int REHABILITATION_sum;
         			int RELOGEMENT_sum;
         			int TECHNIQUE_sum;
         			int DIAGNOSTIC_AMIANTE_sum;
         			int TRAVAUX_AMIANTE_sum;
         			int ADMINISTRATIF_sum;
         			Integer SQUATT_sum;
         			Integer SINISTRE_sum;
         			Integer IMPRODUCTIF_sum;
         			Integer ACCESSION_sum;
         			Integer ACQUISITION_sum;
         			Integer COMMERCIALISATION_sum;
         			Integer LIVRAISON_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String DP;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT\n*\nFROM\n(\n	select \n	UPPER(MOTIF_VAC) as MOTIF_VAC,\n	CD_PATRIM,\n	CD_PATRIM1,\n	CD_LOCALI1\n	from\n	SID_PATR"
+"IMOINE_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCALI1\n	where s.DT_ANNEE = datepart(year, dateadd(m"
+"m, -1, GETDATE()))\n	and s.DT_MOIS = datepart(month, dateadd(mm, -1, GETDATE()))\n    AND CD_SOCPROP = 1\n	--and param.D"
+"P = 'BAGNEUX'\n	and SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') \n	and MO"
+"TIF_VAC <> 'Non Renseigné'\n	and CD_PATRIM4 <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00:00:00'}\n	OR"
+" DTF_PAT_G > DATE)\n	AND DTD_PAT_G <= DATE\n) as SRC\nPIVOT 	\n(\n	count(CD_PATRIM)\n	FOR MOTIF_VAC in (\n		[VACANT],\n	"
+"	[VACANT REHABILITATION],\n		[VACANT OPERATIONS RELOGEMENT],\n		[VACANT TECHNIQUE],\n		[VACANT DIAGNOSTIC AMIANTE],\n		["
+"VACANT TRAVAUX  AMIANTE],\n		[VACANT ADMINISTRATIF],\n		[VACANT SQUATT],\n		[VACANT SINISTRE],\n		[VACANT IMPRODUCTIF],"
+"\n		[VACANT ACCESSION],\n		[VACANT ACQUISITION],\n		[VACANT COMMERCIALISATION],\n		[VACANT LIVRAISON])\n) as PVT\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row4.CD_PATRIM1 = null;
							} else {
		                          
            row4.CD_PATRIM1 = rs_tDBInput_1.getInt(1);
            if(rs_tDBInput_1.wasNull()){
                    row4.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row4.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row4.CD_LOCALI1 = tmpContent_tDBInput_1.trim();
                }
            } else {
                row4.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row4.VACANT = 0;
							} else {
		                          
            row4.VACANT = rs_tDBInput_1.getInt(3);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row4.REHABILITATION = 0;
							} else {
		                          
            row4.REHABILITATION = rs_tDBInput_1.getInt(4);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row4.RELOGEMENT = 0;
							} else {
		                          
            row4.RELOGEMENT = rs_tDBInput_1.getInt(5);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row4.TECHNIQUE = 0;
							} else {
		                          
            row4.TECHNIQUE = rs_tDBInput_1.getInt(6);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row4.DIAGNOSTIC_AMIANTE = 0;
							} else {
		                          
            row4.DIAGNOSTIC_AMIANTE = rs_tDBInput_1.getInt(7);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row4.TRAVAUX_AMIANTE = 0;
							} else {
		                          
            row4.TRAVAUX_AMIANTE = rs_tDBInput_1.getInt(8);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row4.ADMINISTRATIF = 0;
							} else {
		                          
            row4.ADMINISTRATIF = rs_tDBInput_1.getInt(9);
            if(rs_tDBInput_1.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row4.SQUATT = null;
							} else {
		                          
            row4.SQUATT = rs_tDBInput_1.getInt(10);
            if(rs_tDBInput_1.wasNull()){
                    row4.SQUATT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row4.SINISTRE = null;
							} else {
		                          
            row4.SINISTRE = rs_tDBInput_1.getInt(11);
            if(rs_tDBInput_1.wasNull()){
                    row4.SINISTRE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row4.IMPRODUCTIF = null;
							} else {
		                          
            row4.IMPRODUCTIF = rs_tDBInput_1.getInt(12);
            if(rs_tDBInput_1.wasNull()){
                    row4.IMPRODUCTIF = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row4.ACCESSION = null;
							} else {
		                          
            row4.ACCESSION = rs_tDBInput_1.getInt(13);
            if(rs_tDBInput_1.wasNull()){
                    row4.ACCESSION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row4.ACQUISITION = null;
							} else {
		                          
            row4.ACQUISITION = rs_tDBInput_1.getInt(14);
            if(rs_tDBInput_1.wasNull()){
                    row4.ACQUISITION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row4.COMMERCIALISATION = null;
							} else {
		                          
            row4.COMMERCIALISATION = rs_tDBInput_1.getInt(15);
            if(rs_tDBInput_1.wasNull()){
                    row4.COMMERCIALISATION = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row4.LIVRAISON = null;
							} else {
		                          
            row4.LIVRAISON = rs_tDBInput_1.getInt(16);
            if(rs_tDBInput_1.wasNull()){
                    row4.LIVRAISON = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row9HashKey.CD_LOCALI1 = row4.CD_LOCALI1 ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.CD_LOCALI1 = '" + row9HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row9Struct row9 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.DP = row9.DP != null ?
	(row9.DP.equals("SURESNES") ?
		(row4.CD_PATRIM1 == 3023 
		|| row4.CD_PATRIM1 == 3800
		|| row4.CD_PATRIM1 == 3804
		|| row4.CD_PATRIM1 == 3801
		|| row4.CD_PATRIM1 == 3802
		|| row4.CD_PATRIM1 == 3806
		|| row4.CD_PATRIM1 == 3024
		|| row4.CD_PATRIM1 == 3025
		|| row4.CD_PATRIM1 == 3701
		|| row4.CD_PATRIM1 == 3027
		|| row4.CD_PATRIM1 == 11013
		|| row4.CD_PATRIM1 == 11022
		|| row4.CD_PATRIM1 == 3803 
		|| row4.CD_PATRIM1 == 3700
		|| row4.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row9.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.VACANT = row4.VACANT ;
out1_tmp.REHABILITATION = row4.REHABILITATION ;
out1_tmp.RELOGEMENT = row4.RELOGEMENT ;
out1_tmp.TECHNIQUE = row4.TECHNIQUE ;
out1_tmp.DIAGNOSTIC_AMIANTE = row4.DIAGNOSTIC_AMIANTE ;
out1_tmp.TRAVAUX_AMIANTE = row4.TRAVAUX_AMIANTE ;
out1_tmp.ADMINISTRATIF = row4.ADMINISTRATIF ;
out1_tmp.SQUATT = row4.SQUATT ;
out1_tmp.SINISTRE = row4.SINISTRE ;
out1_tmp.IMPRODUCTIF = row4.IMPRODUCTIF ;
out1_tmp.ACCESSION = row4.ACCESSION ;
out1_tmp.ACQUISITION = row4.ACQUISITION ;
out1_tmp.COMMERCIALISATION = row4.COMMERCIALISATION ;
out1_tmp.LIVRAISON = row4.LIVRAISON ;
out1_tmp.DP = Var.DP ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					

          row6 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((out1.DP == null? false : out1.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row6 == null){ 
                row6 = new row6Struct();
              }
               row6.VACANT = out1.VACANT;
               row6.REHABILITATION = out1.REHABILITATION;
               row6.RELOGEMENT = out1.RELOGEMENT;
               row6.TECHNIQUE = out1.TECHNIQUE;
               row6.DIAGNOSTIC_AMIANTE = out1.DIAGNOSTIC_AMIANTE;
               row6.TRAVAUX_AMIANTE = out1.TRAVAUX_AMIANTE;
               row6.ADMINISTRATIF = out1.ADMINISTRATIF;
               row6.SQUATT = out1.SQUATT;
               row6.SINISTRE = out1.SINISTRE;
               row6.IMPRODUCTIF = out1.IMPRODUCTIF;
               row6.ACCESSION = out1.ACCESSION;
               row6.ACQUISITION = out1.ACQUISITION;
               row6.COMMERCIALISATION = out1.COMMERCIALISATION;
               row6.LIVRAISON = out1.LIVRAISON;
               row6.DP = out1.DP;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					
	


	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
						operation_result_tAggregateRow_1.VACANT_sum += row6.VACANT;
					
						operation_result_tAggregateRow_1.REHABILITATION_sum += row6.REHABILITATION;
					
						operation_result_tAggregateRow_1.RELOGEMENT_sum += row6.RELOGEMENT;
					
						operation_result_tAggregateRow_1.TECHNIQUE_sum += row6.TECHNIQUE;
					
						operation_result_tAggregateRow_1.DIAGNOSTIC_AMIANTE_sum += row6.DIAGNOSTIC_AMIANTE;
					
						operation_result_tAggregateRow_1.TRAVAUX_AMIANTE_sum += row6.TRAVAUX_AMIANTE;
					
						operation_result_tAggregateRow_1.ADMINISTRATIF_sum += row6.ADMINISTRATIF;
					
					if(operation_result_tAggregateRow_1.SQUATT_sum == null) {
						operation_result_tAggregateRow_1.SQUATT_sum = (int) 0;
					}
					
					if( row6.SQUATT != null)
						operation_result_tAggregateRow_1.SQUATT_sum += row6.SQUATT;
					if(operation_result_tAggregateRow_1.SINISTRE_sum == null) {
						operation_result_tAggregateRow_1.SINISTRE_sum = (int) 0;
					}
					
					if( row6.SINISTRE != null)
						operation_result_tAggregateRow_1.SINISTRE_sum += row6.SINISTRE;
					if(operation_result_tAggregateRow_1.IMPRODUCTIF_sum == null) {
						operation_result_tAggregateRow_1.IMPRODUCTIF_sum = (int) 0;
					}
					
					if( row6.IMPRODUCTIF != null)
						operation_result_tAggregateRow_1.IMPRODUCTIF_sum += row6.IMPRODUCTIF;
					if(operation_result_tAggregateRow_1.ACCESSION_sum == null) {
						operation_result_tAggregateRow_1.ACCESSION_sum = (int) 0;
					}
					
					if( row6.ACCESSION != null)
						operation_result_tAggregateRow_1.ACCESSION_sum += row6.ACCESSION;
					if(operation_result_tAggregateRow_1.ACQUISITION_sum == null) {
						operation_result_tAggregateRow_1.ACQUISITION_sum = (int) 0;
					}
					
					if( row6.ACQUISITION != null)
						operation_result_tAggregateRow_1.ACQUISITION_sum += row6.ACQUISITION;
					if(operation_result_tAggregateRow_1.COMMERCIALISATION_sum == null) {
						operation_result_tAggregateRow_1.COMMERCIALISATION_sum = (int) 0;
					}
					
					if( row6.COMMERCIALISATION != null)
						operation_result_tAggregateRow_1.COMMERCIALISATION_sum += row6.COMMERCIALISATION;
					if(operation_result_tAggregateRow_1.LIVRAISON_sum == null) {
						operation_result_tAggregateRow_1.LIVRAISON_sum = (int) 0;
					}
					
					if( row6.LIVRAISON != null)
						operation_result_tAggregateRow_1.LIVRAISON_sum += row6.LIVRAISON;


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"sortie_final");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/MV/MV_DP " + context.Nom +"_Vacance_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("DATA VACANCE");
		xlsxTool_tFileOutputExcel_1.setAppend(true,true);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_1.setXY(true,0,1,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct>) 
					globalMap.get( "tHash_Lookup_row12" ))
					;					
					
	
		tHash_Lookup_row12.initGet();
	

row12Struct row12HashKey = new row12Struct();
row12Struct row12Default = new row12Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	
		tHash_Lookup_row22.initGet();
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	
		tHash_Lookup_row23.initGet();
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) 
					globalMap.get( "tHash_Lookup_row24" ))
					;					
					
	
		tHash_Lookup_row24.initGet();
	

row24Struct row24HashKey = new row24Struct();
row24Struct row24Default = new row24Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	
		tHash_Lookup_row29.initGet();
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	int Restant;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
sortie_finalStruct sortie_final_tmp = new sortie_finalStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	
row7.VACANT = aggregated_row_tAggregateRow_1.VACANT_sum;
                                	row7.REHABILITATION = aggregated_row_tAggregateRow_1.REHABILITATION_sum;
                                	row7.RELOGEMENT = aggregated_row_tAggregateRow_1.RELOGEMENT_sum;
                                	row7.TECHNIQUE = aggregated_row_tAggregateRow_1.TECHNIQUE_sum;
                                	row7.DIAGNOSTIC_AMIANTE = aggregated_row_tAggregateRow_1.DIAGNOSTIC_AMIANTE_sum;
                                	row7.TRAVAUX_AMIANTE = aggregated_row_tAggregateRow_1.TRAVAUX_AMIANTE_sum;
                                	row7.ADMINISTRATIF = aggregated_row_tAggregateRow_1.ADMINISTRATIF_sum;
                                	row7.SQUATT = aggregated_row_tAggregateRow_1.SQUATT_sum;
                                	row7.SINISTRE = aggregated_row_tAggregateRow_1.SINISTRE_sum;
                                	row7.IMPRODUCTIF = aggregated_row_tAggregateRow_1.IMPRODUCTIF_sum;
                                	row7.ACCESSION = aggregated_row_tAggregateRow_1.ACCESSION_sum;
                                	row7.ACQUISITION = aggregated_row_tAggregateRow_1.ACQUISITION_sum;
                                	row7.COMMERCIALISATION = aggregated_row_tAggregateRow_1.COMMERCIALISATION_sum;
                                	row7.LIVRAISON = aggregated_row_tAggregateRow_1.LIVRAISON_sum;
                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_4 = false;
		  boolean mainRowRejected_tMap_4 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row12" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow12 = false;
       		  	    	
       		  	    	
 							row12Struct row12ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row12.lookup( row12HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row12.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow12 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow12 = true;
			           		  	} // G 21
                    		  	
                    		

							row12Struct row12 = null;
                    		  	 
							

								while ((tHash_Lookup_row12 != null && tHash_Lookup_row12.hasNext()) || forceLooprow12) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row12'
									
                    		  	 
							   
                    		  	 
	       		  	    	row12Struct fromLookup_row12 = null;
							row12 = row12Default;
										 
							
								
								if(!forceLooprow12) { // G 46
								
							
								 
							
								
								fromLookup_row12 = tHash_Lookup_row12.next();

							

							if(fromLookup_row12 != null) {
								row12 = fromLookup_row12;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow12 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow22 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow22 = true;
			           		  	} // G 21
                    		  	
                    		

							row22Struct row22 = null;
                    		  	 
							

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) || forceLooprow22) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row22'
									
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								
								if(!forceLooprow22) { // G 46
								
							
								 
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow22 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row23.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow23 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow23 = true;
			           		  	} // G 21
                    		  	
                    		

							row23Struct row23 = null;
                    		  	 
							

								while ((tHash_Lookup_row23 != null && tHash_Lookup_row23.hasNext()) || forceLooprow23) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row23'
									
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								
								if(!forceLooprow23) { // G 46
								
							
								 
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow23 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row24" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow24 = false;
       		  	    	
       		  	    	
 							row24Struct row24ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row24.lookup( row24HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row24.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow24 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow24 = true;
			           		  	} // G 21
                    		  	
                    		

							row24Struct row24 = null;
                    		  	 
							

								while ((tHash_Lookup_row24 != null && tHash_Lookup_row24.hasNext()) || forceLooprow24) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row24'
									
                    		  	 
							   
                    		  	 
	       		  	    	row24Struct fromLookup_row24 = null;
							row24 = row24Default;
										 
							
								
								if(!forceLooprow24) { // G 46
								
							
								 
							
								
								fromLookup_row24 = tHash_Lookup_row24.next();

							

							if(fromLookup_row24 != null) {
								row24 = fromLookup_row24;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow24 = false;
									 	
							
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow29 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow29 = true;
			           		  	} // G 21
                    		  	
                    		

							row29Struct row29 = null;
                    		  	 
							

								while ((tHash_Lookup_row29 != null && tHash_Lookup_row29.hasNext()) || forceLooprow29) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row29'
									
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								
								if(!forceLooprow29) { // G 46
								
							
								 
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow29 = false;
									 	
							
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.Restant = (row12.NB_VACANT - row12.NB_PAT *2/100  > 0) ?
Math.round(row12.NB_VACANT - row12.NB_PAT *2/100): 0 ;// ###############################
        // ###############################
        // # Output tables

sortie_final = null;


// # Output table : 'sortie_final'
sortie_final_tmp.Maj = row12.MajDATE ;
sortie_final_tmp.TxVacLgt = row12.NB_VACANT / row12.NB_PAT ;
sortie_final_tmp.TxVacPark = row23.NB_VACANT / row23.NB_PAT ;
sortie_final_tmp.TxVacLgtM1 = row22.NB_VACANT / row22.NB_PAT;
sortie_final_tmp.TxVacParkM1 = row24.NB_VACANT / row24.NB_PAT ;
sortie_final_tmp.ObjLgt = Var.Restant ;
sortie_final_tmp.PerteFi = row29.PerteFi;
sortie_final_tmp.TxRemplissage = null;
sortie_final_tmp.LocatairePotentiel = row12.CptVacantPers ;
sortie_final_tmp.VACANT = row7.VACANT;
sortie_final_tmp.REHABILITATION = row7.REHABILITATION;
sortie_final_tmp.RELOGEMENT = row7.RELOGEMENT;
sortie_final_tmp.TECHNIQUE = row7.TECHNIQUE;
sortie_final_tmp.DIAGNOSTIC_AMIANTE = row7.DIAGNOSTIC_AMIANTE;
sortie_final_tmp.TRAVAUX_AMIANTE = row7.TRAVAUX_AMIANTE;
sortie_final_tmp.ADMINISTRATIF = row7.ADMINISTRATIF;
sortie_final_tmp.SQUATT = row7.SQUATT;
sortie_final_tmp.SINISTRE = row7.SINISTRE;
sortie_final_tmp.IMPRODUCTIF = row7.IMPRODUCTIF;
sortie_final_tmp.ACCESSION = row7.ACCESSION;
sortie_final_tmp.ACQUISITION = row7.ACQUISITION ;
sortie_final_tmp.COMMERCIALISATION = row7.COMMERCIALISATION ;
sortie_final_tmp.LIVRAISON = row7.LIVRAISON ;
sortie_final = sortie_final_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "sortie_final"
if(sortie_final != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"sortie_final");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(sortie_final.Maj != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(sortie_final.Maj, "dd/MM/yyyy");
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.TxVacLgt != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TxVacLgt)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.TxVacPark != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TxVacPark)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.TxVacLgtM1 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TxVacLgtM1)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.TxVacParkM1 != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TxVacParkM1)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.ObjLgt != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.ObjLgt)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.PerteFi != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.PerteFi)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.TxRemplissage != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TxRemplissage)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.LocatairePotentiel)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.VACANT)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.REHABILITATION)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.RELOGEMENT)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TECHNIQUE)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.DIAGNOSTIC_AMIANTE)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.TRAVAUX_AMIANTE)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.ADMINISTRATIF)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.SQUATT)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.SINISTRE)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.IMPRODUCTIF)));
									
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.ACCESSION)));
									   				
	    				if(sortie_final.ACQUISITION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.ACQUISITION)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.COMMERCIALISATION != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.COMMERCIALISATION)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(sortie_final.LIVRAISON != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(Double.parseDouble(String.valueOf(sortie_final.LIVRAISON)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "sortie_final"



	
		} // close loop of lookup 'row29' // G_TM_M_043
		
		} // close loop of lookup 'row24' // G_TM_M_043
		
		} // close loop of lookup 'row23' // G_TM_M_043
		
		} // close loop of lookup 'row22' // G_TM_M_043
		
		} // close loop of lookup 'row12' // G_TM_M_043
	
	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row12 != null) {
						tHash_Lookup_row12.endGet();
					}
					globalMap.remove( "tHash_Lookup_row12" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
					if(tHash_Lookup_row24 != null) {
						tHash_Lookup_row24.endGet();
					}
					globalMap.remove( "tHash_Lookup_row24" );

					
					
				
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"sortie_final");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */


















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tDBInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row12"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row24"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";

	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";

	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";

	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_2> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfcopyOfout2_1Struct implements routines.system.IPersistableRow<copyOfcopyOfcopyOfout2_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfcopyOfout2_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_9Struct implements routines.system.IPersistableRow<after_tDBInput_9Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_10Process(globalMap);

		row31Struct row31 = new row31Struct();
copyOfcopyOfcopyOfout2_1Struct copyOfcopyOfcopyOfout2_1 = new copyOfcopyOfcopyOfout2_1Struct();
row30Struct row30 = new row30Struct();
row33Struct row33 = new row33Struct();
row1Struct row1 = new row1Struct();
row34Struct row34 = new row34Struct();
row35Struct row35 = new row35Struct();
row36Struct row36 = new row36Struct();






	
	/**
	 * [tAggregateRow_7_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGOUT", false);
		start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAggregateRow_7_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

	

	class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Integer Groupe;
         			Integer NB_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Groupe == null) ? 0 : this.Groupe.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;
			
							if (this.Groupe == null) {
								if (other.Groupe != null) 
									return false;
							} else if (!this.Groupe.equals(other.Groupe)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
	AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
	java.util.Map<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7>();
	

 



/**
 * [tAggregateRow_7_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_7", false);
		start_Hash.put("tFilterRow_7", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfcopyOfout2_1");
					}
				
		int tos_count_tFilterRow_7 = 0;
		
    int nb_line_tFilterRow_7 = 0;
    int nb_line_ok_tFilterRow_7 = 0;
    int nb_line_reject_tFilterRow_7 = 0;

    class Operator_tFilterRow_7 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_7(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_7 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct>) 
					globalMap.get( "tHash_Lookup_row32" ))
					;					
					
	

row32Struct row32HashKey = new row32Struct();
row32Struct row32Default = new row32Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
	String DP;
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfcopyOfout2_1Struct copyOfcopyOfcopyOfout2_1_tmp = new copyOfcopyOfcopyOfout2_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tDBInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_9", false);
		start_Hash.put("tDBInput_9", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_9";

	
		int tos_count_tDBInput_9 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_9  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9); 
		    int nb_line_tDBInput_9 = 0;
		    java.sql.Connection conn_tDBInput_9 = null;
				conn_tDBInput_9 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_9 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

		    String dbquery_tDBInput_9 = "\nselect \npg.CD_LOCALI1,\npg.CD_PATRIM1 as Groupe,\ncount(*) as NB\nfrom PROPOSITION p \nleft join PATRIMOINE_GIM pg o"
+"n p.CD_PATPRO1 = CD_PATRIM1\n							and p.CD_PATPRO2 = CD_PATRIM2\n							and p.CD_PATPRO3 = CD_PATRIM3\n							and p.CD"
+"_PATPRO4 = CD_PATRIM4\nwhere year(p.DT_REALPRO) = year(getdate())\nand p.LB_ETAT_PR = 'Refusée'\nand pg.LB_NATLOC in ('A"
+"SSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') \nAND CD_SOCPROP = 1\ngroup by pg.CD_LOCALI1,\npg"
+".CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_9_QUERY",dbquery_tDBInput_9);
		    java.sql.ResultSet rs_tDBInput_9 = null;

		    try {
		    	rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
		    	int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

		    String tmpContent_tDBInput_9 = null;
		    
		    
		    while (rs_tDBInput_9.next()) {
		        nb_line_tDBInput_9++;
		        
							if(colQtyInRs_tDBInput_9 < 1) {
								row31.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_9 = rs_tDBInput_9.getString(1);
            if(tmpContent_tDBInput_9 != null) {
            	if (talendToDBList_tDBInput_9 .contains(rsmd_tDBInput_9.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row31.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
            	} else {
                	row31.CD_LOCALI1 = tmpContent_tDBInput_9.trim();
                }
            } else {
                row31.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 2) {
								row31.Groupe = null;
							} else {
		                          
            row31.Groupe = rs_tDBInput_9.getInt(2);
            if(rs_tDBInput_9.wasNull()){
                    row31.Groupe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_9 < 3) {
								row31.NB = null;
							} else {
		                          
            row31.NB = rs_tDBInput_9.getInt(3);
            if(rs_tDBInput_9.wasNull()){
                    row31.NB = null;
            }
		                    }
					





 



/**
 * [tDBInput_9 begin ] stop
 */
	
	/**
	 * [tDBInput_9 main ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 


	tos_count_tDBInput_9++;

/**
 * [tDBInput_9 main ] stop
 */
	
	/**
	 * [tDBInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row31");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_8 = false;
		  boolean mainRowRejected_tMap_8 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row32" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow32 = false;
       		  	    	
       		  	    	
 							row32Struct row32ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row32HashKey.CD_LOCALI1 = row31.CD_LOCALI1 ;
                        		    		

								
		                        	row32HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row32.lookup( row32HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row32 != null && tHash_Lookup_row32.getCount(row32HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row32' and it contains more one result from keys :  row32.CD_LOCALI1 = '" + row32HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row32Struct row32 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row32Struct fromLookup_row32 = null;
							row32 = row32Default;
										 
							
								 
							
							
								if (tHash_Lookup_row32 !=null && tHash_Lookup_row32.hasNext()) { // G 099
								
							
								
								fromLookup_row32 = tHash_Lookup_row32.next();

							
							
								} // G 099
							
							

							if(fromLookup_row32 != null) {
								row32 = fromLookup_row32;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;
Var.DP = row32.DP != null ?
	(row32.DP.equals("SURESNES") ?
		(row31.Groupe == 3023 
		|| row31.Groupe == 3800
		|| row31.Groupe == 3804
		|| row31.Groupe == 3801
		|| row31.Groupe == 3802
		|| row31.Groupe == 3806
		|| row31.Groupe == 3024
		|| row31.Groupe == 3025
		|| row31.Groupe == 3701
		|| row31.Groupe == 3027
		|| row31.Groupe == 11013
		|| row31.Groupe == 11022
		|| row31.Groupe == 3803 
		|| row31.Groupe == 3700
		|| row31.Groupe == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row32.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfcopyOfout2_1 = null;


// # Output table : 'copyOfcopyOfcopyOfout2_1'
copyOfcopyOfcopyOfout2_1_tmp.DP = Var.DP ;
copyOfcopyOfcopyOfout2_1_tmp.Groupe = row31.Groupe ;
copyOfcopyOfcopyOfout2_1_tmp.NB = row31.NB ;
copyOfcopyOfcopyOfout2_1 = copyOfcopyOfcopyOfout2_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfcopyOfout2_1"
if(copyOfcopyOfcopyOfout2_1 != null) { 



	
	/**
	 * [tFilterRow_7 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfcopyOfout2_1");
					}
					

          row30 = null;
    Operator_tFilterRow_7 ope_tFilterRow_7 = new Operator_tFilterRow_7("&&");
            ope_tFilterRow_7.matches((copyOfcopyOfcopyOfout2_1.DP == null? false : copyOfcopyOfcopyOfout2_1.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_7.getMatchFlag()) {
              if(row30 == null){ 
                row30 = new row30Struct();
              }
               row30.DP = copyOfcopyOfcopyOfout2_1.DP;
               row30.Groupe = copyOfcopyOfcopyOfout2_1.Groupe;
               row30.NB = copyOfcopyOfcopyOfout2_1.NB;    
      nb_line_ok_tFilterRow_7++;
    } else {
      nb_line_reject_tFilterRow_7++;
    }

nb_line_tFilterRow_7++;

 


	tos_count_tFilterRow_7++;

/**
 * [tFilterRow_7 main ] stop
 */
	
	/**
	 * [tFilterRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_begin ] stop
 */
// Start of branch "row30"
if(row30 != null) { 



	
	/**
	 * [tAggregateRow_7_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row30");
					}
					
	
operation_finder_tAggregateRow_7.Groupe = row30.Groupe;
			

	operation_finder_tAggregateRow_7.hashCodeDirty = true;
	
	operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

	

	if(operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

		operation_result_tAggregateRow_7.Groupe = operation_finder_tAggregateRow_7.Groupe;
				
		
		

		hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_7.NB_sum == null) {
						operation_result_tAggregateRow_7.NB_sum = (int) 0;
					}
					
					if( row30.NB != null)
						operation_result_tAggregateRow_7.NB_sum += row30.NB;


 


	tos_count_tAggregateRow_7_AGGOUT++;

/**
 * [tAggregateRow_7_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_end ] stop
 */

} // End of branch "row30"




	
	/**
	 * [tFilterRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfcopyOfout2_1"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_9 end ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

	}
}finally{
	if (rs_tDBInput_9 != null) {
		rs_tDBInput_9.close();
	}
	if (stmt_tDBInput_9 != null) {
		stmt_tDBInput_9.close();
	}
}
globalMap.put("tDBInput_9_NB_LINE",nb_line_tDBInput_9);

 

ok_Hash.put("tDBInput_9", true);
end_Hash.put("tDBInput_9", System.currentTimeMillis());




/**
 * [tDBInput_9 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row32 != null) {
						tHash_Lookup_row32.endGet();
					}
					globalMap.remove( "tHash_Lookup_row32" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tFilterRow_7 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	
    globalMap.put("tFilterRow_7_NB_LINE", nb_line_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_OK", nb_line_ok_tFilterRow_7);
    globalMap.put("tFilterRow_7_NB_LINE_REJECT", nb_line_reject_tFilterRow_7);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfcopyOfout2_1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_7", true);
end_Hash.put("tFilterRow_7", System.currentTimeMillis());




/**
 * [tFilterRow_7 end ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_7_AGGOUT", true);
end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGOUT end ] stop
 */



	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow1Struct extends row1Struct implements Comparable<Comparablerow1Struct> {
	
	public int compareTo(Comparablerow1Struct other) {

		if(this.NB == null && other.NB != null){
			return 1;
						
		}else if(this.NB != null && other.NB == null){
			return -1;
						
		}else if(this.NB != null && other.NB != null){
			if(!this.NB.equals(other.NB)){
				return other.NB.compareTo(this.NB);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow1Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow1Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tFilterRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_8", false);
		start_Hash.put("tFilterRow_8", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tFilterRow_8 = 0;
		
    int nb_line_tFilterRow_8 = 0;
    int nb_line_ok_tFilterRow_8 = 0;
    int nb_line_reject_tFilterRow_8 = 0;

    class Operator_tFilterRow_8 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_8(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_8 begin ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGIN", false);
		start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	
		int tos_count_tAggregateRow_7_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7.values();

globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

for(AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600



 



/**
 * [tAggregateRow_7_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

            				    row33.Groupe = aggregated_row_tAggregateRow_7.Groupe;
            				    row33.NB = aggregated_row_tAggregateRow_7.NB_sum;
                                	

 


	tos_count_tAggregateRow_7_AGGIN++;

/**
 * [tAggregateRow_7_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_8 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row33");
					}
					

          row1 = null;
    Operator_tFilterRow_8 ope_tFilterRow_8 = new Operator_tFilterRow_8("&&");
            ope_tFilterRow_8.matches((row33.NB == null? false : row33.NB.compareTo(ParserUtils.parseTo_Integer(String.valueOf(0))) != 0)
                           , "NB.compareTo(0) != 0 failed");
		 	
    
    if (ope_tFilterRow_8.getMatchFlag()) {
              if(row1 == null){ 
                row1 = new row1Struct();
              }
               row1.Groupe = row33.Groupe;
               row1.NB = row33.NB;    
      nb_line_ok_tFilterRow_8++;
    } else {
      nb_line_reject_tFilterRow_8++;
    }

nb_line_tFilterRow_8++;

 


	tos_count_tFilterRow_8++;

/**
 * [tFilterRow_8 main ] stop
 */
	
	/**
	 * [tFilterRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					



	Comparablerow1Struct arrayRowtSortRow_1_SortOut = new Comparablerow1Struct();

	arrayRowtSortRow_1_SortOut.Groupe = row1.Groupe;
	arrayRowtSortRow_1_SortOut.NB = row1.NB;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFilterRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_7_AGGIN", true);
end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGIN end ] stop
 */

	
	/**
	 * [tFilterRow_8 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	
    globalMap.put("tFilterRow_8_NB_LINE", nb_line_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_OK", nb_line_ok_tFilterRow_8);
    globalMap.put("tFilterRow_8_NB_LINE_REJECT", nb_line_reject_tFilterRow_8);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tFilterRow_8", true);
end_Hash.put("tFilterRow_8", System.currentTimeMillis());




/**
 * [tFilterRow_8 end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

row1Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow1Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */



	
	/**
	 * [tSortRow_2_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortOut", false);
		start_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tSortRow_2_SortOut = 0;
		


class Comparablerow35Struct extends row35Struct implements Comparable<Comparablerow35Struct> {
	
	public int compareTo(Comparablerow35Struct other) {

		if(this.NB == null && other.NB != null){
			return -1;
						
		}else if(this.NB != null && other.NB == null){
			return 1;
						
		}else if(this.NB != null && other.NB != null){
			if(!this.NB.equals(other.NB)){
				return this.NB.compareTo(other.NB);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow35Struct> list_tSortRow_2_SortOut = new java.util.ArrayList<Comparablerow35Struct>();


 



/**
 * [tSortRow_2_SortOut begin ] stop
 */



	
	/**
	 * [tSampleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_1", false);
		start_Hash.put("tSampleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tSampleRow_1 = 0;
		

String[] rangetSampleRow_1 = "1..5".split(",");
java.util.Set rangeSettSampleRow_1 = new java.util.HashSet();

Integer nb_line_tSampleRow_1 = 0;

for(int i =0;i<rangetSampleRow_1.length;i++){

	if(rangetSampleRow_1[i].matches("\\d+")){
	
		rangeSettSampleRow_1 .add(Integer.valueOf(rangetSampleRow_1[i]));
		
	}else if(rangetSampleRow_1[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_1= rangetSampleRow_1[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_1[0]).intValue();j<Integer.valueOf(edgetSampleRow_1[1]).intValue()+1;j++){			
			rangeSettSampleRow_1 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_1 begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	
		int tos_count_tSortRow_1_SortIn = 0;
		


row1Struct[] array_tSortRow_1_SortIn = (row1Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row1Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row34.Groupe = current_tSortRow_1_SortIn.Groupe;
	row34.NB = current_tSortRow_1_SortIn.NB;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_1 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row34");
					}
					

	
	nb_line_tSampleRow_1++;
	
 	if(!rangeSettSampleRow_1.contains(nb_line_tSampleRow_1)){        
            row35 = null;            	
 	}else{  	
 	   row35 = new row35Struct();
 	   

       row35.Groupe = row34.Groupe;
       

       row35.NB = row34.NB;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_1++;

/**
 * [tSampleRow_1 main ] stop
 */
	
	/**
	 * [tSampleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tSortRow_2_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row35");
					}
					



	Comparablerow35Struct arrayRowtSortRow_2_SortOut = new Comparablerow35Struct();

	arrayRowtSortRow_2_SortOut.Groupe = row35.Groupe;
	arrayRowtSortRow_2_SortOut.NB = row35.NB;	
	list_tSortRow_2_SortOut.add(arrayRowtSortRow_2_SortOut);

 


	tos_count_tSortRow_2_SortOut++;

/**
 * [tSortRow_2_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tSampleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tSampleRow_1 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tSampleRow_1", true);
end_Hash.put("tSampleRow_1", System.currentTimeMillis());




/**
 * [tSampleRow_1 end ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

row35Struct[] array_tSortRow_2_SortOut = list_tSortRow_2_SortOut.toArray(new Comparablerow35Struct[0]);

java.util.Arrays.sort(array_tSortRow_2_SortOut);

globalMap.put("tSortRow_2",array_tSortRow_2_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tSortRow_2_SortOut", true);
end_Hash.put("tSortRow_2_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_2_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/MV/MV_DP " + context.Nom +"_Vacance_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("DATA VACANCE");
		xlsxTool_tFileOutputExcel_2.setAppend(true,true);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_2.setXY(true,0,18,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_2_SortIn", false);
		start_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	
		int tos_count_tSortRow_2_SortIn = 0;
		


row35Struct[] array_tSortRow_2_SortIn = (row35Struct[]) globalMap.remove("tSortRow_2");

int nb_line_tSortRow_2_SortIn = 0;

row35Struct current_tSortRow_2_SortIn = null;

for(int i_tSortRow_2_SortIn = 0; i_tSortRow_2_SortIn < array_tSortRow_2_SortIn.length; i_tSortRow_2_SortIn++){
	current_tSortRow_2_SortIn = array_tSortRow_2_SortIn[i_tSortRow_2_SortIn];
	row36.Groupe = current_tSortRow_2_SortIn.Groupe;
	row36.NB = current_tSortRow_2_SortIn.NB;
	// increase number of line sorted
	nb_line_tSortRow_2_SortIn++;

 



/**
 * [tSortRow_2_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 


	tos_count_tSortRow_2_SortIn++;

/**
 * [tSortRow_2_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row36");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row36.Groupe != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(row36.Groupe)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row36.NB != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(Double.parseDouble(String.valueOf(row36.NB)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_2_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_2_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	


}

globalMap.put("tSortRow_2_SortIn_NB_LINE",nb_line_tSortRow_2_SortIn);

 

ok_Hash.put("tSortRow_2_SortIn", true);
end_Hash.put("tSortRow_2_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_2_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */

































				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tDBInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_2_SortIn"
							globalMap.remove("tSortRow_2");
						
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
							//free memory for "tAggregateRow_7_AGGIN"
							globalMap.remove("tAggregateRow_7");
						
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row32"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_9 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_9";

	

 



/**
 * [tDBInput_9 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";

	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tFilterRow_7 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_7";

	

 



/**
 * [tFilterRow_7 finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";

	

 



/**
 * [tAggregateRow_7_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";

	

 



/**
 * [tAggregateRow_7_AGGIN finally ] stop
 */

	
	/**
	 * [tFilterRow_8 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_8";

	

 



/**
 * [tFilterRow_8 finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";

	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";

	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tSampleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_1";

	

 



/**
 * [tSampleRow_1 finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortOut";

	

 



/**
 * [tSortRow_2_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_2_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_2";
	
	currentComponent="tSortRow_2_SortIn";

	

 



/**
 * [tSortRow_2_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */

































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_4> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row42Struct implements routines.system.IPersistableRow<row42Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_3> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float TxGroupe;

				public Float getTxGroupe () {
					return this.TxGroupe;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.TxGroupe = null;
           				} else {
           			    	this.TxGroupe = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.TxGroupe == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.TxGroupe);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",TxGroupe="+String.valueOf(TxGroupe));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_8 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_8> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_8 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_11Struct implements routines.system.IPersistableRow<after_tDBInput_11Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.Groupe = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_12Process(globalMap);

		row37Struct row37 = new row37Struct();
out3Struct out3 = new out3Struct();
row39Struct row39 = new row39Struct();
row40Struct row40 = new row40Struct();
row2Struct row2 = new row2Struct();
out4Struct out4 = new out4Struct();
row41Struct row41 = new row41Struct();
row42Struct row42 = new row42Struct();
row43Struct row43 = new row43Struct();






	
	/**
	 * [tAggregateRow_8_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGOUT", false);
		start_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tAggregateRow_8_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_8 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_8 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_8 utilClass_tAggregateRow_8 = new UtilClass_tAggregateRow_8();

	

	class AggOperationStruct_tAggregateRow_8 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Integer Groupe;BigDecimal NB_PAT_sum;
           			BigDecimal NB_VACANT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Groupe == null) ? 0 : this.Groupe.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_8 other = (AggOperationStruct_tAggregateRow_8) obj;
			
							if (this.Groupe == null) {
								if (other.Groupe != null) 
									return false;
							} else if (!this.Groupe.equals(other.Groupe)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_8 operation_result_tAggregateRow_8 = null;
	AggOperationStruct_tAggregateRow_8 operation_finder_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();
	java.util.Map<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8> hash_tAggregateRow_8 = new java.util.HashMap<AggOperationStruct_tAggregateRow_8,AggOperationStruct_tAggregateRow_8>();
	

 



/**
 * [tAggregateRow_8_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_9", false);
		start_Hash.put("tFilterRow_9", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tFilterRow_9 = 0;
		
    int nb_line_tFilterRow_9 = 0;
    int nb_line_ok_tFilterRow_9 = 0;
    int nb_line_reject_tFilterRow_9 = 0;

    class Operator_tFilterRow_9 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_9(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_9 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
	String DP;
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tDBInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_11", false);
		start_Hash.put("tDBInput_11", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_11";

	
		int tos_count_tDBInput_11 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_11 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_11 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_11  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_11, talendToDBArray_tDBInput_11); 
		    int nb_line_tDBInput_11 = 0;
		    java.sql.Connection conn_tDBInput_11 = null;
				conn_tDBInput_11 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_11 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_11 = conn_tDBInput_11.createStatement();

		    String dbquery_tDBInput_11 = "\nselect \n	CD_LOCALI1,\n	CD_PATRIM1 as Groupe,\n	CAST(1 as float) as NB_PAT,\n	CAST(CASE \n		WHEN MOTIF_VAC not in ('V"
+"ACANT VENDU SYNDIC', 'VACANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION', 'NON RENSEIGNÉ') then 1\n		ELSE "
+"0\n	END as float) as NB_VACANT\n	from\n	SID_PATRIMOINE_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCAL"
+"I1\n	where s.DT_ANNEE = datepart(year, dateadd(mm, -1, GETDATE()))\n	and s.DT_MOIS = datepart(month, dateadd(mm, -1, GET"
+"DATE()))\n	--and param.DP = 'BAGNEUX'\n	and SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL"
+".','PAVILLON') \n    AND CD_SOCPROP = 1\n	and CD_PATRIM4 <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00"
+":00:00'}\n	OR DTF_PAT_G > DATE)\n	AND DTD_PAT_G <= DATE\n";
			

            	globalMap.put("tDBInput_11_QUERY",dbquery_tDBInput_11);
		    java.sql.ResultSet rs_tDBInput_11 = null;

		    try {
		    	rs_tDBInput_11 = stmt_tDBInput_11.executeQuery(dbquery_tDBInput_11);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_11 = rs_tDBInput_11.getMetaData();
		    	int colQtyInRs_tDBInput_11 = rsmd_tDBInput_11.getColumnCount();

		    String tmpContent_tDBInput_11 = null;
		    
		    
		    while (rs_tDBInput_11.next()) {
		        nb_line_tDBInput_11++;
		        
							if(colQtyInRs_tDBInput_11 < 1) {
								row37.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_11 = rs_tDBInput_11.getString(1);
            if(tmpContent_tDBInput_11 != null) {
            	if (talendToDBList_tDBInput_11 .contains(rsmd_tDBInput_11.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row37.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_11);
            	} else {
                	row37.CD_LOCALI1 = tmpContent_tDBInput_11.trim();
                }
            } else {
                row37.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 2) {
								row37.Groupe = null;
							} else {
		                          
            row37.Groupe = rs_tDBInput_11.getInt(2);
            if(rs_tDBInput_11.wasNull()){
                    row37.Groupe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 3) {
								row37.NB_PAT = null;
							} else {
		                          
            row37.NB_PAT = rs_tDBInput_11.getFloat(3);
            if(rs_tDBInput_11.wasNull()){
                    row37.NB_PAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_11 < 4) {
								row37.NB_VACANT = null;
							} else {
		                          
            row37.NB_VACANT = rs_tDBInput_11.getFloat(4);
            if(rs_tDBInput_11.wasNull()){
                    row37.NB_VACANT = null;
            }
		                    }
					





 



/**
 * [tDBInput_11 begin ] stop
 */
	
	/**
	 * [tDBInput_11 main ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 


	tos_count_tDBInput_11++;

/**
 * [tDBInput_11 main ] stop
 */
	
	/**
	 * [tDBInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row37");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_9 = false;
		  boolean mainRowRejected_tMap_9 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row38HashKey.CD_LOCALI1 = row37.CD_LOCALI1 ;
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.CD_LOCALI1 = '" + row38HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row38Struct row38 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;
Var.DP = row38.DP != null ?
	(row38.DP.equals("SURESNES") ?
		(row37.Groupe == 3023 
		|| row37.Groupe == 3800
		|| row37.Groupe == 3804
		|| row37.Groupe == 3801
		|| row37.Groupe == 3802
		|| row37.Groupe == 3806
		|| row37.Groupe == 3024
		|| row37.Groupe == 3025
		|| row37.Groupe == 3701
		|| row37.Groupe == 3027
		|| row37.Groupe == 11013
		|| row37.Groupe == 11022
		|| row37.Groupe == 3803 
		|| row37.Groupe == 3700
		|| row37.Groupe == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row38.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.DP = Var.DP ;
out3_tmp.Groupe = row37.Groupe ;
out3_tmp.NB_PAT = row37.NB_PAT ;
out3_tmp.NB_VACANT = row37.NB_VACANT ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tFilterRow_9 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out3");
					}
					

          row39 = null;
    Operator_tFilterRow_9 ope_tFilterRow_9 = new Operator_tFilterRow_9("&&");
            ope_tFilterRow_9.matches((out3.DP == null? false : out3.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_9.getMatchFlag()) {
              if(row39 == null){ 
                row39 = new row39Struct();
              }
               row39.DP = out3.DP;
               row39.Groupe = out3.Groupe;
               row39.NB_PAT = out3.NB_PAT;
               row39.NB_VACANT = out3.NB_VACANT;    
      nb_line_ok_tFilterRow_9++;
    } else {
      nb_line_reject_tFilterRow_9++;
    }

nb_line_tFilterRow_9++;

 


	tos_count_tFilterRow_9++;

/**
 * [tFilterRow_9 main ] stop
 */
	
	/**
	 * [tFilterRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_begin ] stop
 */
// Start of branch "row39"
if(row39 != null) { 



	
	/**
	 * [tAggregateRow_8_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row39");
					}
					
	
operation_finder_tAggregateRow_8.Groupe = row39.Groupe;
			

	operation_finder_tAggregateRow_8.hashCodeDirty = true;
	
	operation_result_tAggregateRow_8 = hash_tAggregateRow_8.get(operation_finder_tAggregateRow_8);

	

	if(operation_result_tAggregateRow_8 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_8 = new AggOperationStruct_tAggregateRow_8();

		operation_result_tAggregateRow_8.Groupe = operation_finder_tAggregateRow_8.Groupe;
				
		
		

		hash_tAggregateRow_8.put(operation_result_tAggregateRow_8, operation_result_tAggregateRow_8);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_8.NB_PAT_sum == null) {
						operation_result_tAggregateRow_8.NB_PAT_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_8.NB_PAT_sum = operation_result_tAggregateRow_8.NB_PAT_sum.add(
						new BigDecimal(
							String.valueOf(
								row39.NB_PAT
							)
						)
					);
					
					if(operation_result_tAggregateRow_8.NB_VACANT_sum == null) {
						operation_result_tAggregateRow_8.NB_VACANT_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_8.NB_VACANT_sum = operation_result_tAggregateRow_8.NB_VACANT_sum.add(
						new BigDecimal(
							String.valueOf(
								row39.NB_VACANT
							)
						)
					);
					


 


	tos_count_tAggregateRow_8_AGGOUT++;

/**
 * [tAggregateRow_8_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT process_data_end ] stop
 */

} // End of branch "row39"




	
	/**
	 * [tFilterRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_11 end ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

	}
}finally{
	if (rs_tDBInput_11 != null) {
		rs_tDBInput_11.close();
	}
	if (stmt_tDBInput_11 != null) {
		stmt_tDBInput_11.close();
	}
}
globalMap.put("tDBInput_11_NB_LINE",nb_line_tDBInput_11);

 

ok_Hash.put("tDBInput_11", true);
end_Hash.put("tDBInput_11", System.currentTimeMillis());




/**
 * [tDBInput_11 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tFilterRow_9 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	
    globalMap.put("tFilterRow_9_NB_LINE", nb_line_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_OK", nb_line_ok_tFilterRow_9);
    globalMap.put("tFilterRow_9_NB_LINE_REJECT", nb_line_reject_tFilterRow_9);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tFilterRow_9", true);
end_Hash.put("tFilterRow_9", System.currentTimeMillis());




/**
 * [tFilterRow_9 end ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_8_AGGOUT", true);
end_Hash.put("tAggregateRow_8_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGOUT end ] stop
 */




	
	/**
	 * [tSortRow_3_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortOut", false);
		start_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tSortRow_3_SortOut = 0;
		


class Comparableout4Struct extends out4Struct implements Comparable<Comparableout4Struct> {
	
	public int compareTo(Comparableout4Struct other) {

		if(this.TxGroupe == null && other.TxGroupe != null){
			return 1;
						
		}else if(this.TxGroupe != null && other.TxGroupe == null){
			return -1;
						
		}else if(this.TxGroupe != null && other.TxGroupe != null){
			if(!this.TxGroupe.equals(other.TxGroupe)){
				return other.TxGroupe.compareTo(this.TxGroupe);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparableout4Struct> list_tSortRow_3_SortOut = new java.util.ArrayList<Comparableout4Struct>();


 



/**
 * [tSortRow_3_SortOut begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tFilterRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_10", false);
		start_Hash.put("tFilterRow_10", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tFilterRow_10 = 0;
		
    int nb_line_tFilterRow_10 = 0;
    int nb_line_ok_tFilterRow_10 = 0;
    int nb_line_reject_tFilterRow_10 = 0;

    class Operator_tFilterRow_10 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_10(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_10 begin ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_8_AGGIN", false);
		start_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	
		int tos_count_tAggregateRow_8_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_8> values_tAggregateRow_8 = hash_tAggregateRow_8.values();

globalMap.put("tAggregateRow_8_NB_LINE", values_tAggregateRow_8.size());

for(AggOperationStruct_tAggregateRow_8 aggregated_row_tAggregateRow_8 : values_tAggregateRow_8) { // G_AggR_600



 



/**
 * [tAggregateRow_8_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

            				    row40.Groupe = aggregated_row_tAggregateRow_8.Groupe;
            				    
    								if(aggregated_row_tAggregateRow_8.NB_PAT_sum != null) {
    								row40.NB_PAT = aggregated_row_tAggregateRow_8.NB_PAT_sum.floatValue();
										
    								}else{
    								
    									row40.NB_PAT = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_8.NB_VACANT_sum != null) {
    								row40.NB_VACANT = aggregated_row_tAggregateRow_8.NB_VACANT_sum.floatValue();
										
    								}else{
    								
    									row40.NB_VACANT = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_8_AGGIN++;

/**
 * [tAggregateRow_8_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_10 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row40");
					}
					

          row2 = null;
    Operator_tFilterRow_10 ope_tFilterRow_10 = new Operator_tFilterRow_10("&&");
            ope_tFilterRow_10.matches((row40.NB_VACANT == null? false : row40.NB_VACANT.compareTo(ParserUtils.parseTo_Float(String.valueOf(0))) != 0)
                           , "NB_VACANT.compareTo(0) != 0 failed");
		 	
    
    if (ope_tFilterRow_10.getMatchFlag()) {
              if(row2 == null){ 
                row2 = new row2Struct();
              }
               row2.DP = row40.DP;
               row2.Groupe = row40.Groupe;
               row2.NB_PAT = row40.NB_PAT;
               row2.NB_VACANT = row40.NB_VACANT;    
      nb_line_ok_tFilterRow_10++;
    } else {
      nb_line_reject_tFilterRow_10++;
    }

nb_line_tFilterRow_10++;

 


	tos_count_tFilterRow_10++;

/**
 * [tFilterRow_10 main ] stop
 */
	
	/**
	 * [tFilterRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_begin ] stop
 */
// Start of branch "row2"
if(row2 != null) { 



	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_10 = false;
		  boolean mainRowRejected_tMap_10 = false;
            				    								  
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.Groupe = row40.Groupe ;
out4_tmp.TxGroupe = row40.NB_VACANT  / row40.NB_PAT ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tSortRow_3_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out4");
					}
					



	Comparableout4Struct arrayRowtSortRow_3_SortOut = new Comparableout4Struct();

	arrayRowtSortRow_3_SortOut.Groupe = out4.Groupe;
	arrayRowtSortRow_3_SortOut.TxGroupe = out4.TxGroupe;	
	list_tSortRow_3_SortOut.add(arrayRowtSortRow_3_SortOut);

 


	tos_count_tSortRow_3_SortOut++;

/**
 * [tSortRow_3_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_3_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_3_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 process_data_end ] stop
 */

} // End of branch "row2"




	
	/**
	 * [tFilterRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_8_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_8_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_8_AGGIN", true);
end_Hash.put("tAggregateRow_8_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_8_AGGIN end ] stop
 */

	
	/**
	 * [tFilterRow_10 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	
    globalMap.put("tFilterRow_10_NB_LINE", nb_line_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_OK", nb_line_ok_tFilterRow_10);
    globalMap.put("tFilterRow_10_NB_LINE_REJECT", nb_line_reject_tFilterRow_10);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tFilterRow_10", true);
end_Hash.put("tFilterRow_10", System.currentTimeMillis());




/**
 * [tFilterRow_10 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";

	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

out4Struct[] array_tSortRow_3_SortOut = list_tSortRow_3_SortOut.toArray(new Comparableout4Struct[0]);

java.util.Arrays.sort(array_tSortRow_3_SortOut);

globalMap.put("tSortRow_3",array_tSortRow_3_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tSortRow_3_SortOut", true);
end_Hash.put("tSortRow_3_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_3_SortOut end ] stop
 */



	
	/**
	 * [tSortRow_4_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_4_SortOut", false);
		start_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tSortRow_4_SortOut = 0;
		


class Comparablerow42Struct extends row42Struct implements Comparable<Comparablerow42Struct> {
	
	public int compareTo(Comparablerow42Struct other) {

		if(this.TxGroupe == null && other.TxGroupe != null){
			return -1;
						
		}else if(this.TxGroupe != null && other.TxGroupe == null){
			return 1;
						
		}else if(this.TxGroupe != null && other.TxGroupe != null){
			if(!this.TxGroupe.equals(other.TxGroupe)){
				return this.TxGroupe.compareTo(other.TxGroupe);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow42Struct> list_tSortRow_4_SortOut = new java.util.ArrayList<Comparablerow42Struct>();


 



/**
 * [tSortRow_4_SortOut begin ] stop
 */



	
	/**
	 * [tSampleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_2", false);
		start_Hash.put("tSampleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tSampleRow_2 = 0;
		

String[] rangetSampleRow_2 = "1..5".split(",");
java.util.Set rangeSettSampleRow_2 = new java.util.HashSet();

Integer nb_line_tSampleRow_2 = 0;

for(int i =0;i<rangetSampleRow_2.length;i++){

	if(rangetSampleRow_2[i].matches("\\d+")){
	
		rangeSettSampleRow_2 .add(Integer.valueOf(rangetSampleRow_2[i]));
		
	}else if(rangetSampleRow_2[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_2= rangetSampleRow_2[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_2[0]).intValue();j<Integer.valueOf(edgetSampleRow_2[1]).intValue()+1;j++){			
			rangeSettSampleRow_2 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_2 begin ] stop
 */



	
	/**
	 * [tSortRow_3_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_3_SortIn", false);
		start_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	
		int tos_count_tSortRow_3_SortIn = 0;
		


out4Struct[] array_tSortRow_3_SortIn = (out4Struct[]) globalMap.remove("tSortRow_3");

int nb_line_tSortRow_3_SortIn = 0;

out4Struct current_tSortRow_3_SortIn = null;

for(int i_tSortRow_3_SortIn = 0; i_tSortRow_3_SortIn < array_tSortRow_3_SortIn.length; i_tSortRow_3_SortIn++){
	current_tSortRow_3_SortIn = array_tSortRow_3_SortIn[i_tSortRow_3_SortIn];
	row41.Groupe = current_tSortRow_3_SortIn.Groupe;
	row41.TxGroupe = current_tSortRow_3_SortIn.TxGroupe;
	// increase number of line sorted
	nb_line_tSortRow_3_SortIn++;

 



/**
 * [tSortRow_3_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 


	tos_count_tSortRow_3_SortIn++;

/**
 * [tSortRow_3_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_2 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row41");
					}
					

	
	nb_line_tSampleRow_2++;
	
 	if(!rangeSettSampleRow_2.contains(nb_line_tSampleRow_2)){        
            row42 = null;            	
 	}else{  	
 	   row42 = new row42Struct();
 	   

       row42.Groupe = row41.Groupe;
       

       row42.TxGroupe = row41.TxGroupe;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_2++;

/**
 * [tSampleRow_2 main ] stop
 */
	
	/**
	 * [tSampleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 process_data_begin ] stop
 */
// Start of branch "row42"
if(row42 != null) { 



	
	/**
	 * [tSortRow_4_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row42");
					}
					



	Comparablerow42Struct arrayRowtSortRow_4_SortOut = new Comparablerow42Struct();

	arrayRowtSortRow_4_SortOut.Groupe = row42.Groupe;
	arrayRowtSortRow_4_SortOut.TxGroupe = row42.TxGroupe;	
	list_tSortRow_4_SortOut.add(arrayRowtSortRow_4_SortOut);

 


	tos_count_tSortRow_4_SortOut++;

/**
 * [tSortRow_4_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_4_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	

 



/**
 * [tSortRow_4_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_4_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	

 



/**
 * [tSortRow_4_SortOut process_data_end ] stop
 */

} // End of branch "row42"




	
	/**
	 * [tSampleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_3_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_3_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	


}

globalMap.put("tSortRow_3_SortIn_NB_LINE",nb_line_tSortRow_3_SortIn);

 

ok_Hash.put("tSortRow_3_SortIn", true);
end_Hash.put("tSortRow_3_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_3_SortIn end ] stop
 */

	
	/**
	 * [tSampleRow_2 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tSampleRow_2", true);
end_Hash.put("tSampleRow_2", System.currentTimeMillis());




/**
 * [tSampleRow_2 end ] stop
 */

	
	/**
	 * [tSortRow_4_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	

row42Struct[] array_tSortRow_4_SortOut = list_tSortRow_4_SortOut.toArray(new Comparablerow42Struct[0]);

java.util.Arrays.sort(array_tSortRow_4_SortOut);

globalMap.put("tSortRow_4",array_tSortRow_4_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tSortRow_4_SortOut", true);
end_Hash.put("tSortRow_4_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_4_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputExcel_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_3", false);
		start_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tFileOutputExcel_3 = 0;
		


		int columnIndex_tFileOutputExcel_3 = 0;
		
		String fileName_tFileOutputExcel_3="C:/MV/MV_DP " + context.Nom +"_Vacance_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_3 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_3 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_3.setSheet("DATA VACANCE");
		xlsxTool_tFileOutputExcel_3.setAppend(true,true);
		xlsxTool_tFileOutputExcel_3.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_3.setXY(true,0,6,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_3 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_3 = chm_tFileOutputExcel_3.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_3", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_3) {
			
				xlsxTool_tFileOutputExcel_3.prepareXlsxFile(fileName_tFileOutputExcel_3);
			
		}
		
		xlsxTool_tFileOutputExcel_3.setFont("");
		

 



/**
 * [tFileOutputExcel_3 begin ] stop
 */



	
	/**
	 * [tSortRow_4_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_4_SortIn", false);
		start_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	
		int tos_count_tSortRow_4_SortIn = 0;
		


row42Struct[] array_tSortRow_4_SortIn = (row42Struct[]) globalMap.remove("tSortRow_4");

int nb_line_tSortRow_4_SortIn = 0;

row42Struct current_tSortRow_4_SortIn = null;

for(int i_tSortRow_4_SortIn = 0; i_tSortRow_4_SortIn < array_tSortRow_4_SortIn.length; i_tSortRow_4_SortIn++){
	current_tSortRow_4_SortIn = array_tSortRow_4_SortIn[i_tSortRow_4_SortIn];
	row43.Groupe = current_tSortRow_4_SortIn.Groupe;
	row43.TxGroupe = current_tSortRow_4_SortIn.TxGroupe;
	// increase number of line sorted
	nb_line_tSortRow_4_SortIn++;

 



/**
 * [tSortRow_4_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_4_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	

 


	tos_count_tSortRow_4_SortIn++;

/**
 * [tSortRow_4_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_4_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	

 



/**
 * [tSortRow_4_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row43");
					}
					

				xlsxTool_tFileOutputExcel_3.addRow();
									   				
	    				if(row43.Groupe != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(Double.parseDouble(String.valueOf(row43.Groupe)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
									   				
	    				if(row43.TxGroupe != null) {
    				
							xlsxTool_tFileOutputExcel_3.addCellValue(Double.parseDouble(String.valueOf(row43.TxGroupe)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_3.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_3++;
				
 


	tos_count_tFileOutputExcel_3++;

/**
 * [tFileOutputExcel_3 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_4_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	

 



/**
 * [tSortRow_4_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_4_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	


}

globalMap.put("tSortRow_4_SortIn_NB_LINE",nb_line_tSortRow_4_SortIn);

 

ok_Hash.put("tSortRow_4_SortIn", true);
end_Hash.put("tSortRow_4_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_4_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

	
	
	
			xlsxTool_tFileOutputExcel_3.writeExcel(fileName_tFileOutputExcel_3,true);
	
		
		globalMap.put("tFileOutputExcel_3_NB_LINE",nb_line_tFileOutputExcel_3);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_3", true);
end_Hash.put("tFileOutputExcel_3", System.currentTimeMillis());




/**
 * [tFileOutputExcel_3 end ] stop
 */




































				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tDBInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_4_SortIn"
							globalMap.remove("tSortRow_4");
						
							//free memory for "tSortRow_3_SortIn"
							globalMap.remove("tSortRow_3");
						
							//free memory for "tAggregateRow_8_AGGIN"
							globalMap.remove("tAggregateRow_8");
						
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_11 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_11";

	

 



/**
 * [tDBInput_11 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";

	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tFilterRow_9 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_9";

	

 



/**
 * [tFilterRow_9 finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGOUT";

	

 



/**
 * [tAggregateRow_8_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_8_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_8";
	
	currentComponent="tAggregateRow_8_AGGIN";

	

 



/**
 * [tAggregateRow_8_AGGIN finally ] stop
 */

	
	/**
	 * [tFilterRow_10 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_10";

	

 



/**
 * [tFilterRow_10 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";

	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortOut";

	

 



/**
 * [tSortRow_3_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_3_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_3";
	
	currentComponent="tSortRow_3_SortIn";

	

 



/**
 * [tSortRow_3_SortIn finally ] stop
 */

	
	/**
	 * [tSampleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_2";

	

 



/**
 * [tSampleRow_2 finally ] stop
 */

	
	/**
	 * [tSortRow_4_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortOut";

	

 



/**
 * [tSortRow_4_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_4_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_4";
	
	currentComponent="tSortRow_4_SortIn";

	

 



/**
 * [tSortRow_4_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_3";

	

 



/**
 * [tFileOutputExcel_3 finally ] stop
 */




































				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_6> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_5> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_9 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_9> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_9 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.DP = readString(dis);
					
						this.Groupe = readInteger(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DP="+DP);
		sb.append(",Groupe="+String.valueOf(Groupe));
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Integer Groupe;

				public Integer getGroupe () {
					return this.Groupe;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer Duree_Mois;

				public Integer getDuree_Mois () {
					return this.Duree_Mois;
				}
				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
						this.Groupe = readInteger(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
						this.Duree_Mois = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.Groupe,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.Duree_Mois,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Groupe="+String.valueOf(Groupe));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",Duree_Mois="+String.valueOf(Duree_Mois));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_14Process(globalMap);

		row44Struct row44 = new row44Struct();
out5Struct out5 = new out5Struct();
row46Struct row46 = new row46Struct();
row3Struct row3 = new row3Struct();
row48Struct row48 = new row48Struct();
row49Struct row49 = new row49Struct();
row50Struct row50 = new row50Struct();






	
	/**
	 * [tAggregateRow_9_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_9_AGGOUT", false);
		start_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tAggregateRow_9_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_9 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_9 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_9 utilClass_tAggregateRow_9 = new UtilClass_tAggregateRow_9();

	

	class AggOperationStruct_tAggregateRow_9 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				Integer Groupe;int count = 0;
       			int Duree_Mois_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.Groupe == null) ? 0 : this.Groupe.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_9 other = (AggOperationStruct_tAggregateRow_9) obj;
			
							if (this.Groupe == null) {
								if (other.Groupe != null) 
									return false;
							} else if (!this.Groupe.equals(other.Groupe)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_9 operation_result_tAggregateRow_9 = null;
	AggOperationStruct_tAggregateRow_9 operation_finder_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();
	java.util.Map<AggOperationStruct_tAggregateRow_9,AggOperationStruct_tAggregateRow_9> hash_tAggregateRow_9 = new java.util.HashMap<AggOperationStruct_tAggregateRow_9,AggOperationStruct_tAggregateRow_9>();
	

 



/**
 * [tAggregateRow_9_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_11", false);
		start_Hash.put("tFilterRow_11", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tFilterRow_11 = 0;
		
    int nb_line_tFilterRow_11 = 0;
    int nb_line_ok_tFilterRow_11 = 0;
    int nb_line_reject_tFilterRow_11 = 0;

    class Operator_tFilterRow_11 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_11(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_11 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct>) 
					globalMap.get( "tHash_Lookup_row45" ))
					;					
					
	

row45Struct row45HashKey = new row45Struct();
row45Struct row45Default = new row45Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
	String DP;
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tDBInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_13", false);
		start_Hash.put("tDBInput_13", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_13";

	
		int tos_count_tDBInput_13 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_13 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_13 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_13  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_13, talendToDBArray_tDBInput_13); 
		    int nb_line_tDBInput_13 = 0;
		    java.sql.Connection conn_tDBInput_13 = null;
				conn_tDBInput_13 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_13 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

		    String dbquery_tDBInput_13 = "\n\nSELECT T_BASE.CD_PATRIM1 as Groupe ,\nT_BASE.CD_LOCALI1,\nCASE 				\n	WHEN LEN(T_BASE.Derniere_Location) > 1 AND T_"
+"BASE.Derniere_Location <> '01-01-1900' THEN datediff(mm, T_BASE.Derniere_Location, T_BASE.DATE) \n	ELSE datediff(mm, T_B"
+"ASE.Date_Debut_Gestion, T_BASE.DATE)\nEND as Duree_Mois\nfrom \n(\nselect \n	a.DATE,\n	a.DTD_PAT_G as Date_Debut_Gestion"
+",\n	a.CD_PATRIM1,\n	a.CD_LOCALI1,\n	CAST(CASE \n		WHEN not exists (select CTRA.DTF_CTRAT\n						from PAT_CONTRA CTRA\n		"
+"				WHERE CTRA.CD_PATRIM = a.CD_PATRIM\n						AND CTRA.ON_PSEUCLI='N'\n						AND CTRA.DTF_CTRAT <= GETDATE()\n						AND "
+"CTRA.CD_SOCIETE=$1)  \n						AND a.CD_PATRIM1 like '55%' \n		THEN  	(select FORMAT(max(CTRA2.DTF_CTRAT),'dd-MM-yyyy') \n"
+"				from PAT_CONTRA CTRA2\n				WHERE CTRA2.CD_PATRIM = stuff(a.CD_PATRIM,1,1,'0')\n				AND CTRA2.ON_PSEUCLI='N'\n				AND"
+" CTRA2.DTF_CTRAT <= GETDATE()\n				AND CTRA2.CD_SOCIETE=$1\n				GROUP by CTRA2.CD_PATRIM) \n		ELSE 	(select FORMAT(max(C"
+"TRA.DTF_CTRAT),'dd-MM-yyyy')\n					from PAT_CONTRA CTRA\n					WHERE CTRA.CD_PATRIM = a.CD_PATRIM\n					AND CTRA.ON_PSEUC"
+"LI='N'\n					AND CTRA.DTF_CTRAT <= GETDATE()\n					AND CTRA.CD_SOCIETE=$1\n					GROUP by CTRA.CD_PATRIM\n				)		\n	END A"
+"S VARCHAR(60)) as Derniere_Location\nfrom SID_PATRIMOINE_GIM a \nwhere a.DT_ANNEE = datepart(year, dateadd(mm, -1, GETDA"
+"TE()))\nand a.DT_MOIS = datepart(month, dateadd(mm, -1, GETDATE()))\nAND a.CD_PATRIM4 <>0\n	AND a.MOTIF_VAC not in ('Non"
+" Renseigné', 'VACANT IMPRODUCTIF', 'VACANT ACCESSION', 'VACANT VENDU SYNDIC', 'VACANT REHABILITATION')\n	AND a.SIO_LB_NA"
+"TLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\n	AND (a.DTF_PAT_G ={ts '1900-01-01 00"
+":00:00'}\n	OR a.DTF_PAT_G > a.DATE)\n	AND a.DTD_PAT_G <= a.DATE\n	AND a.CD_ETAT = 'MS'\n    AND CD_SOCPROP = 1\n) T_BASE"
+"\n";
			

            	globalMap.put("tDBInput_13_QUERY",dbquery_tDBInput_13);
		    java.sql.ResultSet rs_tDBInput_13 = null;

		    try {
		    	rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
		    	int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

		    String tmpContent_tDBInput_13 = null;
		    
		    
		    while (rs_tDBInput_13.next()) {
		        nb_line_tDBInput_13++;
		        
							if(colQtyInRs_tDBInput_13 < 1) {
								row44.Groupe = null;
							} else {
		                          
            row44.Groupe = rs_tDBInput_13.getInt(1);
            if(rs_tDBInput_13.wasNull()){
                    row44.Groupe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 2) {
								row44.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_13 = rs_tDBInput_13.getString(2);
            if(tmpContent_tDBInput_13 != null) {
            	if (talendToDBList_tDBInput_13 .contains(rsmd_tDBInput_13.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row44.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
            	} else {
                	row44.CD_LOCALI1 = tmpContent_tDBInput_13.trim();
                }
            } else {
                row44.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_13 < 3) {
								row44.Duree_Mois = null;
							} else {
		                          
            row44.Duree_Mois = rs_tDBInput_13.getInt(3);
            if(rs_tDBInput_13.wasNull()){
                    row44.Duree_Mois = null;
            }
		                    }
					





 



/**
 * [tDBInput_13 begin ] stop
 */
	
	/**
	 * [tDBInput_13 main ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 


	tos_count_tDBInput_13++;

/**
 * [tDBInput_13 main ] stop
 */
	
	/**
	 * [tDBInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row44");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_11 = false;
		  boolean mainRowRejected_tMap_11 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row45" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow45 = false;
       		  	    	
       		  	    	
 							row45Struct row45ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row45HashKey.CD_LOCALI1 = row44.CD_LOCALI1 ;
                        		    		

								
		                        	row45HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row45.lookup( row45HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row45 != null && tHash_Lookup_row45.getCount(row45HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row45' and it contains more one result from keys :  row45.CD_LOCALI1 = '" + row45HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row45Struct row45 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row45Struct fromLookup_row45 = null;
							row45 = row45Default;
										 
							
								 
							
							
								if (tHash_Lookup_row45 !=null && tHash_Lookup_row45.hasNext()) { // G 099
								
							
								
								fromLookup_row45 = tHash_Lookup_row45.next();

							
							
								} // G 099
							
							

							if(fromLookup_row45 != null) {
								row45 = fromLookup_row45;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;
Var.DP = row45.DP != null ?
	(row45.DP.equals("SURESNES") ?
		(row44.Groupe == 3023 
		|| row44.Groupe == 3800
		|| row44.Groupe == 3804
		|| row44.Groupe == 3801
		|| row44.Groupe == 3802
		|| row44.Groupe == 3806
		|| row44.Groupe == 3024
		|| row44.Groupe == 3025
		|| row44.Groupe == 3701
		|| row44.Groupe == 3027
		|| row44.Groupe == 11013
		|| row44.Groupe == 11022
		|| row44.Groupe == 3803 
		|| row44.Groupe == 3700
		|| row44.Groupe == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row45.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.DP = Var.DP ;
out5_tmp.Groupe = row44.Groupe  ;
out5_tmp.Duree_Mois = row44.Duree_Mois  ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tFilterRow_11 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out5");
					}
					

          row46 = null;
    Operator_tFilterRow_11 ope_tFilterRow_11 = new Operator_tFilterRow_11("&&");
            ope_tFilterRow_11.matches((out5.DP == null? false : out5.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
            ope_tFilterRow_11.matches((out5.Duree_Mois == null? false : out5.Duree_Mois.compareTo(ParserUtils.parseTo_Integer(String.valueOf(6))) >= 0)
                           , "Duree_Mois.compareTo(6) >= 0 failed");
		 	
    
    if (ope_tFilterRow_11.getMatchFlag()) {
              if(row46 == null){ 
                row46 = new row46Struct();
              }
               row46.DP = out5.DP;
               row46.Groupe = out5.Groupe;
               row46.Duree_Mois = out5.Duree_Mois;    
      nb_line_ok_tFilterRow_11++;
    } else {
      nb_line_reject_tFilterRow_11++;
    }

nb_line_tFilterRow_11++;

 


	tos_count_tFilterRow_11++;

/**
 * [tFilterRow_11 main ] stop
 */
	
	/**
	 * [tFilterRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_begin ] stop
 */
// Start of branch "row46"
if(row46 != null) { 



	
	/**
	 * [tAggregateRow_9_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row46");
					}
					
	
operation_finder_tAggregateRow_9.Groupe = row46.Groupe;
			

	operation_finder_tAggregateRow_9.hashCodeDirty = true;
	
	operation_result_tAggregateRow_9 = hash_tAggregateRow_9.get(operation_finder_tAggregateRow_9);

	

	if(operation_result_tAggregateRow_9 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_9 = new AggOperationStruct_tAggregateRow_9();

		operation_result_tAggregateRow_9.Groupe = operation_finder_tAggregateRow_9.Groupe;
				
		
		

		hash_tAggregateRow_9.put(operation_result_tAggregateRow_9, operation_result_tAggregateRow_9);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_9.Duree_Mois_clmCount++;
				operation_result_tAggregateRow_9.count++;
				


 


	tos_count_tAggregateRow_9_AGGOUT++;

/**
 * [tAggregateRow_9_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT process_data_end ] stop
 */

} // End of branch "row46"




	
	/**
	 * [tFilterRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 process_data_end ] stop
 */

} // End of branch "out5"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_13 end ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

	}
}finally{
	if (rs_tDBInput_13 != null) {
		rs_tDBInput_13.close();
	}
	if (stmt_tDBInput_13 != null) {
		stmt_tDBInput_13.close();
	}
}
globalMap.put("tDBInput_13_NB_LINE",nb_line_tDBInput_13);

 

ok_Hash.put("tDBInput_13", true);
end_Hash.put("tDBInput_13", System.currentTimeMillis());




/**
 * [tDBInput_13 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row45 != null) {
						tHash_Lookup_row45.endGet();
					}
					globalMap.remove( "tHash_Lookup_row45" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tFilterRow_11 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	
    globalMap.put("tFilterRow_11_NB_LINE", nb_line_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_OK", nb_line_ok_tFilterRow_11);
    globalMap.put("tFilterRow_11_NB_LINE_REJECT", nb_line_reject_tFilterRow_11);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tFilterRow_11", true);
end_Hash.put("tFilterRow_11", System.currentTimeMillis());




/**
 * [tFilterRow_11 end ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_9_AGGOUT", true);
end_Hash.put("tAggregateRow_9_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_9_AGGOUT end ] stop
 */


	
	/**
	 * [tSortRow_5_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_5_SortOut", false);
		start_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tSortRow_5_SortOut = 0;
		


class Comparablerow3Struct extends row3Struct implements Comparable<Comparablerow3Struct> {
	
	public int compareTo(Comparablerow3Struct other) {

		if(this.Duree_Mois == null && other.Duree_Mois != null){
			return 1;
						
		}else if(this.Duree_Mois != null && other.Duree_Mois == null){
			return -1;
						
		}else if(this.Duree_Mois != null && other.Duree_Mois != null){
			if(!this.Duree_Mois.equals(other.Duree_Mois)){
				return other.Duree_Mois.compareTo(this.Duree_Mois);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow3Struct> list_tSortRow_5_SortOut = new java.util.ArrayList<Comparablerow3Struct>();


 



/**
 * [tSortRow_5_SortOut begin ] stop
 */



	
	/**
	 * [tAggregateRow_9_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_9_AGGIN", false);
		start_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	
		int tos_count_tAggregateRow_9_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_9> values_tAggregateRow_9 = hash_tAggregateRow_9.values();

globalMap.put("tAggregateRow_9_NB_LINE", values_tAggregateRow_9.size());

for(AggOperationStruct_tAggregateRow_9 aggregated_row_tAggregateRow_9 : values_tAggregateRow_9) { // G_AggR_600



 



/**
 * [tAggregateRow_9_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

            				    row3.Groupe = aggregated_row_tAggregateRow_9.Groupe;
            				    row3.Duree_Mois = (int) aggregated_row_tAggregateRow_9.count;
	                                	row3.Duree_Mois = (int) aggregated_row_tAggregateRow_9.Duree_Mois_clmCount;
	                                	

 


	tos_count_tAggregateRow_9_AGGIN++;

/**
 * [tAggregateRow_9_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_5_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					



	Comparablerow3Struct arrayRowtSortRow_5_SortOut = new Comparablerow3Struct();

	arrayRowtSortRow_5_SortOut.Groupe = row3.Groupe;
	arrayRowtSortRow_5_SortOut.Duree_Mois = row3.Duree_Mois;	
	list_tSortRow_5_SortOut.add(arrayRowtSortRow_5_SortOut);

 


	tos_count_tSortRow_5_SortOut++;

/**
 * [tSortRow_5_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_5_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	

 



/**
 * [tSortRow_5_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_5_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	

 



/**
 * [tSortRow_5_SortOut process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_9_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_9_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_9_AGGIN", true);
end_Hash.put("tAggregateRow_9_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_9_AGGIN end ] stop
 */

	
	/**
	 * [tSortRow_5_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	

row3Struct[] array_tSortRow_5_SortOut = list_tSortRow_5_SortOut.toArray(new Comparablerow3Struct[0]);

java.util.Arrays.sort(array_tSortRow_5_SortOut);

globalMap.put("tSortRow_5",array_tSortRow_5_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tSortRow_5_SortOut", true);
end_Hash.put("tSortRow_5_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_5_SortOut end ] stop
 */



	
	/**
	 * [tSortRow_6_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_6_SortOut", false);
		start_Hash.put("tSortRow_6_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row49");
					}
				
		int tos_count_tSortRow_6_SortOut = 0;
		


class Comparablerow49Struct extends row49Struct implements Comparable<Comparablerow49Struct> {
	
	public int compareTo(Comparablerow49Struct other) {

		if(this.Duree_Mois == null && other.Duree_Mois != null){
			return -1;
						
		}else if(this.Duree_Mois != null && other.Duree_Mois == null){
			return 1;
						
		}else if(this.Duree_Mois != null && other.Duree_Mois != null){
			if(!this.Duree_Mois.equals(other.Duree_Mois)){
				return this.Duree_Mois.compareTo(other.Duree_Mois);
			}
		}
		if(this.Groupe == null && other.Groupe != null){
			return -1;
						
		}else if(this.Groupe != null && other.Groupe == null){
			return 1;
						
		}else if(this.Groupe != null && other.Groupe != null){
			if(!this.Groupe.equals(other.Groupe)){
				return this.Groupe.compareTo(other.Groupe);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow49Struct> list_tSortRow_6_SortOut = new java.util.ArrayList<Comparablerow49Struct>();


 



/**
 * [tSortRow_6_SortOut begin ] stop
 */



	
	/**
	 * [tSampleRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tSampleRow_3", false);
		start_Hash.put("tSampleRow_3", System.currentTimeMillis());
		
	
	currentComponent="tSampleRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row48");
					}
				
		int tos_count_tSampleRow_3 = 0;
		

String[] rangetSampleRow_3 = "1..5".split(",");
java.util.Set rangeSettSampleRow_3 = new java.util.HashSet();

Integer nb_line_tSampleRow_3 = 0;

for(int i =0;i<rangetSampleRow_3.length;i++){

	if(rangetSampleRow_3[i].matches("\\d+")){
	
		rangeSettSampleRow_3 .add(Integer.valueOf(rangetSampleRow_3[i]));
		
	}else if(rangetSampleRow_3[i].matches("\\d+\\.\\.\\d+")){
		
		String[] edgetSampleRow_3= rangetSampleRow_3[i].split("\\.\\.");
		
		for(int j=Integer.valueOf(edgetSampleRow_3[0]).intValue();j<Integer.valueOf(edgetSampleRow_3[1]).intValue()+1;j++){			
			rangeSettSampleRow_3 .add(Integer.valueOf(j));			
		}		
	}else{
	
	}
	
}



 



/**
 * [tSampleRow_3 begin ] stop
 */



	
	/**
	 * [tSortRow_5_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_5_SortIn", false);
		start_Hash.put("tSortRow_5_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	
		int tos_count_tSortRow_5_SortIn = 0;
		


row3Struct[] array_tSortRow_5_SortIn = (row3Struct[]) globalMap.remove("tSortRow_5");

int nb_line_tSortRow_5_SortIn = 0;

row3Struct current_tSortRow_5_SortIn = null;

for(int i_tSortRow_5_SortIn = 0; i_tSortRow_5_SortIn < array_tSortRow_5_SortIn.length; i_tSortRow_5_SortIn++){
	current_tSortRow_5_SortIn = array_tSortRow_5_SortIn[i_tSortRow_5_SortIn];
	row48.Groupe = current_tSortRow_5_SortIn.Groupe;
	row48.Duree_Mois = current_tSortRow_5_SortIn.Duree_Mois;
	// increase number of line sorted
	nb_line_tSortRow_5_SortIn++;

 



/**
 * [tSortRow_5_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_5_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	

 


	tos_count_tSortRow_5_SortIn++;

/**
 * [tSortRow_5_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_5_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	

 



/**
 * [tSortRow_5_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tSampleRow_3 main ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row48");
					}
					

	
	nb_line_tSampleRow_3++;
	
 	if(!rangeSettSampleRow_3.contains(nb_line_tSampleRow_3)){        
            row49 = null;            	
 	}else{  	
 	   row49 = new row49Struct();
 	   

       row49.Groupe = row48.Groupe;
       

       row49.Duree_Mois = row48.Duree_Mois;
       
 	
 	}
 
 
 
 
 
 
 
 
 
 
 
 
 


	tos_count_tSampleRow_3++;

/**
 * [tSampleRow_3 main ] stop
 */
	
	/**
	 * [tSampleRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 process_data_begin ] stop
 */
// Start of branch "row49"
if(row49 != null) { 



	
	/**
	 * [tSortRow_6_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row49");
					}
					



	Comparablerow49Struct arrayRowtSortRow_6_SortOut = new Comparablerow49Struct();

	arrayRowtSortRow_6_SortOut.Groupe = row49.Groupe;
	arrayRowtSortRow_6_SortOut.Duree_Mois = row49.Duree_Mois;	
	list_tSortRow_6_SortOut.add(arrayRowtSortRow_6_SortOut);

 


	tos_count_tSortRow_6_SortOut++;

/**
 * [tSortRow_6_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_6_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	

 



/**
 * [tSortRow_6_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_6_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	

 



/**
 * [tSortRow_6_SortOut process_data_end ] stop
 */

} // End of branch "row49"




	
	/**
	 * [tSampleRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_5_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	

 



/**
 * [tSortRow_5_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_5_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	


}

globalMap.put("tSortRow_5_SortIn_NB_LINE",nb_line_tSortRow_5_SortIn);

 

ok_Hash.put("tSortRow_5_SortIn", true);
end_Hash.put("tSortRow_5_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_5_SortIn end ] stop
 */

	
	/**
	 * [tSampleRow_3 end ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row48");
			  	}
			  	
 

ok_Hash.put("tSampleRow_3", true);
end_Hash.put("tSampleRow_3", System.currentTimeMillis());




/**
 * [tSampleRow_3 end ] stop
 */

	
	/**
	 * [tSortRow_6_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	

row49Struct[] array_tSortRow_6_SortOut = list_tSortRow_6_SortOut.toArray(new Comparablerow49Struct[0]);

java.util.Arrays.sort(array_tSortRow_6_SortOut);

globalMap.put("tSortRow_6",array_tSortRow_6_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row49");
			  	}
			  	
 

ok_Hash.put("tSortRow_6_SortOut", true);
end_Hash.put("tSortRow_6_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_6_SortOut end ] stop
 */


	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4="C:/MV/MV_DP " + context.Nom +"_Vacance_" + TalendDate.getDate("CCYYMMDD") +".xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("DATA VACANCE");
		xlsxTool_tFileOutputExcel_4.setAppend(true,true);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(true);
		xlsxTool_tFileOutputExcel_4.setXY(true,0,12,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tSortRow_6_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_6_SortIn", false);
		start_Hash.put("tSortRow_6_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	
		int tos_count_tSortRow_6_SortIn = 0;
		


row49Struct[] array_tSortRow_6_SortIn = (row49Struct[]) globalMap.remove("tSortRow_6");

int nb_line_tSortRow_6_SortIn = 0;

row49Struct current_tSortRow_6_SortIn = null;

for(int i_tSortRow_6_SortIn = 0; i_tSortRow_6_SortIn < array_tSortRow_6_SortIn.length; i_tSortRow_6_SortIn++){
	current_tSortRow_6_SortIn = array_tSortRow_6_SortIn[i_tSortRow_6_SortIn];
	row50.Groupe = current_tSortRow_6_SortIn.Groupe;
	row50.Duree_Mois = current_tSortRow_6_SortIn.Duree_Mois;
	// increase number of line sorted
	nb_line_tSortRow_6_SortIn++;

 



/**
 * [tSortRow_6_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_6_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	

 


	tos_count_tSortRow_6_SortIn++;

/**
 * [tSortRow_6_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_6_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	

 



/**
 * [tSortRow_6_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row50");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row50.Groupe != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(Double.parseDouble(String.valueOf(row50.Groupe)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row50.Duree_Mois != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(Double.parseDouble(String.valueOf(row50.Duree_Mois)));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */



	
	/**
	 * [tSortRow_6_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	

 



/**
 * [tSortRow_6_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_6_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	


}

globalMap.put("tSortRow_6_SortIn_NB_LINE",nb_line_tSortRow_6_SortIn);

 

ok_Hash.put("tSortRow_6_SortIn", true);
end_Hash.put("tSortRow_6_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_6_SortIn end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */






























				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_6_SortIn"
							globalMap.remove("tSortRow_6");
						
							//free memory for "tSortRow_5_SortIn"
							globalMap.remove("tSortRow_5");
						
							//free memory for "tAggregateRow_9_AGGIN"
							globalMap.remove("tAggregateRow_9");
						
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row45"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_13 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_13";

	

 



/**
 * [tDBInput_13 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";

	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tFilterRow_11 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_11";

	

 



/**
 * [tFilterRow_11 finally ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGOUT";

	

 



/**
 * [tAggregateRow_9_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_9_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_9";
	
	currentComponent="tAggregateRow_9_AGGIN";

	

 



/**
 * [tAggregateRow_9_AGGIN finally ] stop
 */

	
	/**
	 * [tSortRow_5_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortOut";

	

 



/**
 * [tSortRow_5_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_5_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_5";
	
	currentComponent="tSortRow_5_SortIn";

	

 



/**
 * [tSortRow_5_SortIn finally ] stop
 */

	
	/**
	 * [tSampleRow_3 finally ] start
	 */

	

	
	
	currentComponent="tSampleRow_3";

	

 



/**
 * [tSampleRow_3 finally ] stop
 */

	
	/**
	 * [tSortRow_6_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortOut";

	

 



/**
 * [tSortRow_6_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_6_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_6";
	
	currentComponent="tSortRow_6_SortIn";

	

 



/**
 * [tSortRow_6_SortIn finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */






























				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableComparableLookupRow<row19Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row19Struct other = (row19Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row19Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row19Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.DP = readString(dis);
					
					this.DT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row9Struct row9 = new row9Struct();
row10Struct row10 = new row10Struct();
row19Struct row19 = new row19Struct();
row20Struct row20 = new row20Struct();
row21Struct row21 = new row21Struct();
row28Struct row28 = new row28Struct();





	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_1 - inputs:(row4,row9) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_2 - inputs:(row10,row8) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_row19 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row19", false);
		start_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tAdvancedHash_row19 = 0;
		

			   		// connection name:row19
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row19 - inputs:(row19) outputs:()
			   		// linked node: tMap_3 - inputs:(row19,row13) outputs:(copyOfout2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row19 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row19Struct>getLookup(matchingModeEnum_row19);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row19", tHash_Lookup_row19);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row19 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tAdvancedHash_row20 = 0;
		

			   		// connection name:row20
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_5 - inputs:(row20,row15) outputs:(copyOfout2_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_6 - inputs:(row21,row17) outputs:(copyOfout2_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tReplicate_1 - inputs:(row5) outputs:(row9,row10,row19,row20,row21,row28,row9,row10,row19,row20,row21,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_7 - inputs:(row28,row25,row27) outputs:(copyOfcopyOfout2_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:xmd28E+wePH3codgBb6MRdtD7W16lno6LVMW6Q==");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "HDSHData" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_2 = "";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row5.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.CD_LOCALI1 = tmpContent_tDBInput_2;
                }
            } else {
                row5.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row5.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.VILLE = tmpContent_tDBInput_2;
                }
            } else {
                row5.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row5.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.DP = tmpContent_tDBInput_2;
                }
            } else {
                row5.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row5.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row5.DT = tmpContent_tDBInput_2;
                }
            } else {
                row5.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


	row9 = new row9Struct();
						
	row9.CD_LOCALI1 = row5.CD_LOCALI1;								
	row9.VILLE = row5.VILLE;								
	row9.DP = row5.DP;								
	row9.DT = row5.DT;			
	row10 = new row10Struct();
						
	row10.CD_LOCALI1 = row5.CD_LOCALI1;								
	row10.VILLE = row5.VILLE;								
	row10.DP = row5.DP;								
	row10.DT = row5.DT;			
	row19 = new row19Struct();
						
	row19.CD_LOCALI1 = row5.CD_LOCALI1;								
	row19.VILLE = row5.VILLE;								
	row19.DP = row5.DP;								
	row19.DT = row5.DT;			
	row20 = new row20Struct();
						
	row20.CD_LOCALI1 = row5.CD_LOCALI1;								
	row20.VILLE = row5.VILLE;								
	row20.DP = row5.DP;								
	row20.DT = row5.DT;			
	row21 = new row21Struct();
						
	row21.CD_LOCALI1 = row5.CD_LOCALI1;								
	row21.VILLE = row5.VILLE;								
	row21.DP = row5.DP;								
	row21.DT = row5.DT;			
	row28 = new row28Struct();
						
	row28.CD_LOCALI1 = row5.CD_LOCALI1;								
	row28.VILLE = row5.VILLE;								
	row28.DP = row5.DP;								
	row28.DT = row5.DT;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row9");
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.CD_LOCALI1 = row9.CD_LOCALI1;
				
				row9_HashRow.VILLE = row9.VILLE;
				
				row9_HashRow.DP = row9.DP;
				
				row9_HashRow.DT = row9.DT;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */




	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.CD_LOCALI1 = row10.CD_LOCALI1;
				
				row10_HashRow.VILLE = row10.VILLE;
				
				row10_HashRow.DP = row10.DP;
				
				row10_HashRow.DT = row10.DT;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */




	
	/**
	 * [tAdvancedHash_row19 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row19");
					}
					


			   
			   

					row19Struct row19_HashRow = new row19Struct();
		   	   	   
				
				row19_HashRow.CD_LOCALI1 = row19.CD_LOCALI1;
				
				row19_HashRow.VILLE = row19.VILLE;
				
				row19_HashRow.DP = row19.DP;
				
				row19_HashRow.DT = row19.DT;
				
			tHash_Lookup_row19.put(row19_HashRow);
			
            




 


	tos_count_tAdvancedHash_row19++;

/**
 * [tAdvancedHash_row19 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row19 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 process_data_end ] stop
 */




	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row20");
					}
					


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.CD_LOCALI1 = row20.CD_LOCALI1;
				
				row20_HashRow.VILLE = row20.VILLE;
				
				row20_HashRow.DP = row20.DP;
				
				row20_HashRow.DT = row20.DT;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 process_data_end ] stop
 */




	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row21");
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.CD_LOCALI1 = row21.CD_LOCALI1;
				
				row21_HashRow.VILLE = row21.VILLE;
				
				row21_HashRow.DP = row21.DP;
				
				row21_HashRow.DT = row21.DT;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */




	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row28");
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.CD_LOCALI1 = row28.CD_LOCALI1;
				
				row28_HashRow.VILLE = row28.VILLE;
				
				row28_HashRow.DP = row28.DP;
				
				row28_HashRow.DT = row28.DT;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */




	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */




	
	/**
	 * [tAdvancedHash_row19 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

tHash_Lookup_row19.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row19", true);
end_Hash.put("tAdvancedHash_row19", System.currentTimeMillis());




/**
 * [tAdvancedHash_row19 end ] stop
 */




	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

tHash_Lookup_row20.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */




	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */




	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";

	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";

	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_row19 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row19";

	

 



/**
 * [tAdvancedHash_row19 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";

	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";

	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */




	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";

	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
						this.CptVacantPers = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
						this.CptVacantPers = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
						this.CptVacantPers = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
						this.CptVacantPers = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CptVacantPers = readInteger(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public java.util.Date MajDATE;

				public java.util.Date getMajDATE () {
					return this.MajDATE;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CptVacantPers;

				public Integer getCptVacantPers () {
					return this.CptVacantPers;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.MajDATE = readDate(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CptVacantPers = readInteger(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.MajDATE,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CptVacantPers,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("MajDATE="+String.valueOf(MajDATE));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CptVacantPers="+String.valueOf(CptVacantPers));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row8Struct row8 = new row8Struct();
out2Struct out2 = new out2Struct();
row11Struct row11 = new row11Struct();
row12Struct row12 = new row12Struct();






	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				java.util.Date MajDATE;BigDecimal NB_PAT_sum;
           			BigDecimal NB_VACANT_sum;
           			
         			Integer CptVacantPers_sum;
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.MajDATE == null) ? 0 : this.MajDATE.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.MajDATE == null) {
								if (other.MajDATE != null) 
									return false;
							} else if (!this.MajDATE.equals(other.MajDATE)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String DP;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "\nselect \n	DT_ALIM as MajDATE,\n	CD_LOCALI1,\n	CAST(1 as float) as NB_PAT,\n	CAST(CASE \n		WHEN MOTIF_VAC not in ('VAC"
+"ANT VENDU SYNDIC', 'VACANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION', 'NON RENSEIGNÉ') then 1\n		ELSE 0"
+"\n	END as float) as NB_VACANT,\n	CASE \n		WHEN MOTIF_VAC  not in ('VACANT VENDU SYNDIC', 'VACANT ACCESSION', 'VACANT IMPR"
+"ODUCTIF', 'VACANT REHABILITATION') and CPT_VAC_M = 1 and SIO_CD_TYPLOC <> 'CH' THEN CAST(left(SIO_CD_TYPLOC, 1) as int) "
+"+ 1\n		WHEN MOTIF_VAC  not in ('VACANT VENDU SYNDIC', 'VACANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION')"
+" and CPT_VAC_M = 1 and SIO_CD_TYPLOC = 'CH' THEN 1\n		ELSE 0\n	END AS CptVacantPers,\n	CD_PATRIM1\n	from\n	SID_PATRIMOIN"
+"E_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCALI1\n	where s.DT_ANNEE = datepart(year, dateadd(mm, -1"
+", GETDATE()))\n	and s.DT_MOIS = datepart(month, dateadd(mm, -1, GETDATE()))\n	AND CD_SOCPROP = 1\n	--and param.DP = 'BAG"
+"NEUX'\n	and SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') \n	and CD_PATRIM4"
+" <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00:00:00'}\n	OR DTF_PAT_G > DATE)\n	AND DTD_PAT_G <= DATE"
+"\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row8.MajDATE = null;
							} else {
										
			row8.MajDATE = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 1);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row8.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row8.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row8.CD_LOCALI1 = tmpContent_tDBInput_3.trim();
                }
            } else {
                row8.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row8.NB_PAT = null;
							} else {
		                          
            row8.NB_PAT = rs_tDBInput_3.getFloat(3);
            if(rs_tDBInput_3.wasNull()){
                    row8.NB_PAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row8.NB_VACANT = null;
							} else {
		                          
            row8.NB_VACANT = rs_tDBInput_3.getFloat(4);
            if(rs_tDBInput_3.wasNull()){
                    row8.NB_VACANT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row8.CptVacantPers = null;
							} else {
		                          
            row8.CptVacantPers = rs_tDBInput_3.getInt(5);
            if(rs_tDBInput_3.wasNull()){
                    row8.CptVacantPers = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row8.CD_PATRIM1 = null;
							} else {
		                          
            row8.CD_PATRIM1 = rs_tDBInput_3.getInt(6);
            if(rs_tDBInput_3.wasNull()){
                    row8.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row10HashKey.CD_LOCALI1 = row8.CD_LOCALI1 ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.CD_LOCALI1 = '" + row10HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row10Struct row10 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.DP = row10.DP != null ?
	(row10.DP.equals("SURESNES") ?
		(row8.CD_PATRIM1 == 3023 
		|| row8.CD_PATRIM1 == 3800
		|| row8.CD_PATRIM1 == 3804
		|| row8.CD_PATRIM1 == 3801
		|| row8.CD_PATRIM1 == 3802
		|| row8.CD_PATRIM1 == 3806
		|| row8.CD_PATRIM1 == 3024
		|| row8.CD_PATRIM1 == 3025
		|| row8.CD_PATRIM1 == 3701
		|| row8.CD_PATRIM1 == 3027
		|| row8.CD_PATRIM1 == 11013
		|| row8.CD_PATRIM1 == 11022
		|| row8.CD_PATRIM1 == 3803 
		|| row8.CD_PATRIM1 == 3700
		|| row8.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row10.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.MajDATE = row8.MajDATE ;
out2_tmp.NB_PAT = row8.NB_PAT ;
out2_tmp.NB_VACANT = row8.NB_VACANT ;
out2_tmp.DP = Var.DP ;
out2_tmp.CptVacantPers = row8.CptVacantPers ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					

          row11 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((out2.DP == null? false : out2.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row11 == null){ 
                row11 = new row11Struct();
              }
               row11.MajDATE = out2.MajDATE;
               row11.NB_PAT = out2.NB_PAT;
               row11.NB_VACANT = out2.NB_VACANT;
               row11.DP = out2.DP;
               row11.CptVacantPers = out2.CptVacantPers;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					
	
operation_finder_tAggregateRow_2.MajDATE = row11.MajDATE;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.MajDATE = operation_finder_tAggregateRow_2.MajDATE;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_2.NB_PAT_sum == null) {
						operation_result_tAggregateRow_2.NB_PAT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_2.NB_PAT_sum = operation_result_tAggregateRow_2.NB_PAT_sum.add(
						new BigDecimal(
							String.valueOf(
								row11.NB_PAT
							)
						)
					);
					
					if(operation_result_tAggregateRow_2.NB_VACANT_sum == null) {
						operation_result_tAggregateRow_2.NB_VACANT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_2.NB_VACANT_sum = operation_result_tAggregateRow_2.NB_VACANT_sum.add(
						new BigDecimal(
							String.valueOf(
								row11.NB_VACANT
							)
						)
					);
					
					if(operation_result_tAggregateRow_2.CptVacantPers_sum == null) {
						operation_result_tAggregateRow_2.CptVacantPers_sum = (int) 0;
					}
					
					if( row11.CptVacantPers != null)
						operation_result_tAggregateRow_2.CptVacantPers_sum += row11.CptVacantPers;


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row12 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row12", false);
		start_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tAdvancedHash_row12 = 0;
		

			   		// connection name:row12
			   		// source node:tAggregateRow_2_AGGIN - inputs:(OnRowsEnd) outputs:(row12,row12) | target node:tAdvancedHash_row12 - inputs:(row12) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row12,row22,row23,row24,row29) outputs:(sortie_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row12 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row12Struct> tHash_Lookup_row12 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row12Struct>getLookup(matchingModeEnum_row12);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row12", tHash_Lookup_row12);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row12 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

            				    row12.MajDATE = aggregated_row_tAggregateRow_2.MajDATE;
            				    
    								if(aggregated_row_tAggregateRow_2.NB_PAT_sum != null) {
    								row12.NB_PAT = aggregated_row_tAggregateRow_2.NB_PAT_sum.floatValue();
										
    								}else{
    								
    									row12.NB_PAT = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_2.NB_VACANT_sum != null) {
    								row12.NB_VACANT = aggregated_row_tAggregateRow_2.NB_VACANT_sum.floatValue();
										
    								}else{
    								
    									row12.NB_VACANT = null;
    									
    								}
    								row12.CptVacantPers = aggregated_row_tAggregateRow_2.CptVacantPers_sum;
                                	

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					


			   
			   

					row12Struct row12_HashRow = new row12Struct();
		   	   	   
				
				row12_HashRow.MajDATE = row12.MajDATE;
				
				row12_HashRow.NB_PAT = row12.NB_PAT;
				
				row12_HashRow.NB_VACANT = row12.NB_VACANT;
				
				row12_HashRow.DP = row12.DP;
				
				row12_HashRow.CptVacantPers = row12.CptVacantPers;
				
			tHash_Lookup_row12.put(row12_HashRow);
			
            




 


	tos_count_tAdvancedHash_row12++;

/**
 * [tAdvancedHash_row12 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row12 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

tHash_Lookup_row12.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row12", true);
end_Hash.put("tAdvancedHash_row12", System.currentTimeMillis());




/**
 * [tAdvancedHash_row12 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";

	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";

	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row12 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row12";

	

 



/**
 * [tAdvancedHash_row12 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout2Struct implements routines.system.IPersistableRow<copyOfout2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row13Struct row13 = new row13Struct();
copyOfout2Struct copyOfout2 = new copyOfout2Struct();
row14Struct row14 = new row14Struct();
row22Struct row22 = new row22Struct();






	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_PAT_sum;
           			BigDecimal NB_VACANT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct> tHash_Lookup_row19 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row19Struct>) 
					globalMap.get( "tHash_Lookup_row19" ))
					;					
					
	

row19Struct row19HashKey = new row19Struct();
row19Struct row19Default = new row19Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
	String DP;
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "\nselect \n	CD_LOCALI1,\n	CAST(1 as float) as NB_PAT,\n	CAST(CASE \n		WHEN MOTIF_VAC not in ('VACANT VENDU SYNDIC', 'VA"
+"CANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION', 'NON RENSEIGNÉ') then 1\n		ELSE 0\n	END as float) as NB_"
+"VACANT,\n	CD_PATRIM1\n	from\n	SID_PATRIMOINE_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCALI1\n	where"
+" s.DT_ANNEE = datepart(year, dateadd(mm, -2, GETDATE()))\n	AND CD_SOCPROP = 1\n	and s.DT_MOIS = datepart(month, dateadd("
+"mm, -2, GETDATE()))\n	--and param.DP = 'BAGNEUX'\n	and SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LO"
+"GEMENT CIAL.','PAVILLON') \n	and CD_PATRIM4 <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00:00:00'}\n	OR"
+" DTF_PAT_G > DATE)\n	AND DTD_PAT_G <= DATE\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row13.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row13.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row13.CD_LOCALI1 = tmpContent_tDBInput_4.trim();
                }
            } else {
                row13.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row13.NB_PAT = null;
							} else {
		                          
            row13.NB_PAT = rs_tDBInput_4.getFloat(2);
            if(rs_tDBInput_4.wasNull()){
                    row13.NB_PAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row13.NB_VACANT = null;
							} else {
		                          
            row13.NB_VACANT = rs_tDBInput_4.getFloat(3);
            if(rs_tDBInput_4.wasNull()){
                    row13.NB_VACANT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row13.CD_PATRIM1 = null;
							} else {
		                          
            row13.CD_PATRIM1 = rs_tDBInput_4.getInt(4);
            if(rs_tDBInput_4.wasNull()){
                    row13.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row19" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow19 = false;
       		  	    	
       		  	    	
 							row19Struct row19ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row19HashKey.CD_LOCALI1 = row13.CD_LOCALI1 ;
                        		    		

								
		                        	row19HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row19.lookup( row19HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row19 != null && tHash_Lookup_row19.getCount(row19HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row19' and it contains more one result from keys :  row19.CD_LOCALI1 = '" + row19HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row19Struct row19 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row19Struct fromLookup_row19 = null;
							row19 = row19Default;
										 
							
								 
							
							
								if (tHash_Lookup_row19 !=null && tHash_Lookup_row19.hasNext()) { // G 099
								
							
								
								fromLookup_row19 = tHash_Lookup_row19.next();

							
							
								} // G 099
							
							

							if(fromLookup_row19 != null) {
								row19 = fromLookup_row19;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;
Var.DP = row19.DP != null ?
	(row19.DP.equals("SURESNES") ?
		(row13.CD_PATRIM1 == 3023 
		|| row13.CD_PATRIM1 == 3800
		|| row13.CD_PATRIM1 == 3804
		|| row13.CD_PATRIM1 == 3801
		|| row13.CD_PATRIM1 == 3802
		|| row13.CD_PATRIM1 == 3806
		|| row13.CD_PATRIM1 == 3024
		|| row13.CD_PATRIM1 == 3025
		|| row13.CD_PATRIM1 == 3701
		|| row13.CD_PATRIM1 == 3027
		|| row13.CD_PATRIM1 == 11013
		|| row13.CD_PATRIM1 == 11022
		|| row13.CD_PATRIM1 == 3803 
		|| row13.CD_PATRIM1 == 3700
		|| row13.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row19.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfout2 = null;


// # Output table : 'copyOfout2'
copyOfout2_tmp.NB_PAT = row13.NB_PAT ;
copyOfout2_tmp.NB_VACANT = row13.NB_VACANT ;
copyOfout2_tmp.DP = Var.DP ;
copyOfout2 = copyOfout2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout2"
if(copyOfout2 != null) { 



	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout2");
					}
					

          row14 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((copyOfout2.DP == null? false : copyOfout2.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row14 == null){ 
                row14 = new row14Struct();
              }
               row14.NB_PAT = copyOfout2.NB_PAT;
               row14.NB_VACANT = copyOfout2.NB_VACANT;
               row14.DP = copyOfout2.DP;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row14"
if(row14 != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row14");
					}
					
	


	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_3.NB_PAT_sum == null) {
						operation_result_tAggregateRow_3.NB_PAT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_3.NB_PAT_sum = operation_result_tAggregateRow_3.NB_PAT_sum.add(
						new BigDecimal(
							String.valueOf(
								row14.NB_PAT
							)
						)
					);
					
					if(operation_result_tAggregateRow_3.NB_VACANT_sum == null) {
						operation_result_tAggregateRow_3.NB_VACANT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_3.NB_VACANT_sum = operation_result_tAggregateRow_3.NB_VACANT_sum.add(
						new BigDecimal(
							String.valueOf(
								row14.NB_VACANT
							)
						)
					);
					


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "row14"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */

} // End of branch "copyOfout2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row19 != null) {
						tHash_Lookup_row19.endGet();
					}
					globalMap.remove( "tHash_Lookup_row19" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tAggregateRow_3_AGGIN - inputs:(OnRowsEnd) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row12,row22,row23,row24,row29) outputs:(sortie_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

    								if(aggregated_row_tAggregateRow_3.NB_PAT_sum != null) {
    								row22.NB_PAT = aggregated_row_tAggregateRow_3.NB_PAT_sum.floatValue();
										
    								}else{
    								
    									row22.NB_PAT = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_3.NB_VACANT_sum != null) {
    								row22.NB_VACANT = aggregated_row_tAggregateRow_3.NB_VACANT_sum.floatValue();
										
    								}else{
    								
    									row22.NB_VACANT = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row22");
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.NB_PAT = row22.NB_PAT;
				
				row22_HashRow.NB_VACANT = row22.NB_VACANT;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row19"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";

	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";

	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";

	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout2_0Struct implements routines.system.IPersistableRow<copyOfout2_0Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_5Struct implements routines.system.IPersistableRow<after_tDBInput_5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row15Struct row15 = new row15Struct();
copyOfout2_0Struct copyOfout2_0 = new copyOfout2_0Struct();
row16Struct row16 = new row16Struct();
row23Struct row23 = new row23Struct();






	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

	

	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_PAT_sum;
           			BigDecimal NB_VACANT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_4", false);
		start_Hash.put("tFilterRow_4", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2_0");
					}
				
		int tos_count_tFilterRow_4 = 0;
		
    int nb_line_tFilterRow_4 = 0;
    int nb_line_ok_tFilterRow_4 = 0;
    int nb_line_reject_tFilterRow_4 = 0;

    class Operator_tFilterRow_4 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_4(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_4 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
	String DP;
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout2_0Struct copyOfout2_0_tmp = new copyOfout2_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_5 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "\nselect \n	CD_LOCALI1,\n	CAST(1 as float) as NB_PAT,\n	CAST(CASE \n		WHEN MOTIF_VAC not in ('VACANT VENDU SYNDIC', 'VA"
+"CANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION', 'NON RENSEIGNÉ') then 1\n		ELSE 0\n	END as float) as NB_"
+"VACANT,\n	CD_PATRIM1\n	from\n	SID_PATRIMOINE_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCALI1\n	where"
+" s.DT_ANNEE = datepart(year, dateadd(mm, -1, GETDATE()))\n	and s.DT_MOIS = datepart(month, dateadd(mm, -1, GETDATE()))\n"
+"	AND CD_SOCPROP = 1\n	--and param.DP = 'BAGNEUX'\n	and SIO_LB_NATLOC In  ('PARKING','GARAGE','PARKING LIBRE') \n	and CD_"
+"PATRIM4 <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00:00:00'}\n	OR DTF_PAT_G > DATE)\n	AND DTD_PAT_G <"
+"= DATE\n";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row15.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row15.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row15.CD_LOCALI1 = tmpContent_tDBInput_5.trim();
                }
            } else {
                row15.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row15.NB_PAT = null;
							} else {
		                          
            row15.NB_PAT = rs_tDBInput_5.getFloat(2);
            if(rs_tDBInput_5.wasNull()){
                    row15.NB_PAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row15.NB_VACANT = null;
							} else {
		                          
            row15.NB_VACANT = rs_tDBInput_5.getFloat(3);
            if(rs_tDBInput_5.wasNull()){
                    row15.NB_VACANT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row15.CD_PATRIM1 = null;
							} else {
		                          
            row15.CD_PATRIM1 = rs_tDBInput_5.getInt(4);
            if(rs_tDBInput_5.wasNull()){
                    row15.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row15");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_5 = false;
		  boolean mainRowRejected_tMap_5 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row20HashKey.CD_LOCALI1 = row15.CD_LOCALI1 ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.CD_LOCALI1 = '" + row20HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row20Struct row20 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;
Var.DP = row20.DP != null ?
	(row20.DP.equals("SURESNES") ?
		(row15.CD_PATRIM1 == 3023 
		|| row15.CD_PATRIM1 == 3800
		|| row15.CD_PATRIM1 == 3804
		|| row15.CD_PATRIM1 == 3801
		|| row15.CD_PATRIM1 == 3802
		|| row15.CD_PATRIM1 == 3806
		|| row15.CD_PATRIM1 == 3024
		|| row15.CD_PATRIM1 == 3025
		|| row15.CD_PATRIM1 == 3701
		|| row15.CD_PATRIM1 == 3027
		|| row15.CD_PATRIM1 == 11013
		|| row15.CD_PATRIM1 == 11022
		|| row15.CD_PATRIM1 == 3803 
		|| row15.CD_PATRIM1 == 3700
		|| row15.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row20.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfout2_0 = null;


// # Output table : 'copyOfout2_0'
copyOfout2_0_tmp.NB_PAT = row15.NB_PAT ;
copyOfout2_0_tmp.NB_VACANT = row15.NB_VACANT ;
copyOfout2_0_tmp.DP = Var.DP ;
copyOfout2_0 = copyOfout2_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "copyOfout2_0"
if(copyOfout2_0 != null) { 



	
	/**
	 * [tFilterRow_4 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout2_0");
					}
					

          row16 = null;
    Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
            ope_tFilterRow_4.matches((copyOfout2_0.DP == null? false : copyOfout2_0.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_4.getMatchFlag()) {
              if(row16 == null){ 
                row16 = new row16Struct();
              }
               row16.NB_PAT = copyOfout2_0.NB_PAT;
               row16.NB_VACANT = copyOfout2_0.NB_VACANT;
               row16.DP = copyOfout2_0.DP;    
      nb_line_ok_tFilterRow_4++;
    } else {
      nb_line_reject_tFilterRow_4++;
    }

nb_line_tFilterRow_4++;

 


	tos_count_tFilterRow_4++;

/**
 * [tFilterRow_4 main ] stop
 */
	
	/**
	 * [tFilterRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_begin ] stop
 */
// Start of branch "row16"
if(row16 != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row16");
					}
					
	


	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		
		
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_4.NB_PAT_sum == null) {
						operation_result_tAggregateRow_4.NB_PAT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_4.NB_PAT_sum = operation_result_tAggregateRow_4.NB_PAT_sum.add(
						new BigDecimal(
							String.valueOf(
								row16.NB_PAT
							)
						)
					);
					
					if(operation_result_tAggregateRow_4.NB_VACANT_sum == null) {
						operation_result_tAggregateRow_4.NB_VACANT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_4.NB_VACANT_sum = operation_result_tAggregateRow_4.NB_VACANT_sum.add(
						new BigDecimal(
							String.valueOf(
								row16.NB_VACANT
							)
						)
					);
					


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "row16"




	
	/**
	 * [tFilterRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 process_data_end ] stop
 */

} // End of branch "copyOfout2_0"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tFilterRow_4 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	
    globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
    globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2_0");
			  	}
			  	
 

ok_Hash.put("tFilterRow_4", true);
end_Hash.put("tFilterRow_4", System.currentTimeMillis());




/**
 * [tFilterRow_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tAggregateRow_4_AGGIN - inputs:(OnRowsEnd) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row12,row22,row23,row24,row29) outputs:(sortie_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

    								if(aggregated_row_tAggregateRow_4.NB_PAT_sum != null) {
    								row23.NB_PAT = aggregated_row_tAggregateRow_4.NB_PAT_sum.floatValue();
										
    								}else{
    								
    									row23.NB_PAT = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_4.NB_VACANT_sum != null) {
    								row23.NB_VACANT = aggregated_row_tAggregateRow_4.NB_VACANT_sum.floatValue();
										
    								}else{
    								
    									row23.NB_VACANT = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row23");
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.NB_PAT = row23.NB_PAT;
				
				row23_HashRow.NB_VACANT = row23.NB_VACANT;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";

	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tFilterRow_4 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_4";

	

 



/**
 * [tFilterRow_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";

	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";

	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";

	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout2_1Struct implements routines.system.IPersistableRow<copyOfout2_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_6Struct implements routines.system.IPersistableRow<after_tDBInput_6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Float NB_PAT;

				public Float getNB_PAT () {
					return this.NB_PAT;
				}
				
			    public Float NB_VACANT;

				public Float getNB_VACANT () {
					return this.NB_VACANT;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_PAT = null;
           				} else {
           			    	this.NB_PAT = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.NB_VACANT = null;
           				} else {
           			    	this.NB_VACANT = dis.readFloat();
           				}
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Float
				
						if(this.NB_PAT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_PAT);
		            	}
					
					// Float
				
						if(this.NB_VACANT == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.NB_VACANT);
		            	}
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",NB_PAT="+String.valueOf(NB_PAT));
		sb.append(",NB_VACANT="+String.valueOf(NB_VACANT));
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row17Struct row17 = new row17Struct();
copyOfout2_1Struct copyOfout2_1 = new copyOfout2_1Struct();
row18Struct row18 = new row18Struct();
row24Struct row24 = new row24Struct();






	
	/**
	 * [tAggregateRow_5_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGOUT", false);
		start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAggregateRow_5_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

	

	class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal NB_PAT_sum;
           			BigDecimal NB_VACANT_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
	AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
	java.util.Map<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5>();
	

 



/**
 * [tAggregateRow_5_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_5", false);
		start_Hash.put("tFilterRow_5", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2_1");
					}
				
		int tos_count_tFilterRow_5 = 0;
		
    int nb_line_tFilterRow_5 = 0;
    int nb_line_ok_tFilterRow_5 = 0;
    int nb_line_reject_tFilterRow_5 = 0;

    class Operator_tFilterRow_5 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_5(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_5 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	String DP;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout2_1Struct copyOfout2_1_tmp = new copyOfout2_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				conn_tDBInput_6 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_6 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "\nselect \n	CD_LOCALI1,\n	CAST(1 as float) as NB_PAT,\n	CAST(CASE \n		WHEN MOTIF_VAC not in ('VACANT VENDU SYNDIC', 'VA"
+"CANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION', 'NON RENSEIGNÉ') then 1\n		ELSE 0\n	END as float) as NB_"
+"VACANT,\n	CD_PATRIM1\n	from\n	SID_PATRIMOINE_GIM s \n	--left join @DTDP param on s.CD_LOCALI1 = param.CD_LOCALI1\n	where"
+" s.DT_ANNEE = datepart(year, dateadd(mm, -2, GETDATE()))\n	and s.DT_MOIS = datepart(month, dateadd(mm, -2, GETDATE()))\n"
+"	AND CD_SOCPROP = 1\n	--and param.DP = 'BAGNEUX'\n	and SIO_LB_NATLOC In  ('PARKING','GARAGE','PARKING LIBRE') \n	and CD_"
+"PATRIM4 <>  0\n	and CD_ETAT = 'MS'\n	AND (DTF_PAT_G ={ts '1900-01-01 00:00:00'}\n	OR DTF_PAT_G > DATE)\n	AND DTD_PAT_G <"
+"= DATE\n";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row17.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row17.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row17.CD_LOCALI1 = tmpContent_tDBInput_6.trim();
                }
            } else {
                row17.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row17.NB_PAT = null;
							} else {
		                          
            row17.NB_PAT = rs_tDBInput_6.getFloat(2);
            if(rs_tDBInput_6.wasNull()){
                    row17.NB_PAT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row17.NB_VACANT = null;
							} else {
		                          
            row17.NB_VACANT = rs_tDBInput_6.getFloat(3);
            if(rs_tDBInput_6.wasNull()){
                    row17.NB_VACANT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row17.CD_PATRIM1 = null;
							} else {
		                          
            row17.CD_PATRIM1 = rs_tDBInput_6.getInt(4);
            if(rs_tDBInput_6.wasNull()){
                    row17.CD_PATRIM1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row17");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_6 = false;
		  boolean mainRowRejected_tMap_6 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row21HashKey.CD_LOCALI1 = row17.CD_LOCALI1 ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.CD_LOCALI1 = '" + row21HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row21Struct row21 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.DP = row21.DP != null ?
	(row21.DP.equals("SURESNES") ?
		(row17.CD_PATRIM1 == 3023 
		|| row17.CD_PATRIM1 == 3800
		|| row17.CD_PATRIM1 == 3804
		|| row17.CD_PATRIM1 == 3801
		|| row17.CD_PATRIM1 == 3802
		|| row17.CD_PATRIM1 == 3806
		|| row17.CD_PATRIM1 == 3024
		|| row17.CD_PATRIM1 == 3025
		|| row17.CD_PATRIM1 == 3701
		|| row17.CD_PATRIM1 == 3027
		|| row17.CD_PATRIM1 == 11013
		|| row17.CD_PATRIM1 == 11022
		|| row17.CD_PATRIM1 == 3803 
		|| row17.CD_PATRIM1 == 3700
		|| row17.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row21.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfout2_1 = null;


// # Output table : 'copyOfout2_1'
copyOfout2_1_tmp.NB_PAT = row17.NB_PAT ;
copyOfout2_1_tmp.NB_VACANT = row17.NB_VACANT ;
copyOfout2_1_tmp.DP = Var.DP ;
copyOfout2_1 = copyOfout2_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfout2_1"
if(copyOfout2_1 != null) { 



	
	/**
	 * [tFilterRow_5 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout2_1");
					}
					

          row18 = null;
    Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
            ope_tFilterRow_5.matches((copyOfout2_1.DP == null? false : copyOfout2_1.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_5.getMatchFlag()) {
              if(row18 == null){ 
                row18 = new row18Struct();
              }
               row18.NB_PAT = copyOfout2_1.NB_PAT;
               row18.NB_VACANT = copyOfout2_1.NB_VACANT;
               row18.DP = copyOfout2_1.DP;    
      nb_line_ok_tFilterRow_5++;
    } else {
      nb_line_reject_tFilterRow_5++;
    }

nb_line_tFilterRow_5++;

 


	tos_count_tFilterRow_5++;

/**
 * [tFilterRow_5 main ] stop
 */
	
	/**
	 * [tFilterRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tAggregateRow_5_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row18");
					}
					
	


	operation_finder_tAggregateRow_5.hashCodeDirty = true;
	
	operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

	

	if(operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

		
		
		

		hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_5.NB_PAT_sum == null) {
						operation_result_tAggregateRow_5.NB_PAT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_5.NB_PAT_sum = operation_result_tAggregateRow_5.NB_PAT_sum.add(
						new BigDecimal(
							String.valueOf(
								row18.NB_PAT
							)
						)
					);
					
					if(operation_result_tAggregateRow_5.NB_VACANT_sum == null) {
						operation_result_tAggregateRow_5.NB_VACANT_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_5.NB_VACANT_sum = operation_result_tAggregateRow_5.NB_VACANT_sum.add(
						new BigDecimal(
							String.valueOf(
								row18.NB_VACANT
							)
						)
					);
					


 


	tos_count_tAggregateRow_5_AGGOUT++;

/**
 * [tAggregateRow_5_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFilterRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 process_data_end ] stop
 */

} // End of branch "copyOfout2_1"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tFilterRow_5 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	
    globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
    globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2_1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_5", true);
end_Hash.put("tFilterRow_5", System.currentTimeMillis());




/**
 * [tFilterRow_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_5_AGGOUT", true);
end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row24 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row24", false);
		start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row24";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tAdvancedHash_row24 = 0;
		

			   		// connection name:row24
			   		// source node:tAggregateRow_5_AGGIN - inputs:(OnRowsEnd) outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row12,row22,row23,row24,row29) outputs:(sortie_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row24Struct>getLookup(matchingModeEnum_row24);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row24 begin ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGIN", false);
		start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	
		int tos_count_tAggregateRow_5_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5.values();

globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

for(AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600



 



/**
 * [tAggregateRow_5_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

    								if(aggregated_row_tAggregateRow_5.NB_PAT_sum != null) {
    								row24.NB_PAT = aggregated_row_tAggregateRow_5.NB_PAT_sum.floatValue();
										
    								}else{
    								
    									row24.NB_PAT = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_5.NB_VACANT_sum != null) {
    								row24.NB_VACANT = aggregated_row_tAggregateRow_5.NB_VACANT_sum.floatValue();
										
    								}else{
    								
    									row24.NB_VACANT = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_5_AGGIN++;

/**
 * [tAggregateRow_5_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row24");
					}
					


			   
			   

					row24Struct row24_HashRow = new row24Struct();
		   	   	   
				
				row24_HashRow.NB_PAT = row24.NB_PAT;
				
				row24_HashRow.NB_VACANT = row24.NB_VACANT;
				
			tHash_Lookup_row24.put(row24_HashRow);
			
            




 


	tos_count_tAdvancedHash_row24++;

/**
 * [tAdvancedHash_row24 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

 



/**
 * [tAdvancedHash_row24 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row24 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

 



/**
 * [tAdvancedHash_row24 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_5_AGGIN", true);
end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

tHash_Lookup_row24.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row24", true);
end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());




/**
 * [tAdvancedHash_row24 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_5_AGGIN"
							globalMap.remove("tAggregateRow_5");
						
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";

	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tFilterRow_5 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_5";

	

 



/**
 * [tFilterRow_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";

	

 



/**
 * [tAggregateRow_5_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";

	

 



/**
 * [tAggregateRow_5_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row24 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row24";

	

 



/**
 * [tAdvancedHash_row24 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				
			    public Float Facturable;

				public Float getFacturable () {
					return this.Facturable;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Facturable = null;
           				} else {
           			    	this.Facturable = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
					// Float
				
						if(this.Facturable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Facturable);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PerteFi="+String.valueOf(PerteFi));
		sb.append(",Facturable="+String.valueOf(Facturable));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				
			    public Float Facturable;

				public Float getFacturable () {
					return this.Facturable;
				}
				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Facturable = null;
           				} else {
           			    	this.Facturable = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
					// Float
				
						if(this.Facturable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Facturable);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PerteFi="+String.valueOf(PerteFi));
		sb.append(",Facturable="+String.valueOf(Facturable));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				
			    public Float Facturable;

				public Float getFacturable () {
					return this.Facturable;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Facturable = null;
           				} else {
           			    	this.Facturable = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
					// Float
				
						if(this.Facturable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Facturable);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PerteFi="+String.valueOf(PerteFi));
		sb.append(",Facturable="+String.valueOf(Facturable));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfcopyOfout2_1Struct implements routines.system.IPersistableRow<copyOfcopyOfout2_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				
			    public Float Facturable;

				public Float getFacturable () {
					return this.Facturable;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Facturable = null;
           				} else {
           			    	this.Facturable = dis.readFloat();
           				}
					
					this.DP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
					// Float
				
						if(this.Facturable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Facturable);
		            	}
					
					// String
				
						writeString(this.DP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PerteFi="+String.valueOf(PerteFi));
		sb.append(",Facturable="+String.valueOf(Facturable));
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout2_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",PerteFi="+String.valueOf(PerteFi));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float PerteFi;

				public Float getPerteFi () {
					return this.PerteFi;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.PerteFi = null;
           				} else {
           			    	this.PerteFi = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// Float
				
						if(this.PerteFi == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.PerteFi);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",PerteFi="+String.valueOf(PerteFi));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);
		tDBInput_8Process(globalMap);

		row25Struct row25 = new row25Struct();
copyOfcopyOfout2_1Struct copyOfcopyOfout2_1 = new copyOfcopyOfout2_1Struct();
row26Struct row26 = new row26Struct();
row29Struct row29 = new row29Struct();






	
	/**
	 * [tAggregateRow_6_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGOUT", false);
		start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tAggregateRow_6_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

	

	class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal PerteFi_sum;
           			BigDecimal Facturable_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
	AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
	java.util.Map<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6>();
	

 



/**
 * [tAggregateRow_6_AGGOUT begin ] stop
 */



	
	/**
	 * [tFilterRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_6", false);
		start_Hash.put("tFilterRow_6", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout2_1");
					}
				
		int tos_count_tFilterRow_6 = 0;
		
    int nb_line_tFilterRow_6 = 0;
    int nb_line_ok_tFilterRow_6 = 0;
    int nb_line_reject_tFilterRow_6 = 0;

    class Operator_tFilterRow_6 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_6(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_6 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct>) 
					globalMap.get( "tHash_Lookup_row27" ))
					;					
					
	

row27Struct row27HashKey = new row27Struct();
row27Struct row27Default = new row27Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
	String DP;
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout2_1Struct copyOfcopyOfout2_1_tmp = new copyOfcopyOfout2_1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tDBInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_7", false);
		start_Hash.put("tDBInput_7", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_7";

	
		int tos_count_tDBInput_7 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_7  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7); 
		    int nb_line_tDBInput_7 = 0;
		    java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_7 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

		    String dbquery_tDBInput_7 = "\nselect \n	s.CD_LOCALI1,\n	CD_PATRIM1,\n	sum(s.CHIF_VAC_DISPO+ s.CHIF_VAC_INDISPO) as PerteFi\nFROM SID_PERTES_FIN_GIM"
+" s\nwhere s.DT_ANNEE = datepart(year, dateadd(mm, -1, GETDATE()))\nand s.DT_MOIS = datepart(month, dateadd(mm, -1, GETDA"
+"TE()))\nand S.SIO_LB_NATLOC in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON', 'LGT GARDIEN') "
+"\nAND s.MOTIF_VAC not in ('VACANT VENDU SYNDIC', 'VACANT ACCESSION', 'VACANT IMPRODUCTIF', 'VACANT REHABILITATION') \nAN"
+"D UPPER(s.MOTIF_VAC) like '%VACANT%' \nAND CD_SOCPROP = 1\ngroup by s.CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_7_QUERY",dbquery_tDBInput_7);
		    java.sql.ResultSet rs_tDBInput_7 = null;

		    try {
		    	rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
		    	int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

		    String tmpContent_tDBInput_7 = null;
		    
		    
		    while (rs_tDBInput_7.next()) {
		        nb_line_tDBInput_7++;
		        
							if(colQtyInRs_tDBInput_7 < 1) {
								row25.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_7 = rs_tDBInput_7.getString(1);
            if(tmpContent_tDBInput_7 != null) {
            	if (talendToDBList_tDBInput_7 .contains(rsmd_tDBInput_7.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row25.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
            	} else {
                	row25.CD_LOCALI1 = tmpContent_tDBInput_7.trim();
                }
            } else {
                row25.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 2) {
								row25.CD_PATRIM1 = null;
							} else {
		                          
            row25.CD_PATRIM1 = rs_tDBInput_7.getInt(2);
            if(rs_tDBInput_7.wasNull()){
                    row25.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_7 < 3) {
								row25.PerteFi = null;
							} else {
		                          
            row25.PerteFi = rs_tDBInput_7.getFloat(3);
            if(rs_tDBInput_7.wasNull()){
                    row25.PerteFi = null;
            }
		                    }
					





 



/**
 * [tDBInput_7 begin ] stop
 */
	
	/**
	 * [tDBInput_7 main ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 


	tos_count_tDBInput_7++;

/**
 * [tDBInput_7 main ] stop
 */
	
	/**
	 * [tDBInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row25");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_7 = false;
		  boolean mainRowRejected_tMap_7 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row27" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow27 = false;
       		  	    	
       		  	    	
 							row27Struct row27ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row27HashKey.CD_LOCALI1 = row25.CD_LOCALI1 ;
                        		    		
                        		    		    row27HashKey.CD_PATRIM1 = row25.CD_PATRIM1 ;
                        		    		

								
		                        	row27HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row27.lookup( row27HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row27 != null && tHash_Lookup_row27.getCount(row27HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row27' and it contains more one result from keys :  row27.CD_LOCALI1 = '" + row27HashKey.CD_LOCALI1 + "', row27.CD_PATRIM1 = '" + row27HashKey.CD_PATRIM1 + "'");
								} // G 071
							

							row27Struct row27 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row27Struct fromLookup_row27 = null;
							row27 = row27Default;
										 
							
								 
							
							
								if (tHash_Lookup_row27 !=null && tHash_Lookup_row27.hasNext()) { // G 099
								
							
								
								fromLookup_row27 = tHash_Lookup_row27.next();

							
							
								} // G 099
							
							

							if(fromLookup_row27 != null) {
								row27 = fromLookup_row27;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_7) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_7 = false;
								
                        		    		    row28HashKey.CD_LOCALI1 = row25.CD_LOCALI1 ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.CD_LOCALI1 = '" + row28HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row28Struct row28 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;
Var.DP = row28.DP != null ?
	(row28.DP.equals("SURESNES") ?
		(row25.CD_PATRIM1 == 3023 
		|| row25.CD_PATRIM1 == 3800
		|| row25.CD_PATRIM1 == 3804
		|| row25.CD_PATRIM1 == 3801
		|| row25.CD_PATRIM1 == 3802
		|| row25.CD_PATRIM1 == 3806
		|| row25.CD_PATRIM1 == 3024
		|| row25.CD_PATRIM1 == 3025
		|| row25.CD_PATRIM1 == 3701
		|| row25.CD_PATRIM1 == 3027
		|| row25.CD_PATRIM1 == 11013
		|| row25.CD_PATRIM1 == 11022
		|| row25.CD_PATRIM1 == 3803 
		|| row25.CD_PATRIM1 == 3700
		|| row25.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row28.DP) : "-" ;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout2_1 = null;


// # Output table : 'copyOfcopyOfout2_1'
copyOfcopyOfout2_1_tmp.PerteFi = row25.PerteFi ;
copyOfcopyOfout2_1_tmp.Facturable = row27.Facturable ;
copyOfcopyOfout2_1_tmp.DP = Var.DP ;
copyOfcopyOfout2_1 = copyOfcopyOfout2_1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout2_1"
if(copyOfcopyOfout2_1 != null) { 



	
	/**
	 * [tFilterRow_6 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfcopyOfout2_1");
					}
					

          row26 = null;
    Operator_tFilterRow_6 ope_tFilterRow_6 = new Operator_tFilterRow_6("&&");
            ope_tFilterRow_6.matches((copyOfcopyOfout2_1.DP == null? false : copyOfcopyOfout2_1.DP.compareTo(context.Nom) == 0)
                           , "DP.compareTo(context.Nom) == 0 failed");
    
    if (ope_tFilterRow_6.getMatchFlag()) {
              if(row26 == null){ 
                row26 = new row26Struct();
              }
               row26.PerteFi = copyOfcopyOfout2_1.PerteFi;
               row26.Facturable = copyOfcopyOfout2_1.Facturable;
               row26.DP = copyOfcopyOfout2_1.DP;    
      nb_line_ok_tFilterRow_6++;
    } else {
      nb_line_reject_tFilterRow_6++;
    }

nb_line_tFilterRow_6++;

 


	tos_count_tFilterRow_6++;

/**
 * [tFilterRow_6 main ] stop
 */
	
	/**
	 * [tFilterRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_begin ] stop
 */
// Start of branch "row26"
if(row26 != null) { 



	
	/**
	 * [tAggregateRow_6_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row26");
					}
					
	


	operation_finder_tAggregateRow_6.hashCodeDirty = true;
	
	operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

	

	if(operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

		
		
		

		hash_tAggregateRow_6.put(operation_result_tAggregateRow_6, operation_result_tAggregateRow_6);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_6.PerteFi_sum == null) {
						operation_result_tAggregateRow_6.PerteFi_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_6.PerteFi_sum = operation_result_tAggregateRow_6.PerteFi_sum.add(
						new BigDecimal(
							String.valueOf(
								row26.PerteFi
							)
						)
					);
					
					if(operation_result_tAggregateRow_6.Facturable_sum == null) {
						operation_result_tAggregateRow_6.Facturable_sum = new BigDecimal(0).setScale(0);
					}
					operation_result_tAggregateRow_6.Facturable_sum = operation_result_tAggregateRow_6.Facturable_sum.add(
						new BigDecimal(
							String.valueOf(
								row26.Facturable
							)
						)
					);
					


 


	tos_count_tAggregateRow_6_AGGOUT++;

/**
 * [tAggregateRow_6_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_end ] stop
 */

} // End of branch "row26"




	
	/**
	 * [tFilterRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout2_1"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_7 end ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

	}
}finally{
	if (rs_tDBInput_7 != null) {
		rs_tDBInput_7.close();
	}
	if (stmt_tDBInput_7 != null) {
		stmt_tDBInput_7.close();
	}
}
globalMap.put("tDBInput_7_NB_LINE",nb_line_tDBInput_7);

 

ok_Hash.put("tDBInput_7", true);
end_Hash.put("tDBInput_7", System.currentTimeMillis());




/**
 * [tDBInput_7 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row27 != null) {
						tHash_Lookup_row27.endGet();
					}
					globalMap.remove( "tHash_Lookup_row27" );

					
					
				
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tFilterRow_6 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	
    globalMap.put("tFilterRow_6_NB_LINE", nb_line_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_OK", nb_line_ok_tFilterRow_6);
    globalMap.put("tFilterRow_6_NB_LINE_REJECT", nb_line_reject_tFilterRow_6);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout2_1");
			  	}
			  	
 

ok_Hash.put("tFilterRow_6", true);
end_Hash.put("tFilterRow_6", System.currentTimeMillis());




/**
 * [tFilterRow_6 end ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_6_AGGOUT", true);
end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGOUT end ] stop
 */


	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tAggregateRow_6_AGGIN - inputs:(OnRowsEnd) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_4 - inputs:(row7,row12,row22,row23,row24,row29) outputs:(sortie_final)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGIN", false);
		start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	
		int tos_count_tAggregateRow_6_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6.values();

globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

for(AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600



 



/**
 * [tAggregateRow_6_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

    								if(aggregated_row_tAggregateRow_6.PerteFi_sum != null) {
    								row29.PerteFi = aggregated_row_tAggregateRow_6.PerteFi_sum.floatValue();
										
    								}else{
    								
    									row29.PerteFi = null;
    									
    								}
    								
    								if(aggregated_row_tAggregateRow_6.Facturable_sum != null) {
    								row29.Facturable = aggregated_row_tAggregateRow_6.Facturable_sum.floatValue();
										
    								}else{
    								
    									row29.Facturable = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_6_AGGIN++;

/**
 * [tAggregateRow_6_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row29");
					}
					


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.PerteFi = row29.PerteFi;
				
				row29_HashRow.Facturable = row29.Facturable;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_6_AGGIN", true);
end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGIN end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_6_AGGIN"
							globalMap.remove("tAggregateRow_6");
						
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row28"); 
				     			
					     			//free memory for "tMap_7"
					     			globalMap.remove("tHash_Lookup_row27"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_7 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_7";

	

 



/**
 * [tDBInput_7 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";

	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tFilterRow_6 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_6";

	

 



/**
 * [tFilterRow_6 finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";

	

 



/**
 * [tAggregateRow_6_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";

	

 



/**
 * [tAggregateRow_6_AGGIN finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";

	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableComparableLookupRow<row27Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public Float Facturable;

				public Float getFacturable () {
					return this.Facturable;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
						result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row27Struct other = (row27Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					
						if (this.CD_PATRIM1 == null) {
							if (other.CD_PATRIM1 != null)
								return false;
						
						} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row27Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.CD_PATRIM1 = this.CD_PATRIM1;
	            other.Facturable = this.Facturable;
	            
	}

	public void copyKeysDataTo(row27Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	other.CD_PATRIM1 = this.CD_PATRIM1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Facturable = null;
           				} else {
           			    	this.Facturable = dis.readFloat();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						if(this.Facturable == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Facturable);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Facturable="+String.valueOf(Facturable));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tAdvancedHash_row27 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row27", false);
		start_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tAdvancedHash_row27 = 0;
		

			   		// connection name:row27
			   		// source node:tDBInput_8 - inputs:(after_tDBInput_7) outputs:(row27,row27) | target node:tAdvancedHash_row27 - inputs:(row27) outputs:()
			   		// linked node: tMap_7 - inputs:(row28,row25,row27) outputs:(copyOfcopyOfout2_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row27 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row27Struct> tHash_Lookup_row27 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row27Struct>getLookup(matchingModeEnum_row27);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row27", tHash_Lookup_row27);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row27 begin ] stop
 */



	
	/**
	 * [tDBInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_8", false);
		start_Hash.put("tDBInput_8", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_8";

	
		int tos_count_tDBInput_8 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_8 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_8 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_8  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_8, talendToDBArray_tDBInput_8); 
		    int nb_line_tDBInput_8 = 0;
		    java.sql.Connection conn_tDBInput_8 = null;
				conn_tDBInput_8 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_8 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_8 = conn_tDBInput_8.createStatement();

		    String dbquery_tDBInput_8 = "\nselect \n	s.CD_LOCALI1,\n	CD_PATRIM1,\n	sum(s.LOY_FACT_TOT + s.LOY_CHIF_TOT + s.CHA_FACT_TOT  + s.CHA_CHIF_TOT) as Fa"
+"cturable\nFROM SID_FACTURA_GIM s \nwhere s.DT_ANNEE = datepart(year, dateadd(mm, -1, GETDATE()))\nand s.DT_MOIS = datepa"
+"rt(month, dateadd(mm, -1, GETDATE()))\nand S.SIO_LB_NATLOC in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIA"
+"L.','PAVILLON', 'LGT GARDIEN')\nAND CD_SOCPROP = 1\ngroup by s.CD_LOCALI1, CD_PATRIM1\n";
			

            	globalMap.put("tDBInput_8_QUERY",dbquery_tDBInput_8);
		    java.sql.ResultSet rs_tDBInput_8 = null;

		    try {
		    	rs_tDBInput_8 = stmt_tDBInput_8.executeQuery(dbquery_tDBInput_8);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_8 = rs_tDBInput_8.getMetaData();
		    	int colQtyInRs_tDBInput_8 = rsmd_tDBInput_8.getColumnCount();

		    String tmpContent_tDBInput_8 = null;
		    
		    
		    while (rs_tDBInput_8.next()) {
		        nb_line_tDBInput_8++;
		        
							if(colQtyInRs_tDBInput_8 < 1) {
								row27.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_8 = rs_tDBInput_8.getString(1);
            if(tmpContent_tDBInput_8 != null) {
            	if (talendToDBList_tDBInput_8 .contains(rsmd_tDBInput_8.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row27.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_8);
            	} else {
                	row27.CD_LOCALI1 = tmpContent_tDBInput_8.trim();
                }
            } else {
                row27.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 2) {
								row27.CD_PATRIM1 = null;
							} else {
		                          
            row27.CD_PATRIM1 = rs_tDBInput_8.getInt(2);
            if(rs_tDBInput_8.wasNull()){
                    row27.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_8 < 3) {
								row27.Facturable = null;
							} else {
		                          
            row27.Facturable = rs_tDBInput_8.getFloat(3);
            if(rs_tDBInput_8.wasNull()){
                    row27.Facturable = null;
            }
		                    }
					





 



/**
 * [tDBInput_8 begin ] stop
 */
	
	/**
	 * [tDBInput_8 main ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 


	tos_count_tDBInput_8++;

/**
 * [tDBInput_8 main ] stop
 */
	
	/**
	 * [tDBInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row27");
					}
					


			   
			   

					row27Struct row27_HashRow = new row27Struct();
		   	   	   
				
				row27_HashRow.CD_LOCALI1 = row27.CD_LOCALI1;
				
				row27_HashRow.CD_PATRIM1 = row27.CD_PATRIM1;
				
				row27_HashRow.Facturable = row27.Facturable;
				
			tHash_Lookup_row27.put(row27_HashRow);
			
            




 


	tos_count_tAdvancedHash_row27++;

/**
 * [tAdvancedHash_row27 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row27 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_8 end ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

	}
}finally{
	if (rs_tDBInput_8 != null) {
		rs_tDBInput_8.close();
	}
	if (stmt_tDBInput_8 != null) {
		stmt_tDBInput_8.close();
	}
}
globalMap.put("tDBInput_8_NB_LINE",nb_line_tDBInput_8);

 

ok_Hash.put("tDBInput_8", true);
end_Hash.put("tDBInput_8", System.currentTimeMillis());




/**
 * [tDBInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

tHash_Lookup_row27.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row27", true);
end_Hash.put("tAdvancedHash_row27", System.currentTimeMillis());




/**
 * [tAdvancedHash_row27 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_8 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_8";

	

 



/**
 * [tDBInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row27 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row27";

	

 



/**
 * [tAdvancedHash_row27 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableComparableLookupRow<row32Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row32Struct other = (row32Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row32Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row32Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tAdvancedHash_row32 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row32", false);
		start_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row32";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tAdvancedHash_row32 = 0;
		

			   		// connection name:row32
			   		// source node:tDBInput_10 - inputs:(after_tDBInput_9) outputs:(row32,row32) | target node:tAdvancedHash_row32 - inputs:(row32) outputs:()
			   		// linked node: tMap_8 - inputs:(row31,row32) outputs:(copyOfcopyOfcopyOfout2_1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row32 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row32Struct> tHash_Lookup_row32 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row32Struct>getLookup(matchingModeEnum_row32);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row32", tHash_Lookup_row32);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row32 begin ] stop
 */



	
	/**
	 * [tDBInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_10", false);
		start_Hash.put("tDBInput_10", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_10";

	
		int tos_count_tDBInput_10 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_10  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10); 
		    int nb_line_tDBInput_10 = 0;
		    java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "";
				
				 
	final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:GiY+3xgVN06+tl/mmgLdtwQ2pJTwlXmLyHrVXA==");
				
				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;
				
		    String port_tDBInput_10 = "1433";
		    String dbname_tDBInput_10 = "HDSHData" ;
			String url_tDBInput_10 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_10)) {
		    	url_tDBInput_10 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_10)) {
				url_tDBInput_10 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_10 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_10 = "";
				
				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10,dbUser_tDBInput_10,dbPwd_tDBInput_10);
		        
		    
			java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

		    String dbquery_tDBInput_10 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_10_QUERY",dbquery_tDBInput_10);
		    java.sql.ResultSet rs_tDBInput_10 = null;

		    try {
		    	rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
		    	int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

		    String tmpContent_tDBInput_10 = null;
		    
		    
		    while (rs_tDBInput_10.next()) {
		        nb_line_tDBInput_10++;
		        
							if(colQtyInRs_tDBInput_10 < 1) {
								row32.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(1);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row32.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row32.CD_LOCALI1 = tmpContent_tDBInput_10;
                }
            } else {
                row32.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 2) {
								row32.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(2);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row32.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row32.VILLE = tmpContent_tDBInput_10;
                }
            } else {
                row32.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 3) {
								row32.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(3);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row32.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row32.DP = tmpContent_tDBInput_10;
                }
            } else {
                row32.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_10 < 4) {
								row32.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_10 = rs_tDBInput_10.getString(4);
            if(tmpContent_tDBInput_10 != null) {
            	if (talendToDBList_tDBInput_10 .contains(rsmd_tDBInput_10.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row32.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
            	} else {
                	row32.DT = tmpContent_tDBInput_10;
                }
            } else {
                row32.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_10 begin ] stop
 */
	
	/**
	 * [tDBInput_10 main ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 


	tos_count_tDBInput_10++;

/**
 * [tDBInput_10 main ] stop
 */
	
	/**
	 * [tDBInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row32");
					}
					


			   
			   

					row32Struct row32_HashRow = new row32Struct();
		   	   	   
				
				row32_HashRow.CD_LOCALI1 = row32.CD_LOCALI1;
				
				row32_HashRow.VILLE = row32.VILLE;
				
				row32_HashRow.DP = row32.DP;
				
				row32_HashRow.DT = row32.DT;
				
			tHash_Lookup_row32.put(row32_HashRow);
			
            




 


	tos_count_tAdvancedHash_row32++;

/**
 * [tAdvancedHash_row32 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row32 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_10 end ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

	}
}finally{
	if (rs_tDBInput_10 != null) {
		rs_tDBInput_10.close();
	}
	if (stmt_tDBInput_10 != null) {
		stmt_tDBInput_10.close();
	}
		if(conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {
			
			conn_tDBInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_10_NB_LINE",nb_line_tDBInput_10);

 

ok_Hash.put("tDBInput_10", true);
end_Hash.put("tDBInput_10", System.currentTimeMillis());




/**
 * [tDBInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

tHash_Lookup_row32.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row32", true);
end_Hash.put("tAdvancedHash_row32", System.currentTimeMillis());




/**
 * [tAdvancedHash_row32 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_10 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_10";

	

 



/**
 * [tDBInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row32 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row32";

	

 



/**
 * [tAdvancedHash_row32 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tAdvancedHash_row38 = 0;
		

			   		// connection name:row38
			   		// source node:tDBInput_12 - inputs:(after_tDBInput_11) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_9 - inputs:(row37,row38) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tDBInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_12", false);
		start_Hash.put("tDBInput_12", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_12";

	
		int tos_count_tDBInput_12 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_12 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_12 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_12  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_12, talendToDBArray_tDBInput_12); 
		    int nb_line_tDBInput_12 = 0;
		    java.sql.Connection conn_tDBInput_12 = null;
				String driverClass_tDBInput_12 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_12 = java.lang.Class.forName(driverClass_tDBInput_12);
				String dbUser_tDBInput_12 = "";
				
				 
	final String decryptedPassword_tDBInput_12 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:v9wESe9okD/BJTjAPpTkGYl6a6UdFIYciV2qqg==");
				
				String dbPwd_tDBInput_12 = decryptedPassword_tDBInput_12;
				
		    String port_tDBInput_12 = "1433";
		    String dbname_tDBInput_12 = "HDSHData" ;
			String url_tDBInput_12 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_12)) {
		    	url_tDBInput_12 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_12)) {
				url_tDBInput_12 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_12 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_12 = "";
				
				conn_tDBInput_12 = java.sql.DriverManager.getConnection(url_tDBInput_12,dbUser_tDBInput_12,dbPwd_tDBInput_12);
		        
		    
			java.sql.Statement stmt_tDBInput_12 = conn_tDBInput_12.createStatement();

		    String dbquery_tDBInput_12 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_12_QUERY",dbquery_tDBInput_12);
		    java.sql.ResultSet rs_tDBInput_12 = null;

		    try {
		    	rs_tDBInput_12 = stmt_tDBInput_12.executeQuery(dbquery_tDBInput_12);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_12 = rs_tDBInput_12.getMetaData();
		    	int colQtyInRs_tDBInput_12 = rsmd_tDBInput_12.getColumnCount();

		    String tmpContent_tDBInput_12 = null;
		    
		    
		    while (rs_tDBInput_12.next()) {
		        nb_line_tDBInput_12++;
		        
							if(colQtyInRs_tDBInput_12 < 1) {
								row38.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(1);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row38.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row38.CD_LOCALI1 = tmpContent_tDBInput_12;
                }
            } else {
                row38.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 2) {
								row38.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(2);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row38.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row38.VILLE = tmpContent_tDBInput_12;
                }
            } else {
                row38.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 3) {
								row38.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(3);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row38.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row38.DP = tmpContent_tDBInput_12;
                }
            } else {
                row38.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_12 < 4) {
								row38.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_12 = rs_tDBInput_12.getString(4);
            if(tmpContent_tDBInput_12 != null) {
            	if (talendToDBList_tDBInput_12 .contains(rsmd_tDBInput_12.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row38.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_12);
            	} else {
                	row38.DT = tmpContent_tDBInput_12;
                }
            } else {
                row38.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_12 begin ] stop
 */
	
	/**
	 * [tDBInput_12 main ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 


	tos_count_tDBInput_12++;

/**
 * [tDBInput_12 main ] stop
 */
	
	/**
	 * [tDBInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row38");
					}
					


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.CD_LOCALI1 = row38.CD_LOCALI1;
				
				row38_HashRow.VILLE = row38.VILLE;
				
				row38_HashRow.DP = row38.DP;
				
				row38_HashRow.DT = row38.DT;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_12 end ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

	}
}finally{
	if (rs_tDBInput_12 != null) {
		rs_tDBInput_12.close();
	}
	if (stmt_tDBInput_12 != null) {
		stmt_tDBInput_12.close();
	}
		if(conn_tDBInput_12 != null && !conn_tDBInput_12.isClosed()) {
			
			conn_tDBInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_12_NB_LINE",nb_line_tDBInput_12);

 

ok_Hash.put("tDBInput_12", true);
end_Hash.put("tDBInput_12", System.currentTimeMillis());




/**
 * [tDBInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

tHash_Lookup_row38.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_12 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_12";

	

 



/**
 * [tDBInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";

	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableComparableLookupRow<row45Struct> {
    final static byte[] commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
    static byte[] commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row45Struct other = (row45Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row45Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row45Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length) {
				if(length < 1024 && commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC.length == 0) {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[1024];
				} else {
   					commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length);
			strReturn = new String(commonByteArray_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_MV_DP_VACANCE_AUTRE_MOT_VAC) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tAdvancedHash_row45 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row45", false);
		start_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row45";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tAdvancedHash_row45 = 0;
		

			   		// connection name:row45
			   		// source node:tDBInput_14 - inputs:(after_tDBInput_13) outputs:(row45,row45) | target node:tAdvancedHash_row45 - inputs:(row45) outputs:()
			   		// linked node: tMap_11 - inputs:(row44,row45) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row45 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row45Struct> tHash_Lookup_row45 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row45Struct>getLookup(matchingModeEnum_row45);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row45", tHash_Lookup_row45);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row45 begin ] stop
 */



	
	/**
	 * [tDBInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_14", false);
		start_Hash.put("tDBInput_14", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_14";

	
		int tos_count_tDBInput_14 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_14 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_14  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_14, talendToDBArray_tDBInput_14); 
		    int nb_line_tDBInput_14 = 0;
		    java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = "";
				
				 
	final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:17QV8FyruuYujm84rUB79/DnOkFluIiTwGA+hA==");
				
				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;
				
		    String port_tDBInput_14 = "1433";
		    String dbname_tDBInput_14 = "HDSHData" ;
			String url_tDBInput_14 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_14)) {
		    	url_tDBInput_14 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_14)) {
				url_tDBInput_14 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_14 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_14 = "";
				
				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14,dbUser_tDBInput_14,dbPwd_tDBInput_14);
		        
		    
			java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

		    String dbquery_tDBInput_14 = "select \nCD_LOCALI1,\nVILLE,\nCASE\n	WHEN DP = 'HAUTS DE BIEVRE HABITAT' THEN 'CHATENAY-MALABRY'\n	ELSE DP\nEND as DP,"
+"\nDT\nfrom T_DEF_LOCALISATION\n";
			

            	globalMap.put("tDBInput_14_QUERY",dbquery_tDBInput_14);
		    java.sql.ResultSet rs_tDBInput_14 = null;

		    try {
		    	rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
		    	int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

		    String tmpContent_tDBInput_14 = null;
		    
		    
		    while (rs_tDBInput_14.next()) {
		        nb_line_tDBInput_14++;
		        
							if(colQtyInRs_tDBInput_14 < 1) {
								row45.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(1);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row45.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row45.CD_LOCALI1 = tmpContent_tDBInput_14;
                }
            } else {
                row45.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 2) {
								row45.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(2);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row45.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row45.VILLE = tmpContent_tDBInput_14;
                }
            } else {
                row45.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 3) {
								row45.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(3);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row45.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row45.DP = tmpContent_tDBInput_14;
                }
            } else {
                row45.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_14 < 4) {
								row45.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_14 = rs_tDBInput_14.getString(4);
            if(tmpContent_tDBInput_14 != null) {
            	if (talendToDBList_tDBInput_14 .contains(rsmd_tDBInput_14.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row45.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
            	} else {
                	row45.DT = tmpContent_tDBInput_14;
                }
            } else {
                row45.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_14 begin ] stop
 */
	
	/**
	 * [tDBInput_14 main ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 


	tos_count_tDBInput_14++;

/**
 * [tDBInput_14 main ] stop
 */
	
	/**
	 * [tDBInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row45");
					}
					


			   
			   

					row45Struct row45_HashRow = new row45Struct();
		   	   	   
				
				row45_HashRow.CD_LOCALI1 = row45.CD_LOCALI1;
				
				row45_HashRow.VILLE = row45.VILLE;
				
				row45_HashRow.DP = row45.DP;
				
				row45_HashRow.DT = row45.DT;
				
			tHash_Lookup_row45.put(row45_HashRow);
			
            




 


	tos_count_tAdvancedHash_row45++;

/**
 * [tAdvancedHash_row45 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row45 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_14 end ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

	}
}finally{
	if (rs_tDBInput_14 != null) {
		rs_tDBInput_14.close();
	}
	if (stmt_tDBInput_14 != null) {
		stmt_tDBInput_14.close();
	}
		if(conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {
			
			conn_tDBInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_14_NB_LINE",nb_line_tDBInput_14);

 

ok_Hash.put("tDBInput_14", true);
end_Hash.put("tDBInput_14", System.currentTimeMillis());




/**
 * [tDBInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

tHash_Lookup_row45.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row45", true);
end_Hash.put("tAdvancedHash_row45", System.currentTimeMillis());




/**
 * [tAdvancedHash_row45 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_14 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_14";

	

 



/**
 * [tDBInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row45 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row45";

	

 



/**
 * [tAdvancedHash_row45 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "BAGNEUX";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final MV_DP_VACANCE_AUTRE_MOT_VAC MV_DP_VACANCE_AUTRE_MOT_VACClass = new MV_DP_VACANCE_AUTRE_MOT_VAC();

        int exitCode = MV_DP_VACANCE_AUTRE_MOT_VACClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = MV_DP_VACANCE_AUTRE_MOT_VAC.class.getClassLoader().getResourceAsStream("happi/mv_dp_vacance_autre_mot_vac_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = MV_DP_VACANCE_AUTRE_MOT_VAC.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("Nom", "id_String");
                            context.Nom=(String) context.getProperty("Nom");
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("Nom")) {
                context.Nom = (String) parentContextMap.get("Nom");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tFileCopy_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tFileCopy_1) {
globalMap.put("tFileCopy_1_SUBPROCESS_STATE", -1);

e_tFileCopy_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : MV_DP_VACANCE_AUTRE_MOT_VAC");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     935969 characters generated by Talend Open Studio for Data Integration 
 *     on the 6 février 2023 10:07:24 CET
 ************************************************************************************************/