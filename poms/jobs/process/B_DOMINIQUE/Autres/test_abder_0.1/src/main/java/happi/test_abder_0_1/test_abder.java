// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package happi.test_abder_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: test_abder Purpose: <br>
 * Description: <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class test_abder implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "test_abder";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					test_abder.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(test_abder.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnpivotRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_10_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnpivotRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_18_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row17_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row20_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);

	}

	public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "ACGINFO1";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "ACGINFO1";
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbUser_tDBConnection_1 = "";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:nan3dn9Rk40JFh8Dhtn+mIm81yltxK3exa+JKA==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", "");

				globalMap.put("db_tDBConnection_1", "ACGINFO1");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String ParentType;

		public String getParentType() {
			return this.ParentType;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Niveau;

		public Integer getNiveau() {
			return this.Niveau;
		}

		public String BG;

		public String getBG() {
			return this.BG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Localisation == null) ? 0 : this.Localisation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row5Struct other = (row5Struct) obj;

			if (this.Localisation == null) {
				if (other.Localisation != null)
					return false;

			} else if (!this.Localisation.equals(other.Localisation))

				return false;

			return true;
		}

		public void copyDataTo(row5Struct other) {

			other.TypeLocalisation = this.TypeLocalisation;
			other.Localisation = this.Localisation;
			other.ParentType = this.ParentType;
			other.Parent = this.Parent;
			other.Niveau = this.Niveau;
			other.BG = this.BG;

		}

		public void copyKeysDataTo(row5Struct other) {

			other.Localisation = this.Localisation;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.Localisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Localisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TypeLocalisation = readString(dis, ois);

				this.ParentType = readString(dis, ois);

				this.Parent = readString(dis, ois);

				this.Niveau = readInteger(dis, ois);

				this.BG = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.TypeLocalisation, dos, oos);

				writeString(this.ParentType, dos, oos);

				writeString(this.Parent, dos, oos);

				writeInteger(this.Niveau, dos, oos);

				writeString(this.BG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",ParentType=" + ParentType);
			sb.append(",Parent=" + Parent);
			sb.append(",Niveau=" + String.valueOf(Niveau));
			sb.append(",BG=" + BG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Localisation, other.Localisation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row5Struct row5 = new row5Struct();

				/**
				 * [tAdvancedHash_row5 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row5", false);
				start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tAdvancedHash_row5 = 0;

				// connection name:row5
				// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(row5,row5) |
				// target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
				// linked node: tMap_3 - inputs:(row5,row1) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row5Struct>getLookup(matchingModeEnum_row5);

				globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);

				/**
				 * [tAdvancedHash_row5 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "";

				final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:RFjou4VidmxjLl1jE1fKCXjD4lubJrTvBANp2A==");

				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;

				String port_tDBInput_1 = "1433";
				String dbname_tDBInput_1 = "HDSHData";
				String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_1)) {
					url_tDBInput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_1)) {
					url_tDBInput_1 += "//" + "HDSHData";
				}
				url_tDBInput_1 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_1 = "";

				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1, dbUser_tDBInput_1,
						dbPwd_tDBInput_1);

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "select *\nfrom T_DEF_REPORT\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row5.TypeLocalisation = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.TypeLocalisation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row5.TypeLocalisation = tmpContent_tDBInput_1.trim();
								}
							} else {
								row5.TypeLocalisation = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row5.Localisation = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.Localisation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row5.Localisation = tmpContent_tDBInput_1.trim();
								}
							} else {
								row5.Localisation = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row5.ParentType = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.ParentType = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row5.ParentType = tmpContent_tDBInput_1.trim();
								}
							} else {
								row5.ParentType = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row5.Parent = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.Parent = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row5.Parent = tmpContent_tDBInput_1.trim();
								}
							} else {
								row5.Parent = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row5.Niveau = null;
						} else {

							row5.Niveau = rs_tDBInput_1.getInt(5);
							if (rs_tDBInput_1.wasNull()) {
								row5.Niveau = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row5.BG = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row5.BG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row5.BG = tmpContent_tDBInput_1.trim();
								}
							} else {
								row5.BG = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 main ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
						}

						row5Struct row5_HashRow = new row5Struct();

						row5_HashRow.TypeLocalisation = row5.TypeLocalisation;

						row5_HashRow.Localisation = row5.Localisation;

						row5_HashRow.ParentType = row5.ParentType;

						row5_HashRow.Parent = row5.Parent;

						row5_HashRow.Niveau = row5.Niveau;

						row5_HashRow.BG = row5.BG;

						tHash_Lookup_row5.put(row5_HashRow);

						tos_count_tAdvancedHash_row5++;

						/**
						 * [tAdvancedHash_row5 main ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row5 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row5";

						/**
						 * [tAdvancedHash_row5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
					if (conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {

						conn_tDBInput_1.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row5 end ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				tHash_Lookup_row5.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tAdvancedHash_row5", true);
				end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row5 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row5 finally ] start
				 */

				currentComponent = "tAdvancedHash_row5";

				/**
				 * [tAdvancedHash_row5 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row27Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_1
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		public String HDSH;

		public String getHDSH() {
			return this.HDSH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.Ville = readString(dis);

					this.DP = readString(dis);

					this.DT = readString(dis);

					this.HDSH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.DP, dos);

				// String

				writeString(this.DT, dos);

				// String

				writeString(this.HDSH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",Ville=" + Ville);
			sb.append(",DP=" + DP);
			sb.append(",DT=" + DT);
			sb.append(",HDSH=" + HDSH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public BigDecimal SA_CLE_HO;

		public BigDecimal getSA_CLE_HO() {
			return this.SA_CLE_HO;
		}

		public BigDecimal SC_CLE_HO;

		public BigDecimal getSC_CLE_HO() {
			return this.SC_CLE_HO;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.SA_CLE_HO = (BigDecimal) dis.readObject();

					this.SC_CLE_HO = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// BigDecimal

				dos.writeObject(this.SA_CLE_HO);

				// BigDecimal

				dos.writeObject(this.SC_CLE_HO);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",SA_CLE_HO=" + String.valueOf(SA_CLE_HO));
			sb.append(",SC_CLE_HO=" + String.valueOf(SC_CLE_HO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public BigDecimal SA_CLE_HO;

		public BigDecimal getSA_CLE_HO() {
			return this.SA_CLE_HO;
		}

		public BigDecimal SC_CLE_HO;

		public BigDecimal getSC_CLE_HO() {
			return this.SC_CLE_HO;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.SA_CLE_HO = (BigDecimal) dis.readObject();

					this.SC_CLE_HO = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// BigDecimal

				dos.writeObject(this.SA_CLE_HO);

				// BigDecimal

				dos.writeObject(this.SC_CLE_HO);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",SA_CLE_HO=" + String.valueOf(SA_CLE_HO));
			sb.append(",SC_CLE_HO=" + String.valueOf(SC_CLE_HO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class OnRowsEndStructtAggregateRow_3
			implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Nb;

		public Integer getNb() {
			return this.Nb;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.TypeLocalisation = readString(dis);

					this.Localisation = readString(dis);

					this.Parent = readString(dis);

					this.Nb = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.TypeLocalisation, dos);

				// String

				writeString(this.Localisation, dos);

				// String

				writeString(this.Parent, dos);

				// Integer

				writeInteger(this.Nb, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",Parent=" + Parent);
			sb.append(",Nb=" + String.valueOf(Nb));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String pivot_key;

		public String getPivot_key() {
			return this.pivot_key;
		}

		public String pivot_value;

		public String getPivot_value() {
			return this.pivot_value;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.pivot_key = readString(dis);

					this.pivot_value = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.pivot_key, dos);

				// String

				writeString(this.pivot_value, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",pivot_key=" + pivot_key);
			sb.append(",pivot_value=" + pivot_value);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout2Struct implements routines.system.IPersistableRow<copyOfout2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public String Service_affectaion;

		public String getService_affectaion() {
			return this.Service_affectaion;
		}

		public String Service_creation;

		public String getService_creation() {
			return this.Service_creation;
		}

		public String Ville;

		public String getVille() {
			return this.Ville;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		public String HDSH;

		public String getHDSH() {
			return this.HDSH;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.Service_affectaion = readString(dis);

					this.Service_creation = readString(dis);

					this.Ville = readString(dis);

					this.DP = readString(dis);

					this.DT = readString(dis);

					this.HDSH = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// String

				writeString(this.Service_affectaion, dos);

				// String

				writeString(this.Service_creation, dos);

				// String

				writeString(this.Ville, dos);

				// String

				writeString(this.DP, dos);

				// String

				writeString(this.DT, dos);

				// String

				writeString(this.HDSH, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",Service_affectaion=" + Service_affectaion);
			sb.append(",Service_creation=" + Service_creation);
			sb.append(",Ville=" + Ville);
			sb.append(",DP=" + DP);
			sb.append(",DT=" + DT);
			sb.append(",HDSH=" + HDSH);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public BigDecimal SA_CLE_HO;

		public BigDecimal getSA_CLE_HO() {
			return this.SA_CLE_HO;
		}

		public BigDecimal SC_CLE_HO;

		public BigDecimal getSC_CLE_HO() {
			return this.SC_CLE_HO;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.SA_CLE_HO = (BigDecimal) dis.readObject();

					this.SC_CLE_HO = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// BigDecimal

				dos.writeObject(this.SA_CLE_HO);

				// BigDecimal

				dos.writeObject(this.SC_CLE_HO);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",SA_CLE_HO=" + String.valueOf(SA_CLE_HO));
			sb.append(",SC_CLE_HO=" + String.valueOf(SC_CLE_HO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_13Struct implements routines.system.IPersistableRow<after_tDBInput_13Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];

		public String type;

		public String getType() {
			return this.type;
		}

		public java.util.Date Date;

		public java.util.Date getDate() {
			return this.Date;
		}

		public String DateTri;

		public String getDateTri() {
			return this.DateTri;
		}

		public java.util.Date DTF_RESOLU;

		public java.util.Date getDTF_RESOLU() {
			return this.DTF_RESOLU;
		}

		public String Qualification;

		public String getQualification() {
			return this.Qualification;
		}

		public String Priorit__;

		public String getPriorit__() {
			return this.Priorit__;
		}

		public Integer NBJJ_TRT_C;

		public Integer getNBJJ_TRT_C() {
			return this.NBJJ_TRT_C;
		}

		public String Contact;

		public String getContact() {
			return this.Contact;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public Integer NB_RELANC;

		public Integer getNB_RELANC() {
			return this.NB_RELANC;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public BigDecimal SA_CLE_HO;

		public BigDecimal getSA_CLE_HO() {
			return this.SA_CLE_HO;
		}

		public BigDecimal SC_CLE_HO;

		public BigDecimal getSC_CLE_HO() {
			return this.SC_CLE_HO;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.type = readString(dis);

					this.Date = readDate(dis);

					this.DateTri = readString(dis);

					this.DTF_RESOLU = readDate(dis);

					this.Qualification = readString(dis);

					this.Priorit__ = readString(dis);

					this.NBJJ_TRT_C = readInteger(dis);

					this.Contact = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.LB_NATLOC = readString(dis);

					this.NB_RELANC = readInteger(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.SA_CLE_HO = (BigDecimal) dis.readObject();

					this.SC_CLE_HO = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.type, dos);

				// java.util.Date

				writeDate(this.Date, dos);

				// String

				writeString(this.DateTri, dos);

				// java.util.Date

				writeDate(this.DTF_RESOLU, dos);

				// String

				writeString(this.Qualification, dos);

				// String

				writeString(this.Priorit__, dos);

				// Integer

				writeInteger(this.NBJJ_TRT_C, dos);

				// String

				writeString(this.Contact, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.LB_NATLOC, dos);

				// Integer

				writeInteger(this.NB_RELANC, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// BigDecimal

				dos.writeObject(this.SA_CLE_HO);

				// BigDecimal

				dos.writeObject(this.SC_CLE_HO);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("type=" + type);
			sb.append(",Date=" + String.valueOf(Date));
			sb.append(",DateTri=" + DateTri);
			sb.append(",DTF_RESOLU=" + String.valueOf(DTF_RESOLU));
			sb.append(",Qualification=" + Qualification);
			sb.append(",Priorit__=" + Priorit__);
			sb.append(",NBJJ_TRT_C=" + String.valueOf(NBJJ_TRT_C));
			sb.append(",Contact=" + Contact);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",NB_RELANC=" + String.valueOf(NB_RELANC));
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",SA_CLE_HO=" + String.valueOf(SA_CLE_HO));
			sb.append(",SC_CLE_HO=" + String.valueOf(SC_CLE_HO));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_13Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;
		String currentVirtualComponent = null;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_1Process(globalMap);
				tDBInput_4Process(globalMap);
				tDBInput_5Process(globalMap);
				tDBInput_9Process(globalMap);
				tDBInput_10Process(globalMap);
				tDBInput_14Process(globalMap);
				tDBInput_15Process(globalMap);
				tDBInput_16Process(globalMap);
				tDBInput_17Process(globalMap);
				tDBInput_18Process(globalMap);

				row3Struct row3 = new row3Struct();
				out2Struct out2 = new out2Struct();
				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				row2Struct row2 = new row2Struct();
				row2Struct row25 = row2;

				row13Struct row13 = new row13Struct();
				copyOfout2Struct copyOfout2 = new copyOfout2Struct();
				row22Struct row22 = new row22Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();
				row23Struct row23 = new row23Struct();
				row23Struct row26 = row23;

				row27Struct row27 = new row27Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row27");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/affaires.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("type");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Date");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DateTri");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DTF_RESOLU");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Qualification");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Priorit__");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("NBJJ_TRT_C");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Contact");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CD_LOCALI1");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("LB_NATLOC");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("NB_RELANC");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CD_PATRIM1");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Service_affectaion");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Service_creation");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TypeLocalisation");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Localisation");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Parent");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Nb");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26", "row25");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGOUT", false);
				start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tAggregateRow_1_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

				class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String type;
					java.util.Date Date;
					String DateTri;
					java.util.Date DTF_RESOLU;
					String Qualification;
					String Priorit__;
					Integer NBJJ_TRT_C;
					String Contact;
					String CD_LOCALI1;
					String LB_NATLOC;
					Integer NB_RELANC;
					Integer CD_PATRIM1;
					String Service_affectaion;
					String Service_creation;
					String TypeLocalisation;
					String Localisation;
					String Parent;
					Integer Nb_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + ((this.DateTri == null) ? 0 : this.DateTri.hashCode());

							result = prime * result + ((this.DTF_RESOLU == null) ? 0 : this.DTF_RESOLU.hashCode());

							result = prime * result
									+ ((this.Qualification == null) ? 0 : this.Qualification.hashCode());

							result = prime * result + ((this.Priorit__ == null) ? 0 : this.Priorit__.hashCode());

							result = prime * result + ((this.NBJJ_TRT_C == null) ? 0 : this.NBJJ_TRT_C.hashCode());

							result = prime * result + ((this.Contact == null) ? 0 : this.Contact.hashCode());

							result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());

							result = prime * result + ((this.LB_NATLOC == null) ? 0 : this.LB_NATLOC.hashCode());

							result = prime * result + ((this.NB_RELANC == null) ? 0 : this.NB_RELANC.hashCode());

							result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());

							result = prime * result
									+ ((this.Service_affectaion == null) ? 0 : this.Service_affectaion.hashCode());

							result = prime * result
									+ ((this.Service_creation == null) ? 0 : this.Service_creation.hashCode());

							result = prime * result
									+ ((this.TypeLocalisation == null) ? 0 : this.TypeLocalisation.hashCode());

							result = prime * result + ((this.Localisation == null) ? 0 : this.Localisation.hashCode());

							result = prime * result + ((this.Parent == null) ? 0 : this.Parent.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.Date == null) {
							if (other.Date != null)
								return false;
						} else if (!this.Date.equals(other.Date))
							return false;

						if (this.DateTri == null) {
							if (other.DateTri != null)
								return false;
						} else if (!this.DateTri.equals(other.DateTri))
							return false;

						if (this.DTF_RESOLU == null) {
							if (other.DTF_RESOLU != null)
								return false;
						} else if (!this.DTF_RESOLU.equals(other.DTF_RESOLU))
							return false;

						if (this.Qualification == null) {
							if (other.Qualification != null)
								return false;
						} else if (!this.Qualification.equals(other.Qualification))
							return false;

						if (this.Priorit__ == null) {
							if (other.Priorit__ != null)
								return false;
						} else if (!this.Priorit__.equals(other.Priorit__))
							return false;

						if (this.NBJJ_TRT_C == null) {
							if (other.NBJJ_TRT_C != null)
								return false;
						} else if (!this.NBJJ_TRT_C.equals(other.NBJJ_TRT_C))
							return false;

						if (this.Contact == null) {
							if (other.Contact != null)
								return false;
						} else if (!this.Contact.equals(other.Contact))
							return false;

						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
							return false;

						if (this.LB_NATLOC == null) {
							if (other.LB_NATLOC != null)
								return false;
						} else if (!this.LB_NATLOC.equals(other.LB_NATLOC))
							return false;

						if (this.NB_RELANC == null) {
							if (other.NB_RELANC != null)
								return false;
						} else if (!this.NB_RELANC.equals(other.NB_RELANC))
							return false;

						if (this.CD_PATRIM1 == null) {
							if (other.CD_PATRIM1 != null)
								return false;
						} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))
							return false;

						if (this.Service_affectaion == null) {
							if (other.Service_affectaion != null)
								return false;
						} else if (!this.Service_affectaion.equals(other.Service_affectaion))
							return false;

						if (this.Service_creation == null) {
							if (other.Service_creation != null)
								return false;
						} else if (!this.Service_creation.equals(other.Service_creation))
							return false;

						if (this.TypeLocalisation == null) {
							if (other.TypeLocalisation != null)
								return false;
						} else if (!this.TypeLocalisation.equals(other.TypeLocalisation))
							return false;

						if (this.Localisation == null) {
							if (other.Localisation != null)
								return false;
						} else if (!this.Localisation.equals(other.Localisation))
							return false;

						if (this.Parent == null) {
							if (other.Parent != null)
								return false;
						} else if (!this.Parent.equals(other.Parent))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
				AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
				java.util.Map<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1, AggOperationStruct_tAggregateRow_1>();

				/**
				 * [tAggregateRow_1_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) globalMap
						.get("tHash_Lookup_row5"));

				row5Struct row5HashKey = new row5Struct();
				row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tUnpivotRow_1 begin ] start
				 */

				ok_Hash.put("tUnpivotRow_1", false);
				start_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				currentComponent = "tUnpivotRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out2");
				}

				int tos_count_tUnpivotRow_1 = 0;

				/**
				 * [tUnpivotRow_1 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) globalMap
						.get("tHash_Lookup_row4"));

				row4Struct row4HashKey = new row4Struct();
				row4Struct row4Default = new row4Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) globalMap
						.get("tHash_Lookup_row6"));

				row6Struct row6HashKey = new row6Struct();
				row6Struct row6Default = new row6Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) globalMap
						.get("tHash_Lookup_row17"));

				row17Struct row17HashKey = new row17Struct();
				row17Struct row17Default = new row17Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					String Ville;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out2Struct out2_tmp = new out2Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "";

				final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:GKZ9X26kWmM/jmPiZYqbeNgJdOCnwmFse0HX/g==");

				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;

				String port_tDBInput_2 = "1433";
				String dbname_tDBInput_2 = "ACGINFO1";
				String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_2)) {
					url_tDBInput_2 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_2)) {
					url_tDBInput_2 += "//" + "ACGINFO1";
				}
				url_tDBInput_2 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_2 = "";

				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2, dbUser_tDBInput_2,
						dbPwd_tDBInput_2);

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "select\n'Creation' as type,\nDT_CREAAFF as 'Date' ,\nFORMAT(DT_CREAAFF, 'yyyy-MM') as 'DateTri' ,\nDTF_RESOLU ,\nLB_QUA"
						+ "LIF1 as 'Qualification',\nLB_PRIORIT as 'Priorité',\nNBJJ_TRT_C ,\nLB_CONTACT as 'Contact',\nCD_LOCALI1 ,\nLB_NATLOC ,\n"
						+ "NB_RELANC,\nCD_PATRIM1 ,\nSA_CLE_HO ,\nSC_CLE_HO \nfrom AFFAIRE \nwhere year(DT_CREAAFF) >= year(getdate())-2\nand CD_SO"
						+ "CPROP in (1,6)";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row3.type = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.type = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.type = tmpContent_tDBInput_2;
								}
							} else {
								row3.type = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row3.Date = null;
						} else {

							row3.Date = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 2);

						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row3.DateTri = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.DateTri = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.DateTri = tmpContent_tDBInput_2;
								}
							} else {
								row3.DateTri = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row3.DTF_RESOLU = null;
						} else {

							row3.DTF_RESOLU = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 4);

						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row3.Qualification = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.Qualification = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.Qualification = tmpContent_tDBInput_2;
								}
							} else {
								row3.Qualification = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row3.Priorit__ = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.Priorit__ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.Priorit__ = tmpContent_tDBInput_2;
								}
							} else {
								row3.Priorit__ = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row3.NBJJ_TRT_C = null;
						} else {

							row3.NBJJ_TRT_C = rs_tDBInput_2.getInt(7);
							if (rs_tDBInput_2.wasNull()) {
								row3.NBJJ_TRT_C = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row3.Contact = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.Contact = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.Contact = tmpContent_tDBInput_2;
								}
							} else {
								row3.Contact = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row3.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.CD_LOCALI1 = tmpContent_tDBInput_2;
								}
							} else {
								row3.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row3.LB_NATLOC = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row3.LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row3.LB_NATLOC = tmpContent_tDBInput_2;
								}
							} else {
								row3.LB_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row3.NB_RELANC = null;
						} else {

							row3.NB_RELANC = rs_tDBInput_2.getInt(11);
							if (rs_tDBInput_2.wasNull()) {
								row3.NB_RELANC = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row3.CD_PATRIM1 = null;
						} else {

							row3.CD_PATRIM1 = rs_tDBInput_2.getInt(12);
							if (rs_tDBInput_2.wasNull()) {
								row3.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row3.SA_CLE_HO = null;
						} else {

							row3.SA_CLE_HO = rs_tDBInput_2.getBigDecimal(13);
							if (rs_tDBInput_2.wasNull()) {
								row3.SA_CLE_HO = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row3.SC_CLE_HO = null;
						} else {

							row3.SC_CLE_HO = rs_tDBInput_2.getBigDecimal(14);
							if (rs_tDBInput_2.wasNull()) {
								row3.SC_CLE_HO = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row4"
						///////////////////////////////////////////////

						boolean forceLooprow4 = false;

						row4Struct row4ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row4HashKey.CD_LOCALI1 = row3.CD_LOCALI1;

							row4HashKey.hashCodeDirty = true;

							tHash_Lookup_row4.lookup(row4HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4'
							// and it contains more one result from keys : row4.CD_LOCALI1 = '" +
							// row4HashKey.CD_LOCALI1 + "'");
						} // G 071

						row4Struct row4 = null;

						row4Struct fromLookup_row4 = null;
						row4 = row4Default;

						if (tHash_Lookup_row4 != null && tHash_Lookup_row4.hasNext()) { // G 099

							fromLookup_row4 = tHash_Lookup_row4.next();

						} // G 099

						if (fromLookup_row4 != null) {
							row4 = fromLookup_row4;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row6"
						///////////////////////////////////////////////

						boolean forceLooprow6 = false;

						row6Struct row6ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							Object exprKeyValue_row6__CD_PATRIM1 = row3.CD_PATRIM1;
							if (exprKeyValue_row6__CD_PATRIM1 == null) {
								hasCasePrimitiveKeyWithNull_tMap_2 = true;
							} else {
								row6HashKey.CD_PATRIM1 = (int) (Integer) exprKeyValue_row6__CD_PATRIM1;
							}

							row6HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091

								tHash_Lookup_row6.lookup(row6HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6'
							// and it contains more one result from keys : row6.CD_PATRIM1 = '" +
							// row6HashKey.CD_PATRIM1 + "'");
						} // G 071

						row6Struct row6 = null;

						row6Struct fromLookup_row6 = null;
						row6 = row6Default;

						if (tHash_Lookup_row6 != null && tHash_Lookup_row6.hasNext()) { // G 099

							fromLookup_row6 = tHash_Lookup_row6.next();

						} // G 099

						if (fromLookup_row6 != null) {
							row6 = fromLookup_row6;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row16"
						///////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row16HashKey.CD_HIERORG = row3.SA_CLE_HO;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row16' and it contains more one result from keys : row16.CD_HIERORG = '" +
							// row16HashKey.CD_HIERORG + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row17"
						///////////////////////////////////////////////

						boolean forceLooprow17 = false;

						row17Struct row17ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row17HashKey.CD_HIERORG = row3.SC_CLE_HO;

							row17HashKey.hashCodeDirty = true;

							tHash_Lookup_row17.lookup(row17HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row17' and it contains more one result from keys : row17.CD_HIERORG = '" +
							// row17HashKey.CD_HIERORG + "'");
						} // G 071

						row17Struct row17 = null;

						row17Struct fromLookup_row17 = null;
						row17 = row17Default;

						if (tHash_Lookup_row17 != null && tHash_Lookup_row17.hasNext()) { // G 099

							fromLookup_row17 = tHash_Lookup_row17.next();

						} // G 099

						if (fromLookup_row17 != null) {
							row17 = fromLookup_row17;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;
							Var.Ville = row4.VILLE != null ? (row4.VILLE.equals("SURESNES") ? (row3.CD_PATRIM1 == 3023
									|| row3.CD_PATRIM1 == 3800 || row3.CD_PATRIM1 == 3804 || row3.CD_PATRIM1 == 3801
									|| row3.CD_PATRIM1 == 3802 || row3.CD_PATRIM1 == 3806 || row3.CD_PATRIM1 == 3024
									|| row3.CD_PATRIM1 == 3025 || row3.CD_PATRIM1 == 3701 || row3.CD_PATRIM1 == 3027
									|| row3.CD_PATRIM1 == 11013 || row3.CD_PATRIM1 == 11022 || row3.CD_PATRIM1 == 3803
									|| row3.CD_PATRIM1 == 3700 || row3.CD_PATRIM1 == 3026 ? "ANTENNE SURESNES"
											: "SURESNES (HORS ANTENNE)")
									: row4.VILLE) : "-";// ###############################
							// ###############################
							// # Output tables

							out2 = null;

// # Output table : 'out2'
							out2_tmp.type = row3.type;
							out2_tmp.Date = row3.Date;
							out2_tmp.DateTri = row3.DateTri;
							out2_tmp.DTF_RESOLU = row3.DTF_RESOLU;
							out2_tmp.Qualification = row3.Qualification;
							out2_tmp.Priorit__ = row3.Priorit__;
							out2_tmp.NBJJ_TRT_C = row3.NBJJ_TRT_C;
							out2_tmp.Contact = row3.Contact;
							out2_tmp.CD_LOCALI1 = row3.CD_LOCALI1;
							out2_tmp.LB_NATLOC = row3.LB_NATLOC;
							out2_tmp.NB_RELANC = row3.NB_RELANC;
							out2_tmp.CD_PATRIM1 = row3.CD_PATRIM1;
							out2_tmp.Service_affectaion = row16.LB_CODE2;
							out2_tmp.Service_creation = row17.LB_CODE2;
							out2_tmp.Ville = Var.Ville;
							out2_tmp.DP = "DP " + row4.DP;
							out2_tmp.DT = row4.DT;
							out2_tmp.HDSH = "Hauts-de-Seine Habitat";
							out2 = out2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "out2"
						if (out2 != null) {

							/**
							 * [tUnpivotRow_1 main ] start
							 */

							currentComponent = "tUnpivotRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out2");
							}

							/*
							 * &copy; British Telecommunications plc, 2009, All Rights Reserved. Licensed
							 * for general use under the terms of GPL v2.
							 */
							String[] pivotKeysArray = { "Ville", "DP", "DT", "HDSH" };

							for (String field : pivotKeysArray) {
								row1.type = out2.type;
								row1.Date = out2.Date;
								row1.DateTri = out2.DateTri;
								row1.DTF_RESOLU = out2.DTF_RESOLU;
								row1.Qualification = out2.Qualification;
								row1.Priorit__ = out2.Priorit__;
								row1.NBJJ_TRT_C = out2.NBJJ_TRT_C;
								row1.Contact = out2.Contact;
								row1.CD_LOCALI1 = out2.CD_LOCALI1;
								row1.LB_NATLOC = out2.LB_NATLOC;
								row1.NB_RELANC = out2.NB_RELANC;
								row1.CD_PATRIM1 = out2.CD_PATRIM1;
								row1.Service_affectaion = out2.Service_affectaion;
								row1.Service_creation = out2.Service_creation;

								row1.pivot_key = field;
								try {
									row1.pivot_value = out2.getClass().getDeclaredField(field).get(out2).toString();
								} catch (Exception e) {
									row1.pivot_value = null;
								}

								if (row1.pivot_value == null || row1.pivot_value.trim().equals("")) {
									continue;
								}

								tos_count_tUnpivotRow_1++;

								/**
								 * [tUnpivotRow_1 main ] stop
								 */

								/**
								 * [tUnpivotRow_1 process_data_begin ] start
								 */

								currentComponent = "tUnpivotRow_1";

								/**
								 * [tUnpivotRow_1 process_data_begin ] stop
								 */

								/**
								 * [tMap_3 main ] start
								 */

								currentComponent = "tMap_3";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_3 = false;
								boolean mainRowRejected_tMap_3 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row5"
								///////////////////////////////////////////////

								boolean forceLooprow5 = false;

								row5Struct row5ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_3 = false;

									row5HashKey.Localisation = row1.pivot_value;

									row5HashKey.hashCodeDirty = true;

									tHash_Lookup_row5.lookup(row5HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5'
									// and it contains more one result from keys : row5.Localisation = '" +
									// row5HashKey.Localisation + "'");
								} // G 071

								row5Struct row5 = null;

								row5Struct fromLookup_row5 = null;
								row5 = row5Default;

								if (tHash_Lookup_row5 != null && tHash_Lookup_row5.hasNext()) { // G 099

									fromLookup_row5 = tHash_Lookup_row5.next();

								} // G 099

								if (fromLookup_row5 != null) {
									row5 = fromLookup_row5;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
									// ###############################
									// # Output tables

									out1 = null;

// # Output table : 'out1'
									out1_tmp.type = row1.type;
									out1_tmp.Date = row1.Date;
									out1_tmp.DateTri = row1.DateTri;
									out1_tmp.DTF_RESOLU = row1.DTF_RESOLU;
									out1_tmp.Qualification = row1.Qualification;
									out1_tmp.Priorit__ = row1.Priorit__;
									out1_tmp.NBJJ_TRT_C = row1.NBJJ_TRT_C;
									out1_tmp.Contact = row1.Contact;
									out1_tmp.CD_LOCALI1 = row1.CD_LOCALI1;
									out1_tmp.LB_NATLOC = row1.LB_NATLOC;
									out1_tmp.NB_RELANC = row1.NB_RELANC;
									out1_tmp.CD_PATRIM1 = row1.CD_PATRIM1;
									out1_tmp.Service_affectaion = row1.Service_affectaion;
									out1_tmp.Service_creation = row1.Service_creation;
									out1_tmp.TypeLocalisation = row1.pivot_key;
									out1_tmp.Localisation = row1.pivot_value;
									out1_tmp.Parent = row5.Parent;
									out1_tmp.Nb = 1;
									out1 = out1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_3 = false;

								tos_count_tMap_3++;

								/**
								 * [tMap_3 main ] stop
								 */

								/**
								 * [tMap_3 process_data_begin ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_begin ] stop
								 */
// Start of branch "out1"
								if (out1 != null) {

									/**
									 * [tAggregateRow_1_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
									}

									operation_finder_tAggregateRow_1.type = out1.type;
									operation_finder_tAggregateRow_1.Date = out1.Date;
									operation_finder_tAggregateRow_1.DateTri = out1.DateTri;
									operation_finder_tAggregateRow_1.DTF_RESOLU = out1.DTF_RESOLU;
									operation_finder_tAggregateRow_1.Qualification = out1.Qualification;
									operation_finder_tAggregateRow_1.Priorit__ = out1.Priorit__;
									operation_finder_tAggregateRow_1.NBJJ_TRT_C = out1.NBJJ_TRT_C;
									operation_finder_tAggregateRow_1.Contact = out1.Contact;
									operation_finder_tAggregateRow_1.CD_LOCALI1 = out1.CD_LOCALI1;
									operation_finder_tAggregateRow_1.LB_NATLOC = out1.LB_NATLOC;
									operation_finder_tAggregateRow_1.NB_RELANC = out1.NB_RELANC;
									operation_finder_tAggregateRow_1.CD_PATRIM1 = out1.CD_PATRIM1;
									operation_finder_tAggregateRow_1.Service_affectaion = out1.Service_affectaion;
									operation_finder_tAggregateRow_1.Service_creation = out1.Service_creation;
									operation_finder_tAggregateRow_1.TypeLocalisation = out1.TypeLocalisation;
									operation_finder_tAggregateRow_1.Localisation = out1.Localisation;
									operation_finder_tAggregateRow_1.Parent = out1.Parent;

									operation_finder_tAggregateRow_1.hashCodeDirty = true;

									operation_result_tAggregateRow_1 = hash_tAggregateRow_1
											.get(operation_finder_tAggregateRow_1);

									if (operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

										operation_result_tAggregateRow_1.type = operation_finder_tAggregateRow_1.type;
										operation_result_tAggregateRow_1.Date = operation_finder_tAggregateRow_1.Date;
										operation_result_tAggregateRow_1.DateTri = operation_finder_tAggregateRow_1.DateTri;
										operation_result_tAggregateRow_1.DTF_RESOLU = operation_finder_tAggregateRow_1.DTF_RESOLU;
										operation_result_tAggregateRow_1.Qualification = operation_finder_tAggregateRow_1.Qualification;
										operation_result_tAggregateRow_1.Priorit__ = operation_finder_tAggregateRow_1.Priorit__;
										operation_result_tAggregateRow_1.NBJJ_TRT_C = operation_finder_tAggregateRow_1.NBJJ_TRT_C;
										operation_result_tAggregateRow_1.Contact = operation_finder_tAggregateRow_1.Contact;
										operation_result_tAggregateRow_1.CD_LOCALI1 = operation_finder_tAggregateRow_1.CD_LOCALI1;
										operation_result_tAggregateRow_1.LB_NATLOC = operation_finder_tAggregateRow_1.LB_NATLOC;
										operation_result_tAggregateRow_1.NB_RELANC = operation_finder_tAggregateRow_1.NB_RELANC;
										operation_result_tAggregateRow_1.CD_PATRIM1 = operation_finder_tAggregateRow_1.CD_PATRIM1;
										operation_result_tAggregateRow_1.Service_affectaion = operation_finder_tAggregateRow_1.Service_affectaion;
										operation_result_tAggregateRow_1.Service_creation = operation_finder_tAggregateRow_1.Service_creation;
										operation_result_tAggregateRow_1.TypeLocalisation = operation_finder_tAggregateRow_1.TypeLocalisation;
										operation_result_tAggregateRow_1.Localisation = operation_finder_tAggregateRow_1.Localisation;
										operation_result_tAggregateRow_1.Parent = operation_finder_tAggregateRow_1.Parent;

										hash_tAggregateRow_1.put(operation_result_tAggregateRow_1,
												operation_result_tAggregateRow_1);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_1.Nb_sum == null) {
										operation_result_tAggregateRow_1.Nb_sum = (int) 0;
									}

									if (out1.Nb != null)
										operation_result_tAggregateRow_1.Nb_sum += out1.Nb;

									tos_count_tAggregateRow_1_AGGOUT++;

									/**
									 * [tAggregateRow_1_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_1";

									currentComponent = "tAggregateRow_1_AGGOUT";

									/**
									 * [tAggregateRow_1_AGGOUT process_data_end ] stop
									 */

								} // End of branch "out1"

								/**
								 * [tMap_3 process_data_end ] start
								 */

								currentComponent = "tMap_3";

								/**
								 * [tMap_3 process_data_end ] stop
								 */
								// end for
							}

							/**
							 * [tUnpivotRow_1 process_data_end ] start
							 */

							currentComponent = "tUnpivotRow_1";

							/**
							 * [tUnpivotRow_1 process_data_end ] stop
							 */

						} // End of branch "out2"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
					if (conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {

						conn_tDBInput_2.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row4 != null) {
					tHash_Lookup_row4.endGet();
				}
				globalMap.remove("tHash_Lookup_row4");

				if (tHash_Lookup_row6 != null) {
					tHash_Lookup_row6.endGet();
				}
				globalMap.remove("tHash_Lookup_row6");

				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

				if (tHash_Lookup_row17 != null) {
					tHash_Lookup_row17.endGet();
				}
				globalMap.remove("tHash_Lookup_row17");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tUnpivotRow_1 end ] start
				 */

				currentComponent = "tUnpivotRow_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out2");
				}

				ok_Hash.put("tUnpivotRow_1", true);
				end_Hash.put("tUnpivotRow_1", System.currentTimeMillis());

				/**
				 * [tUnpivotRow_1 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row5 != null) {
					tHash_Lookup_row5.endGet();
				}
				globalMap.remove("tHash_Lookup_row5");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tAggregateRow_1_AGGOUT", true);
				end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/affairesCré.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("type");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Date");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DateTri");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DTF_RESOLU");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Qualification");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Priorit__");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NBJJ_TRT_C");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Contact");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_LOCALI1");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("LB_NATLOC");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NB_RELANC");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_PATRIM1");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Service_affectaion");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Service_creation");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("TypeLocalisation");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Localisation");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Parent");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Nb");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_1_AGGIN", false);
				start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				int tos_count_tAggregateRow_1_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1
						.values();

				globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

				for (AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600

					/**
					 * [tAggregateRow_1_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					row2.type = aggregated_row_tAggregateRow_1.type;

					row2.Date = aggregated_row_tAggregateRow_1.Date;

					row2.DateTri = aggregated_row_tAggregateRow_1.DateTri;

					row2.DTF_RESOLU = aggregated_row_tAggregateRow_1.DTF_RESOLU;

					row2.Qualification = aggregated_row_tAggregateRow_1.Qualification;

					row2.Priorit__ = aggregated_row_tAggregateRow_1.Priorit__;

					row2.NBJJ_TRT_C = aggregated_row_tAggregateRow_1.NBJJ_TRT_C;

					row2.Contact = aggregated_row_tAggregateRow_1.Contact;

					row2.CD_LOCALI1 = aggregated_row_tAggregateRow_1.CD_LOCALI1;

					row2.LB_NATLOC = aggregated_row_tAggregateRow_1.LB_NATLOC;

					row2.NB_RELANC = aggregated_row_tAggregateRow_1.NB_RELANC;

					row2.CD_PATRIM1 = aggregated_row_tAggregateRow_1.CD_PATRIM1;

					row2.Service_affectaion = aggregated_row_tAggregateRow_1.Service_affectaion;

					row2.Service_creation = aggregated_row_tAggregateRow_1.Service_creation;

					row2.TypeLocalisation = aggregated_row_tAggregateRow_1.TypeLocalisation;

					row2.Localisation = aggregated_row_tAggregateRow_1.Localisation;

					row2.Parent = aggregated_row_tAggregateRow_1.Parent;
					row2.Nb = aggregated_row_tAggregateRow_1.Nb_sum;

					tos_count_tAggregateRow_1_AGGIN++;

					/**
					 * [tAggregateRow_1_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 main ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
					}

					StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
					if (row2.type != null) {
						sb_tFileOutputDelimited_1.append(row2.type);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Date != null) {
						sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row2.Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.DateTri != null) {
						sb_tFileOutputDelimited_1.append(row2.DateTri);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.DTF_RESOLU != null) {
						sb_tFileOutputDelimited_1.append(FormatterUtils.format_Date(row2.DTF_RESOLU, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Qualification != null) {
						sb_tFileOutputDelimited_1.append(row2.Qualification);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Priorit__ != null) {
						sb_tFileOutputDelimited_1.append(row2.Priorit__);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.NBJJ_TRT_C != null) {
						sb_tFileOutputDelimited_1.append(row2.NBJJ_TRT_C);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Contact != null) {
						sb_tFileOutputDelimited_1.append(row2.Contact);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.CD_LOCALI1 != null) {
						sb_tFileOutputDelimited_1.append(row2.CD_LOCALI1);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.LB_NATLOC != null) {
						sb_tFileOutputDelimited_1.append(row2.LB_NATLOC);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.NB_RELANC != null) {
						sb_tFileOutputDelimited_1.append(row2.NB_RELANC);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.CD_PATRIM1 != null) {
						sb_tFileOutputDelimited_1.append(row2.CD_PATRIM1);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Service_affectaion != null) {
						sb_tFileOutputDelimited_1.append(row2.Service_affectaion);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Service_creation != null) {
						sb_tFileOutputDelimited_1.append(row2.Service_creation);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.TypeLocalisation != null) {
						sb_tFileOutputDelimited_1.append(row2.TypeLocalisation);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Localisation != null) {
						sb_tFileOutputDelimited_1.append(row2.Localisation);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Parent != null) {
						sb_tFileOutputDelimited_1.append(row2.Parent);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
					if (row2.Nb != null) {
						sb_tFileOutputDelimited_1.append(row2.Nb);
					}
					sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

					nb_line_tFileOutputDelimited_1++;
					resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

					outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

					row25 = row2;

					tos_count_tFileOutputDelimited_1++;

					/**
					 * [tFileOutputDelimited_1 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_begin ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
					}

//////////

// for output
					row27 = new row27Struct();

					row27.type = row25.type;
					row27.Date = row25.Date;
					row27.DateTri = row25.DateTri;
					row27.DTF_RESOLU = row25.DTF_RESOLU;
					row27.Qualification = row25.Qualification;
					row27.Priorit__ = row25.Priorit__;
					row27.NBJJ_TRT_C = row25.NBJJ_TRT_C;
					row27.Contact = row25.Contact;
					row27.CD_LOCALI1 = row25.CD_LOCALI1;
					row27.LB_NATLOC = row25.LB_NATLOC;
					row27.NB_RELANC = row25.NB_RELANC;
					row27.CD_PATRIM1 = row25.CD_PATRIM1;
					row27.Service_affectaion = row25.Service_affectaion;
					row27.Service_creation = row25.Service_creation;
					row27.TypeLocalisation = row25.TypeLocalisation;
					row27.Localisation = row25.Localisation;
					row27.Parent = row25.Parent;
					row27.Nb = row25.Nb;

					nb_line_tUnite_1++;

//////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
					}

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (row27.type != null) {
						sb_tFileOutputDelimited_4.append(row27.type);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Date != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row27.Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.DateTri != null) {
						sb_tFileOutputDelimited_4.append(row27.DateTri);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.DTF_RESOLU != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row27.DTF_RESOLU, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Qualification != null) {
						sb_tFileOutputDelimited_4.append(row27.Qualification);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Priorit__ != null) {
						sb_tFileOutputDelimited_4.append(row27.Priorit__);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.NBJJ_TRT_C != null) {
						sb_tFileOutputDelimited_4.append(row27.NBJJ_TRT_C);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Contact != null) {
						sb_tFileOutputDelimited_4.append(row27.Contact);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.CD_LOCALI1 != null) {
						sb_tFileOutputDelimited_4.append(row27.CD_LOCALI1);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.LB_NATLOC != null) {
						sb_tFileOutputDelimited_4.append(row27.LB_NATLOC);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.NB_RELANC != null) {
						sb_tFileOutputDelimited_4.append(row27.NB_RELANC);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.CD_PATRIM1 != null) {
						sb_tFileOutputDelimited_4.append(row27.CD_PATRIM1);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Service_affectaion != null) {
						sb_tFileOutputDelimited_4.append(row27.Service_affectaion);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Service_creation != null) {
						sb_tFileOutputDelimited_4.append(row27.Service_creation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.TypeLocalisation != null) {
						sb_tFileOutputDelimited_4.append(row27.TypeLocalisation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Localisation != null) {
						sb_tFileOutputDelimited_4.append(row27.Localisation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Parent != null) {
						sb_tFileOutputDelimited_4.append(row27.Parent);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Nb != null) {
						sb_tFileOutputDelimited_4.append(row27.Nb);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_end ] stop
					 */

					/**
					 * [tUnite_1 process_data_end ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tFileOutputDelimited_1 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_1";

					/**
					 * [tFileOutputDelimited_1 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

					/**
					 * [tAggregateRow_1_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_1_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_1";

					currentComponent = "tAggregateRow_1_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_1_AGGIN", true);
				end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_1_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGOUT", false);
				start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfout1");
				}

				int tos_count_tAggregateRow_3_AGGOUT = 0;

// ------------ Seems it is not used

				java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap();

// ------------

				class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

					public double sd(Double[] data) {
						final int n = data.length;
						if (n < 2) {
							return Double.NaN;
						}
						double d1 = 0d;
						double d2 = 0d;

						for (int i = 0; i < data.length; i++) {
							d1 += (data[i] * data[i]);
							d2 += data[i];
						}

						return Math.sqrt((n * d1 - d2 * d2) / n / (n - 1));
					}

					public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
						byte r = (byte) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'short/Short'", "'byte/Byte'"));
						}
					}

					public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
						short r = (short) (a + b);
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'int/Integer'", "'short/Short'"));
						}
					}

					public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
						int r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'long/Long'", "'int/Integer'"));
						}
					}

					public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
						long r = a + b;
						if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'long/Long'"));
						}
					}

					public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							float minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b),
										"'double' or 'BigDecimal'", "'float/Float'"));
							}
						}

						if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE)
								|| ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'double' or 'BigDecimal'", "'float/Float'"));
						}
					}

					public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {

						if (checkUlp) {
							double minAddedValue = Math.ulp(a);
							if (minAddedValue > Math.abs(b)) {
								throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a),
										"'BigDecimal'", "'double/Double'"));
							}
						}

						if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE)) {
							throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b),
									"'BigDecimal'", "'double/Double'"));
						}
					}

					private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
						return "Type overflow when adding " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

					private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
						return "The double precision is unsufficient to add the value " + b + " to " + a
								+ ", to resolve this problem, increase the precision by using " + advicedTypes
								+ " type in place of " + originalType + ".";
					}

				} // G_OutBegin_AggR_144

				UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

				class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

					private static final int DEFAULT_HASHCODE = 1;
					private static final int PRIME = 31;
					private int hashCode = DEFAULT_HASHCODE;
					public boolean hashCodeDirty = true;

					String type;
					java.util.Date Date;
					String DateTri;
					java.util.Date DTF_RESOLU;
					String Qualification;
					String Priorit__;
					Integer NBJJ_TRT_C;
					String Contact;
					String CD_LOCALI1;
					String LB_NATLOC;
					Integer NB_RELANC;
					Integer CD_PATRIM1;
					String Service_affectaion;
					String Service_creation;
					String TypeLocalisation;
					String Localisation;
					String Parent;
					Integer Nb_sum;

					@Override
					public int hashCode() {
						if (this.hashCodeDirty) {
							final int prime = PRIME;
							int result = DEFAULT_HASHCODE;

							result = prime * result + ((this.type == null) ? 0 : this.type.hashCode());

							result = prime * result + ((this.Date == null) ? 0 : this.Date.hashCode());

							result = prime * result + ((this.DateTri == null) ? 0 : this.DateTri.hashCode());

							result = prime * result + ((this.DTF_RESOLU == null) ? 0 : this.DTF_RESOLU.hashCode());

							result = prime * result
									+ ((this.Qualification == null) ? 0 : this.Qualification.hashCode());

							result = prime * result + ((this.Priorit__ == null) ? 0 : this.Priorit__.hashCode());

							result = prime * result + ((this.NBJJ_TRT_C == null) ? 0 : this.NBJJ_TRT_C.hashCode());

							result = prime * result + ((this.Contact == null) ? 0 : this.Contact.hashCode());

							result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());

							result = prime * result + ((this.LB_NATLOC == null) ? 0 : this.LB_NATLOC.hashCode());

							result = prime * result + ((this.NB_RELANC == null) ? 0 : this.NB_RELANC.hashCode());

							result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());

							result = prime * result
									+ ((this.Service_affectaion == null) ? 0 : this.Service_affectaion.hashCode());

							result = prime * result
									+ ((this.Service_creation == null) ? 0 : this.Service_creation.hashCode());

							result = prime * result
									+ ((this.TypeLocalisation == null) ? 0 : this.TypeLocalisation.hashCode());

							result = prime * result + ((this.Localisation == null) ? 0 : this.Localisation.hashCode());

							result = prime * result + ((this.Parent == null) ? 0 : this.Parent.hashCode());

							this.hashCode = result;
							this.hashCodeDirty = false;
						}
						return this.hashCode;
					}

					@Override
					public boolean equals(Object obj) {
						if (this == obj)
							return true;
						if (obj == null)
							return false;
						if (getClass() != obj.getClass())
							return false;
						final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;

						if (this.type == null) {
							if (other.type != null)
								return false;
						} else if (!this.type.equals(other.type))
							return false;

						if (this.Date == null) {
							if (other.Date != null)
								return false;
						} else if (!this.Date.equals(other.Date))
							return false;

						if (this.DateTri == null) {
							if (other.DateTri != null)
								return false;
						} else if (!this.DateTri.equals(other.DateTri))
							return false;

						if (this.DTF_RESOLU == null) {
							if (other.DTF_RESOLU != null)
								return false;
						} else if (!this.DTF_RESOLU.equals(other.DTF_RESOLU))
							return false;

						if (this.Qualification == null) {
							if (other.Qualification != null)
								return false;
						} else if (!this.Qualification.equals(other.Qualification))
							return false;

						if (this.Priorit__ == null) {
							if (other.Priorit__ != null)
								return false;
						} else if (!this.Priorit__.equals(other.Priorit__))
							return false;

						if (this.NBJJ_TRT_C == null) {
							if (other.NBJJ_TRT_C != null)
								return false;
						} else if (!this.NBJJ_TRT_C.equals(other.NBJJ_TRT_C))
							return false;

						if (this.Contact == null) {
							if (other.Contact != null)
								return false;
						} else if (!this.Contact.equals(other.Contact))
							return false;

						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
							return false;

						if (this.LB_NATLOC == null) {
							if (other.LB_NATLOC != null)
								return false;
						} else if (!this.LB_NATLOC.equals(other.LB_NATLOC))
							return false;

						if (this.NB_RELANC == null) {
							if (other.NB_RELANC != null)
								return false;
						} else if (!this.NB_RELANC.equals(other.NB_RELANC))
							return false;

						if (this.CD_PATRIM1 == null) {
							if (other.CD_PATRIM1 != null)
								return false;
						} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))
							return false;

						if (this.Service_affectaion == null) {
							if (other.Service_affectaion != null)
								return false;
						} else if (!this.Service_affectaion.equals(other.Service_affectaion))
							return false;

						if (this.Service_creation == null) {
							if (other.Service_creation != null)
								return false;
						} else if (!this.Service_creation.equals(other.Service_creation))
							return false;

						if (this.TypeLocalisation == null) {
							if (other.TypeLocalisation != null)
								return false;
						} else if (!this.TypeLocalisation.equals(other.TypeLocalisation))
							return false;

						if (this.Localisation == null) {
							if (other.Localisation != null)
								return false;
						} else if (!this.Localisation.equals(other.Localisation))
							return false;

						if (this.Parent == null) {
							if (other.Parent != null)
								return false;
						} else if (!this.Parent.equals(other.Parent))
							return false;

						return true;
					}

				} // G_OutBegin_AggR_100

				AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
				AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
				java.util.Map<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3, AggOperationStruct_tAggregateRow_3>();

				/**
				 * [tAggregateRow_3_AGGOUT begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tUnpivotRow_3 begin ] start
				 */

				ok_Hash.put("tUnpivotRow_3", false);
				start_Hash.put("tUnpivotRow_3", System.currentTimeMillis());

				currentComponent = "tUnpivotRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfout2");
				}

				int tos_count_tUnpivotRow_3 = 0;

				/**
				 * [tUnpivotRow_3 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) globalMap
						.get("tHash_Lookup_row20"));

				row20Struct row20HashKey = new row20Struct();
				row20Struct row20Default = new row20Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
					String Ville;
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_13 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_13 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_13 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_13, talendToDBArray_tDBInput_13);
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = "";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:MKUSPbPDRQEUszWVjK0v0S3wJ90rWgPhh9beEQ==");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String port_tDBInput_13 = "1433";
				String dbname_tDBInput_13 = "ACGINFO1";
				String url_tDBInput_13 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_13)) {
					url_tDBInput_13 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_13)) {
					url_tDBInput_13 += "//" + "ACGINFO1";
				}
				url_tDBInput_13 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_13 = "";

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13, dbUser_tDBInput_13,
						dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

				String dbquery_tDBInput_13 = "select \nLB_ETAT_AF as 'type',\nDT_ETAT_AF as 'Date' ,\nFORMAT(DT_ETAT_AF , 'yyyy-MM') as 'DateTri' ,\nDTF_RESOLU ,\nLB"
						+ "_QUALIF1 as 'Qualification',\nLB_PRIORIT as 'Priorité',\nNBJJ_TRT_C ,\nLB_CONTACT as 'Contact',\nCD_LOCALI1 ,\nLB_NATLOC"
						+ " ,\nNB_RELANC ,\nCD_PATRIM1,\nSA_CLE_HO ,\nSC_CLE_HO\nfrom AFFAIRE \nwhere year(DT_ETAT_AF) >= year(getdate())-2\nand CD"
						+ "_SOCPROP in (1,6)\nand LB_ETAT_AF <> 'En cours'";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row13.type = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(1);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.type = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.type = tmpContent_tDBInput_13;
								}
							} else {
								row13.type = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row13.Date = null;
						} else {

							row13.Date = mssqlGTU_tDBInput_13.getDate(rsmd_tDBInput_13, rs_tDBInput_13, 2);

						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row13.DateTri = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(3);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.DateTri = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.DateTri = tmpContent_tDBInput_13;
								}
							} else {
								row13.DateTri = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 4) {
							row13.DTF_RESOLU = null;
						} else {

							row13.DTF_RESOLU = mssqlGTU_tDBInput_13.getDate(rsmd_tDBInput_13, rs_tDBInput_13, 4);

						}
						if (colQtyInRs_tDBInput_13 < 5) {
							row13.Qualification = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(5);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.Qualification = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.Qualification = tmpContent_tDBInput_13;
								}
							} else {
								row13.Qualification = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 6) {
							row13.Priorit__ = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(6);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.Priorit__ = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.Priorit__ = tmpContent_tDBInput_13;
								}
							} else {
								row13.Priorit__ = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 7) {
							row13.NBJJ_TRT_C = null;
						} else {

							row13.NBJJ_TRT_C = rs_tDBInput_13.getInt(7);
							if (rs_tDBInput_13.wasNull()) {
								row13.NBJJ_TRT_C = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 8) {
							row13.Contact = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(8);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.Contact = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.Contact = tmpContent_tDBInput_13;
								}
							} else {
								row13.Contact = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 9) {
							row13.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(9);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.CD_LOCALI1 = tmpContent_tDBInput_13;
								}
							} else {
								row13.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 10) {
							row13.LB_NATLOC = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(10);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row13.LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row13.LB_NATLOC = tmpContent_tDBInput_13;
								}
							} else {
								row13.LB_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 11) {
							row13.NB_RELANC = null;
						} else {

							row13.NB_RELANC = rs_tDBInput_13.getInt(11);
							if (rs_tDBInput_13.wasNull()) {
								row13.NB_RELANC = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 12) {
							row13.CD_PATRIM1 = null;
						} else {

							row13.CD_PATRIM1 = rs_tDBInput_13.getInt(12);
							if (rs_tDBInput_13.wasNull()) {
								row13.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 13) {
							row13.SA_CLE_HO = null;
						} else {

							row13.SA_CLE_HO = rs_tDBInput_13.getBigDecimal(13);
							if (rs_tDBInput_13.wasNull()) {
								row13.SA_CLE_HO = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 14) {
							row13.SC_CLE_HO = null;
						} else {

							row13.SC_CLE_HO = rs_tDBInput_13.getBigDecimal(14);
							if (rs_tDBInput_13.wasNull()) {
								row13.SC_CLE_HO = null;
							}
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row21"
						///////////////////////////////////////////////

						boolean forceLooprow21 = false;

						row21Struct row21ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row21HashKey.CD_LOCALI1 = row13.CD_LOCALI1;

							row21HashKey.hashCodeDirty = true;

							tHash_Lookup_row21.lookup(row21HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row21' and it contains more one result from keys : row21.CD_LOCALI1 = '" +
							// row21HashKey.CD_LOCALI1 + "'");
						} // G 071

						row21Struct row21 = null;

						row21Struct fromLookup_row21 = null;
						row21 = row21Default;

						if (tHash_Lookup_row21 != null && tHash_Lookup_row21.hasNext()) { // G 099

							fromLookup_row21 = tHash_Lookup_row21.next();

						} // G 099

						if (fromLookup_row21 != null) {
							row21 = fromLookup_row21;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row20"
						///////////////////////////////////////////////

						boolean forceLooprow20 = false;

						row20Struct row20ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							Object exprKeyValue_row20__CD_PATRIM1 = row13.CD_PATRIM1;
							if (exprKeyValue_row20__CD_PATRIM1 == null) {
								hasCasePrimitiveKeyWithNull_tMap_5 = true;
							} else {
								row20HashKey.CD_PATRIM1 = (int) (Integer) exprKeyValue_row20__CD_PATRIM1;
							}

							row20HashKey.hashCodeDirty = true;

							if (!hasCasePrimitiveKeyWithNull_tMap_5) { // G_TM_M_091

								tHash_Lookup_row20.lookup(row20HashKey);

							} // G_TM_M_091

						} // G_TM_M_020

						if (tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row20' and it contains more one result from keys : row20.CD_PATRIM1 = '" +
							// row20HashKey.CD_PATRIM1 + "'");
						} // G 071

						row20Struct row20 = null;

						row20Struct fromLookup_row20 = null;
						row20 = row20Default;

						if (tHash_Lookup_row20 != null && tHash_Lookup_row20.hasNext()) { // G 099

							fromLookup_row20 = tHash_Lookup_row20.next();

						} // G 099

						if (fromLookup_row20 != null) {
							row20 = fromLookup_row20;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row14"
						///////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row14HashKey.CD_HIERORG = row13.SA_CLE_HO;

							row14HashKey.hashCodeDirty = true;

							tHash_Lookup_row14.lookup(row14HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row14' and it contains more one result from keys : row14.CD_HIERORG = '" +
							// row14HashKey.CD_HIERORG + "'");
						} // G 071

						row14Struct row14 = null;

						row14Struct fromLookup_row14 = null;
						row14 = row14Default;

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) { // G 099

							fromLookup_row14 = tHash_Lookup_row14.next();

						} // G 099

						if (fromLookup_row14 != null) {
							row14 = fromLookup_row14;
						}

						///////////////////////////////////////////////
						// Starting Lookup Table "row15"
						///////////////////////////////////////////////

						boolean forceLooprow15 = false;

						row15Struct row15ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row15HashKey.CD_HIERORG = row13.SC_CLE_HO;

							row15HashKey.hashCodeDirty = true;

							tHash_Lookup_row15.lookup(row15HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row15' and it contains more one result from keys : row15.CD_HIERORG = '" +
							// row15HashKey.CD_HIERORG + "'");
						} // G 071

						row15Struct row15 = null;

						row15Struct fromLookup_row15 = null;
						row15 = row15Default;

						if (tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) { // G 099

							fromLookup_row15 = tHash_Lookup_row15.next();

						} // G 099

						if (fromLookup_row15 != null) {
							row15 = fromLookup_row15;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;
							Var.Ville = row21.VILLE != null
									? (row21.VILLE.equals("SURESNES")
											? (row13.CD_PATRIM1 == 3023 || row13.CD_PATRIM1 == 3800
													|| row13.CD_PATRIM1 == 3804 || row13.CD_PATRIM1 == 3801
													|| row13.CD_PATRIM1 == 3802 || row13.CD_PATRIM1 == 3806
													|| row13.CD_PATRIM1 == 3024 || row13.CD_PATRIM1 == 3025
													|| row13.CD_PATRIM1 == 3701 || row13.CD_PATRIM1 == 3027
													|| row13.CD_PATRIM1 == 11013 || row13.CD_PATRIM1 == 11022
													|| row13.CD_PATRIM1 == 3803 || row13.CD_PATRIM1 == 3700
													|| row13.CD_PATRIM1 == 3026 ? "ANTENNE SURESNES"
															: "SURESNES (HORS ANTENNE)")
											: row21.VILLE)
									: "-";// ###############################
							// ###############################
							// # Output tables

							copyOfout2 = null;

// # Output table : 'copyOfout2'
							copyOfout2_tmp.type = row13.type;
							copyOfout2_tmp.Date = row13.Date;
							copyOfout2_tmp.DateTri = row13.DateTri;
							copyOfout2_tmp.DTF_RESOLU = row13.DTF_RESOLU;
							copyOfout2_tmp.Qualification = row13.Qualification;
							copyOfout2_tmp.Priorit__ = row13.Priorit__;
							copyOfout2_tmp.NBJJ_TRT_C = row13.NBJJ_TRT_C;
							copyOfout2_tmp.Contact = row13.Contact;
							copyOfout2_tmp.CD_LOCALI1 = row13.CD_LOCALI1;
							copyOfout2_tmp.LB_NATLOC = row13.LB_NATLOC;
							copyOfout2_tmp.NB_RELANC = row13.NB_RELANC;
							copyOfout2_tmp.CD_PATRIM1 = row13.CD_PATRIM1;
							copyOfout2_tmp.Service_affectaion = row14.LB_CODE2;
							copyOfout2_tmp.Service_creation = row15.LB_CODE2;
							copyOfout2_tmp.Ville = Var.Ville;
							copyOfout2_tmp.DP = "DP " + row21.DP;
							copyOfout2_tmp.DT = row21.DT;
							copyOfout2_tmp.HDSH = "Hauts-de-Seine Habitat";
							copyOfout2 = copyOfout2_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */

						/**
						 * [tMap_5 process_data_begin ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_begin ] stop
						 */
// Start of branch "copyOfout2"
						if (copyOfout2 != null) {

							/**
							 * [tUnpivotRow_3 main ] start
							 */

							currentComponent = "tUnpivotRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfout2");
							}

							/*
							 * &copy; British Telecommunications plc, 2009, All Rights Reserved. Licensed
							 * for general use under the terms of GPL v2.
							 */
							String[] pivotKeysArray = { "Ville", "DP", "DT", "HDSH" };

							for (String field : pivotKeysArray) {
								row22.type = copyOfout2.type;
								row22.Date = copyOfout2.Date;
								row22.DateTri = copyOfout2.DateTri;
								row22.DTF_RESOLU = copyOfout2.DTF_RESOLU;
								row22.Qualification = copyOfout2.Qualification;
								row22.Priorit__ = copyOfout2.Priorit__;
								row22.NBJJ_TRT_C = copyOfout2.NBJJ_TRT_C;
								row22.Contact = copyOfout2.Contact;
								row22.CD_LOCALI1 = copyOfout2.CD_LOCALI1;
								row22.LB_NATLOC = copyOfout2.LB_NATLOC;
								row22.NB_RELANC = copyOfout2.NB_RELANC;
								row22.CD_PATRIM1 = copyOfout2.CD_PATRIM1;
								row22.Service_affectaion = copyOfout2.Service_affectaion;
								row22.Service_creation = copyOfout2.Service_creation;

								row22.pivot_key = field;
								try {
									row22.pivot_value = copyOfout2.getClass().getDeclaredField(field).get(copyOfout2)
											.toString();
								} catch (Exception e) {
									row22.pivot_value = null;
								}

								if (row22.pivot_value == null || row22.pivot_value.trim().equals("")) {
									continue;
								}

								tos_count_tUnpivotRow_3++;

								/**
								 * [tUnpivotRow_3 main ] stop
								 */

								/**
								 * [tUnpivotRow_3 process_data_begin ] start
								 */

								currentComponent = "tUnpivotRow_3";

								/**
								 * [tUnpivotRow_3 process_data_begin ] stop
								 */

								/**
								 * [tMap_6 main ] start
								 */

								currentComponent = "tMap_6";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
								}

								boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

								// ###############################
								// # Input tables (lookups)
								boolean rejectedInnerJoin_tMap_6 = false;
								boolean mainRowRejected_tMap_6 = false;

								///////////////////////////////////////////////
								// Starting Lookup Table "row24"
								///////////////////////////////////////////////

								boolean forceLooprow24 = false;

								row24Struct row24ObjectFromLookup = null;

								if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

									hasCasePrimitiveKeyWithNull_tMap_6 = false;

									row24HashKey.Localisation = row22.pivot_value;

									row24HashKey.hashCodeDirty = true;

									tHash_Lookup_row24.lookup(row24HashKey);

								} // G_TM_M_020

								if (tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G
																													// 071

									// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
									// 'row24' and it contains more one result from keys : row24.Localisation = '" +
									// row24HashKey.Localisation + "'");
								} // G 071

								row24Struct row24 = null;

								row24Struct fromLookup_row24 = null;
								row24 = row24Default;

								if (tHash_Lookup_row24 != null && tHash_Lookup_row24.hasNext()) { // G 099

									fromLookup_row24 = tHash_Lookup_row24.next();

								} // G 099

								if (fromLookup_row24 != null) {
									row24 = fromLookup_row24;
								}

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
									// ###############################
									// # Output tables

									copyOfout1 = null;

// # Output table : 'copyOfout1'
									copyOfout1_tmp.type = row22.type;
									copyOfout1_tmp.Date = row22.Date;
									copyOfout1_tmp.DateTri = row22.DateTri;
									copyOfout1_tmp.DTF_RESOLU = row22.DTF_RESOLU;
									copyOfout1_tmp.Qualification = row22.Qualification;
									copyOfout1_tmp.Priorit__ = row22.Priorit__;
									copyOfout1_tmp.NBJJ_TRT_C = row22.NBJJ_TRT_C;
									copyOfout1_tmp.Contact = row22.Contact;
									copyOfout1_tmp.CD_LOCALI1 = row22.CD_LOCALI1;
									copyOfout1_tmp.LB_NATLOC = row22.LB_NATLOC;
									copyOfout1_tmp.NB_RELANC = row22.NB_RELANC;
									copyOfout1_tmp.CD_PATRIM1 = row22.CD_PATRIM1;
									copyOfout1_tmp.Service_affectaion = row22.Service_affectaion;
									copyOfout1_tmp.Service_creation = row22.Service_creation;
									copyOfout1_tmp.TypeLocalisation = row22.pivot_key;
									copyOfout1_tmp.Localisation = row22.pivot_value;
									copyOfout1_tmp.Parent = row24.Parent;
									copyOfout1_tmp.Nb = 1;
									copyOfout1 = copyOfout1_tmp;
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_6 = false;

								tos_count_tMap_6++;

								/**
								 * [tMap_6 main ] stop
								 */

								/**
								 * [tMap_6 process_data_begin ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_begin ] stop
								 */
// Start of branch "copyOfout1"
								if (copyOfout1 != null) {

									/**
									 * [tAggregateRow_3_AGGOUT main ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfout1");
									}

									operation_finder_tAggregateRow_3.type = copyOfout1.type;
									operation_finder_tAggregateRow_3.Date = copyOfout1.Date;
									operation_finder_tAggregateRow_3.DateTri = copyOfout1.DateTri;
									operation_finder_tAggregateRow_3.DTF_RESOLU = copyOfout1.DTF_RESOLU;
									operation_finder_tAggregateRow_3.Qualification = copyOfout1.Qualification;
									operation_finder_tAggregateRow_3.Priorit__ = copyOfout1.Priorit__;
									operation_finder_tAggregateRow_3.NBJJ_TRT_C = copyOfout1.NBJJ_TRT_C;
									operation_finder_tAggregateRow_3.Contact = copyOfout1.Contact;
									operation_finder_tAggregateRow_3.CD_LOCALI1 = copyOfout1.CD_LOCALI1;
									operation_finder_tAggregateRow_3.LB_NATLOC = copyOfout1.LB_NATLOC;
									operation_finder_tAggregateRow_3.NB_RELANC = copyOfout1.NB_RELANC;
									operation_finder_tAggregateRow_3.CD_PATRIM1 = copyOfout1.CD_PATRIM1;
									operation_finder_tAggregateRow_3.Service_affectaion = copyOfout1.Service_affectaion;
									operation_finder_tAggregateRow_3.Service_creation = copyOfout1.Service_creation;
									operation_finder_tAggregateRow_3.TypeLocalisation = copyOfout1.TypeLocalisation;
									operation_finder_tAggregateRow_3.Localisation = copyOfout1.Localisation;
									operation_finder_tAggregateRow_3.Parent = copyOfout1.Parent;

									operation_finder_tAggregateRow_3.hashCodeDirty = true;

									operation_result_tAggregateRow_3 = hash_tAggregateRow_3
											.get(operation_finder_tAggregateRow_3);

									if (operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

										operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

										operation_result_tAggregateRow_3.type = operation_finder_tAggregateRow_3.type;
										operation_result_tAggregateRow_3.Date = operation_finder_tAggregateRow_3.Date;
										operation_result_tAggregateRow_3.DateTri = operation_finder_tAggregateRow_3.DateTri;
										operation_result_tAggregateRow_3.DTF_RESOLU = operation_finder_tAggregateRow_3.DTF_RESOLU;
										operation_result_tAggregateRow_3.Qualification = operation_finder_tAggregateRow_3.Qualification;
										operation_result_tAggregateRow_3.Priorit__ = operation_finder_tAggregateRow_3.Priorit__;
										operation_result_tAggregateRow_3.NBJJ_TRT_C = operation_finder_tAggregateRow_3.NBJJ_TRT_C;
										operation_result_tAggregateRow_3.Contact = operation_finder_tAggregateRow_3.Contact;
										operation_result_tAggregateRow_3.CD_LOCALI1 = operation_finder_tAggregateRow_3.CD_LOCALI1;
										operation_result_tAggregateRow_3.LB_NATLOC = operation_finder_tAggregateRow_3.LB_NATLOC;
										operation_result_tAggregateRow_3.NB_RELANC = operation_finder_tAggregateRow_3.NB_RELANC;
										operation_result_tAggregateRow_3.CD_PATRIM1 = operation_finder_tAggregateRow_3.CD_PATRIM1;
										operation_result_tAggregateRow_3.Service_affectaion = operation_finder_tAggregateRow_3.Service_affectaion;
										operation_result_tAggregateRow_3.Service_creation = operation_finder_tAggregateRow_3.Service_creation;
										operation_result_tAggregateRow_3.TypeLocalisation = operation_finder_tAggregateRow_3.TypeLocalisation;
										operation_result_tAggregateRow_3.Localisation = operation_finder_tAggregateRow_3.Localisation;
										operation_result_tAggregateRow_3.Parent = operation_finder_tAggregateRow_3.Parent;

										hash_tAggregateRow_3.put(operation_result_tAggregateRow_3,
												operation_result_tAggregateRow_3);

									} // G_OutMain_AggR_001

									if (operation_result_tAggregateRow_3.Nb_sum == null) {
										operation_result_tAggregateRow_3.Nb_sum = (int) 0;
									}

									if (copyOfout1.Nb != null)
										operation_result_tAggregateRow_3.Nb_sum += copyOfout1.Nb;

									tos_count_tAggregateRow_3_AGGOUT++;

									/**
									 * [tAggregateRow_3_AGGOUT main ] stop
									 */

									/**
									 * [tAggregateRow_3_AGGOUT process_data_begin ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									/**
									 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
									 */

									/**
									 * [tAggregateRow_3_AGGOUT process_data_end ] start
									 */

									currentVirtualComponent = "tAggregateRow_3";

									currentComponent = "tAggregateRow_3_AGGOUT";

									/**
									 * [tAggregateRow_3_AGGOUT process_data_end ] stop
									 */

								} // End of branch "copyOfout1"

								/**
								 * [tMap_6 process_data_end ] start
								 */

								currentComponent = "tMap_6";

								/**
								 * [tMap_6 process_data_end ] stop
								 */
								// end for
							}

							/**
							 * [tUnpivotRow_3 process_data_end ] start
							 */

							currentComponent = "tUnpivotRow_3";

							/**
							 * [tUnpivotRow_3 process_data_end ] stop
							 */

						} // End of branch "copyOfout2"

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

				if (tHash_Lookup_row20 != null) {
					tHash_Lookup_row20.endGet();
				}
				globalMap.remove("tHash_Lookup_row20");

				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tUnpivotRow_3 end ] start
				 */

				currentComponent = "tUnpivotRow_3";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfout2");
				}

				ok_Hash.put("tUnpivotRow_3", true);
				end_Hash.put("tUnpivotRow_3", System.currentTimeMillis());

				/**
				 * [tUnpivotRow_3 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT end ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfout1");
				}

				ok_Hash.put("tAggregateRow_3_AGGOUT", true);
				end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGOUT end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"C:/Talend/TOS_DI-Win32-20200219_1130-V7.3.1/workspace/affairesAutreTy.csv")).getAbsolutePath()
								.replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("type");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Date");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("DateTri");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("DTF_RESOLU");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Qualification");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Priorit__");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NBJJ_TRT_C");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Contact");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("CD_LOCALI1");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("LB_NATLOC");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("NB_RELANC");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("CD_PATRIM1");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Service_affectaion");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Service_creation");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("TypeLocalisation");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Localisation");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Parent");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Nb");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN begin ] start
				 */

				ok_Hash.put("tAggregateRow_3_AGGIN", false);
				start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				int tos_count_tAggregateRow_3_AGGIN = 0;

				java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3
						.values();

				globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

				for (AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600

					/**
					 * [tAggregateRow_3_AGGIN begin ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN main ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					row23.type = aggregated_row_tAggregateRow_3.type;

					row23.Date = aggregated_row_tAggregateRow_3.Date;

					row23.DateTri = aggregated_row_tAggregateRow_3.DateTri;

					row23.DTF_RESOLU = aggregated_row_tAggregateRow_3.DTF_RESOLU;

					row23.Qualification = aggregated_row_tAggregateRow_3.Qualification;

					row23.Priorit__ = aggregated_row_tAggregateRow_3.Priorit__;

					row23.NBJJ_TRT_C = aggregated_row_tAggregateRow_3.NBJJ_TRT_C;

					row23.Contact = aggregated_row_tAggregateRow_3.Contact;

					row23.CD_LOCALI1 = aggregated_row_tAggregateRow_3.CD_LOCALI1;

					row23.LB_NATLOC = aggregated_row_tAggregateRow_3.LB_NATLOC;

					row23.NB_RELANC = aggregated_row_tAggregateRow_3.NB_RELANC;

					row23.CD_PATRIM1 = aggregated_row_tAggregateRow_3.CD_PATRIM1;

					row23.Service_affectaion = aggregated_row_tAggregateRow_3.Service_affectaion;

					row23.Service_creation = aggregated_row_tAggregateRow_3.Service_creation;

					row23.TypeLocalisation = aggregated_row_tAggregateRow_3.TypeLocalisation;

					row23.Localisation = aggregated_row_tAggregateRow_3.Localisation;

					row23.Parent = aggregated_row_tAggregateRow_3.Parent;
					row23.Nb = aggregated_row_tAggregateRow_3.Nb_sum;

					tos_count_tAggregateRow_3_AGGIN++;

					/**
					 * [tAggregateRow_3_AGGIN main ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 main ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
					}

					StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
					if (row23.type != null) {
						sb_tFileOutputDelimited_3.append(row23.type);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Date != null) {
						sb_tFileOutputDelimited_3.append(FormatterUtils.format_Date(row23.Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.DateTri != null) {
						sb_tFileOutputDelimited_3.append(row23.DateTri);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.DTF_RESOLU != null) {
						sb_tFileOutputDelimited_3.append(FormatterUtils.format_Date(row23.DTF_RESOLU, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Qualification != null) {
						sb_tFileOutputDelimited_3.append(row23.Qualification);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Priorit__ != null) {
						sb_tFileOutputDelimited_3.append(row23.Priorit__);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.NBJJ_TRT_C != null) {
						sb_tFileOutputDelimited_3.append(row23.NBJJ_TRT_C);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Contact != null) {
						sb_tFileOutputDelimited_3.append(row23.Contact);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.CD_LOCALI1 != null) {
						sb_tFileOutputDelimited_3.append(row23.CD_LOCALI1);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.LB_NATLOC != null) {
						sb_tFileOutputDelimited_3.append(row23.LB_NATLOC);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.NB_RELANC != null) {
						sb_tFileOutputDelimited_3.append(row23.NB_RELANC);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.CD_PATRIM1 != null) {
						sb_tFileOutputDelimited_3.append(row23.CD_PATRIM1);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Service_affectaion != null) {
						sb_tFileOutputDelimited_3.append(row23.Service_affectaion);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Service_creation != null) {
						sb_tFileOutputDelimited_3.append(row23.Service_creation);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.TypeLocalisation != null) {
						sb_tFileOutputDelimited_3.append(row23.TypeLocalisation);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Localisation != null) {
						sb_tFileOutputDelimited_3.append(row23.Localisation);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Parent != null) {
						sb_tFileOutputDelimited_3.append(row23.Parent);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
					if (row23.Nb != null) {
						sb_tFileOutputDelimited_3.append(row23.Nb);
					}
					sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

					nb_line_tFileOutputDelimited_3++;
					resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

					outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

					row26 = row23;

					tos_count_tFileOutputDelimited_3++;

					/**
					 * [tFileOutputDelimited_3 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_begin ] stop
					 */

					/**
					 * [tUnite_1 main ] start
					 */

					currentComponent = "tUnite_1";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
					}

//////////

// for output
					row27 = new row27Struct();

					row27.type = row26.type;
					row27.Date = row26.Date;
					row27.DateTri = row26.DateTri;
					row27.DTF_RESOLU = row26.DTF_RESOLU;
					row27.Qualification = row26.Qualification;
					row27.Priorit__ = row26.Priorit__;
					row27.NBJJ_TRT_C = row26.NBJJ_TRT_C;
					row27.Contact = row26.Contact;
					row27.CD_LOCALI1 = row26.CD_LOCALI1;
					row27.LB_NATLOC = row26.LB_NATLOC;
					row27.NB_RELANC = row26.NB_RELANC;
					row27.CD_PATRIM1 = row26.CD_PATRIM1;
					row27.Service_affectaion = row26.Service_affectaion;
					row27.Service_creation = row26.Service_creation;
					row27.TypeLocalisation = row26.TypeLocalisation;
					row27.Localisation = row26.Localisation;
					row27.Parent = row26.Parent;
					row27.Nb = row26.Nb;

					nb_line_tUnite_1++;

//////////

					tos_count_tUnite_1++;

					/**
					 * [tUnite_1 main ] stop
					 */

					/**
					 * [tUnite_1 process_data_begin ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 main ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					if (execStat) {
						runStat.updateStatOnConnection(iterateId, 1, 1, "row27");
					}

					StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
					if (row27.type != null) {
						sb_tFileOutputDelimited_4.append(row27.type);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Date != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row27.Date, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.DateTri != null) {
						sb_tFileOutputDelimited_4.append(row27.DateTri);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.DTF_RESOLU != null) {
						sb_tFileOutputDelimited_4.append(FormatterUtils.format_Date(row27.DTF_RESOLU, "dd-MM-yyyy"));
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Qualification != null) {
						sb_tFileOutputDelimited_4.append(row27.Qualification);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Priorit__ != null) {
						sb_tFileOutputDelimited_4.append(row27.Priorit__);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.NBJJ_TRT_C != null) {
						sb_tFileOutputDelimited_4.append(row27.NBJJ_TRT_C);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Contact != null) {
						sb_tFileOutputDelimited_4.append(row27.Contact);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.CD_LOCALI1 != null) {
						sb_tFileOutputDelimited_4.append(row27.CD_LOCALI1);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.LB_NATLOC != null) {
						sb_tFileOutputDelimited_4.append(row27.LB_NATLOC);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.NB_RELANC != null) {
						sb_tFileOutputDelimited_4.append(row27.NB_RELANC);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.CD_PATRIM1 != null) {
						sb_tFileOutputDelimited_4.append(row27.CD_PATRIM1);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Service_affectaion != null) {
						sb_tFileOutputDelimited_4.append(row27.Service_affectaion);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Service_creation != null) {
						sb_tFileOutputDelimited_4.append(row27.Service_creation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.TypeLocalisation != null) {
						sb_tFileOutputDelimited_4.append(row27.TypeLocalisation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Localisation != null) {
						sb_tFileOutputDelimited_4.append(row27.Localisation);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Parent != null) {
						sb_tFileOutputDelimited_4.append(row27.Parent);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
					if (row27.Nb != null) {
						sb_tFileOutputDelimited_4.append(row27.Nb);
					}
					sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

					nb_line_tFileOutputDelimited_4++;
					resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

					outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

					tos_count_tFileOutputDelimited_4++;

					/**
					 * [tFileOutputDelimited_4 main ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_begin ] stop
					 */

					/**
					 * [tFileOutputDelimited_4 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_4";

					/**
					 * [tFileOutputDelimited_4 process_data_end ] stop
					 */

					/**
					 * [tUnite_1 process_data_end ] start
					 */

					currentComponent = "tUnite_1";

					/**
					 * [tUnite_1 process_data_end ] stop
					 */

					/**
					 * [tFileOutputDelimited_3 process_data_end ] start
					 */

					currentComponent = "tFileOutputDelimited_3";

					/**
					 * [tFileOutputDelimited_3 process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

					/**
					 * [tAggregateRow_3_AGGIN process_data_end ] stop
					 */

					/**
					 * [tAggregateRow_3_AGGIN end ] start
					 */

					currentVirtualComponent = "tAggregateRow_3";

					currentComponent = "tAggregateRow_3_AGGIN";

				} // G_AggR_600

				ok_Hash.put("tAggregateRow_3_AGGIN", true);
				end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());

				/**
				 * [tAggregateRow_3_AGGIN end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26", "row25");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row27");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			te.setVirtualComponentName(currentVirtualComponent);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tAggregateRow_1_AGGIN"
			globalMap.remove("tAggregateRow_1");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row5");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row4");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row6");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row16");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row17");

			// free memory for "tAggregateRow_3_AGGIN"
			globalMap.remove("tAggregateRow_3");

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row24");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row15");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row20");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row21");

			try {

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tUnpivotRow_1 finally ] start
				 */

				currentComponent = "tUnpivotRow_1";

				/**
				 * [tUnpivotRow_1 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGOUT";

				/**
				 * [tAggregateRow_1_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_1_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_1";

				currentComponent = "tAggregateRow_1_AGGIN";

				/**
				 * [tAggregateRow_1_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tUnpivotRow_3 finally ] start
				 */

				currentComponent = "tUnpivotRow_3";

				/**
				 * [tUnpivotRow_3 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGOUT finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGOUT";

				/**
				 * [tAggregateRow_3_AGGOUT finally ] stop
				 */

				/**
				 * [tAggregateRow_3_AGGIN finally ] start
				 */

				currentVirtualComponent = "tAggregateRow_3";

				currentComponent = "tAggregateRow_3_AGGIN";

				/**
				 * [tAggregateRow_3_AGGIN finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}

	public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row4Struct other = (row4Struct) obj;

			if (this.CD_LOCALI1 == null) {
				if (other.CD_LOCALI1 != null)
					return false;

			} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))

				return false;

			return true;
		}

		public void copyDataTo(row4Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;
			other.VILLE = this.VILLE;
			other.DP = this.DP;
			other.DT = this.DT;

		}

		public void copyKeysDataTo(row4Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_LOCALI1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_LOCALI1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VILLE = readString(dis, ois);

				this.DP = readString(dis, ois);

				this.DT = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VILLE, dos, oos);

				writeString(this.DP, dos, oos);

				writeString(this.DT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",VILLE=" + VILLE);
			sb.append(",DP=" + DP);
			sb.append(",DT=" + DT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row4Struct row4 = new row4Struct();

				/**
				 * [tAdvancedHash_row4 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row4", false);
				start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tAdvancedHash_row4 = 0;

				// connection name:row4
				// source node:tDBInput_4 - inputs:(after_tDBInput_2) outputs:(row4,row4) |
				// target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row6,row16,row17) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row4Struct>getLookup(matchingModeEnum_row4);

				globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);

				/**
				 * [tAdvancedHash_row4 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "";

				final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:k2jLVK1PqXyyeKGlBDRSHdnDQeYgU6r/TGna1Q==");

				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;

				String port_tDBInput_4 = "1433";
				String dbname_tDBInput_4 = "HDSHData";
				String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_4)) {
					url_tDBInput_4 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_4)) {
					url_tDBInput_4 += "//" + "HDSHData";
				}
				url_tDBInput_4 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_4 = "";

				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4, dbUser_tDBInput_4,
						dbPwd_tDBInput_4);

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "SELECT T_DEF_LOCALISATION.CD_LOCALI1,\n		T_DEF_LOCALISATION.VILLE,\n		T_DEF_LOCALISATION.DP,\n		T_DEF_LOCALISATION.DT\nFROM"
						+ "	T_DEF_LOCALISATION";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row4.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.CD_LOCALI1 = tmpContent_tDBInput_4;
								}
							} else {
								row4.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row4.VILLE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.VILLE = tmpContent_tDBInput_4;
								}
							} else {
								row4.VILLE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row4.DP = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.DP = tmpContent_tDBInput_4;
								}
							} else {
								row4.DP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row4.DT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row4.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row4.DT = tmpContent_tDBInput_4;
								}
							} else {
								row4.DT = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 main ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
						}

						row4Struct row4_HashRow = new row4Struct();

						row4_HashRow.CD_LOCALI1 = row4.CD_LOCALI1;

						row4_HashRow.VILLE = row4.VILLE;

						row4_HashRow.DP = row4.DP;

						row4_HashRow.DT = row4.DT;

						tHash_Lookup_row4.put(row4_HashRow);

						tos_count_tAdvancedHash_row4++;

						/**
						 * [tAdvancedHash_row4 main ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row4 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row4";

						/**
						 * [tAdvancedHash_row4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
					if (conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {

						conn_tDBInput_4.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row4 end ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				tHash_Lookup_row4.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tAdvancedHash_row4", true);
				end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row4 finally ] start
				 */

				currentComponent = "tAdvancedHash_row4";

				/**
				 * [tAdvancedHash_row4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public String CD_ACTIVIT;

		public String getCD_ACTIVIT() {
			return this.CD_ACTIVIT;
		}

		public int CD_PATRIM1;

		public int getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public int CD_PATRIM2;

		public int getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public int CD_PATRIM3;

		public int getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public int CD_PATRIM4;

		public int getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public int CD_PATRIM5;

		public int getCD_PATRIM5() {
			return this.CD_PATRIM5;
		}

		public int CD_PATRIM6;

		public int getCD_PATRIM6() {
			return this.CD_PATRIM6;
		}

		public String CD_PATRIM;

		public String getCD_PATRIM() {
			return this.CD_PATRIM;
		}

		public String LB_PATRIM1;

		public String getLB_PATRIM1() {
			return this.LB_PATRIM1;
		}

		public String LB_PATRIM2;

		public String getLB_PATRIM2() {
			return this.LB_PATRIM2;
		}

		public String LB_PATRIM3;

		public String getLB_PATRIM3() {
			return this.LB_PATRIM3;
		}

		public String LB_PATRIM4;

		public String getLB_PATRIM4() {
			return this.LB_PATRIM4;
		}

		public String LB_PATRIM5;

		public String getLB_PATRIM5() {
			return this.LB_PATRIM5;
		}

		public String LB_PATRIM6;

		public String getLB_PATRIM6() {
			return this.LB_PATRIM6;
		}

		public String CD_ETAT;

		public String getCD_ETAT() {
			return this.CD_ETAT;
		}

		public Integer ID_PATRIM;

		public Integer getID_PATRIM() {
			return this.ID_PATRIM;
		}

		public String ID_RLLBS;

		public String getID_RLLBS() {
			return this.ID_RLLBS;
		}

		public String ID_INVARIANT;

		public String getID_INVARIANT() {
			return this.ID_INVARIANT;
		}

		public Integer CD_ENT_PAT;

		public Integer getCD_ENT_PAT() {
			return this.CD_ENT_PAT;
		}

		public Integer NIV_PAT;

		public Integer getNIV_PAT() {
			return this.NIV_PAT;
		}

		public String CD_QUALIF;

		public String getCD_QUALIF() {
			return this.CD_QUALIF;
		}

		public Integer CD_ENT_SEC;

		public Integer getCD_ENT_SEC() {
			return this.CD_ENT_SEC;
		}

		public BigDecimal CD_ORG_SEC;

		public BigDecimal getCD_ORG_SEC() {
			return this.CD_ORG_SEC;
		}

		public Integer NIV_SEC;

		public Integer getNIV_SEC() {
			return this.NIV_SEC;
		}

		public Integer CD_ENT_CTX;

		public Integer getCD_ENT_CTX() {
			return this.CD_ENT_CTX;
		}

		public BigDecimal CD_ORG_CTX;

		public BigDecimal getCD_ORG_CTX() {
			return this.CD_ORG_CTX;
		}

		public BigDecimal CD_SOC_REG;

		public BigDecimal getCD_SOC_REG() {
			return this.CD_SOC_REG;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String CD_LOCALI2;

		public String getCD_LOCALI2() {
			return this.CD_LOCALI2;
		}

		public String CD_LOCALI3;

		public String getCD_LOCALI3() {
			return this.CD_LOCALI3;
		}

		public String CD_LOCALI4;

		public String getCD_LOCALI4() {
			return this.CD_LOCALI4;
		}

		public String CD_LOCALI5;

		public String getCD_LOCALI5() {
			return this.CD_LOCALI5;
		}

		public String ON_ADRPOST;

		public String getON_ADRPOST() {
			return this.ON_ADRPOST;
		}

		public String ADRPA_NORU;

		public String getADRPA_NORU() {
			return this.ADRPA_NORU;
		}

		public String ADRPA_CDRU;

		public String getADRPA_CDRU() {
			return this.ADRPA_CDRU;
		}

		public String ADRPA_RUE1;

		public String getADRPA_RUE1() {
			return this.ADRPA_RUE1;
		}

		public String ADRPA_RUE2;

		public String getADRPA_RUE2() {
			return this.ADRPA_RUE2;
		}

		public String ADRPA_LOC;

		public String getADRPA_LOC() {
			return this.ADRPA_LOC;
		}

		public String ADRPA_CP;

		public String getADRPA_CP() {
			return this.ADRPA_CP;
		}

		public String ADRPA_BD;

		public String getADRPA_BD() {
			return this.ADRPA_BD;
		}

		public String NO_INSEE;

		public String getNO_INSEE() {
			return this.NO_INSEE;
		}

		public String NO_DEPT;

		public String getNO_DEPT() {
			return this.NO_DEPT;
		}

		public BigDecimal GPS_LONGIT;

		public BigDecimal getGPS_LONGIT() {
			return this.GPS_LONGIT;
		}

		public BigDecimal GPS_LATIT;

		public BigDecimal getGPS_LATIT() {
			return this.GPS_LATIT;
		}

		public String CD_Z_GEOG;

		public String getCD_Z_GEOG() {
			return this.CD_Z_GEOG;
		}

		public String NO_QPV;

		public String getNO_QPV() {
			return this.NO_QPV;
		}

		public String LB_QPV;

		public String getLB_QPV() {
			return this.LB_QPV;
		}

		public String ON_ZUS;

		public String getON_ZUS() {
			return this.ON_ZUS;
		}

		public String ON_ZRR;

		public String getON_ZRR() {
			return this.ON_ZRR;
		}

		public String ON_ZFU;

		public String getON_ZFU() {
			return this.ON_ZFU;
		}

		public String CD_SEGCUS;

		public String getCD_SEGCUS() {
			return this.CD_SEGCUS;
		}

		public String LB_SEGCUS;

		public String getLB_SEGCUS() {
			return this.LB_SEGCUS;
		}

		public String NO_ANRU;

		public String getNO_ANRU() {
			return this.NO_ANRU;
		}

		public String ON_ANRU;

		public String getON_ANRU() {
			return this.ON_ANRU;
		}

		public String NO_CUCS;

		public String getNO_CUCS() {
			return this.NO_CUCS;
		}

		public String ON_CUCS;

		public String getON_CUCS() {
			return this.ON_CUCS;
		}

		public String ON_PCS;

		public String getON_PCS() {
			return this.ON_PCS;
		}

		public BigDecimal CD_PROGRAM;

		public BigDecimal getCD_PROGRAM() {
			return this.CD_PROGRAM;
		}

		public BigDecimal CD_TRANCHE;

		public BigDecimal getCD_TRANCHE() {
			return this.CD_TRANCHE;
		}

		public String LB_PR_TR;

		public String getLB_PR_TR() {
			return this.LB_PR_TR;
		}

		public BigDecimal CD_PAT_TC1;

		public BigDecimal getCD_PAT_TC1() {
			return this.CD_PAT_TC1;
		}

		public BigDecimal CD_PAT_TC2;

		public BigDecimal getCD_PAT_TC2() {
			return this.CD_PAT_TC2;
		}

		public BigDecimal CD_PAT_TC3;

		public BigDecimal getCD_PAT_TC3() {
			return this.CD_PAT_TC3;
		}

		public BigDecimal CD_PAT_TC4;

		public BigDecimal getCD_PAT_TC4() {
			return this.CD_PAT_TC4;
		}

		public BigDecimal CD_PAT_TC5;

		public BigDecimal getCD_PAT_TC5() {
			return this.CD_PAT_TC5;
		}

		public BigDecimal CD_PAT_TC6;

		public BigDecimal getCD_PAT_TC6() {
			return this.CD_PAT_TC6;
		}

		public String CD_DESTINA;

		public String getCD_DESTINA() {
			return this.CD_DESTINA;
		}

		public String LB_DESTINA;

		public String getLB_DESTINA() {
			return this.LB_DESTINA;
		}

		public BigDecimal SURF_HAB;

		public BigDecimal getSURF_HAB() {
			return this.SURF_HAB;
		}

		public BigDecimal SURF_REEL;

		public BigDecimal getSURF_REEL() {
			return this.SURF_REEL;
		}

		public BigDecimal SURF_CORR;

		public BigDecimal getSURF_CORR() {
			return this.SURF_CORR;
		}

		public BigDecimal SURF_CHAUF;

		public BigDecimal getSURF_CHAUF() {
			return this.SURF_CHAUF;
		}

		public BigDecimal SURF_UTILE;

		public BigDecimal getSURF_UTILE() {
			return this.SURF_UTILE;
		}

		public String SURF_DECPT;

		public String getSURF_DECPT() {
			return this.SURF_DECPT;
		}

		public BigDecimal MT_EQUIBUD;

		public BigDecimal getMT_EQUIBUD() {
			return this.MT_EQUIBUD;
		}

		public String TY_CHAUFF;

		public String getTY_CHAUFF() {
			return this.TY_CHAUFF;
		}

		public String CD_ENERGIE;

		public String getCD_ENERGIE() {
			return this.CD_ENERGIE;
		}

		public String LB_ENERGIE;

		public String getLB_ENERGIE() {
			return this.LB_ENERGIE;
		}

		public String CD_ENEREAU;

		public String getCD_ENEREAU() {
			return this.CD_ENEREAU;
		}

		public String LB_ENEREAU;

		public String getLB_ENEREAU() {
			return this.LB_ENEREAU;
		}

		public java.util.Date DT_DPE;

		public java.util.Date getDT_DPE() {
			return this.DT_DPE;
		}

		public BigDecimal CONSO_CCE;

		public BigDecimal getCONSO_CCE() {
			return this.CONSO_CCE;
		}

		public String CLAS_CCE;

		public String getCLAS_CCE() {
			return this.CLAS_CCE;
		}

		public BigDecimal CONSO_CEG;

		public BigDecimal getCONSO_CEG() {
			return this.CONSO_CEG;
		}

		public String CLAS_CEG;

		public String getCLAS_CEG() {
			return this.CLAS_CEG;
		}

		public String ON_ADPTHAN;

		public String getON_ADPTHAN() {
			return this.ON_ADPTHAN;
		}

		public String CD_ADPTHAN;

		public String getCD_ADPTHAN() {
			return this.CD_ADPTHAN;
		}

		public String LB_ADPTHAN;

		public String getLB_ADPTHAN() {
			return this.LB_ADPTHAN;
		}

		public String ON_ADPTEHAN;

		public String getON_ADPTEHAN() {
			return this.ON_ADPTEHAN;
		}

		public String ON_ACCHAN;

		public String getON_ACCHAN() {
			return this.ON_ACCHAN;
		}

		public String CD_CATACCHAN;

		public String getCD_CATACCHAN() {
			return this.CD_CATACCHAN;
		}

		public String LB_CATACCHAN;

		public String getLB_CATACCHAN() {
			return this.LB_CATACCHAN;
		}

		public String CD_SECTEUR;

		public String getCD_SECTEUR() {
			return this.CD_SECTEUR;
		}

		public String LB_SECTEUR;

		public String getLB_SECTEUR() {
			return this.LB_SECTEUR;
		}

		public BigDecimal CD_SOCPROP;

		public BigDecimal getCD_SOCPROP() {
			return this.CD_SOCPROP;
		}

		public String LB_SOCPROP;

		public String getLB_SOCPROP() {
			return this.LB_SOCPROP;
		}

		public String ON_COPROP;

		public String getON_COPROP() {
			return this.ON_COPROP;
		}

		public String CD_TYPROP;

		public String getCD_TYPROP() {
			return this.CD_TYPROP;
		}

		public String LB_TYPROP;

		public String getLB_TYPROP() {
			return this.LB_TYPROP;
		}

		public String CD_CATPROP;

		public String getCD_CATPROP() {
			return this.CD_CATPROP;
		}

		public String LB_CATPROP;

		public String getLB_CATPROP() {
			return this.LB_CATPROP;
		}

		public java.util.Date DTF_BAILEM;

		public java.util.Date getDTF_BAILEM() {
			return this.DTF_BAILEM;
		}

		public String CD_MANDGES;

		public String getCD_MANDGES() {
			return this.CD_MANDGES;
		}

		public String LB_MANDGES;

		public String getLB_MANDGES() {
			return this.LB_MANDGES;
		}

		public String CD_TYFOY;

		public String getCD_TYFOY() {
			return this.CD_TYFOY;
		}

		public String LB_TYFOY;

		public String getLB_TYFOY() {
			return this.LB_TYFOY;
		}

		public String CD_CATFOY;

		public String getCD_CATFOY() {
			return this.CD_CATFOY;
		}

		public String LB_CATFOY;

		public String getLB_CATFOY() {
			return this.LB_CATFOY;
		}

		public String TY_CONSTR;

		public String getTY_CONSTR() {
			return this.TY_CONSTR;
		}

		public String CD_NATLOC;

		public String getCD_NATLOC() {
			return this.CD_NATLOC;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public String CD_RGNATUR;

		public String getCD_RGNATUR() {
			return this.CD_RGNATUR;
		}

		public String CD_TYPLOC;

		public String getCD_TYPLOC() {
			return this.CD_TYPLOC;
		}

		public String LB_TYPLOC;

		public String getLB_TYPLOC() {
			return this.LB_TYPLOC;
		}

		public Integer REP_CHARGE;

		public Integer getREP_CHARGE() {
			return this.REP_CHARGE;
		}

		public Integer NB_PIEPRIN;

		public Integer getNB_PIEPRIN() {
			return this.NB_PIEPRIN;
		}

		public String CD_ETAGE;

		public String getCD_ETAGE() {
			return this.CD_ETAGE;
		}

		public String LB_ETAGE;

		public String getLB_ETAGE() {
			return this.LB_ETAGE;
		}

		public BigDecimal NIV_ETAGE;

		public BigDecimal getNIV_ETAGE() {
			return this.NIV_ETAGE;
		}

		public BigDecimal NB_NIVEAUX;

		public BigDecimal getNB_NIVEAUX() {
			return this.NB_NIVEAUX;
		}

		public BigDecimal SNO_ETAGE;

		public BigDecimal getSNO_ETAGE() {
			return this.SNO_ETAGE;
		}

		public String ON_ASC;

		public String getON_ASC() {
			return this.ON_ASC;
		}

		public String ON_REP_ASC;

		public String getON_REP_ASC() {
			return this.ON_REP_ASC;
		}

		public String CD_CATFP;

		public String getCD_CATFP() {
			return this.CD_CATFP;
		}

		public String LB_CATFP;

		public String getLB_CATFP() {
			return this.LB_CATFP;
		}

		public String CD_CATPLAF;

		public String getCD_CATPLAF() {
			return this.CD_CATPLAF;
		}

		public String LB_CATPLAF;

		public String getLB_CATPLAF() {
			return this.LB_CATPLAF;
		}

		public String ON_ELIGCUS;

		public String getON_ELIGCUS() {
			return this.ON_ELIGCUS;
		}

		public String CD_CLF_CUS;

		public String getCD_CLF_CUS() {
			return this.CD_CLF_CUS;
		}

		public java.util.Date DT_ACQUIS;

		public java.util.Date getDT_ACQUIS() {
			return this.DT_ACQUIS;
		}

		public String CD_ACHETEA;

		public String getCD_ACHETEA() {
			return this.CD_ACHETEA;
		}

		public String LB_ACHETEA;

		public String getLB_ACHETEA() {
			return this.LB_ACHETEA;
		}

		public java.util.Date DTD_PAT_G;

		public java.util.Date getDTD_PAT_G() {
			return this.DTD_PAT_G;
		}

		public java.util.Date DTD_PAT_R;

		public java.util.Date getDTD_PAT_R() {
			return this.DTD_PAT_R;
		}

		public String CD_DEBPAT;

		public String getCD_DEBPAT() {
			return this.CD_DEBPAT;
		}

		public String LB_DEBPAT;

		public String getLB_DEBPAT() {
			return this.LB_DEBPAT;
		}

		public String CD_TYDEBPAT;

		public String getCD_TYDEBPAT() {
			return this.CD_TYDEBPAT;
		}

		public String LB_TYDEBPAT;

		public String getLB_TYDEBPAT() {
			return this.LB_TYDEBPAT;
		}

		public java.util.Date DTF_PAT_G;

		public java.util.Date getDTF_PAT_G() {
			return this.DTF_PAT_G;
		}

		public java.util.Date DTF_PAT_R;

		public java.util.Date getDTF_PAT_R() {
			return this.DTF_PAT_R;
		}

		public String CD_FINPAT;

		public String getCD_FINPAT() {
			return this.CD_FINPAT;
		}

		public String LB_FINPAT;

		public String getLB_FINPAT() {
			return this.LB_FINPAT;
		}

		public String CD_TYFINPAT;

		public String getCD_TYFINPAT() {
			return this.CD_TYFINPAT;
		}

		public String LB_TYFINPAT;

		public String getLB_TYFINPAT() {
			return this.LB_TYFINPAT;
		}

		public java.util.Date DT_MELOC;

		public java.util.Date getDT_MELOC() {
			return this.DT_MELOC;
		}

		public java.util.Date DTF_PREVIS;

		public java.util.Date getDTF_PREVIS() {
			return this.DTF_PREVIS;
		}

		public java.util.Date DTD_MEVENTE;

		public java.util.Date getDTD_MEVENTE() {
			return this.DTD_MEVENTE;
		}

		public java.util.Date DTF_MEVENTE;

		public java.util.Date getDTF_MEVENTE() {
			return this.DTF_MEVENTE;
		}

		public java.util.Date DTD_REHAB;

		public java.util.Date getDTD_REHAB() {
			return this.DTD_REHAB;
		}

		public java.util.Date DTF_REHAB;

		public java.util.Date getDTF_REHAB() {
			return this.DTF_REHAB;
		}

		public String CD_VENDUA;

		public String getCD_VENDUA() {
			return this.CD_VENDUA;
		}

		public String LB_VENDUA;

		public String getLB_VENDUA() {
			return this.LB_VENDUA;
		}

		public String CPLPA1_NOM;

		public String getCPLPA1_NOM() {
			return this.CPLPA1_NOM;
		}

		public String CPLPA1_COD;

		public String getCPLPA1_COD() {
			return this.CPLPA1_COD;
		}

		public String CPLPA1_LIB;

		public String getCPLPA1_LIB() {
			return this.CPLPA1_LIB;
		}

		public String CPLPA2_NOM;

		public String getCPLPA2_NOM() {
			return this.CPLPA2_NOM;
		}

		public String CPLPA2_COD;

		public String getCPLPA2_COD() {
			return this.CPLPA2_COD;
		}

		public String CPLPA2_LIB;

		public String getCPLPA2_LIB() {
			return this.CPLPA2_LIB;
		}

		public String CPLPA3_NOM;

		public String getCPLPA3_NOM() {
			return this.CPLPA3_NOM;
		}

		public String CPLPA3_COD;

		public String getCPLPA3_COD() {
			return this.CPLPA3_COD;
		}

		public String CPLPA4_NOM;

		public String getCPLPA4_NOM() {
			return this.CPLPA4_NOM;
		}

		public String CPLPA4_COD;

		public String getCPLPA4_COD() {
			return this.CPLPA4_COD;
		}

		public BigDecimal MT_PUMES;

		public BigDecimal getMT_PUMES() {
			return this.MT_PUMES;
		}

		public BigDecimal MT_FORMES;

		public BigDecimal getMT_FORMES() {
			return this.MT_FORMES;
		}

		public BigDecimal MT_PULIC;

		public BigDecimal getMT_PULIC() {
			return this.MT_PULIC;
		}

		public BigDecimal MT_FORLIC;

		public BigDecimal getMT_FORLIC() {
			return this.MT_FORLIC;
		}

		public java.util.Date DT_INDLIC;

		public java.util.Date getDT_INDLIC() {
			return this.DT_INDLIC;
		}

		public BigDecimal MT_PUMAX;

		public BigDecimal getMT_PUMAX() {
			return this.MT_PUMAX;
		}

		public BigDecimal MT_FORMAX;

		public BigDecimal getMT_FORMAX() {
			return this.MT_FORMAX;
		}

		public BigDecimal MT_PUOBJ;

		public BigDecimal getMT_PUOBJ() {
			return this.MT_PUOBJ;
		}

		public BigDecimal MT_FOROBJ;

		public BigDecimal getMT_FOROBJ() {
			return this.MT_FOROBJ;
		}

		public BigDecimal MT_PUPRA;

		public BigDecimal getMT_PUPRA() {
			return this.MT_PUPRA;
		}

		public BigDecimal MT_TOTRUB;

		public BigDecimal getMT_TOTRUB() {
			return this.MT_TOTRUB;
		}

		public BigDecimal MT_LOYER;

		public BigDecimal getMT_LOYER() {
			return this.MT_LOYER;
		}

		public BigDecimal MT_LOYANNX;

		public BigDecimal getMT_LOYANNX() {
			return this.MT_LOYANNX;
		}

		public BigDecimal MT_LOYFORF;

		public BigDecimal getMT_LOYFORF() {
			return this.MT_LOYFORF;
		}

		public BigDecimal MT_HLOYER;

		public BigDecimal getMT_HLOYER() {
			return this.MT_HLOYER;
		}

		public BigDecimal MT_CHARGES;

		public BigDecimal getMT_CHARGES() {
			return this.MT_CHARGES;
		}

		public BigDecimal MT_CHAUFF;

		public BigDecimal getMT_CHAUFF() {
			return this.MT_CHAUFF;
		}

		public String CD_PERIOD;

		public String getCD_PERIOD() {
			return this.CD_PERIOD;
		}

		public String LB_PERIOD;

		public String getLB_PERIOD() {
			return this.LB_PERIOD;
		}

		public Integer NB_PERIOD;

		public Integer getNB_PERIOD() {
			return this.NB_PERIOD;
		}

		public BigDecimal MT_PUREL;

		public BigDecimal getMT_PUREL() {
			return this.MT_PUREL;
		}

		public BigDecimal MT_TRUBREL;

		public BigDecimal getMT_TRUBREL() {
			return this.MT_TRUBREL;
		}

		public BigDecimal MT_LOYREL;

		public BigDecimal getMT_LOYREL() {
			return this.MT_LOYREL;
		}

		public BigDecimal MT_LAXREL;

		public BigDecimal getMT_LAXREL() {
			return this.MT_LAXREL;
		}

		public BigDecimal MT_LFOREL;

		public BigDecimal getMT_LFOREL() {
			return this.MT_LFOREL;
		}

		public BigDecimal MT_HLOYREL;

		public BigDecimal getMT_HLOYREL() {
			return this.MT_HLOYREL;
		}

		public BigDecimal MT_CHAREL;

		public BigDecimal getMT_CHAREL() {
			return this.MT_CHAREL;
		}

		public BigDecimal MT_CHFREL;

		public BigDecimal getMT_CHFREL() {
			return this.MT_CHFREL;
		}

		public String FACTURDEF;

		public String getFACTURDEF() {
			return this.FACTURDEF;
		}

		public String NO_BAILDEF;

		public String getNO_BAILDEF() {
			return this.NO_BAILDEF;
		}

		public String LB_BAILDEF;

		public String getLB_BAILDEF() {
			return this.LB_BAILDEF;
		}

		public String ON_DISTMAN;

		public String getON_DISTMAN() {
			return this.ON_DISTMAN;
		}

		public BigDecimal NO_LOGTRES;

		public BigDecimal getNO_LOGTRES() {
			return this.NO_LOGTRES;
		}

		public String CD_TAXE;

		public String getCD_TAXE() {
			return this.CD_TAXE;
		}

		public Integer NO_INTERN1;

		public Integer getNO_INTERN1() {
			return this.NO_INTERN1;
		}

		public String NO_INTERN2;

		public String getNO_INTERN2() {
			return this.NO_INTERN2;
		}

		public String ON_NONVAL;

		public String getON_NONVAL() {
			return this.ON_NONVAL;
		}

		public java.util.Date DTD_NONVAL;

		public java.util.Date getDTD_NONVAL() {
			return this.DTD_NONVAL;
		}

		public java.util.Date DTF_NONVAL;

		public java.util.Date getDTF_NONVAL() {
			return this.DTF_NONVAL;
		}

		public String TY_NONVAL;

		public String getTY_NONVAL() {
			return this.TY_NONVAL;
		}

		public String LB_NONVAL;

		public String getLB_NONVAL() {
			return this.LB_NONVAL;
		}

		public String ON_VACANT;

		public String getON_VACANT() {
			return this.ON_VACANT;
		}

		public Integer ID_GARD;

		public Integer getID_GARD() {
			return this.ID_GARD;
		}

		public String NOM_GARD;

		public String getNOM_GARD() {
			return this.NOM_GARD;
		}

		public String PRE_GARD;

		public String getPRE_GARD() {
			return this.PRE_GARD;
		}

		public String TEL_GARD;

		public String getTEL_GARD() {
			return this.TEL_GARD;
		}

		public String MAIL_GARD;

		public String getMAIL_GARD() {
			return this.MAIL_GARD;
		}

		public String TY_GARD;

		public String getTY_GARD() {
			return this.TY_GARD;
		}

		public Integer ID_RESPTR;

		public Integer getID_RESPTR() {
			return this.ID_RESPTR;
		}

		public String NOM_RESPTR;

		public String getNOM_RESPTR() {
			return this.NOM_RESPTR;
		}

		public String PRE_RESPTR;

		public String getPRE_RESPTR() {
			return this.PRE_RESPTR;
		}

		public String TEL_RESPTR;

		public String getTEL_RESPTR() {
			return this.TEL_RESPTR;
		}

		public String MAIL_RESPTR;

		public String getMAIL_RESPTR() {
			return this.MAIL_RESPTR;
		}

		public String TY_RESPTR;

		public String getTY_RESPTR() {
			return this.TY_RESPTR;
		}

		public Integer ID_PERCEP;

		public Integer getID_PERCEP() {
			return this.ID_PERCEP;
		}

		public String NOM_PERCEP;

		public String getNOM_PERCEP() {
			return this.NOM_PERCEP;
		}

		public Integer ID_BURENR;

		public Integer getID_BURENR() {
			return this.ID_BURENR;
		}

		public String NOM_BURENR;

		public String getNOM_BURENR() {
			return this.NOM_BURENR;
		}

		public Integer ID_MAIRIE;

		public Integer getID_MAIRIE() {
			return this.ID_MAIRIE;
		}

		public String NOM_MAIRIE;

		public String getNOM_MAIRIE() {
			return this.NOM_MAIRIE;
		}

		public String ON_MAIRGEST;

		public String getON_MAIRGEST() {
			return this.ON_MAIRGEST;
		}

		public String LB_MAIRIE;

		public String getLB_MAIRIE() {
			return this.LB_MAIRIE;
		}

		public Integer ID_PREF;

		public Integer getID_PREF() {
			return this.ID_PREF;
		}

		public String NOM_PREF;

		public String getNOM_PREF() {
			return this.NOM_PREF;
		}

		public Integer ID_ENCAIS;

		public Integer getID_ENCAIS() {
			return this.ID_ENCAIS;
		}

		public String NOM_ENCAIS;

		public String getNOM_ENCAIS() {
			return this.NOM_ENCAIS;
		}

		public String TY_ENCAIS;

		public String getTY_ENCAIS() {
			return this.TY_ENCAIS;
		}

		public String ON_CONVLOC;

		public String getON_CONVLOC() {
			return this.ON_CONVLOC;
		}

		public String CD_CNVM;

		public String getCD_CNVM() {
			return this.CD_CNVM;
		}

		public java.util.Date DTD_CNVM;

		public java.util.Date getDTD_CNVM() {
			return this.DTD_CNVM;
		}

		public java.util.Date DTF_CNVM;

		public java.util.Date getDTF_CNVM() {
			return this.DTF_CNVM;
		}

		public java.util.Date DT_SI_CNVM;

		public java.util.Date getDT_SI_CNVM() {
			return this.DT_SI_CNVM;
		}

		public java.util.Date DT_SI_CNVMO;

		public java.util.Date getDT_SI_CNVMO() {
			return this.DT_SI_CNVMO;
		}

		public String TY_CNVM;

		public String getTY_CNVM() {
			return this.TY_CNVM;
		}

		public String LB_TY_CNVM;

		public String getLB_TY_CNVM() {
			return this.LB_TY_CNVM;
		}

		public String ON_CONVCUS;

		public String getON_CONVCUS() {
			return this.ON_CONVCUS;
		}

		public String ON_ROLCUS;

		public String getON_ROLCUS() {
			return this.ON_ROLCUS;
		}

		public String CD_CNVCUS;

		public String getCD_CNVCUS() {
			return this.CD_CNVCUS;
		}

		public java.util.Date DTD_CNVCUS;

		public java.util.Date getDTD_CNVCUS() {
			return this.DTD_CNVCUS;
		}

		public java.util.Date DTF_CNVCUS;

		public java.util.Date getDTF_CNVCUS() {
			return this.DTF_CNVCUS;
		}

		public java.util.Date DT_SI_CNVCUS;

		public java.util.Date getDT_SI_CNVCUS() {
			return this.DT_SI_CNVCUS;
		}

		public String CD_CLASCUS;

		public String getCD_CLASCUS() {
			return this.CD_CLASCUS;
		}

		public String LB_CLASCUS;

		public String getLB_CLASCUS() {
			return this.LB_CLASCUS;
		}

		public Integer NO_CNV_RVN;

		public Integer getNO_CNV_RVN() {
			return this.NO_CNV_RVN;
		}

		public String NO_CNV_RVT;

		public String getNO_CNV_RVT() {
			return this.NO_CNV_RVT;
		}

		public String TY_CNV;

		public String getTY_CNV() {
			return this.TY_CNV;
		}

		public String CD_NAT_CNV;

		public String getCD_NAT_CNV() {
			return this.CD_NAT_CNV;
		}

		public String LB_NAT_CNV;

		public String getLB_NAT_CNV() {
			return this.LB_NAT_CNV;
		}

		public String TY_DT_RNV;

		public String getTY_DT_RNV() {
			return this.TY_DT_RNV;
		}

		public Integer DUR_RVN_AN;

		public Integer getDUR_RVN_AN() {
			return this.DUR_RVN_AN;
		}

		public Integer DUR_RVN_MO;

		public Integer getDUR_RVN_MO() {
			return this.DUR_RVN_MO;
		}

		public java.util.Date DTD_RVN_PA;

		public java.util.Date getDTD_RVN_PA() {
			return this.DTD_RVN_PA;
		}

		public java.util.Date DTF_RVN_PA;

		public java.util.Date getDTF_RVN_PA() {
			return this.DTF_RVN_PA;
		}

		public BigDecimal MT_UNI_RNV;

		public BigDecimal getMT_UNI_RNV() {
			return this.MT_UNI_RNV;
		}

		public Integer ID_RVT;

		public Integer getID_RVT() {
			return this.ID_RVT;
		}

		public String NOM_RVT;

		public String getNOM_RVT() {
			return this.NOM_RVT;
		}

		public String TY_RVT;

		public String getTY_RVT() {
			return this.TY_RVT;
		}

		public String LB_SOCIETE;

		public String getLB_SOCIETE() {
			return this.LB_SOCIETE;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CD_PATRIM1;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row6Struct other = (row6Struct) obj;

			if (this.CD_PATRIM1 != other.CD_PATRIM1)
				return false;

			return true;
		}

		public void copyDataTo(row6Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_ACTIVIT = this.CD_ACTIVIT;
			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;
			other.CD_PATRIM5 = this.CD_PATRIM5;
			other.CD_PATRIM6 = this.CD_PATRIM6;
			other.CD_PATRIM = this.CD_PATRIM;
			other.LB_PATRIM1 = this.LB_PATRIM1;
			other.LB_PATRIM2 = this.LB_PATRIM2;
			other.LB_PATRIM3 = this.LB_PATRIM3;
			other.LB_PATRIM4 = this.LB_PATRIM4;
			other.LB_PATRIM5 = this.LB_PATRIM5;
			other.LB_PATRIM6 = this.LB_PATRIM6;
			other.CD_ETAT = this.CD_ETAT;
			other.ID_PATRIM = this.ID_PATRIM;
			other.ID_RLLBS = this.ID_RLLBS;
			other.ID_INVARIANT = this.ID_INVARIANT;
			other.CD_ENT_PAT = this.CD_ENT_PAT;
			other.NIV_PAT = this.NIV_PAT;
			other.CD_QUALIF = this.CD_QUALIF;
			other.CD_ENT_SEC = this.CD_ENT_SEC;
			other.CD_ORG_SEC = this.CD_ORG_SEC;
			other.NIV_SEC = this.NIV_SEC;
			other.CD_ENT_CTX = this.CD_ENT_CTX;
			other.CD_ORG_CTX = this.CD_ORG_CTX;
			other.CD_SOC_REG = this.CD_SOC_REG;
			other.CD_LOCALI1 = this.CD_LOCALI1;
			other.CD_LOCALI2 = this.CD_LOCALI2;
			other.CD_LOCALI3 = this.CD_LOCALI3;
			other.CD_LOCALI4 = this.CD_LOCALI4;
			other.CD_LOCALI5 = this.CD_LOCALI5;
			other.ON_ADRPOST = this.ON_ADRPOST;
			other.ADRPA_NORU = this.ADRPA_NORU;
			other.ADRPA_CDRU = this.ADRPA_CDRU;
			other.ADRPA_RUE1 = this.ADRPA_RUE1;
			other.ADRPA_RUE2 = this.ADRPA_RUE2;
			other.ADRPA_LOC = this.ADRPA_LOC;
			other.ADRPA_CP = this.ADRPA_CP;
			other.ADRPA_BD = this.ADRPA_BD;
			other.NO_INSEE = this.NO_INSEE;
			other.NO_DEPT = this.NO_DEPT;
			other.GPS_LONGIT = this.GPS_LONGIT;
			other.GPS_LATIT = this.GPS_LATIT;
			other.CD_Z_GEOG = this.CD_Z_GEOG;
			other.NO_QPV = this.NO_QPV;
			other.LB_QPV = this.LB_QPV;
			other.ON_ZUS = this.ON_ZUS;
			other.ON_ZRR = this.ON_ZRR;
			other.ON_ZFU = this.ON_ZFU;
			other.CD_SEGCUS = this.CD_SEGCUS;
			other.LB_SEGCUS = this.LB_SEGCUS;
			other.NO_ANRU = this.NO_ANRU;
			other.ON_ANRU = this.ON_ANRU;
			other.NO_CUCS = this.NO_CUCS;
			other.ON_CUCS = this.ON_CUCS;
			other.ON_PCS = this.ON_PCS;
			other.CD_PROGRAM = this.CD_PROGRAM;
			other.CD_TRANCHE = this.CD_TRANCHE;
			other.LB_PR_TR = this.LB_PR_TR;
			other.CD_PAT_TC1 = this.CD_PAT_TC1;
			other.CD_PAT_TC2 = this.CD_PAT_TC2;
			other.CD_PAT_TC3 = this.CD_PAT_TC3;
			other.CD_PAT_TC4 = this.CD_PAT_TC4;
			other.CD_PAT_TC5 = this.CD_PAT_TC5;
			other.CD_PAT_TC6 = this.CD_PAT_TC6;
			other.CD_DESTINA = this.CD_DESTINA;
			other.LB_DESTINA = this.LB_DESTINA;
			other.SURF_HAB = this.SURF_HAB;
			other.SURF_REEL = this.SURF_REEL;
			other.SURF_CORR = this.SURF_CORR;
			other.SURF_CHAUF = this.SURF_CHAUF;
			other.SURF_UTILE = this.SURF_UTILE;
			other.SURF_DECPT = this.SURF_DECPT;
			other.MT_EQUIBUD = this.MT_EQUIBUD;
			other.TY_CHAUFF = this.TY_CHAUFF;
			other.CD_ENERGIE = this.CD_ENERGIE;
			other.LB_ENERGIE = this.LB_ENERGIE;
			other.CD_ENEREAU = this.CD_ENEREAU;
			other.LB_ENEREAU = this.LB_ENEREAU;
			other.DT_DPE = this.DT_DPE;
			other.CONSO_CCE = this.CONSO_CCE;
			other.CLAS_CCE = this.CLAS_CCE;
			other.CONSO_CEG = this.CONSO_CEG;
			other.CLAS_CEG = this.CLAS_CEG;
			other.ON_ADPTHAN = this.ON_ADPTHAN;
			other.CD_ADPTHAN = this.CD_ADPTHAN;
			other.LB_ADPTHAN = this.LB_ADPTHAN;
			other.ON_ADPTEHAN = this.ON_ADPTEHAN;
			other.ON_ACCHAN = this.ON_ACCHAN;
			other.CD_CATACCHAN = this.CD_CATACCHAN;
			other.LB_CATACCHAN = this.LB_CATACCHAN;
			other.CD_SECTEUR = this.CD_SECTEUR;
			other.LB_SECTEUR = this.LB_SECTEUR;
			other.CD_SOCPROP = this.CD_SOCPROP;
			other.LB_SOCPROP = this.LB_SOCPROP;
			other.ON_COPROP = this.ON_COPROP;
			other.CD_TYPROP = this.CD_TYPROP;
			other.LB_TYPROP = this.LB_TYPROP;
			other.CD_CATPROP = this.CD_CATPROP;
			other.LB_CATPROP = this.LB_CATPROP;
			other.DTF_BAILEM = this.DTF_BAILEM;
			other.CD_MANDGES = this.CD_MANDGES;
			other.LB_MANDGES = this.LB_MANDGES;
			other.CD_TYFOY = this.CD_TYFOY;
			other.LB_TYFOY = this.LB_TYFOY;
			other.CD_CATFOY = this.CD_CATFOY;
			other.LB_CATFOY = this.LB_CATFOY;
			other.TY_CONSTR = this.TY_CONSTR;
			other.CD_NATLOC = this.CD_NATLOC;
			other.LB_NATLOC = this.LB_NATLOC;
			other.CD_RGNATUR = this.CD_RGNATUR;
			other.CD_TYPLOC = this.CD_TYPLOC;
			other.LB_TYPLOC = this.LB_TYPLOC;
			other.REP_CHARGE = this.REP_CHARGE;
			other.NB_PIEPRIN = this.NB_PIEPRIN;
			other.CD_ETAGE = this.CD_ETAGE;
			other.LB_ETAGE = this.LB_ETAGE;
			other.NIV_ETAGE = this.NIV_ETAGE;
			other.NB_NIVEAUX = this.NB_NIVEAUX;
			other.SNO_ETAGE = this.SNO_ETAGE;
			other.ON_ASC = this.ON_ASC;
			other.ON_REP_ASC = this.ON_REP_ASC;
			other.CD_CATFP = this.CD_CATFP;
			other.LB_CATFP = this.LB_CATFP;
			other.CD_CATPLAF = this.CD_CATPLAF;
			other.LB_CATPLAF = this.LB_CATPLAF;
			other.ON_ELIGCUS = this.ON_ELIGCUS;
			other.CD_CLF_CUS = this.CD_CLF_CUS;
			other.DT_ACQUIS = this.DT_ACQUIS;
			other.CD_ACHETEA = this.CD_ACHETEA;
			other.LB_ACHETEA = this.LB_ACHETEA;
			other.DTD_PAT_G = this.DTD_PAT_G;
			other.DTD_PAT_R = this.DTD_PAT_R;
			other.CD_DEBPAT = this.CD_DEBPAT;
			other.LB_DEBPAT = this.LB_DEBPAT;
			other.CD_TYDEBPAT = this.CD_TYDEBPAT;
			other.LB_TYDEBPAT = this.LB_TYDEBPAT;
			other.DTF_PAT_G = this.DTF_PAT_G;
			other.DTF_PAT_R = this.DTF_PAT_R;
			other.CD_FINPAT = this.CD_FINPAT;
			other.LB_FINPAT = this.LB_FINPAT;
			other.CD_TYFINPAT = this.CD_TYFINPAT;
			other.LB_TYFINPAT = this.LB_TYFINPAT;
			other.DT_MELOC = this.DT_MELOC;
			other.DTF_PREVIS = this.DTF_PREVIS;
			other.DTD_MEVENTE = this.DTD_MEVENTE;
			other.DTF_MEVENTE = this.DTF_MEVENTE;
			other.DTD_REHAB = this.DTD_REHAB;
			other.DTF_REHAB = this.DTF_REHAB;
			other.CD_VENDUA = this.CD_VENDUA;
			other.LB_VENDUA = this.LB_VENDUA;
			other.CPLPA1_NOM = this.CPLPA1_NOM;
			other.CPLPA1_COD = this.CPLPA1_COD;
			other.CPLPA1_LIB = this.CPLPA1_LIB;
			other.CPLPA2_NOM = this.CPLPA2_NOM;
			other.CPLPA2_COD = this.CPLPA2_COD;
			other.CPLPA2_LIB = this.CPLPA2_LIB;
			other.CPLPA3_NOM = this.CPLPA3_NOM;
			other.CPLPA3_COD = this.CPLPA3_COD;
			other.CPLPA4_NOM = this.CPLPA4_NOM;
			other.CPLPA4_COD = this.CPLPA4_COD;
			other.MT_PUMES = this.MT_PUMES;
			other.MT_FORMES = this.MT_FORMES;
			other.MT_PULIC = this.MT_PULIC;
			other.MT_FORLIC = this.MT_FORLIC;
			other.DT_INDLIC = this.DT_INDLIC;
			other.MT_PUMAX = this.MT_PUMAX;
			other.MT_FORMAX = this.MT_FORMAX;
			other.MT_PUOBJ = this.MT_PUOBJ;
			other.MT_FOROBJ = this.MT_FOROBJ;
			other.MT_PUPRA = this.MT_PUPRA;
			other.MT_TOTRUB = this.MT_TOTRUB;
			other.MT_LOYER = this.MT_LOYER;
			other.MT_LOYANNX = this.MT_LOYANNX;
			other.MT_LOYFORF = this.MT_LOYFORF;
			other.MT_HLOYER = this.MT_HLOYER;
			other.MT_CHARGES = this.MT_CHARGES;
			other.MT_CHAUFF = this.MT_CHAUFF;
			other.CD_PERIOD = this.CD_PERIOD;
			other.LB_PERIOD = this.LB_PERIOD;
			other.NB_PERIOD = this.NB_PERIOD;
			other.MT_PUREL = this.MT_PUREL;
			other.MT_TRUBREL = this.MT_TRUBREL;
			other.MT_LOYREL = this.MT_LOYREL;
			other.MT_LAXREL = this.MT_LAXREL;
			other.MT_LFOREL = this.MT_LFOREL;
			other.MT_HLOYREL = this.MT_HLOYREL;
			other.MT_CHAREL = this.MT_CHAREL;
			other.MT_CHFREL = this.MT_CHFREL;
			other.FACTURDEF = this.FACTURDEF;
			other.NO_BAILDEF = this.NO_BAILDEF;
			other.LB_BAILDEF = this.LB_BAILDEF;
			other.ON_DISTMAN = this.ON_DISTMAN;
			other.NO_LOGTRES = this.NO_LOGTRES;
			other.CD_TAXE = this.CD_TAXE;
			other.NO_INTERN1 = this.NO_INTERN1;
			other.NO_INTERN2 = this.NO_INTERN2;
			other.ON_NONVAL = this.ON_NONVAL;
			other.DTD_NONVAL = this.DTD_NONVAL;
			other.DTF_NONVAL = this.DTF_NONVAL;
			other.TY_NONVAL = this.TY_NONVAL;
			other.LB_NONVAL = this.LB_NONVAL;
			other.ON_VACANT = this.ON_VACANT;
			other.ID_GARD = this.ID_GARD;
			other.NOM_GARD = this.NOM_GARD;
			other.PRE_GARD = this.PRE_GARD;
			other.TEL_GARD = this.TEL_GARD;
			other.MAIL_GARD = this.MAIL_GARD;
			other.TY_GARD = this.TY_GARD;
			other.ID_RESPTR = this.ID_RESPTR;
			other.NOM_RESPTR = this.NOM_RESPTR;
			other.PRE_RESPTR = this.PRE_RESPTR;
			other.TEL_RESPTR = this.TEL_RESPTR;
			other.MAIL_RESPTR = this.MAIL_RESPTR;
			other.TY_RESPTR = this.TY_RESPTR;
			other.ID_PERCEP = this.ID_PERCEP;
			other.NOM_PERCEP = this.NOM_PERCEP;
			other.ID_BURENR = this.ID_BURENR;
			other.NOM_BURENR = this.NOM_BURENR;
			other.ID_MAIRIE = this.ID_MAIRIE;
			other.NOM_MAIRIE = this.NOM_MAIRIE;
			other.ON_MAIRGEST = this.ON_MAIRGEST;
			other.LB_MAIRIE = this.LB_MAIRIE;
			other.ID_PREF = this.ID_PREF;
			other.NOM_PREF = this.NOM_PREF;
			other.ID_ENCAIS = this.ID_ENCAIS;
			other.NOM_ENCAIS = this.NOM_ENCAIS;
			other.TY_ENCAIS = this.TY_ENCAIS;
			other.ON_CONVLOC = this.ON_CONVLOC;
			other.CD_CNVM = this.CD_CNVM;
			other.DTD_CNVM = this.DTD_CNVM;
			other.DTF_CNVM = this.DTF_CNVM;
			other.DT_SI_CNVM = this.DT_SI_CNVM;
			other.DT_SI_CNVMO = this.DT_SI_CNVMO;
			other.TY_CNVM = this.TY_CNVM;
			other.LB_TY_CNVM = this.LB_TY_CNVM;
			other.ON_CONVCUS = this.ON_CONVCUS;
			other.ON_ROLCUS = this.ON_ROLCUS;
			other.CD_CNVCUS = this.CD_CNVCUS;
			other.DTD_CNVCUS = this.DTD_CNVCUS;
			other.DTF_CNVCUS = this.DTF_CNVCUS;
			other.DT_SI_CNVCUS = this.DT_SI_CNVCUS;
			other.CD_CLASCUS = this.CD_CLASCUS;
			other.LB_CLASCUS = this.LB_CLASCUS;
			other.NO_CNV_RVN = this.NO_CNV_RVN;
			other.NO_CNV_RVT = this.NO_CNV_RVT;
			other.TY_CNV = this.TY_CNV;
			other.CD_NAT_CNV = this.CD_NAT_CNV;
			other.LB_NAT_CNV = this.LB_NAT_CNV;
			other.TY_DT_RNV = this.TY_DT_RNV;
			other.DUR_RVN_AN = this.DUR_RVN_AN;
			other.DUR_RVN_MO = this.DUR_RVN_MO;
			other.DTD_RVN_PA = this.DTD_RVN_PA;
			other.DTF_RVN_PA = this.DTF_RVN_PA;
			other.MT_UNI_RNV = this.MT_UNI_RNV;
			other.ID_RVT = this.ID_RVT;
			other.NOM_RVT = this.NOM_RVT;
			other.TY_RVT = this.TY_RVT;
			other.LB_SOCIETE = this.LB_SOCIETE;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row6Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_PATRIM1 = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CD_PATRIM1);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ACTIVIT = readString(dis, ois);

				this.CD_PATRIM2 = dis.readInt();

				this.CD_PATRIM3 = dis.readInt();

				this.CD_PATRIM4 = dis.readInt();

				this.CD_PATRIM5 = dis.readInt();

				this.CD_PATRIM6 = dis.readInt();

				this.CD_PATRIM = readString(dis, ois);

				this.LB_PATRIM1 = readString(dis, ois);

				this.LB_PATRIM2 = readString(dis, ois);

				this.LB_PATRIM3 = readString(dis, ois);

				this.LB_PATRIM4 = readString(dis, ois);

				this.LB_PATRIM5 = readString(dis, ois);

				this.LB_PATRIM6 = readString(dis, ois);

				this.CD_ETAT = readString(dis, ois);

				this.ID_PATRIM = readInteger(dis, ois);

				this.ID_RLLBS = readString(dis, ois);

				this.ID_INVARIANT = readString(dis, ois);

				this.CD_ENT_PAT = readInteger(dis, ois);

				this.NIV_PAT = readInteger(dis, ois);

				this.CD_QUALIF = readString(dis, ois);

				this.CD_ENT_SEC = readInteger(dis, ois);

				this.CD_ORG_SEC = (BigDecimal) ois.readObject();

				this.NIV_SEC = readInteger(dis, ois);

				this.CD_ENT_CTX = readInteger(dis, ois);

				this.CD_ORG_CTX = (BigDecimal) ois.readObject();

				this.CD_SOC_REG = (BigDecimal) ois.readObject();

				this.CD_LOCALI1 = readString(dis, ois);

				this.CD_LOCALI2 = readString(dis, ois);

				this.CD_LOCALI3 = readString(dis, ois);

				this.CD_LOCALI4 = readString(dis, ois);

				this.CD_LOCALI5 = readString(dis, ois);

				this.ON_ADRPOST = readString(dis, ois);

				this.ADRPA_NORU = readString(dis, ois);

				this.ADRPA_CDRU = readString(dis, ois);

				this.ADRPA_RUE1 = readString(dis, ois);

				this.ADRPA_RUE2 = readString(dis, ois);

				this.ADRPA_LOC = readString(dis, ois);

				this.ADRPA_CP = readString(dis, ois);

				this.ADRPA_BD = readString(dis, ois);

				this.NO_INSEE = readString(dis, ois);

				this.NO_DEPT = readString(dis, ois);

				this.GPS_LONGIT = (BigDecimal) ois.readObject();

				this.GPS_LATIT = (BigDecimal) ois.readObject();

				this.CD_Z_GEOG = readString(dis, ois);

				this.NO_QPV = readString(dis, ois);

				this.LB_QPV = readString(dis, ois);

				this.ON_ZUS = readString(dis, ois);

				this.ON_ZRR = readString(dis, ois);

				this.ON_ZFU = readString(dis, ois);

				this.CD_SEGCUS = readString(dis, ois);

				this.LB_SEGCUS = readString(dis, ois);

				this.NO_ANRU = readString(dis, ois);

				this.ON_ANRU = readString(dis, ois);

				this.NO_CUCS = readString(dis, ois);

				this.ON_CUCS = readString(dis, ois);

				this.ON_PCS = readString(dis, ois);

				this.CD_PROGRAM = (BigDecimal) ois.readObject();

				this.CD_TRANCHE = (BigDecimal) ois.readObject();

				this.LB_PR_TR = readString(dis, ois);

				this.CD_PAT_TC1 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC2 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC3 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC4 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC5 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC6 = (BigDecimal) ois.readObject();

				this.CD_DESTINA = readString(dis, ois);

				this.LB_DESTINA = readString(dis, ois);

				this.SURF_HAB = (BigDecimal) ois.readObject();

				this.SURF_REEL = (BigDecimal) ois.readObject();

				this.SURF_CORR = (BigDecimal) ois.readObject();

				this.SURF_CHAUF = (BigDecimal) ois.readObject();

				this.SURF_UTILE = (BigDecimal) ois.readObject();

				this.SURF_DECPT = readString(dis, ois);

				this.MT_EQUIBUD = (BigDecimal) ois.readObject();

				this.TY_CHAUFF = readString(dis, ois);

				this.CD_ENERGIE = readString(dis, ois);

				this.LB_ENERGIE = readString(dis, ois);

				this.CD_ENEREAU = readString(dis, ois);

				this.LB_ENEREAU = readString(dis, ois);

				this.DT_DPE = readDate(dis, ois);

				this.CONSO_CCE = (BigDecimal) ois.readObject();

				this.CLAS_CCE = readString(dis, ois);

				this.CONSO_CEG = (BigDecimal) ois.readObject();

				this.CLAS_CEG = readString(dis, ois);

				this.ON_ADPTHAN = readString(dis, ois);

				this.CD_ADPTHAN = readString(dis, ois);

				this.LB_ADPTHAN = readString(dis, ois);

				this.ON_ADPTEHAN = readString(dis, ois);

				this.ON_ACCHAN = readString(dis, ois);

				this.CD_CATACCHAN = readString(dis, ois);

				this.LB_CATACCHAN = readString(dis, ois);

				this.CD_SECTEUR = readString(dis, ois);

				this.LB_SECTEUR = readString(dis, ois);

				this.CD_SOCPROP = (BigDecimal) ois.readObject();

				this.LB_SOCPROP = readString(dis, ois);

				this.ON_COPROP = readString(dis, ois);

				this.CD_TYPROP = readString(dis, ois);

				this.LB_TYPROP = readString(dis, ois);

				this.CD_CATPROP = readString(dis, ois);

				this.LB_CATPROP = readString(dis, ois);

				this.DTF_BAILEM = readDate(dis, ois);

				this.CD_MANDGES = readString(dis, ois);

				this.LB_MANDGES = readString(dis, ois);

				this.CD_TYFOY = readString(dis, ois);

				this.LB_TYFOY = readString(dis, ois);

				this.CD_CATFOY = readString(dis, ois);

				this.LB_CATFOY = readString(dis, ois);

				this.TY_CONSTR = readString(dis, ois);

				this.CD_NATLOC = readString(dis, ois);

				this.LB_NATLOC = readString(dis, ois);

				this.CD_RGNATUR = readString(dis, ois);

				this.CD_TYPLOC = readString(dis, ois);

				this.LB_TYPLOC = readString(dis, ois);

				this.REP_CHARGE = readInteger(dis, ois);

				this.NB_PIEPRIN = readInteger(dis, ois);

				this.CD_ETAGE = readString(dis, ois);

				this.LB_ETAGE = readString(dis, ois);

				this.NIV_ETAGE = (BigDecimal) ois.readObject();

				this.NB_NIVEAUX = (BigDecimal) ois.readObject();

				this.SNO_ETAGE = (BigDecimal) ois.readObject();

				this.ON_ASC = readString(dis, ois);

				this.ON_REP_ASC = readString(dis, ois);

				this.CD_CATFP = readString(dis, ois);

				this.LB_CATFP = readString(dis, ois);

				this.CD_CATPLAF = readString(dis, ois);

				this.LB_CATPLAF = readString(dis, ois);

				this.ON_ELIGCUS = readString(dis, ois);

				this.CD_CLF_CUS = readString(dis, ois);

				this.DT_ACQUIS = readDate(dis, ois);

				this.CD_ACHETEA = readString(dis, ois);

				this.LB_ACHETEA = readString(dis, ois);

				this.DTD_PAT_G = readDate(dis, ois);

				this.DTD_PAT_R = readDate(dis, ois);

				this.CD_DEBPAT = readString(dis, ois);

				this.LB_DEBPAT = readString(dis, ois);

				this.CD_TYDEBPAT = readString(dis, ois);

				this.LB_TYDEBPAT = readString(dis, ois);

				this.DTF_PAT_G = readDate(dis, ois);

				this.DTF_PAT_R = readDate(dis, ois);

				this.CD_FINPAT = readString(dis, ois);

				this.LB_FINPAT = readString(dis, ois);

				this.CD_TYFINPAT = readString(dis, ois);

				this.LB_TYFINPAT = readString(dis, ois);

				this.DT_MELOC = readDate(dis, ois);

				this.DTF_PREVIS = readDate(dis, ois);

				this.DTD_MEVENTE = readDate(dis, ois);

				this.DTF_MEVENTE = readDate(dis, ois);

				this.DTD_REHAB = readDate(dis, ois);

				this.DTF_REHAB = readDate(dis, ois);

				this.CD_VENDUA = readString(dis, ois);

				this.LB_VENDUA = readString(dis, ois);

				this.CPLPA1_NOM = readString(dis, ois);

				this.CPLPA1_COD = readString(dis, ois);

				this.CPLPA1_LIB = readString(dis, ois);

				this.CPLPA2_NOM = readString(dis, ois);

				this.CPLPA2_COD = readString(dis, ois);

				this.CPLPA2_LIB = readString(dis, ois);

				this.CPLPA3_NOM = readString(dis, ois);

				this.CPLPA3_COD = readString(dis, ois);

				this.CPLPA4_NOM = readString(dis, ois);

				this.CPLPA4_COD = readString(dis, ois);

				this.MT_PUMES = (BigDecimal) ois.readObject();

				this.MT_FORMES = (BigDecimal) ois.readObject();

				this.MT_PULIC = (BigDecimal) ois.readObject();

				this.MT_FORLIC = (BigDecimal) ois.readObject();

				this.DT_INDLIC = readDate(dis, ois);

				this.MT_PUMAX = (BigDecimal) ois.readObject();

				this.MT_FORMAX = (BigDecimal) ois.readObject();

				this.MT_PUOBJ = (BigDecimal) ois.readObject();

				this.MT_FOROBJ = (BigDecimal) ois.readObject();

				this.MT_PUPRA = (BigDecimal) ois.readObject();

				this.MT_TOTRUB = (BigDecimal) ois.readObject();

				this.MT_LOYER = (BigDecimal) ois.readObject();

				this.MT_LOYANNX = (BigDecimal) ois.readObject();

				this.MT_LOYFORF = (BigDecimal) ois.readObject();

				this.MT_HLOYER = (BigDecimal) ois.readObject();

				this.MT_CHARGES = (BigDecimal) ois.readObject();

				this.MT_CHAUFF = (BigDecimal) ois.readObject();

				this.CD_PERIOD = readString(dis, ois);

				this.LB_PERIOD = readString(dis, ois);

				this.NB_PERIOD = readInteger(dis, ois);

				this.MT_PUREL = (BigDecimal) ois.readObject();

				this.MT_TRUBREL = (BigDecimal) ois.readObject();

				this.MT_LOYREL = (BigDecimal) ois.readObject();

				this.MT_LAXREL = (BigDecimal) ois.readObject();

				this.MT_LFOREL = (BigDecimal) ois.readObject();

				this.MT_HLOYREL = (BigDecimal) ois.readObject();

				this.MT_CHAREL = (BigDecimal) ois.readObject();

				this.MT_CHFREL = (BigDecimal) ois.readObject();

				this.FACTURDEF = readString(dis, ois);

				this.NO_BAILDEF = readString(dis, ois);

				this.LB_BAILDEF = readString(dis, ois);

				this.ON_DISTMAN = readString(dis, ois);

				this.NO_LOGTRES = (BigDecimal) ois.readObject();

				this.CD_TAXE = readString(dis, ois);

				this.NO_INTERN1 = readInteger(dis, ois);

				this.NO_INTERN2 = readString(dis, ois);

				this.ON_NONVAL = readString(dis, ois);

				this.DTD_NONVAL = readDate(dis, ois);

				this.DTF_NONVAL = readDate(dis, ois);

				this.TY_NONVAL = readString(dis, ois);

				this.LB_NONVAL = readString(dis, ois);

				this.ON_VACANT = readString(dis, ois);

				this.ID_GARD = readInteger(dis, ois);

				this.NOM_GARD = readString(dis, ois);

				this.PRE_GARD = readString(dis, ois);

				this.TEL_GARD = readString(dis, ois);

				this.MAIL_GARD = readString(dis, ois);

				this.TY_GARD = readString(dis, ois);

				this.ID_RESPTR = readInteger(dis, ois);

				this.NOM_RESPTR = readString(dis, ois);

				this.PRE_RESPTR = readString(dis, ois);

				this.TEL_RESPTR = readString(dis, ois);

				this.MAIL_RESPTR = readString(dis, ois);

				this.TY_RESPTR = readString(dis, ois);

				this.ID_PERCEP = readInteger(dis, ois);

				this.NOM_PERCEP = readString(dis, ois);

				this.ID_BURENR = readInteger(dis, ois);

				this.NOM_BURENR = readString(dis, ois);

				this.ID_MAIRIE = readInteger(dis, ois);

				this.NOM_MAIRIE = readString(dis, ois);

				this.ON_MAIRGEST = readString(dis, ois);

				this.LB_MAIRIE = readString(dis, ois);

				this.ID_PREF = readInteger(dis, ois);

				this.NOM_PREF = readString(dis, ois);

				this.ID_ENCAIS = readInteger(dis, ois);

				this.NOM_ENCAIS = readString(dis, ois);

				this.TY_ENCAIS = readString(dis, ois);

				this.ON_CONVLOC = readString(dis, ois);

				this.CD_CNVM = readString(dis, ois);

				this.DTD_CNVM = readDate(dis, ois);

				this.DTF_CNVM = readDate(dis, ois);

				this.DT_SI_CNVM = readDate(dis, ois);

				this.DT_SI_CNVMO = readDate(dis, ois);

				this.TY_CNVM = readString(dis, ois);

				this.LB_TY_CNVM = readString(dis, ois);

				this.ON_CONVCUS = readString(dis, ois);

				this.ON_ROLCUS = readString(dis, ois);

				this.CD_CNVCUS = readString(dis, ois);

				this.DTD_CNVCUS = readDate(dis, ois);

				this.DTF_CNVCUS = readDate(dis, ois);

				this.DT_SI_CNVCUS = readDate(dis, ois);

				this.CD_CLASCUS = readString(dis, ois);

				this.LB_CLASCUS = readString(dis, ois);

				this.NO_CNV_RVN = readInteger(dis, ois);

				this.NO_CNV_RVT = readString(dis, ois);

				this.TY_CNV = readString(dis, ois);

				this.CD_NAT_CNV = readString(dis, ois);

				this.LB_NAT_CNV = readString(dis, ois);

				this.TY_DT_RNV = readString(dis, ois);

				this.DUR_RVN_AN = readInteger(dis, ois);

				this.DUR_RVN_MO = readInteger(dis, ois);

				this.DTD_RVN_PA = readDate(dis, ois);

				this.DTF_RVN_PA = readDate(dis, ois);

				this.MT_UNI_RNV = (BigDecimal) ois.readObject();

				this.ID_RVT = readInteger(dis, ois);

				this.NOM_RVT = readString(dis, ois);

				this.TY_RVT = readString(dis, ois);

				this.LB_SOCIETE = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				writeString(this.CD_ACTIVIT, dos, oos);

				dos.writeInt(this.CD_PATRIM2);

				dos.writeInt(this.CD_PATRIM3);

				dos.writeInt(this.CD_PATRIM4);

				dos.writeInt(this.CD_PATRIM5);

				dos.writeInt(this.CD_PATRIM6);

				writeString(this.CD_PATRIM, dos, oos);

				writeString(this.LB_PATRIM1, dos, oos);

				writeString(this.LB_PATRIM2, dos, oos);

				writeString(this.LB_PATRIM3, dos, oos);

				writeString(this.LB_PATRIM4, dos, oos);

				writeString(this.LB_PATRIM5, dos, oos);

				writeString(this.LB_PATRIM6, dos, oos);

				writeString(this.CD_ETAT, dos, oos);

				writeInteger(this.ID_PATRIM, dos, oos);

				writeString(this.ID_RLLBS, dos, oos);

				writeString(this.ID_INVARIANT, dos, oos);

				writeInteger(this.CD_ENT_PAT, dos, oos);

				writeInteger(this.NIV_PAT, dos, oos);

				writeString(this.CD_QUALIF, dos, oos);

				writeInteger(this.CD_ENT_SEC, dos, oos);

				oos.writeObject(this.CD_ORG_SEC);

				writeInteger(this.NIV_SEC, dos, oos);

				writeInteger(this.CD_ENT_CTX, dos, oos);

				oos.writeObject(this.CD_ORG_CTX);

				oos.writeObject(this.CD_SOC_REG);

				writeString(this.CD_LOCALI1, dos, oos);

				writeString(this.CD_LOCALI2, dos, oos);

				writeString(this.CD_LOCALI3, dos, oos);

				writeString(this.CD_LOCALI4, dos, oos);

				writeString(this.CD_LOCALI5, dos, oos);

				writeString(this.ON_ADRPOST, dos, oos);

				writeString(this.ADRPA_NORU, dos, oos);

				writeString(this.ADRPA_CDRU, dos, oos);

				writeString(this.ADRPA_RUE1, dos, oos);

				writeString(this.ADRPA_RUE2, dos, oos);

				writeString(this.ADRPA_LOC, dos, oos);

				writeString(this.ADRPA_CP, dos, oos);

				writeString(this.ADRPA_BD, dos, oos);

				writeString(this.NO_INSEE, dos, oos);

				writeString(this.NO_DEPT, dos, oos);

				oos.writeObject(this.GPS_LONGIT);

				oos.writeObject(this.GPS_LATIT);

				writeString(this.CD_Z_GEOG, dos, oos);

				writeString(this.NO_QPV, dos, oos);

				writeString(this.LB_QPV, dos, oos);

				writeString(this.ON_ZUS, dos, oos);

				writeString(this.ON_ZRR, dos, oos);

				writeString(this.ON_ZFU, dos, oos);

				writeString(this.CD_SEGCUS, dos, oos);

				writeString(this.LB_SEGCUS, dos, oos);

				writeString(this.NO_ANRU, dos, oos);

				writeString(this.ON_ANRU, dos, oos);

				writeString(this.NO_CUCS, dos, oos);

				writeString(this.ON_CUCS, dos, oos);

				writeString(this.ON_PCS, dos, oos);

				oos.writeObject(this.CD_PROGRAM);

				oos.writeObject(this.CD_TRANCHE);

				writeString(this.LB_PR_TR, dos, oos);

				oos.writeObject(this.CD_PAT_TC1);

				oos.writeObject(this.CD_PAT_TC2);

				oos.writeObject(this.CD_PAT_TC3);

				oos.writeObject(this.CD_PAT_TC4);

				oos.writeObject(this.CD_PAT_TC5);

				oos.writeObject(this.CD_PAT_TC6);

				writeString(this.CD_DESTINA, dos, oos);

				writeString(this.LB_DESTINA, dos, oos);

				oos.writeObject(this.SURF_HAB);

				oos.writeObject(this.SURF_REEL);

				oos.writeObject(this.SURF_CORR);

				oos.writeObject(this.SURF_CHAUF);

				oos.writeObject(this.SURF_UTILE);

				writeString(this.SURF_DECPT, dos, oos);

				oos.writeObject(this.MT_EQUIBUD);

				writeString(this.TY_CHAUFF, dos, oos);

				writeString(this.CD_ENERGIE, dos, oos);

				writeString(this.LB_ENERGIE, dos, oos);

				writeString(this.CD_ENEREAU, dos, oos);

				writeString(this.LB_ENEREAU, dos, oos);

				writeDate(this.DT_DPE, dos, oos);

				oos.writeObject(this.CONSO_CCE);

				writeString(this.CLAS_CCE, dos, oos);

				oos.writeObject(this.CONSO_CEG);

				writeString(this.CLAS_CEG, dos, oos);

				writeString(this.ON_ADPTHAN, dos, oos);

				writeString(this.CD_ADPTHAN, dos, oos);

				writeString(this.LB_ADPTHAN, dos, oos);

				writeString(this.ON_ADPTEHAN, dos, oos);

				writeString(this.ON_ACCHAN, dos, oos);

				writeString(this.CD_CATACCHAN, dos, oos);

				writeString(this.LB_CATACCHAN, dos, oos);

				writeString(this.CD_SECTEUR, dos, oos);

				writeString(this.LB_SECTEUR, dos, oos);

				oos.writeObject(this.CD_SOCPROP);

				writeString(this.LB_SOCPROP, dos, oos);

				writeString(this.ON_COPROP, dos, oos);

				writeString(this.CD_TYPROP, dos, oos);

				writeString(this.LB_TYPROP, dos, oos);

				writeString(this.CD_CATPROP, dos, oos);

				writeString(this.LB_CATPROP, dos, oos);

				writeDate(this.DTF_BAILEM, dos, oos);

				writeString(this.CD_MANDGES, dos, oos);

				writeString(this.LB_MANDGES, dos, oos);

				writeString(this.CD_TYFOY, dos, oos);

				writeString(this.LB_TYFOY, dos, oos);

				writeString(this.CD_CATFOY, dos, oos);

				writeString(this.LB_CATFOY, dos, oos);

				writeString(this.TY_CONSTR, dos, oos);

				writeString(this.CD_NATLOC, dos, oos);

				writeString(this.LB_NATLOC, dos, oos);

				writeString(this.CD_RGNATUR, dos, oos);

				writeString(this.CD_TYPLOC, dos, oos);

				writeString(this.LB_TYPLOC, dos, oos);

				writeInteger(this.REP_CHARGE, dos, oos);

				writeInteger(this.NB_PIEPRIN, dos, oos);

				writeString(this.CD_ETAGE, dos, oos);

				writeString(this.LB_ETAGE, dos, oos);

				oos.writeObject(this.NIV_ETAGE);

				oos.writeObject(this.NB_NIVEAUX);

				oos.writeObject(this.SNO_ETAGE);

				writeString(this.ON_ASC, dos, oos);

				writeString(this.ON_REP_ASC, dos, oos);

				writeString(this.CD_CATFP, dos, oos);

				writeString(this.LB_CATFP, dos, oos);

				writeString(this.CD_CATPLAF, dos, oos);

				writeString(this.LB_CATPLAF, dos, oos);

				writeString(this.ON_ELIGCUS, dos, oos);

				writeString(this.CD_CLF_CUS, dos, oos);

				writeDate(this.DT_ACQUIS, dos, oos);

				writeString(this.CD_ACHETEA, dos, oos);

				writeString(this.LB_ACHETEA, dos, oos);

				writeDate(this.DTD_PAT_G, dos, oos);

				writeDate(this.DTD_PAT_R, dos, oos);

				writeString(this.CD_DEBPAT, dos, oos);

				writeString(this.LB_DEBPAT, dos, oos);

				writeString(this.CD_TYDEBPAT, dos, oos);

				writeString(this.LB_TYDEBPAT, dos, oos);

				writeDate(this.DTF_PAT_G, dos, oos);

				writeDate(this.DTF_PAT_R, dos, oos);

				writeString(this.CD_FINPAT, dos, oos);

				writeString(this.LB_FINPAT, dos, oos);

				writeString(this.CD_TYFINPAT, dos, oos);

				writeString(this.LB_TYFINPAT, dos, oos);

				writeDate(this.DT_MELOC, dos, oos);

				writeDate(this.DTF_PREVIS, dos, oos);

				writeDate(this.DTD_MEVENTE, dos, oos);

				writeDate(this.DTF_MEVENTE, dos, oos);

				writeDate(this.DTD_REHAB, dos, oos);

				writeDate(this.DTF_REHAB, dos, oos);

				writeString(this.CD_VENDUA, dos, oos);

				writeString(this.LB_VENDUA, dos, oos);

				writeString(this.CPLPA1_NOM, dos, oos);

				writeString(this.CPLPA1_COD, dos, oos);

				writeString(this.CPLPA1_LIB, dos, oos);

				writeString(this.CPLPA2_NOM, dos, oos);

				writeString(this.CPLPA2_COD, dos, oos);

				writeString(this.CPLPA2_LIB, dos, oos);

				writeString(this.CPLPA3_NOM, dos, oos);

				writeString(this.CPLPA3_COD, dos, oos);

				writeString(this.CPLPA4_NOM, dos, oos);

				writeString(this.CPLPA4_COD, dos, oos);

				oos.writeObject(this.MT_PUMES);

				oos.writeObject(this.MT_FORMES);

				oos.writeObject(this.MT_PULIC);

				oos.writeObject(this.MT_FORLIC);

				writeDate(this.DT_INDLIC, dos, oos);

				oos.writeObject(this.MT_PUMAX);

				oos.writeObject(this.MT_FORMAX);

				oos.writeObject(this.MT_PUOBJ);

				oos.writeObject(this.MT_FOROBJ);

				oos.writeObject(this.MT_PUPRA);

				oos.writeObject(this.MT_TOTRUB);

				oos.writeObject(this.MT_LOYER);

				oos.writeObject(this.MT_LOYANNX);

				oos.writeObject(this.MT_LOYFORF);

				oos.writeObject(this.MT_HLOYER);

				oos.writeObject(this.MT_CHARGES);

				oos.writeObject(this.MT_CHAUFF);

				writeString(this.CD_PERIOD, dos, oos);

				writeString(this.LB_PERIOD, dos, oos);

				writeInteger(this.NB_PERIOD, dos, oos);

				oos.writeObject(this.MT_PUREL);

				oos.writeObject(this.MT_TRUBREL);

				oos.writeObject(this.MT_LOYREL);

				oos.writeObject(this.MT_LAXREL);

				oos.writeObject(this.MT_LFOREL);

				oos.writeObject(this.MT_HLOYREL);

				oos.writeObject(this.MT_CHAREL);

				oos.writeObject(this.MT_CHFREL);

				writeString(this.FACTURDEF, dos, oos);

				writeString(this.NO_BAILDEF, dos, oos);

				writeString(this.LB_BAILDEF, dos, oos);

				writeString(this.ON_DISTMAN, dos, oos);

				oos.writeObject(this.NO_LOGTRES);

				writeString(this.CD_TAXE, dos, oos);

				writeInteger(this.NO_INTERN1, dos, oos);

				writeString(this.NO_INTERN2, dos, oos);

				writeString(this.ON_NONVAL, dos, oos);

				writeDate(this.DTD_NONVAL, dos, oos);

				writeDate(this.DTF_NONVAL, dos, oos);

				writeString(this.TY_NONVAL, dos, oos);

				writeString(this.LB_NONVAL, dos, oos);

				writeString(this.ON_VACANT, dos, oos);

				writeInteger(this.ID_GARD, dos, oos);

				writeString(this.NOM_GARD, dos, oos);

				writeString(this.PRE_GARD, dos, oos);

				writeString(this.TEL_GARD, dos, oos);

				writeString(this.MAIL_GARD, dos, oos);

				writeString(this.TY_GARD, dos, oos);

				writeInteger(this.ID_RESPTR, dos, oos);

				writeString(this.NOM_RESPTR, dos, oos);

				writeString(this.PRE_RESPTR, dos, oos);

				writeString(this.TEL_RESPTR, dos, oos);

				writeString(this.MAIL_RESPTR, dos, oos);

				writeString(this.TY_RESPTR, dos, oos);

				writeInteger(this.ID_PERCEP, dos, oos);

				writeString(this.NOM_PERCEP, dos, oos);

				writeInteger(this.ID_BURENR, dos, oos);

				writeString(this.NOM_BURENR, dos, oos);

				writeInteger(this.ID_MAIRIE, dos, oos);

				writeString(this.NOM_MAIRIE, dos, oos);

				writeString(this.ON_MAIRGEST, dos, oos);

				writeString(this.LB_MAIRIE, dos, oos);

				writeInteger(this.ID_PREF, dos, oos);

				writeString(this.NOM_PREF, dos, oos);

				writeInteger(this.ID_ENCAIS, dos, oos);

				writeString(this.NOM_ENCAIS, dos, oos);

				writeString(this.TY_ENCAIS, dos, oos);

				writeString(this.ON_CONVLOC, dos, oos);

				writeString(this.CD_CNVM, dos, oos);

				writeDate(this.DTD_CNVM, dos, oos);

				writeDate(this.DTF_CNVM, dos, oos);

				writeDate(this.DT_SI_CNVM, dos, oos);

				writeDate(this.DT_SI_CNVMO, dos, oos);

				writeString(this.TY_CNVM, dos, oos);

				writeString(this.LB_TY_CNVM, dos, oos);

				writeString(this.ON_CONVCUS, dos, oos);

				writeString(this.ON_ROLCUS, dos, oos);

				writeString(this.CD_CNVCUS, dos, oos);

				writeDate(this.DTD_CNVCUS, dos, oos);

				writeDate(this.DTF_CNVCUS, dos, oos);

				writeDate(this.DT_SI_CNVCUS, dos, oos);

				writeString(this.CD_CLASCUS, dos, oos);

				writeString(this.LB_CLASCUS, dos, oos);

				writeInteger(this.NO_CNV_RVN, dos, oos);

				writeString(this.NO_CNV_RVT, dos, oos);

				writeString(this.TY_CNV, dos, oos);

				writeString(this.CD_NAT_CNV, dos, oos);

				writeString(this.LB_NAT_CNV, dos, oos);

				writeString(this.TY_DT_RNV, dos, oos);

				writeInteger(this.DUR_RVN_AN, dos, oos);

				writeInteger(this.DUR_RVN_MO, dos, oos);

				writeDate(this.DTD_RVN_PA, dos, oos);

				writeDate(this.DTF_RVN_PA, dos, oos);

				oos.writeObject(this.MT_UNI_RNV);

				writeInteger(this.ID_RVT, dos, oos);

				writeString(this.NOM_RVT, dos, oos);

				writeString(this.TY_RVT, dos, oos);

				writeString(this.LB_SOCIETE, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_ACTIVIT=" + CD_ACTIVIT);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",CD_PATRIM5=" + String.valueOf(CD_PATRIM5));
			sb.append(",CD_PATRIM6=" + String.valueOf(CD_PATRIM6));
			sb.append(",CD_PATRIM=" + CD_PATRIM);
			sb.append(",LB_PATRIM1=" + LB_PATRIM1);
			sb.append(",LB_PATRIM2=" + LB_PATRIM2);
			sb.append(",LB_PATRIM3=" + LB_PATRIM3);
			sb.append(",LB_PATRIM4=" + LB_PATRIM4);
			sb.append(",LB_PATRIM5=" + LB_PATRIM5);
			sb.append(",LB_PATRIM6=" + LB_PATRIM6);
			sb.append(",CD_ETAT=" + CD_ETAT);
			sb.append(",ID_PATRIM=" + String.valueOf(ID_PATRIM));
			sb.append(",ID_RLLBS=" + ID_RLLBS);
			sb.append(",ID_INVARIANT=" + ID_INVARIANT);
			sb.append(",CD_ENT_PAT=" + String.valueOf(CD_ENT_PAT));
			sb.append(",NIV_PAT=" + String.valueOf(NIV_PAT));
			sb.append(",CD_QUALIF=" + CD_QUALIF);
			sb.append(",CD_ENT_SEC=" + String.valueOf(CD_ENT_SEC));
			sb.append(",CD_ORG_SEC=" + String.valueOf(CD_ORG_SEC));
			sb.append(",NIV_SEC=" + String.valueOf(NIV_SEC));
			sb.append(",CD_ENT_CTX=" + String.valueOf(CD_ENT_CTX));
			sb.append(",CD_ORG_CTX=" + String.valueOf(CD_ORG_CTX));
			sb.append(",CD_SOC_REG=" + String.valueOf(CD_SOC_REG));
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",CD_LOCALI2=" + CD_LOCALI2);
			sb.append(",CD_LOCALI3=" + CD_LOCALI3);
			sb.append(",CD_LOCALI4=" + CD_LOCALI4);
			sb.append(",CD_LOCALI5=" + CD_LOCALI5);
			sb.append(",ON_ADRPOST=" + ON_ADRPOST);
			sb.append(",ADRPA_NORU=" + ADRPA_NORU);
			sb.append(",ADRPA_CDRU=" + ADRPA_CDRU);
			sb.append(",ADRPA_RUE1=" + ADRPA_RUE1);
			sb.append(",ADRPA_RUE2=" + ADRPA_RUE2);
			sb.append(",ADRPA_LOC=" + ADRPA_LOC);
			sb.append(",ADRPA_CP=" + ADRPA_CP);
			sb.append(",ADRPA_BD=" + ADRPA_BD);
			sb.append(",NO_INSEE=" + NO_INSEE);
			sb.append(",NO_DEPT=" + NO_DEPT);
			sb.append(",GPS_LONGIT=" + String.valueOf(GPS_LONGIT));
			sb.append(",GPS_LATIT=" + String.valueOf(GPS_LATIT));
			sb.append(",CD_Z_GEOG=" + CD_Z_GEOG);
			sb.append(",NO_QPV=" + NO_QPV);
			sb.append(",LB_QPV=" + LB_QPV);
			sb.append(",ON_ZUS=" + ON_ZUS);
			sb.append(",ON_ZRR=" + ON_ZRR);
			sb.append(",ON_ZFU=" + ON_ZFU);
			sb.append(",CD_SEGCUS=" + CD_SEGCUS);
			sb.append(",LB_SEGCUS=" + LB_SEGCUS);
			sb.append(",NO_ANRU=" + NO_ANRU);
			sb.append(",ON_ANRU=" + ON_ANRU);
			sb.append(",NO_CUCS=" + NO_CUCS);
			sb.append(",ON_CUCS=" + ON_CUCS);
			sb.append(",ON_PCS=" + ON_PCS);
			sb.append(",CD_PROGRAM=" + String.valueOf(CD_PROGRAM));
			sb.append(",CD_TRANCHE=" + String.valueOf(CD_TRANCHE));
			sb.append(",LB_PR_TR=" + LB_PR_TR);
			sb.append(",CD_PAT_TC1=" + String.valueOf(CD_PAT_TC1));
			sb.append(",CD_PAT_TC2=" + String.valueOf(CD_PAT_TC2));
			sb.append(",CD_PAT_TC3=" + String.valueOf(CD_PAT_TC3));
			sb.append(",CD_PAT_TC4=" + String.valueOf(CD_PAT_TC4));
			sb.append(",CD_PAT_TC5=" + String.valueOf(CD_PAT_TC5));
			sb.append(",CD_PAT_TC6=" + String.valueOf(CD_PAT_TC6));
			sb.append(",CD_DESTINA=" + CD_DESTINA);
			sb.append(",LB_DESTINA=" + LB_DESTINA);
			sb.append(",SURF_HAB=" + String.valueOf(SURF_HAB));
			sb.append(",SURF_REEL=" + String.valueOf(SURF_REEL));
			sb.append(",SURF_CORR=" + String.valueOf(SURF_CORR));
			sb.append(",SURF_CHAUF=" + String.valueOf(SURF_CHAUF));
			sb.append(",SURF_UTILE=" + String.valueOf(SURF_UTILE));
			sb.append(",SURF_DECPT=" + SURF_DECPT);
			sb.append(",MT_EQUIBUD=" + String.valueOf(MT_EQUIBUD));
			sb.append(",TY_CHAUFF=" + TY_CHAUFF);
			sb.append(",CD_ENERGIE=" + CD_ENERGIE);
			sb.append(",LB_ENERGIE=" + LB_ENERGIE);
			sb.append(",CD_ENEREAU=" + CD_ENEREAU);
			sb.append(",LB_ENEREAU=" + LB_ENEREAU);
			sb.append(",DT_DPE=" + String.valueOf(DT_DPE));
			sb.append(",CONSO_CCE=" + String.valueOf(CONSO_CCE));
			sb.append(",CLAS_CCE=" + CLAS_CCE);
			sb.append(",CONSO_CEG=" + String.valueOf(CONSO_CEG));
			sb.append(",CLAS_CEG=" + CLAS_CEG);
			sb.append(",ON_ADPTHAN=" + ON_ADPTHAN);
			sb.append(",CD_ADPTHAN=" + CD_ADPTHAN);
			sb.append(",LB_ADPTHAN=" + LB_ADPTHAN);
			sb.append(",ON_ADPTEHAN=" + ON_ADPTEHAN);
			sb.append(",ON_ACCHAN=" + ON_ACCHAN);
			sb.append(",CD_CATACCHAN=" + CD_CATACCHAN);
			sb.append(",LB_CATACCHAN=" + LB_CATACCHAN);
			sb.append(",CD_SECTEUR=" + CD_SECTEUR);
			sb.append(",LB_SECTEUR=" + LB_SECTEUR);
			sb.append(",CD_SOCPROP=" + String.valueOf(CD_SOCPROP));
			sb.append(",LB_SOCPROP=" + LB_SOCPROP);
			sb.append(",ON_COPROP=" + ON_COPROP);
			sb.append(",CD_TYPROP=" + CD_TYPROP);
			sb.append(",LB_TYPROP=" + LB_TYPROP);
			sb.append(",CD_CATPROP=" + CD_CATPROP);
			sb.append(",LB_CATPROP=" + LB_CATPROP);
			sb.append(",DTF_BAILEM=" + String.valueOf(DTF_BAILEM));
			sb.append(",CD_MANDGES=" + CD_MANDGES);
			sb.append(",LB_MANDGES=" + LB_MANDGES);
			sb.append(",CD_TYFOY=" + CD_TYFOY);
			sb.append(",LB_TYFOY=" + LB_TYFOY);
			sb.append(",CD_CATFOY=" + CD_CATFOY);
			sb.append(",LB_CATFOY=" + LB_CATFOY);
			sb.append(",TY_CONSTR=" + TY_CONSTR);
			sb.append(",CD_NATLOC=" + CD_NATLOC);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",CD_RGNATUR=" + CD_RGNATUR);
			sb.append(",CD_TYPLOC=" + CD_TYPLOC);
			sb.append(",LB_TYPLOC=" + LB_TYPLOC);
			sb.append(",REP_CHARGE=" + String.valueOf(REP_CHARGE));
			sb.append(",NB_PIEPRIN=" + String.valueOf(NB_PIEPRIN));
			sb.append(",CD_ETAGE=" + CD_ETAGE);
			sb.append(",LB_ETAGE=" + LB_ETAGE);
			sb.append(",NIV_ETAGE=" + String.valueOf(NIV_ETAGE));
			sb.append(",NB_NIVEAUX=" + String.valueOf(NB_NIVEAUX));
			sb.append(",SNO_ETAGE=" + String.valueOf(SNO_ETAGE));
			sb.append(",ON_ASC=" + ON_ASC);
			sb.append(",ON_REP_ASC=" + ON_REP_ASC);
			sb.append(",CD_CATFP=" + CD_CATFP);
			sb.append(",LB_CATFP=" + LB_CATFP);
			sb.append(",CD_CATPLAF=" + CD_CATPLAF);
			sb.append(",LB_CATPLAF=" + LB_CATPLAF);
			sb.append(",ON_ELIGCUS=" + ON_ELIGCUS);
			sb.append(",CD_CLF_CUS=" + CD_CLF_CUS);
			sb.append(",DT_ACQUIS=" + String.valueOf(DT_ACQUIS));
			sb.append(",CD_ACHETEA=" + CD_ACHETEA);
			sb.append(",LB_ACHETEA=" + LB_ACHETEA);
			sb.append(",DTD_PAT_G=" + String.valueOf(DTD_PAT_G));
			sb.append(",DTD_PAT_R=" + String.valueOf(DTD_PAT_R));
			sb.append(",CD_DEBPAT=" + CD_DEBPAT);
			sb.append(",LB_DEBPAT=" + LB_DEBPAT);
			sb.append(",CD_TYDEBPAT=" + CD_TYDEBPAT);
			sb.append(",LB_TYDEBPAT=" + LB_TYDEBPAT);
			sb.append(",DTF_PAT_G=" + String.valueOf(DTF_PAT_G));
			sb.append(",DTF_PAT_R=" + String.valueOf(DTF_PAT_R));
			sb.append(",CD_FINPAT=" + CD_FINPAT);
			sb.append(",LB_FINPAT=" + LB_FINPAT);
			sb.append(",CD_TYFINPAT=" + CD_TYFINPAT);
			sb.append(",LB_TYFINPAT=" + LB_TYFINPAT);
			sb.append(",DT_MELOC=" + String.valueOf(DT_MELOC));
			sb.append(",DTF_PREVIS=" + String.valueOf(DTF_PREVIS));
			sb.append(",DTD_MEVENTE=" + String.valueOf(DTD_MEVENTE));
			sb.append(",DTF_MEVENTE=" + String.valueOf(DTF_MEVENTE));
			sb.append(",DTD_REHAB=" + String.valueOf(DTD_REHAB));
			sb.append(",DTF_REHAB=" + String.valueOf(DTF_REHAB));
			sb.append(",CD_VENDUA=" + CD_VENDUA);
			sb.append(",LB_VENDUA=" + LB_VENDUA);
			sb.append(",CPLPA1_NOM=" + CPLPA1_NOM);
			sb.append(",CPLPA1_COD=" + CPLPA1_COD);
			sb.append(",CPLPA1_LIB=" + CPLPA1_LIB);
			sb.append(",CPLPA2_NOM=" + CPLPA2_NOM);
			sb.append(",CPLPA2_COD=" + CPLPA2_COD);
			sb.append(",CPLPA2_LIB=" + CPLPA2_LIB);
			sb.append(",CPLPA3_NOM=" + CPLPA3_NOM);
			sb.append(",CPLPA3_COD=" + CPLPA3_COD);
			sb.append(",CPLPA4_NOM=" + CPLPA4_NOM);
			sb.append(",CPLPA4_COD=" + CPLPA4_COD);
			sb.append(",MT_PUMES=" + String.valueOf(MT_PUMES));
			sb.append(",MT_FORMES=" + String.valueOf(MT_FORMES));
			sb.append(",MT_PULIC=" + String.valueOf(MT_PULIC));
			sb.append(",MT_FORLIC=" + String.valueOf(MT_FORLIC));
			sb.append(",DT_INDLIC=" + String.valueOf(DT_INDLIC));
			sb.append(",MT_PUMAX=" + String.valueOf(MT_PUMAX));
			sb.append(",MT_FORMAX=" + String.valueOf(MT_FORMAX));
			sb.append(",MT_PUOBJ=" + String.valueOf(MT_PUOBJ));
			sb.append(",MT_FOROBJ=" + String.valueOf(MT_FOROBJ));
			sb.append(",MT_PUPRA=" + String.valueOf(MT_PUPRA));
			sb.append(",MT_TOTRUB=" + String.valueOf(MT_TOTRUB));
			sb.append(",MT_LOYER=" + String.valueOf(MT_LOYER));
			sb.append(",MT_LOYANNX=" + String.valueOf(MT_LOYANNX));
			sb.append(",MT_LOYFORF=" + String.valueOf(MT_LOYFORF));
			sb.append(",MT_HLOYER=" + String.valueOf(MT_HLOYER));
			sb.append(",MT_CHARGES=" + String.valueOf(MT_CHARGES));
			sb.append(",MT_CHAUFF=" + String.valueOf(MT_CHAUFF));
			sb.append(",CD_PERIOD=" + CD_PERIOD);
			sb.append(",LB_PERIOD=" + LB_PERIOD);
			sb.append(",NB_PERIOD=" + String.valueOf(NB_PERIOD));
			sb.append(",MT_PUREL=" + String.valueOf(MT_PUREL));
			sb.append(",MT_TRUBREL=" + String.valueOf(MT_TRUBREL));
			sb.append(",MT_LOYREL=" + String.valueOf(MT_LOYREL));
			sb.append(",MT_LAXREL=" + String.valueOf(MT_LAXREL));
			sb.append(",MT_LFOREL=" + String.valueOf(MT_LFOREL));
			sb.append(",MT_HLOYREL=" + String.valueOf(MT_HLOYREL));
			sb.append(",MT_CHAREL=" + String.valueOf(MT_CHAREL));
			sb.append(",MT_CHFREL=" + String.valueOf(MT_CHFREL));
			sb.append(",FACTURDEF=" + FACTURDEF);
			sb.append(",NO_BAILDEF=" + NO_BAILDEF);
			sb.append(",LB_BAILDEF=" + LB_BAILDEF);
			sb.append(",ON_DISTMAN=" + ON_DISTMAN);
			sb.append(",NO_LOGTRES=" + String.valueOf(NO_LOGTRES));
			sb.append(",CD_TAXE=" + CD_TAXE);
			sb.append(",NO_INTERN1=" + String.valueOf(NO_INTERN1));
			sb.append(",NO_INTERN2=" + NO_INTERN2);
			sb.append(",ON_NONVAL=" + ON_NONVAL);
			sb.append(",DTD_NONVAL=" + String.valueOf(DTD_NONVAL));
			sb.append(",DTF_NONVAL=" + String.valueOf(DTF_NONVAL));
			sb.append(",TY_NONVAL=" + TY_NONVAL);
			sb.append(",LB_NONVAL=" + LB_NONVAL);
			sb.append(",ON_VACANT=" + ON_VACANT);
			sb.append(",ID_GARD=" + String.valueOf(ID_GARD));
			sb.append(",NOM_GARD=" + NOM_GARD);
			sb.append(",PRE_GARD=" + PRE_GARD);
			sb.append(",TEL_GARD=" + TEL_GARD);
			sb.append(",MAIL_GARD=" + MAIL_GARD);
			sb.append(",TY_GARD=" + TY_GARD);
			sb.append(",ID_RESPTR=" + String.valueOf(ID_RESPTR));
			sb.append(",NOM_RESPTR=" + NOM_RESPTR);
			sb.append(",PRE_RESPTR=" + PRE_RESPTR);
			sb.append(",TEL_RESPTR=" + TEL_RESPTR);
			sb.append(",MAIL_RESPTR=" + MAIL_RESPTR);
			sb.append(",TY_RESPTR=" + TY_RESPTR);
			sb.append(",ID_PERCEP=" + String.valueOf(ID_PERCEP));
			sb.append(",NOM_PERCEP=" + NOM_PERCEP);
			sb.append(",ID_BURENR=" + String.valueOf(ID_BURENR));
			sb.append(",NOM_BURENR=" + NOM_BURENR);
			sb.append(",ID_MAIRIE=" + String.valueOf(ID_MAIRIE));
			sb.append(",NOM_MAIRIE=" + NOM_MAIRIE);
			sb.append(",ON_MAIRGEST=" + ON_MAIRGEST);
			sb.append(",LB_MAIRIE=" + LB_MAIRIE);
			sb.append(",ID_PREF=" + String.valueOf(ID_PREF));
			sb.append(",NOM_PREF=" + NOM_PREF);
			sb.append(",ID_ENCAIS=" + String.valueOf(ID_ENCAIS));
			sb.append(",NOM_ENCAIS=" + NOM_ENCAIS);
			sb.append(",TY_ENCAIS=" + TY_ENCAIS);
			sb.append(",ON_CONVLOC=" + ON_CONVLOC);
			sb.append(",CD_CNVM=" + CD_CNVM);
			sb.append(",DTD_CNVM=" + String.valueOf(DTD_CNVM));
			sb.append(",DTF_CNVM=" + String.valueOf(DTF_CNVM));
			sb.append(",DT_SI_CNVM=" + String.valueOf(DT_SI_CNVM));
			sb.append(",DT_SI_CNVMO=" + String.valueOf(DT_SI_CNVMO));
			sb.append(",TY_CNVM=" + TY_CNVM);
			sb.append(",LB_TY_CNVM=" + LB_TY_CNVM);
			sb.append(",ON_CONVCUS=" + ON_CONVCUS);
			sb.append(",ON_ROLCUS=" + ON_ROLCUS);
			sb.append(",CD_CNVCUS=" + CD_CNVCUS);
			sb.append(",DTD_CNVCUS=" + String.valueOf(DTD_CNVCUS));
			sb.append(",DTF_CNVCUS=" + String.valueOf(DTF_CNVCUS));
			sb.append(",DT_SI_CNVCUS=" + String.valueOf(DT_SI_CNVCUS));
			sb.append(",CD_CLASCUS=" + CD_CLASCUS);
			sb.append(",LB_CLASCUS=" + LB_CLASCUS);
			sb.append(",NO_CNV_RVN=" + String.valueOf(NO_CNV_RVN));
			sb.append(",NO_CNV_RVT=" + NO_CNV_RVT);
			sb.append(",TY_CNV=" + TY_CNV);
			sb.append(",CD_NAT_CNV=" + CD_NAT_CNV);
			sb.append(",LB_NAT_CNV=" + LB_NAT_CNV);
			sb.append(",TY_DT_RNV=" + TY_DT_RNV);
			sb.append(",DUR_RVN_AN=" + String.valueOf(DUR_RVN_AN));
			sb.append(",DUR_RVN_MO=" + String.valueOf(DUR_RVN_MO));
			sb.append(",DTD_RVN_PA=" + String.valueOf(DTD_RVN_PA));
			sb.append(",DTF_RVN_PA=" + String.valueOf(DTF_RVN_PA));
			sb.append(",MT_UNI_RNV=" + String.valueOf(MT_UNI_RNV));
			sb.append(",ID_RVT=" + String.valueOf(ID_RVT));
			sb.append(",NOM_RVT=" + NOM_RVT);
			sb.append(",TY_RVT=" + TY_RVT);
			sb.append(",LB_SOCIETE=" + LB_SOCIETE);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row6Struct row6 = new row6Struct();

				/**
				 * [tAdvancedHash_row6 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row6", false);
				start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tAdvancedHash_row6 = 0;

				// connection name:row6
				// source node:tDBInput_5 - inputs:(after_tDBInput_2) outputs:(row6,row6) |
				// target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row6,row16,row17) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row6Struct>getLookup(matchingModeEnum_row6);

				globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);

				/**
				 * [tAdvancedHash_row6 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "";

				final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:jU//zNIu/AV+q51cb3sJuEEPJ1pCYa+xUjc8hQ==");

				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;

				String port_tDBInput_5 = "1433";
				String dbname_tDBInput_5 = "HDSHData";
				String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_5)) {
					url_tDBInput_5 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_5)) {
					url_tDBInput_5 += "//" + "HDSHData";
				}
				url_tDBInput_5 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_5 = "";

				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5, dbUser_tDBInput_5,
						dbPwd_tDBInput_5);

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "SELECT T_PATRIMOINE_GIM.CD_SOCIETE,\n		T_PATRIMOINE_GIM.CD_ACTIVIT,\n		T_PATRIMOINE_GIM.CD_PATRIM1,\n		T_PATRIMOINE_GIM.CD"
						+ "_PATRIM2,\n		T_PATRIMOINE_GIM.CD_PATRIM3,\n		T_PATRIMOINE_GIM.CD_PATRIM4,\n		T_PATRIMOINE_GIM.CD_PATRIM5,\n		T_PATRIMOINE_GI"
						+ "M.CD_PATRIM6,\n		T_PATRIMOINE_GIM.CD_PATRIM,\n		T_PATRIMOINE_GIM.LB_PATRIM1,\n		T_PATRIMOINE_GIM.LB_PATRIM2,\n		T_PATRIMOINE"
						+ "_GIM.LB_PATRIM3,\n		T_PATRIMOINE_GIM.LB_PATRIM4,\n		T_PATRIMOINE_GIM.LB_PATRIM5,\n		T_PATRIMOINE_GIM.LB_PATRIM6,\n		T_PATRIM"
						+ "OINE_GIM.CD_ETAT,\n		T_PATRIMOINE_GIM.ID_PATRIM,\n		T_PATRIMOINE_GIM.ID_RLLBS,\n		T_PATRIMOINE_GIM.ID_INVARIANT,\n		T_PATRIM"
						+ "OINE_GIM.CD_ENT_PAT,\n		T_PATRIMOINE_GIM.NIV_PAT,\n		T_PATRIMOINE_GIM.CD_QUALIF,\n		T_PATRIMOINE_GIM.CD_ENT_SEC,\n		T_PATRIM"
						+ "OINE_GIM.CD_ORG_SEC,\n		T_PATRIMOINE_GIM.NIV_SEC,\n		T_PATRIMOINE_GIM.CD_ENT_CTX,\n		T_PATRIMOINE_GIM.CD_ORG_CTX,\n		T_PATRI"
						+ "MOINE_GIM.CD_SOC_REG,\n		T_PATRIMOINE_GIM.CD_LOCALI1,\n		T_PATRIMOINE_GIM.CD_LOCALI2,\n		T_PATRIMOINE_GIM.CD_LOCALI3,\n		T_P"
						+ "ATRIMOINE_GIM.CD_LOCALI4,\n		T_PATRIMOINE_GIM.CD_LOCALI5,\n		T_PATRIMOINE_GIM.ON_ADRPOST,\n		T_PATRIMOINE_GIM.ADRPA_NORU,\n	"
						+ "	T_PATRIMOINE_GIM.ADRPA_CDRU,\n		T_PATRIMOINE_GIM.ADRPA_RUE1,\n		T_PATRIMOINE_GIM.ADRPA_RUE2,\n		T_PATRIMOINE_GIM.ADRPA_LOC"
						+ ",\n		T_PATRIMOINE_GIM.ADRPA_CP,\n		T_PATRIMOINE_GIM.ADRPA_BD,\n		T_PATRIMOINE_GIM.NO_INSEE,\n		T_PATRIMOINE_GIM.NO_DEPT,\n		T"
						+ "_PATRIMOINE_GIM.GPS_LONGIT,\n		T_PATRIMOINE_GIM.GPS_LATIT,\n		T_PATRIMOINE_GIM.CD_Z_GEOG,\n		T_PATRIMOINE_GIM.NO_QPV,\n		T_P"
						+ "ATRIMOINE_GIM.LB_QPV,\n		T_PATRIMOINE_GIM.ON_ZUS,\n		T_PATRIMOINE_GIM.ON_ZRR,\n		T_PATRIMOINE_GIM.ON_ZFU,\n		T_PATRIMOINE_GI"
						+ "M.CD_SEGCUS,\n		T_PATRIMOINE_GIM.LB_SEGCUS,\n		T_PATRIMOINE_GIM.NO_ANRU,\n		T_PATRIMOINE_GIM.ON_ANRU,\n		T_PATRIMOINE_GIM.NO"
						+ "_CUCS,\n		T_PATRIMOINE_GIM.ON_CUCS,\n		T_PATRIMOINE_GIM.ON_PCS,\n		T_PATRIMOINE_GIM.CD_PROGRAM,\n		T_PATRIMOINE_GIM.CD_TRANC"
						+ "HE,\n		T_PATRIMOINE_GIM.LB_PR_TR,\n		T_PATRIMOINE_GIM.CD_PAT_TC1,\n		T_PATRIMOINE_GIM.CD_PAT_TC2,\n		T_PATRIMOINE_GIM.CD_PAT"
						+ "_TC3,\n		T_PATRIMOINE_GIM.CD_PAT_TC4,\n		T_PATRIMOINE_GIM.CD_PAT_TC5,\n		T_PATRIMOINE_GIM.CD_PAT_TC6,\n		T_PATRIMOINE_GIM.CD"
						+ "_DESTINA,\n		T_PATRIMOINE_GIM.LB_DESTINA,\n		T_PATRIMOINE_GIM.SURF_HAB,\n		T_PATRIMOINE_GIM.SURF_REEL,\n		T_PATRIMOINE_GIM.S"
						+ "URF_CORR,\n		T_PATRIMOINE_GIM.SURF_CHAUF,\n		T_PATRIMOINE_GIM.SURF_UTILE,\n		T_PATRIMOINE_GIM.SURF_DECPT,\n		T_PATRIMOINE_GI"
						+ "M.MT_EQUIBUD,\n		T_PATRIMOINE_GIM.TY_CHAUFF,\n		T_PATRIMOINE_GIM.CD_ENERGIE,\n		T_PATRIMOINE_GIM.LB_ENERGIE,\n		T_PATRIMOINE"
						+ "_GIM.CD_ENEREAU,\n		T_PATRIMOINE_GIM.LB_ENEREAU,\n		T_PATRIMOINE_GIM.DT_DPE,\n		T_PATRIMOINE_GIM.CONSO_CCE,\n		T_PATRIMOINE_"
						+ "GIM.CLAS_CCE,\n		T_PATRIMOINE_GIM.CONSO_CEG,\n		T_PATRIMOINE_GIM.CLAS_CEG,\n		T_PATRIMOINE_GIM.ON_ADPTHAN,\n		T_PATRIMOINE_G"
						+ "IM.CD_ADPTHAN,\n		T_PATRIMOINE_GIM.LB_ADPTHAN,\n		T_PATRIMOINE_GIM.ON_ADPTEHAN,\n		T_PATRIMOINE_GIM.ON_ACCHAN,\n		T_PATRIMOI"
						+ "NE_GIM.CD_CATACCHAN,\n		T_PATRIMOINE_GIM.LB_CATACCHAN,\n		T_PATRIMOINE_GIM.CD_SECTEUR,\n		T_PATRIMOINE_GIM.LB_SECTEUR,\n		T_"
						+ "PATRIMOINE_GIM.CD_SOCPROP,\n		T_PATRIMOINE_GIM.LB_SOCPROP,\n		T_PATRIMOINE_GIM.ON_COPROP,\n		T_PATRIMOINE_GIM.CD_TYPROP,\n		"
						+ "T_PATRIMOINE_GIM.LB_TYPROP,\n		T_PATRIMOINE_GIM.CD_CATPROP,\n		T_PATRIMOINE_GIM.LB_CATPROP,\n		T_PATRIMOINE_GIM.DTF_BAILEM,"
						+ "\n		T_PATRIMOINE_GIM.CD_MANDGES,\n		T_PATRIMOINE_GIM.LB_MANDGES,\n		T_PATRIMOINE_GIM.CD_TYFOY,\n		T_PATRIMOINE_GIM.LB_TYFOY,"
						+ "\n		T_PATRIMOINE_GIM.CD_CATFOY,\n		T_PATRIMOINE_GIM.LB_CATFOY,\n		T_PATRIMOINE_GIM.TY_CONSTR,\n		T_PATRIMOINE_GIM.CD_NATLOC,"
						+ "\n		T_PATRIMOINE_GIM.LB_NATLOC,\n		T_PATRIMOINE_GIM.CD_RGNATUR,\n		T_PATRIMOINE_GIM.CD_TYPLOC,\n		T_PATRIMOINE_GIM.LB_TYPLOC"
						+ ",\n		T_PATRIMOINE_GIM.REP_CHARGE,\n		T_PATRIMOINE_GIM.NB_PIEPRIN,\n		T_PATRIMOINE_GIM.CD_ETAGE,\n		T_PATRIMOINE_GIM.LB_ETAGE"
						+ ",\n		T_PATRIMOINE_GIM.NIV_ETAGE,\n		T_PATRIMOINE_GIM.NB_NIVEAUX,\n		T_PATRIMOINE_GIM.SNO_ETAGE,\n		T_PATRIMOINE_GIM.ON_ASC,\n"
						+ "		T_PATRIMOINE_GIM.ON_REP_ASC,\n		T_PATRIMOINE_GIM.CD_CATFP,\n		T_PATRIMOINE_GIM.LB_CATFP,\n		T_PATRIMOINE_GIM.CD_CATPLAF,\n"
						+ "		T_PATRIMOINE_GIM.LB_CATPLAF,\n		T_PATRIMOINE_GIM.ON_ELIGCUS,\n		T_PATRIMOINE_GIM.CD_CLF_CUS,\n		T_PATRIMOINE_GIM.DT_ACQUI"
						+ "S,\n		T_PATRIMOINE_GIM.CD_ACHETEA,\n		T_PATRIMOINE_GIM.LB_ACHETEA,\n		T_PATRIMOINE_GIM.DTD_PAT_G,\n		T_PATRIMOINE_GIM.DTD_PA"
						+ "T_R,\n		T_PATRIMOINE_GIM.CD_DEBPAT,\n		T_PATRIMOINE_GIM.LB_DEBPAT,\n		T_PATRIMOINE_GIM.CD_TYDEBPAT,\n		T_PATRIMOINE_GIM.LB_T"
						+ "YDEBPAT,\n		T_PATRIMOINE_GIM.DTF_PAT_G,\n		T_PATRIMOINE_GIM.DTF_PAT_R,\n		T_PATRIMOINE_GIM.CD_FINPAT,\n		T_PATRIMOINE_GIM.LB"
						+ "_FINPAT,\n		T_PATRIMOINE_GIM.CD_TYFINPAT,\n		T_PATRIMOINE_GIM.LB_TYFINPAT,\n		T_PATRIMOINE_GIM.DT_MELOC,\n		T_PATRIMOINE_GIM"
						+ ".DTF_PREVIS,\n		T_PATRIMOINE_GIM.DTD_MEVENTE,\n		T_PATRIMOINE_GIM.DTF_MEVENTE,\n		T_PATRIMOINE_GIM.DTD_REHAB,\n		T_PATRIMOIN"
						+ "E_GIM.DTF_REHAB,\n		T_PATRIMOINE_GIM.CD_VENDUA,\n		T_PATRIMOINE_GIM.LB_VENDUA,\n		T_PATRIMOINE_GIM.CPLPA1_NOM,\n		T_PATRIMOI"
						+ "NE_GIM.CPLPA1_COD,\n		T_PATRIMOINE_GIM.CPLPA1_LIB,\n		T_PATRIMOINE_GIM.CPLPA2_NOM,\n		T_PATRIMOINE_GIM.CPLPA2_COD,\n		T_PATR"
						+ "IMOINE_GIM.CPLPA2_LIB,\n		T_PATRIMOINE_GIM.CPLPA3_NOM,\n		T_PATRIMOINE_GIM.CPLPA3_COD,\n		T_PATRIMOINE_GIM.CPLPA4_NOM,\n		T_"
						+ "PATRIMOINE_GIM.CPLPA4_COD,\n		T_PATRIMOINE_GIM.MT_PUMES,\n		T_PATRIMOINE_GIM.MT_FORMES,\n		T_PATRIMOINE_GIM.MT_PULIC,\n		T_P"
						+ "ATRIMOINE_GIM.MT_FORLIC,\n		T_PATRIMOINE_GIM.DT_INDLIC,\n		T_PATRIMOINE_GIM.MT_PUMAX,\n		T_PATRIMOINE_GIM.MT_FORMAX,\n		T_PA"
						+ "TRIMOINE_GIM.MT_PUOBJ,\n		T_PATRIMOINE_GIM.MT_FOROBJ,\n		T_PATRIMOINE_GIM.MT_PUPRA,\n		T_PATRIMOINE_GIM.MT_TOTRUB,\n		T_PATR"
						+ "IMOINE_GIM.MT_LOYER,\n		T_PATRIMOINE_GIM.MT_LOYANNX,\n		T_PATRIMOINE_GIM.MT_LOYFORF,\n		T_PATRIMOINE_GIM.MT_HLOYER,\n		T_PAT"
						+ "RIMOINE_GIM.MT_CHARGES,\n		T_PATRIMOINE_GIM.MT_CHAUFF,\n		T_PATRIMOINE_GIM.CD_PERIOD,\n		T_PATRIMOINE_GIM.LB_PERIOD,\n		T_PA"
						+ "TRIMOINE_GIM.NB_PERIOD,\n		T_PATRIMOINE_GIM.MT_PUREL,\n		T_PATRIMOINE_GIM.MT_TRUBREL,\n		T_PATRIMOINE_GIM.MT_LOYREL,\n		T_PA"
						+ "TRIMOINE_GIM.MT_LAXREL,\n		T_PATRIMOINE_GIM.MT_LFOREL,\n		T_PATRIMOINE_GIM.MT_HLOYREL,\n		T_PATRIMOINE_GIM.MT_CHAREL,\n		T_P"
						+ "ATRIMOINE_GIM.MT_CHFREL,\n		T_PATRIMOINE_GIM.FACTURDEF,\n		T_PATRIMOINE_GIM.NO_BAILDEF,\n		T_PATRIMOINE_GIM.LB_BAILDEF,\n		T"
						+ "_PATRIMOINE_GIM.ON_DISTMAN,\n		T_PATRIMOINE_GIM.NO_LOGTRES,\n		T_PATRIMOINE_GIM.CD_TAXE,\n		T_PATRIMOINE_GIM.NO_INTERN1,\n		"
						+ "T_PATRIMOINE_GIM.NO_INTERN2,\n		T_PATRIMOINE_GIM.ON_NONVAL,\n		T_PATRIMOINE_GIM.DTD_NONVAL,\n		T_PATRIMOINE_GIM.DTF_NONVAL,"
						+ "\n		T_PATRIMOINE_GIM.TY_NONVAL,\n		T_PATRIMOINE_GIM.LB_NONVAL,\n		T_PATRIMOINE_GIM.ON_VACANT,\n		T_PATRIMOINE_GIM.ID_GARD,\n	"
						+ "	T_PATRIMOINE_GIM.NOM_GARD,\n		T_PATRIMOINE_GIM.PRE_GARD,\n		T_PATRIMOINE_GIM.TEL_GARD,\n		T_PATRIMOINE_GIM.MAIL_GARD,\n		T_"
						+ "PATRIMOINE_GIM.TY_GARD,\n		T_PATRIMOINE_GIM.ID_RESPTR,\n		T_PATRIMOINE_GIM.NOM_RESPTR,\n		T_PATRIMOINE_GIM.PRE_RESPTR,\n		T_"
						+ "PATRIMOINE_GIM.TEL_RESPTR,\n		T_PATRIMOINE_GIM.MAIL_RESPTR,\n		T_PATRIMOINE_GIM.TY_RESPTR,\n		T_PATRIMOINE_GIM.ID_PERCEP,\n	"
						+ "	T_PATRIMOINE_GIM.NOM_PERCEP,\n		T_PATRIMOINE_GIM.ID_BURENR,\n		T_PATRIMOINE_GIM.NOM_BURENR,\n		T_PATRIMOINE_GIM.ID_MAIRIE,"
						+ "\n		T_PATRIMOINE_GIM.NOM_MAIRIE,\n		T_PATRIMOINE_GIM.ON_MAIRGEST,\n		T_PATRIMOINE_GIM.LB_MAIRIE,\n		T_PATRIMOINE_GIM.ID_PREF"
						+ ",\n		T_PATRIMOINE_GIM.NOM_PREF,\n		T_PATRIMOINE_GIM.ID_ENCAIS,\n		T_PATRIMOINE_GIM.NOM_ENCAIS,\n		T_PATRIMOINE_GIM.TY_ENCAIS"
						+ ",\n		T_PATRIMOINE_GIM.ON_CONVLOC,\n		T_PATRIMOINE_GIM.CD_CNVM,\n		T_PATRIMOINE_GIM.DTD_CNVM,\n		T_PATRIMOINE_GIM.DTF_CNVM,\n	"
						+ "	T_PATRIMOINE_GIM.DT_SI_CNVM,\n		T_PATRIMOINE_GIM.DT_SI_CNVMO,\n		T_PATRIMOINE_GIM.TY_CNVM,\n		T_PATRIMOINE_GIM.LB_TY_CNVM,"
						+ "\n		T_PATRIMOINE_GIM.ON_CONVCUS,\n		T_PATRIMOINE_GIM.ON_ROLCUS,\n		T_PATRIMOINE_GIM.CD_CNVCUS,\n		T_PATRIMOINE_GIM.DTD_CNVCU"
						+ "S,\n		T_PATRIMOINE_GIM.DTF_CNVCUS,\n		T_PATRIMOINE_GIM.DT_SI_CNVCUS,\n		T_PATRIMOINE_GIM.CD_CLASCUS,\n		T_PATRIMOINE_GIM.LB_"
						+ "CLASCUS,\n		T_PATRIMOINE_GIM.NO_CNV_RVN,\n		T_PATRIMOINE_GIM.NO_CNV_RVT,\n		T_PATRIMOINE_GIM.TY_CNV,\n		T_PATRIMOINE_GIM.CD_"
						+ "NAT_CNV,\n		T_PATRIMOINE_GIM.LB_NAT_CNV,\n		T_PATRIMOINE_GIM.TY_DT_RNV,\n		T_PATRIMOINE_GIM.DUR_RVN_AN,\n		T_PATRIMOINE_GIM."
						+ "DUR_RVN_MO,\n		T_PATRIMOINE_GIM.DTD_RVN_PA,\n		T_PATRIMOINE_GIM.DTF_RVN_PA,\n		T_PATRIMOINE_GIM.MT_UNI_RNV,\n		T_PATRIMOINE_"
						+ "GIM.ID_RVT,\n		T_PATRIMOINE_GIM.NOM_RVT,\n		T_PATRIMOINE_GIM.TY_RVT,\n		T_PATRIMOINE_GIM.LB_SOCIETE,\n		T_PATRIMOINE_GIM.DT_"
						+ "ALIM\nFROM	T_PATRIMOINE_GIM";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row6.CD_SOCIETE = null;
						} else {

							row6.CD_SOCIETE = rs_tDBInput_5.getBigDecimal(1);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row6.CD_ACTIVIT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ACTIVIT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ACTIVIT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ACTIVIT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row6.CD_PATRIM1 = 0;
						} else {

							row6.CD_PATRIM1 = rs_tDBInput_5.getInt(3);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row6.CD_PATRIM2 = 0;
						} else {

							row6.CD_PATRIM2 = rs_tDBInput_5.getInt(4);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row6.CD_PATRIM3 = 0;
						} else {

							row6.CD_PATRIM3 = rs_tDBInput_5.getInt(5);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row6.CD_PATRIM4 = 0;
						} else {

							row6.CD_PATRIM4 = rs_tDBInput_5.getInt(6);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 7) {
							row6.CD_PATRIM5 = 0;
						} else {

							row6.CD_PATRIM5 = rs_tDBInput_5.getInt(7);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 8) {
							row6.CD_PATRIM6 = 0;
						} else {

							row6.CD_PATRIM6 = rs_tDBInput_5.getInt(8);
							if (rs_tDBInput_5.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_5 < 9) {
							row6.CD_PATRIM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(9);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_PATRIM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 10) {
							row6.LB_PATRIM1 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(10);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM1 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 11) {
							row6.LB_PATRIM2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(11);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM2 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 12) {
							row6.LB_PATRIM3 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(12);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM3 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 13) {
							row6.LB_PATRIM4 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(13);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM4 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 14) {
							row6.LB_PATRIM5 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(14);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM5 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM5 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 15) {
							row6.LB_PATRIM6 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(15);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PATRIM6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PATRIM6 = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PATRIM6 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 16) {
							row6.CD_ETAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(16);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ETAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ETAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ETAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 17) {
							row6.ID_PATRIM = null;
						} else {

							row6.ID_PATRIM = rs_tDBInput_5.getInt(17);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 18) {
							row6.ID_RLLBS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(18);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ID_RLLBS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ID_RLLBS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ID_RLLBS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 19) {
							row6.ID_INVARIANT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(19);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ID_INVARIANT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ID_INVARIANT = tmpContent_tDBInput_5;
								}
							} else {
								row6.ID_INVARIANT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 20) {
							row6.CD_ENT_PAT = null;
						} else {

							row6.CD_ENT_PAT = rs_tDBInput_5.getInt(20);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_ENT_PAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 21) {
							row6.NIV_PAT = null;
						} else {

							row6.NIV_PAT = rs_tDBInput_5.getInt(21);
							if (rs_tDBInput_5.wasNull()) {
								row6.NIV_PAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 22) {
							row6.CD_QUALIF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(22);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_QUALIF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_QUALIF = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_QUALIF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 23) {
							row6.CD_ENT_SEC = null;
						} else {

							row6.CD_ENT_SEC = rs_tDBInput_5.getInt(23);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_ENT_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 24) {
							row6.CD_ORG_SEC = null;
						} else {

							row6.CD_ORG_SEC = rs_tDBInput_5.getBigDecimal(24);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_ORG_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 25) {
							row6.NIV_SEC = null;
						} else {

							row6.NIV_SEC = rs_tDBInput_5.getInt(25);
							if (rs_tDBInput_5.wasNull()) {
								row6.NIV_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 26) {
							row6.CD_ENT_CTX = null;
						} else {

							row6.CD_ENT_CTX = rs_tDBInput_5.getInt(26);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_ENT_CTX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 27) {
							row6.CD_ORG_CTX = null;
						} else {

							row6.CD_ORG_CTX = rs_tDBInput_5.getBigDecimal(27);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_ORG_CTX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 28) {
							row6.CD_SOC_REG = null;
						} else {

							row6.CD_SOC_REG = rs_tDBInput_5.getBigDecimal(28);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_SOC_REG = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 29) {
							row6.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(29);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_LOCALI1 = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 30) {
							row6.CD_LOCALI2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(30);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_LOCALI2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_LOCALI2 = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_LOCALI2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 31) {
							row6.CD_LOCALI3 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(31);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_LOCALI3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_LOCALI3 = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_LOCALI3 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 32) {
							row6.CD_LOCALI4 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(32);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_LOCALI4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_LOCALI4 = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_LOCALI4 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 33) {
							row6.CD_LOCALI5 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(33);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_LOCALI5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_LOCALI5 = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_LOCALI5 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 34) {
							row6.ON_ADRPOST = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(34);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ADRPOST = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ADRPOST = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ADRPOST = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 35) {
							row6.ADRPA_NORU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(35);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_NORU = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 36) {
							row6.ADRPA_CDRU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(36);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_CDRU = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 37) {
							row6.ADRPA_RUE1 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(37);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_RUE1 = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 38) {
							row6.ADRPA_RUE2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(38);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_RUE2 = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 39) {
							row6.ADRPA_LOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(39);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_LOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 40) {
							row6.ADRPA_CP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(40);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_CP = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 41) {
							row6.ADRPA_BD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(41);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ADRPA_BD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ADRPA_BD = tmpContent_tDBInput_5;
								}
							} else {
								row6.ADRPA_BD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 42) {
							row6.NO_INSEE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(42);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_INSEE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_INSEE = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_INSEE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 43) {
							row6.NO_DEPT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(43);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_DEPT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_DEPT = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_DEPT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 44) {
							row6.GPS_LONGIT = null;
						} else {

							row6.GPS_LONGIT = rs_tDBInput_5.getBigDecimal(44);
							if (rs_tDBInput_5.wasNull()) {
								row6.GPS_LONGIT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 45) {
							row6.GPS_LATIT = null;
						} else {

							row6.GPS_LATIT = rs_tDBInput_5.getBigDecimal(45);
							if (rs_tDBInput_5.wasNull()) {
								row6.GPS_LATIT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 46) {
							row6.CD_Z_GEOG = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(46);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_Z_GEOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_Z_GEOG = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_Z_GEOG = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 47) {
							row6.NO_QPV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(47);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_QPV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_QPV = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_QPV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 48) {
							row6.LB_QPV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(48);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_QPV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_QPV = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_QPV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 49) {
							row6.ON_ZUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(49);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ZUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ZUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ZUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 50) {
							row6.ON_ZRR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(50);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(50).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ZRR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ZRR = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ZRR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 51) {
							row6.ON_ZFU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(51);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ZFU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ZFU = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ZFU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 52) {
							row6.CD_SEGCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(52);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(52).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_SEGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_SEGCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_SEGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 53) {
							row6.LB_SEGCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(53);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_SEGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_SEGCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_SEGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 54) {
							row6.NO_ANRU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(54);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(54).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_ANRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_ANRU = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_ANRU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 55) {
							row6.ON_ANRU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(55);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ANRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ANRU = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ANRU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 56) {
							row6.NO_CUCS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(56);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(56).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_CUCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_CUCS = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_CUCS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 57) {
							row6.ON_CUCS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(57);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(57).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_CUCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_CUCS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_CUCS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 58) {
							row6.ON_PCS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(58);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(58).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_PCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_PCS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_PCS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 59) {
							row6.CD_PROGRAM = null;
						} else {

							row6.CD_PROGRAM = rs_tDBInput_5.getBigDecimal(59);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PROGRAM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 60) {
							row6.CD_TRANCHE = null;
						} else {

							row6.CD_TRANCHE = rs_tDBInput_5.getBigDecimal(60);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_TRANCHE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 61) {
							row6.LB_PR_TR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(61);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(61).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PR_TR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PR_TR = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PR_TR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 62) {
							row6.CD_PAT_TC1 = null;
						} else {

							row6.CD_PAT_TC1 = rs_tDBInput_5.getBigDecimal(62);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 63) {
							row6.CD_PAT_TC2 = null;
						} else {

							row6.CD_PAT_TC2 = rs_tDBInput_5.getBigDecimal(63);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 64) {
							row6.CD_PAT_TC3 = null;
						} else {

							row6.CD_PAT_TC3 = rs_tDBInput_5.getBigDecimal(64);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC3 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 65) {
							row6.CD_PAT_TC4 = null;
						} else {

							row6.CD_PAT_TC4 = rs_tDBInput_5.getBigDecimal(65);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC4 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 66) {
							row6.CD_PAT_TC5 = null;
						} else {

							row6.CD_PAT_TC5 = rs_tDBInput_5.getBigDecimal(66);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC5 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 67) {
							row6.CD_PAT_TC6 = null;
						} else {

							row6.CD_PAT_TC6 = rs_tDBInput_5.getBigDecimal(67);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_PAT_TC6 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 68) {
							row6.CD_DESTINA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(68);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(68).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_DESTINA = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 69) {
							row6.LB_DESTINA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(69);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(69).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_DESTINA = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 70) {
							row6.SURF_HAB = null;
						} else {

							row6.SURF_HAB = rs_tDBInput_5.getBigDecimal(70);
							if (rs_tDBInput_5.wasNull()) {
								row6.SURF_HAB = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 71) {
							row6.SURF_REEL = null;
						} else {

							row6.SURF_REEL = rs_tDBInput_5.getBigDecimal(71);
							if (rs_tDBInput_5.wasNull()) {
								row6.SURF_REEL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 72) {
							row6.SURF_CORR = null;
						} else {

							row6.SURF_CORR = rs_tDBInput_5.getBigDecimal(72);
							if (rs_tDBInput_5.wasNull()) {
								row6.SURF_CORR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 73) {
							row6.SURF_CHAUF = null;
						} else {

							row6.SURF_CHAUF = rs_tDBInput_5.getBigDecimal(73);
							if (rs_tDBInput_5.wasNull()) {
								row6.SURF_CHAUF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 74) {
							row6.SURF_UTILE = null;
						} else {

							row6.SURF_UTILE = rs_tDBInput_5.getBigDecimal(74);
							if (rs_tDBInput_5.wasNull()) {
								row6.SURF_UTILE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 75) {
							row6.SURF_DECPT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(75);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(75).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.SURF_DECPT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.SURF_DECPT = tmpContent_tDBInput_5;
								}
							} else {
								row6.SURF_DECPT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 76) {
							row6.MT_EQUIBUD = null;
						} else {

							row6.MT_EQUIBUD = rs_tDBInput_5.getBigDecimal(76);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_EQUIBUD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 77) {
							row6.TY_CHAUFF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(77);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(77).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_CHAUFF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_CHAUFF = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_CHAUFF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 78) {
							row6.CD_ENERGIE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(78);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(78).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ENERGIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ENERGIE = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ENERGIE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 79) {
							row6.LB_ENERGIE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(79);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(79).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_ENERGIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_ENERGIE = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_ENERGIE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 80) {
							row6.CD_ENEREAU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(80);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(80).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ENEREAU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ENEREAU = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ENEREAU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 81) {
							row6.LB_ENEREAU = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(81);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(81).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_ENEREAU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_ENEREAU = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_ENEREAU = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 82) {
							row6.DT_DPE = null;
						} else {

							row6.DT_DPE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 82);

						}
						if (colQtyInRs_tDBInput_5 < 83) {
							row6.CONSO_CCE = null;
						} else {

							row6.CONSO_CCE = rs_tDBInput_5.getBigDecimal(83);
							if (rs_tDBInput_5.wasNull()) {
								row6.CONSO_CCE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 84) {
							row6.CLAS_CCE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(84);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(84).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CLAS_CCE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CLAS_CCE = tmpContent_tDBInput_5;
								}
							} else {
								row6.CLAS_CCE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 85) {
							row6.CONSO_CEG = null;
						} else {

							row6.CONSO_CEG = rs_tDBInput_5.getBigDecimal(85);
							if (rs_tDBInput_5.wasNull()) {
								row6.CONSO_CEG = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 86) {
							row6.CLAS_CEG = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(86);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(86).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CLAS_CEG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CLAS_CEG = tmpContent_tDBInput_5;
								}
							} else {
								row6.CLAS_CEG = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 87) {
							row6.ON_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(87);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(87).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ADPTHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 88) {
							row6.CD_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(88);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(88).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ADPTHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 89) {
							row6.LB_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(89);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(89).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_ADPTHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 90) {
							row6.ON_ADPTEHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(90);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(90).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ADPTEHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ADPTEHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ADPTEHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 91) {
							row6.ON_ACCHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(91);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(91).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ACCHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 92) {
							row6.CD_CATACCHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(92);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(92).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CATACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CATACCHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CATACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 93) {
							row6.LB_CATACCHAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(93);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(93).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CATACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CATACCHAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CATACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 94) {
							row6.CD_SECTEUR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(94);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(94).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_SECTEUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_SECTEUR = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_SECTEUR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 95) {
							row6.LB_SECTEUR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(95);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(95).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_SECTEUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_SECTEUR = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_SECTEUR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 96) {
							row6.CD_SOCPROP = null;
						} else {

							row6.CD_SOCPROP = rs_tDBInput_5.getBigDecimal(96);
							if (rs_tDBInput_5.wasNull()) {
								row6.CD_SOCPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 97) {
							row6.LB_SOCPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(97);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(97).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_SOCPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_SOCPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_SOCPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 98) {
							row6.ON_COPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(98);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(98).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_COPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_COPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_COPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 99) {
							row6.CD_TYPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(99);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(99).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TYPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TYPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TYPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 100) {
							row6.LB_TYPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(100);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(100).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TYPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TYPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TYPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 101) {
							row6.CD_CATPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(101);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(101).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CATPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CATPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CATPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 102) {
							row6.LB_CATPROP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(102);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(102).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CATPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CATPROP = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CATPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 103) {
							row6.DTF_BAILEM = null;
						} else {

							row6.DTF_BAILEM = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 103);

						}
						if (colQtyInRs_tDBInput_5 < 104) {
							row6.CD_MANDGES = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(104);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(104).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_MANDGES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_MANDGES = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_MANDGES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 105) {
							row6.LB_MANDGES = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(105);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(105).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_MANDGES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_MANDGES = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_MANDGES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 106) {
							row6.CD_TYFOY = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(106);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(106).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TYFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TYFOY = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TYFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 107) {
							row6.LB_TYFOY = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(107);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(107).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TYFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TYFOY = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TYFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 108) {
							row6.CD_CATFOY = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(108);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(108).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CATFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CATFOY = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CATFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 109) {
							row6.LB_CATFOY = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(109);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(109).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CATFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CATFOY = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CATFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 110) {
							row6.TY_CONSTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(110);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(110).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_CONSTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_CONSTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_CONSTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 111) {
							row6.CD_NATLOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(111);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(111).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_NATLOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 112) {
							row6.LB_NATLOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(112);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(112).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_NATLOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 113) {
							row6.CD_RGNATUR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(113);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(113).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_RGNATUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_RGNATUR = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_RGNATUR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 114) {
							row6.CD_TYPLOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(114);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(114).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TYPLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TYPLOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TYPLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 115) {
							row6.LB_TYPLOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(115);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(115).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TYPLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TYPLOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TYPLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 116) {
							row6.REP_CHARGE = null;
						} else {

							row6.REP_CHARGE = rs_tDBInput_5.getInt(116);
							if (rs_tDBInput_5.wasNull()) {
								row6.REP_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 117) {
							row6.NB_PIEPRIN = null;
						} else {

							row6.NB_PIEPRIN = rs_tDBInput_5.getInt(117);
							if (rs_tDBInput_5.wasNull()) {
								row6.NB_PIEPRIN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 118) {
							row6.CD_ETAGE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(118);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(118).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ETAGE = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 119) {
							row6.LB_ETAGE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(119);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(119).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_ETAGE = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 120) {
							row6.NIV_ETAGE = null;
						} else {

							row6.NIV_ETAGE = rs_tDBInput_5.getBigDecimal(120);
							if (rs_tDBInput_5.wasNull()) {
								row6.NIV_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 121) {
							row6.NB_NIVEAUX = null;
						} else {

							row6.NB_NIVEAUX = rs_tDBInput_5.getBigDecimal(121);
							if (rs_tDBInput_5.wasNull()) {
								row6.NB_NIVEAUX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 122) {
							row6.SNO_ETAGE = null;
						} else {

							row6.SNO_ETAGE = rs_tDBInput_5.getBigDecimal(122);
							if (rs_tDBInput_5.wasNull()) {
								row6.SNO_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 123) {
							row6.ON_ASC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(123);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(123).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ASC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ASC = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ASC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 124) {
							row6.ON_REP_ASC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(124);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(124).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_REP_ASC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_REP_ASC = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_REP_ASC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 125) {
							row6.CD_CATFP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(125);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(125).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CATFP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CATFP = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CATFP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 126) {
							row6.LB_CATFP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(126);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(126).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CATFP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CATFP = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CATFP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 127) {
							row6.CD_CATPLAF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(127);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(127).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CATPLAF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CATPLAF = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CATPLAF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 128) {
							row6.LB_CATPLAF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(128);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(128).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CATPLAF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CATPLAF = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CATPLAF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 129) {
							row6.ON_ELIGCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(129);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(129).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ELIGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ELIGCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ELIGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 130) {
							row6.CD_CLF_CUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(130);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(130).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CLF_CUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CLF_CUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CLF_CUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 131) {
							row6.DT_ACQUIS = null;
						} else {

							row6.DT_ACQUIS = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 131);

						}
						if (colQtyInRs_tDBInput_5 < 132) {
							row6.CD_ACHETEA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(132);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(132).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_ACHETEA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_ACHETEA = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_ACHETEA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 133) {
							row6.LB_ACHETEA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(133);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(133).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_ACHETEA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_ACHETEA = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_ACHETEA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 134) {
							row6.DTD_PAT_G = null;
						} else {

							row6.DTD_PAT_G = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 134);

						}
						if (colQtyInRs_tDBInput_5 < 135) {
							row6.DTD_PAT_R = null;
						} else {

							row6.DTD_PAT_R = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 135);

						}
						if (colQtyInRs_tDBInput_5 < 136) {
							row6.CD_DEBPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(136);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(136).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_DEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_DEBPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_DEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 137) {
							row6.LB_DEBPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(137);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(137).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_DEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_DEBPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_DEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 138) {
							row6.CD_TYDEBPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(138);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(138).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TYDEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TYDEBPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TYDEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 139) {
							row6.LB_TYDEBPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(139);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(139).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TYDEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TYDEBPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TYDEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 140) {
							row6.DTF_PAT_G = null;
						} else {

							row6.DTF_PAT_G = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 140);

						}
						if (colQtyInRs_tDBInput_5 < 141) {
							row6.DTF_PAT_R = null;
						} else {

							row6.DTF_PAT_R = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 141);

						}
						if (colQtyInRs_tDBInput_5 < 142) {
							row6.CD_FINPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(142);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(142).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_FINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_FINPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_FINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 143) {
							row6.LB_FINPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(143);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(143).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_FINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_FINPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_FINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 144) {
							row6.CD_TYFINPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(144);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(144).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TYFINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TYFINPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TYFINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 145) {
							row6.LB_TYFINPAT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(145);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(145).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TYFINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TYFINPAT = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TYFINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 146) {
							row6.DT_MELOC = null;
						} else {

							row6.DT_MELOC = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 146);

						}
						if (colQtyInRs_tDBInput_5 < 147) {
							row6.DTF_PREVIS = null;
						} else {

							row6.DTF_PREVIS = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 147);

						}
						if (colQtyInRs_tDBInput_5 < 148) {
							row6.DTD_MEVENTE = null;
						} else {

							row6.DTD_MEVENTE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 148);

						}
						if (colQtyInRs_tDBInput_5 < 149) {
							row6.DTF_MEVENTE = null;
						} else {

							row6.DTF_MEVENTE = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 149);

						}
						if (colQtyInRs_tDBInput_5 < 150) {
							row6.DTD_REHAB = null;
						} else {

							row6.DTD_REHAB = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 150);

						}
						if (colQtyInRs_tDBInput_5 < 151) {
							row6.DTF_REHAB = null;
						} else {

							row6.DTF_REHAB = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 151);

						}
						if (colQtyInRs_tDBInput_5 < 152) {
							row6.CD_VENDUA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(152);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(152).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_VENDUA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_VENDUA = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_VENDUA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 153) {
							row6.LB_VENDUA = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(153);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(153).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_VENDUA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_VENDUA = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_VENDUA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 154) {
							row6.CPLPA1_NOM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(154);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(154).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA1_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA1_NOM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA1_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 155) {
							row6.CPLPA1_COD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(155);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(155).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA1_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA1_COD = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA1_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 156) {
							row6.CPLPA1_LIB = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(156);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(156).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA1_LIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA1_LIB = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA1_LIB = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 157) {
							row6.CPLPA2_NOM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(157);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(157).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA2_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA2_NOM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA2_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 158) {
							row6.CPLPA2_COD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(158);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(158).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA2_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA2_COD = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA2_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 159) {
							row6.CPLPA2_LIB = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(159);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(159).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA2_LIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA2_LIB = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA2_LIB = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 160) {
							row6.CPLPA3_NOM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(160);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(160).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA3_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA3_NOM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA3_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 161) {
							row6.CPLPA3_COD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(161);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(161).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA3_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA3_COD = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA3_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 162) {
							row6.CPLPA4_NOM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(162);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(162).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA4_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA4_NOM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA4_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 163) {
							row6.CPLPA4_COD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(163);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(163).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CPLPA4_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CPLPA4_COD = tmpContent_tDBInput_5;
								}
							} else {
								row6.CPLPA4_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 164) {
							row6.MT_PUMES = null;
						} else {

							row6.MT_PUMES = rs_tDBInput_5.getBigDecimal(164);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PUMES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 165) {
							row6.MT_FORMES = null;
						} else {

							row6.MT_FORMES = rs_tDBInput_5.getBigDecimal(165);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_FORMES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 166) {
							row6.MT_PULIC = null;
						} else {

							row6.MT_PULIC = rs_tDBInput_5.getBigDecimal(166);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PULIC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 167) {
							row6.MT_FORLIC = null;
						} else {

							row6.MT_FORLIC = rs_tDBInput_5.getBigDecimal(167);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_FORLIC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 168) {
							row6.DT_INDLIC = null;
						} else {

							row6.DT_INDLIC = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 168);

						}
						if (colQtyInRs_tDBInput_5 < 169) {
							row6.MT_PUMAX = null;
						} else {

							row6.MT_PUMAX = rs_tDBInput_5.getBigDecimal(169);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PUMAX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 170) {
							row6.MT_FORMAX = null;
						} else {

							row6.MT_FORMAX = rs_tDBInput_5.getBigDecimal(170);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_FORMAX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 171) {
							row6.MT_PUOBJ = null;
						} else {

							row6.MT_PUOBJ = rs_tDBInput_5.getBigDecimal(171);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PUOBJ = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 172) {
							row6.MT_FOROBJ = null;
						} else {

							row6.MT_FOROBJ = rs_tDBInput_5.getBigDecimal(172);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_FOROBJ = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 173) {
							row6.MT_PUPRA = null;
						} else {

							row6.MT_PUPRA = rs_tDBInput_5.getBigDecimal(173);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PUPRA = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 174) {
							row6.MT_TOTRUB = null;
						} else {

							row6.MT_TOTRUB = rs_tDBInput_5.getBigDecimal(174);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_TOTRUB = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 175) {
							row6.MT_LOYER = null;
						} else {

							row6.MT_LOYER = rs_tDBInput_5.getBigDecimal(175);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LOYER = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 176) {
							row6.MT_LOYANNX = null;
						} else {

							row6.MT_LOYANNX = rs_tDBInput_5.getBigDecimal(176);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LOYANNX = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 177) {
							row6.MT_LOYFORF = null;
						} else {

							row6.MT_LOYFORF = rs_tDBInput_5.getBigDecimal(177);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LOYFORF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 178) {
							row6.MT_HLOYER = null;
						} else {

							row6.MT_HLOYER = rs_tDBInput_5.getBigDecimal(178);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_HLOYER = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 179) {
							row6.MT_CHARGES = null;
						} else {

							row6.MT_CHARGES = rs_tDBInput_5.getBigDecimal(179);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_CHARGES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 180) {
							row6.MT_CHAUFF = null;
						} else {

							row6.MT_CHAUFF = rs_tDBInput_5.getBigDecimal(180);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_CHAUFF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 181) {
							row6.CD_PERIOD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(181);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(181).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_PERIOD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_PERIOD = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 182) {
							row6.LB_PERIOD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(182);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(182).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_PERIOD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_PERIOD = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 183) {
							row6.NB_PERIOD = null;
						} else {

							row6.NB_PERIOD = rs_tDBInput_5.getInt(183);
							if (rs_tDBInput_5.wasNull()) {
								row6.NB_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 184) {
							row6.MT_PUREL = null;
						} else {

							row6.MT_PUREL = rs_tDBInput_5.getBigDecimal(184);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_PUREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 185) {
							row6.MT_TRUBREL = null;
						} else {

							row6.MT_TRUBREL = rs_tDBInput_5.getBigDecimal(185);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_TRUBREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 186) {
							row6.MT_LOYREL = null;
						} else {

							row6.MT_LOYREL = rs_tDBInput_5.getBigDecimal(186);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LOYREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 187) {
							row6.MT_LAXREL = null;
						} else {

							row6.MT_LAXREL = rs_tDBInput_5.getBigDecimal(187);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LAXREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 188) {
							row6.MT_LFOREL = null;
						} else {

							row6.MT_LFOREL = rs_tDBInput_5.getBigDecimal(188);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_LFOREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 189) {
							row6.MT_HLOYREL = null;
						} else {

							row6.MT_HLOYREL = rs_tDBInput_5.getBigDecimal(189);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_HLOYREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 190) {
							row6.MT_CHAREL = null;
						} else {

							row6.MT_CHAREL = rs_tDBInput_5.getBigDecimal(190);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_CHAREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 191) {
							row6.MT_CHFREL = null;
						} else {

							row6.MT_CHFREL = rs_tDBInput_5.getBigDecimal(191);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_CHFREL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 192) {
							row6.FACTURDEF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(192);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(192).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.FACTURDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.FACTURDEF = tmpContent_tDBInput_5;
								}
							} else {
								row6.FACTURDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 193) {
							row6.NO_BAILDEF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(193);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(193).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_BAILDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_BAILDEF = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_BAILDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 194) {
							row6.LB_BAILDEF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(194);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(194).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_BAILDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_BAILDEF = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_BAILDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 195) {
							row6.ON_DISTMAN = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(195);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(195).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_DISTMAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_DISTMAN = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_DISTMAN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 196) {
							row6.NO_LOGTRES = null;
						} else {

							row6.NO_LOGTRES = rs_tDBInput_5.getBigDecimal(196);
							if (rs_tDBInput_5.wasNull()) {
								row6.NO_LOGTRES = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 197) {
							row6.CD_TAXE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(197);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(197).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_TAXE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_TAXE = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_TAXE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 198) {
							row6.NO_INTERN1 = null;
						} else {

							row6.NO_INTERN1 = rs_tDBInput_5.getInt(198);
							if (rs_tDBInput_5.wasNull()) {
								row6.NO_INTERN1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 199) {
							row6.NO_INTERN2 = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(199);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(199).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_INTERN2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_INTERN2 = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_INTERN2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 200) {
							row6.ON_NONVAL = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(200);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(200).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_NONVAL = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 201) {
							row6.DTD_NONVAL = null;
						} else {

							row6.DTD_NONVAL = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 201);

						}
						if (colQtyInRs_tDBInput_5 < 202) {
							row6.DTF_NONVAL = null;
						} else {

							row6.DTF_NONVAL = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 202);

						}
						if (colQtyInRs_tDBInput_5 < 203) {
							row6.TY_NONVAL = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(203);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(203).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_NONVAL = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 204) {
							row6.LB_NONVAL = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(204);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(204).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_NONVAL = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 205) {
							row6.ON_VACANT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(205);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(205).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_VACANT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_VACANT = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_VACANT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 206) {
							row6.ID_GARD = null;
						} else {

							row6.ID_GARD = rs_tDBInput_5.getInt(206);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 207) {
							row6.NOM_GARD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(207);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(207).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_GARD = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 208) {
							row6.PRE_GARD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(208);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(208).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PRE_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.PRE_GARD = tmpContent_tDBInput_5;
								}
							} else {
								row6.PRE_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 209) {
							row6.TEL_GARD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(209);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(209).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TEL_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TEL_GARD = tmpContent_tDBInput_5;
								}
							} else {
								row6.TEL_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 210) {
							row6.MAIL_GARD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(210);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(210).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MAIL_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.MAIL_GARD = tmpContent_tDBInput_5;
								}
							} else {
								row6.MAIL_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 211) {
							row6.TY_GARD = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(211);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(211).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_GARD = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 212) {
							row6.ID_RESPTR = null;
						} else {

							row6.ID_RESPTR = rs_tDBInput_5.getInt(212);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 213) {
							row6.NOM_RESPTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(213);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(213).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_RESPTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 214) {
							row6.PRE_RESPTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(214);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(214).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.PRE_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.PRE_RESPTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.PRE_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 215) {
							row6.TEL_RESPTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(215);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(215).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TEL_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TEL_RESPTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.TEL_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 216) {
							row6.MAIL_RESPTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(216);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(216).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.MAIL_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.MAIL_RESPTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.MAIL_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 217) {
							row6.TY_RESPTR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(217);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(217).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_RESPTR = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 218) {
							row6.ID_PERCEP = null;
						} else {

							row6.ID_PERCEP = rs_tDBInput_5.getInt(218);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_PERCEP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 219) {
							row6.NOM_PERCEP = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(219);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(219).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_PERCEP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_PERCEP = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_PERCEP = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 220) {
							row6.ID_BURENR = null;
						} else {

							row6.ID_BURENR = rs_tDBInput_5.getInt(220);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_BURENR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 221) {
							row6.NOM_BURENR = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(221);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(221).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_BURENR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_BURENR = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_BURENR = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 222) {
							row6.ID_MAIRIE = null;
						} else {

							row6.ID_MAIRIE = rs_tDBInput_5.getInt(222);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 223) {
							row6.NOM_MAIRIE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(223);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(223).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_MAIRIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_MAIRIE = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 224) {
							row6.ON_MAIRGEST = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(224);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(224).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_MAIRGEST = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_MAIRGEST = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_MAIRGEST = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 225) {
							row6.LB_MAIRIE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(225);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(225).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_MAIRIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_MAIRIE = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 226) {
							row6.ID_PREF = null;
						} else {

							row6.ID_PREF = rs_tDBInput_5.getInt(226);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_PREF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 227) {
							row6.NOM_PREF = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(227);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(227).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_PREF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_PREF = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_PREF = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 228) {
							row6.ID_ENCAIS = null;
						} else {

							row6.ID_ENCAIS = rs_tDBInput_5.getInt(228);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 229) {
							row6.NOM_ENCAIS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(229);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(229).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_ENCAIS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_ENCAIS = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 230) {
							row6.TY_ENCAIS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(230);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(230).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_ENCAIS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_ENCAIS = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 231) {
							row6.ON_CONVLOC = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(231);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(231).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_CONVLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_CONVLOC = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_CONVLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 232) {
							row6.CD_CNVM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(232);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(232).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CNVM = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 233) {
							row6.DTD_CNVM = null;
						} else {

							row6.DTD_CNVM = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 233);

						}
						if (colQtyInRs_tDBInput_5 < 234) {
							row6.DTF_CNVM = null;
						} else {

							row6.DTF_CNVM = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 234);

						}
						if (colQtyInRs_tDBInput_5 < 235) {
							row6.DT_SI_CNVM = null;
						} else {

							row6.DT_SI_CNVM = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 235);

						}
						if (colQtyInRs_tDBInput_5 < 236) {
							row6.DT_SI_CNVMO = null;
						} else {

							row6.DT_SI_CNVMO = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 236);

						}
						if (colQtyInRs_tDBInput_5 < 237) {
							row6.TY_CNVM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(237);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(237).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_CNVM = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 238) {
							row6.LB_TY_CNVM = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(238);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(238).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_TY_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_TY_CNVM = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_TY_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 239) {
							row6.ON_CONVCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(239);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(239).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_CONVCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_CONVCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_CONVCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 240) {
							row6.ON_ROLCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(240);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(240).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.ON_ROLCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.ON_ROLCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.ON_ROLCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 241) {
							row6.CD_CNVCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(241);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(241).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CNVCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CNVCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CNVCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 242) {
							row6.DTD_CNVCUS = null;
						} else {

							row6.DTD_CNVCUS = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 242);

						}
						if (colQtyInRs_tDBInput_5 < 243) {
							row6.DTF_CNVCUS = null;
						} else {

							row6.DTF_CNVCUS = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 243);

						}
						if (colQtyInRs_tDBInput_5 < 244) {
							row6.DT_SI_CNVCUS = null;
						} else {

							row6.DT_SI_CNVCUS = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 244);

						}
						if (colQtyInRs_tDBInput_5 < 245) {
							row6.CD_CLASCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(245);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(245).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_CLASCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_CLASCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_CLASCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 246) {
							row6.LB_CLASCUS = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(246);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(246).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_CLASCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_CLASCUS = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_CLASCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 247) {
							row6.NO_CNV_RVN = null;
						} else {

							row6.NO_CNV_RVN = rs_tDBInput_5.getInt(247);
							if (rs_tDBInput_5.wasNull()) {
								row6.NO_CNV_RVN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 248) {
							row6.NO_CNV_RVT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(248);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(248).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NO_CNV_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NO_CNV_RVT = tmpContent_tDBInput_5;
								}
							} else {
								row6.NO_CNV_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 249) {
							row6.TY_CNV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(249);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(249).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_CNV = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 250) {
							row6.CD_NAT_CNV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(250);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(250).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.CD_NAT_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.CD_NAT_CNV = tmpContent_tDBInput_5;
								}
							} else {
								row6.CD_NAT_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 251) {
							row6.LB_NAT_CNV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(251);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(251).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_NAT_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_NAT_CNV = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_NAT_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 252) {
							row6.TY_DT_RNV = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(252);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(252).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_DT_RNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_DT_RNV = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_DT_RNV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 253) {
							row6.DUR_RVN_AN = null;
						} else {

							row6.DUR_RVN_AN = rs_tDBInput_5.getInt(253);
							if (rs_tDBInput_5.wasNull()) {
								row6.DUR_RVN_AN = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 254) {
							row6.DUR_RVN_MO = null;
						} else {

							row6.DUR_RVN_MO = rs_tDBInput_5.getInt(254);
							if (rs_tDBInput_5.wasNull()) {
								row6.DUR_RVN_MO = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 255) {
							row6.DTD_RVN_PA = null;
						} else {

							row6.DTD_RVN_PA = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 255);

						}
						if (colQtyInRs_tDBInput_5 < 256) {
							row6.DTF_RVN_PA = null;
						} else {

							row6.DTF_RVN_PA = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 256);

						}
						if (colQtyInRs_tDBInput_5 < 257) {
							row6.MT_UNI_RNV = null;
						} else {

							row6.MT_UNI_RNV = rs_tDBInput_5.getBigDecimal(257);
							if (rs_tDBInput_5.wasNull()) {
								row6.MT_UNI_RNV = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 258) {
							row6.ID_RVT = null;
						} else {

							row6.ID_RVT = rs_tDBInput_5.getInt(258);
							if (rs_tDBInput_5.wasNull()) {
								row6.ID_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 259) {
							row6.NOM_RVT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(259);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(259).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.NOM_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.NOM_RVT = tmpContent_tDBInput_5;
								}
							} else {
								row6.NOM_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 260) {
							row6.TY_RVT = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(260);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(260).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.TY_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.TY_RVT = tmpContent_tDBInput_5;
								}
							} else {
								row6.TY_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 261) {
							row6.LB_SOCIETE = null;
						} else {

							tmpContent_tDBInput_5 = rs_tDBInput_5.getString(261);
							if (tmpContent_tDBInput_5 != null) {
								if (talendToDBList_tDBInput_5.contains(
										rsmd_tDBInput_5.getColumnTypeName(261).toUpperCase(java.util.Locale.ENGLISH))) {
									row6.LB_SOCIETE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
								} else {
									row6.LB_SOCIETE = tmpContent_tDBInput_5;
								}
							} else {
								row6.LB_SOCIETE = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 262) {
							row6.DT_ALIM = null;
						} else {

							row6.DT_ALIM = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 262);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 main ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
						}

						row6Struct row6_HashRow = new row6Struct();

						row6_HashRow.CD_SOCIETE = row6.CD_SOCIETE;

						row6_HashRow.CD_ACTIVIT = row6.CD_ACTIVIT;

						row6_HashRow.CD_PATRIM1 = row6.CD_PATRIM1;

						row6_HashRow.CD_PATRIM2 = row6.CD_PATRIM2;

						row6_HashRow.CD_PATRIM3 = row6.CD_PATRIM3;

						row6_HashRow.CD_PATRIM4 = row6.CD_PATRIM4;

						row6_HashRow.CD_PATRIM5 = row6.CD_PATRIM5;

						row6_HashRow.CD_PATRIM6 = row6.CD_PATRIM6;

						row6_HashRow.CD_PATRIM = row6.CD_PATRIM;

						row6_HashRow.LB_PATRIM1 = row6.LB_PATRIM1;

						row6_HashRow.LB_PATRIM2 = row6.LB_PATRIM2;

						row6_HashRow.LB_PATRIM3 = row6.LB_PATRIM3;

						row6_HashRow.LB_PATRIM4 = row6.LB_PATRIM4;

						row6_HashRow.LB_PATRIM5 = row6.LB_PATRIM5;

						row6_HashRow.LB_PATRIM6 = row6.LB_PATRIM6;

						row6_HashRow.CD_ETAT = row6.CD_ETAT;

						row6_HashRow.ID_PATRIM = row6.ID_PATRIM;

						row6_HashRow.ID_RLLBS = row6.ID_RLLBS;

						row6_HashRow.ID_INVARIANT = row6.ID_INVARIANT;

						row6_HashRow.CD_ENT_PAT = row6.CD_ENT_PAT;

						row6_HashRow.NIV_PAT = row6.NIV_PAT;

						row6_HashRow.CD_QUALIF = row6.CD_QUALIF;

						row6_HashRow.CD_ENT_SEC = row6.CD_ENT_SEC;

						row6_HashRow.CD_ORG_SEC = row6.CD_ORG_SEC;

						row6_HashRow.NIV_SEC = row6.NIV_SEC;

						row6_HashRow.CD_ENT_CTX = row6.CD_ENT_CTX;

						row6_HashRow.CD_ORG_CTX = row6.CD_ORG_CTX;

						row6_HashRow.CD_SOC_REG = row6.CD_SOC_REG;

						row6_HashRow.CD_LOCALI1 = row6.CD_LOCALI1;

						row6_HashRow.CD_LOCALI2 = row6.CD_LOCALI2;

						row6_HashRow.CD_LOCALI3 = row6.CD_LOCALI3;

						row6_HashRow.CD_LOCALI4 = row6.CD_LOCALI4;

						row6_HashRow.CD_LOCALI5 = row6.CD_LOCALI5;

						row6_HashRow.ON_ADRPOST = row6.ON_ADRPOST;

						row6_HashRow.ADRPA_NORU = row6.ADRPA_NORU;

						row6_HashRow.ADRPA_CDRU = row6.ADRPA_CDRU;

						row6_HashRow.ADRPA_RUE1 = row6.ADRPA_RUE1;

						row6_HashRow.ADRPA_RUE2 = row6.ADRPA_RUE2;

						row6_HashRow.ADRPA_LOC = row6.ADRPA_LOC;

						row6_HashRow.ADRPA_CP = row6.ADRPA_CP;

						row6_HashRow.ADRPA_BD = row6.ADRPA_BD;

						row6_HashRow.NO_INSEE = row6.NO_INSEE;

						row6_HashRow.NO_DEPT = row6.NO_DEPT;

						row6_HashRow.GPS_LONGIT = row6.GPS_LONGIT;

						row6_HashRow.GPS_LATIT = row6.GPS_LATIT;

						row6_HashRow.CD_Z_GEOG = row6.CD_Z_GEOG;

						row6_HashRow.NO_QPV = row6.NO_QPV;

						row6_HashRow.LB_QPV = row6.LB_QPV;

						row6_HashRow.ON_ZUS = row6.ON_ZUS;

						row6_HashRow.ON_ZRR = row6.ON_ZRR;

						row6_HashRow.ON_ZFU = row6.ON_ZFU;

						row6_HashRow.CD_SEGCUS = row6.CD_SEGCUS;

						row6_HashRow.LB_SEGCUS = row6.LB_SEGCUS;

						row6_HashRow.NO_ANRU = row6.NO_ANRU;

						row6_HashRow.ON_ANRU = row6.ON_ANRU;

						row6_HashRow.NO_CUCS = row6.NO_CUCS;

						row6_HashRow.ON_CUCS = row6.ON_CUCS;

						row6_HashRow.ON_PCS = row6.ON_PCS;

						row6_HashRow.CD_PROGRAM = row6.CD_PROGRAM;

						row6_HashRow.CD_TRANCHE = row6.CD_TRANCHE;

						row6_HashRow.LB_PR_TR = row6.LB_PR_TR;

						row6_HashRow.CD_PAT_TC1 = row6.CD_PAT_TC1;

						row6_HashRow.CD_PAT_TC2 = row6.CD_PAT_TC2;

						row6_HashRow.CD_PAT_TC3 = row6.CD_PAT_TC3;

						row6_HashRow.CD_PAT_TC4 = row6.CD_PAT_TC4;

						row6_HashRow.CD_PAT_TC5 = row6.CD_PAT_TC5;

						row6_HashRow.CD_PAT_TC6 = row6.CD_PAT_TC6;

						row6_HashRow.CD_DESTINA = row6.CD_DESTINA;

						row6_HashRow.LB_DESTINA = row6.LB_DESTINA;

						row6_HashRow.SURF_HAB = row6.SURF_HAB;

						row6_HashRow.SURF_REEL = row6.SURF_REEL;

						row6_HashRow.SURF_CORR = row6.SURF_CORR;

						row6_HashRow.SURF_CHAUF = row6.SURF_CHAUF;

						row6_HashRow.SURF_UTILE = row6.SURF_UTILE;

						row6_HashRow.SURF_DECPT = row6.SURF_DECPT;

						row6_HashRow.MT_EQUIBUD = row6.MT_EQUIBUD;

						row6_HashRow.TY_CHAUFF = row6.TY_CHAUFF;

						row6_HashRow.CD_ENERGIE = row6.CD_ENERGIE;

						row6_HashRow.LB_ENERGIE = row6.LB_ENERGIE;

						row6_HashRow.CD_ENEREAU = row6.CD_ENEREAU;

						row6_HashRow.LB_ENEREAU = row6.LB_ENEREAU;

						row6_HashRow.DT_DPE = row6.DT_DPE;

						row6_HashRow.CONSO_CCE = row6.CONSO_CCE;

						row6_HashRow.CLAS_CCE = row6.CLAS_CCE;

						row6_HashRow.CONSO_CEG = row6.CONSO_CEG;

						row6_HashRow.CLAS_CEG = row6.CLAS_CEG;

						row6_HashRow.ON_ADPTHAN = row6.ON_ADPTHAN;

						row6_HashRow.CD_ADPTHAN = row6.CD_ADPTHAN;

						row6_HashRow.LB_ADPTHAN = row6.LB_ADPTHAN;

						row6_HashRow.ON_ADPTEHAN = row6.ON_ADPTEHAN;

						row6_HashRow.ON_ACCHAN = row6.ON_ACCHAN;

						row6_HashRow.CD_CATACCHAN = row6.CD_CATACCHAN;

						row6_HashRow.LB_CATACCHAN = row6.LB_CATACCHAN;

						row6_HashRow.CD_SECTEUR = row6.CD_SECTEUR;

						row6_HashRow.LB_SECTEUR = row6.LB_SECTEUR;

						row6_HashRow.CD_SOCPROP = row6.CD_SOCPROP;

						row6_HashRow.LB_SOCPROP = row6.LB_SOCPROP;

						row6_HashRow.ON_COPROP = row6.ON_COPROP;

						row6_HashRow.CD_TYPROP = row6.CD_TYPROP;

						row6_HashRow.LB_TYPROP = row6.LB_TYPROP;

						row6_HashRow.CD_CATPROP = row6.CD_CATPROP;

						row6_HashRow.LB_CATPROP = row6.LB_CATPROP;

						row6_HashRow.DTF_BAILEM = row6.DTF_BAILEM;

						row6_HashRow.CD_MANDGES = row6.CD_MANDGES;

						row6_HashRow.LB_MANDGES = row6.LB_MANDGES;

						row6_HashRow.CD_TYFOY = row6.CD_TYFOY;

						row6_HashRow.LB_TYFOY = row6.LB_TYFOY;

						row6_HashRow.CD_CATFOY = row6.CD_CATFOY;

						row6_HashRow.LB_CATFOY = row6.LB_CATFOY;

						row6_HashRow.TY_CONSTR = row6.TY_CONSTR;

						row6_HashRow.CD_NATLOC = row6.CD_NATLOC;

						row6_HashRow.LB_NATLOC = row6.LB_NATLOC;

						row6_HashRow.CD_RGNATUR = row6.CD_RGNATUR;

						row6_HashRow.CD_TYPLOC = row6.CD_TYPLOC;

						row6_HashRow.LB_TYPLOC = row6.LB_TYPLOC;

						row6_HashRow.REP_CHARGE = row6.REP_CHARGE;

						row6_HashRow.NB_PIEPRIN = row6.NB_PIEPRIN;

						row6_HashRow.CD_ETAGE = row6.CD_ETAGE;

						row6_HashRow.LB_ETAGE = row6.LB_ETAGE;

						row6_HashRow.NIV_ETAGE = row6.NIV_ETAGE;

						row6_HashRow.NB_NIVEAUX = row6.NB_NIVEAUX;

						row6_HashRow.SNO_ETAGE = row6.SNO_ETAGE;

						row6_HashRow.ON_ASC = row6.ON_ASC;

						row6_HashRow.ON_REP_ASC = row6.ON_REP_ASC;

						row6_HashRow.CD_CATFP = row6.CD_CATFP;

						row6_HashRow.LB_CATFP = row6.LB_CATFP;

						row6_HashRow.CD_CATPLAF = row6.CD_CATPLAF;

						row6_HashRow.LB_CATPLAF = row6.LB_CATPLAF;

						row6_HashRow.ON_ELIGCUS = row6.ON_ELIGCUS;

						row6_HashRow.CD_CLF_CUS = row6.CD_CLF_CUS;

						row6_HashRow.DT_ACQUIS = row6.DT_ACQUIS;

						row6_HashRow.CD_ACHETEA = row6.CD_ACHETEA;

						row6_HashRow.LB_ACHETEA = row6.LB_ACHETEA;

						row6_HashRow.DTD_PAT_G = row6.DTD_PAT_G;

						row6_HashRow.DTD_PAT_R = row6.DTD_PAT_R;

						row6_HashRow.CD_DEBPAT = row6.CD_DEBPAT;

						row6_HashRow.LB_DEBPAT = row6.LB_DEBPAT;

						row6_HashRow.CD_TYDEBPAT = row6.CD_TYDEBPAT;

						row6_HashRow.LB_TYDEBPAT = row6.LB_TYDEBPAT;

						row6_HashRow.DTF_PAT_G = row6.DTF_PAT_G;

						row6_HashRow.DTF_PAT_R = row6.DTF_PAT_R;

						row6_HashRow.CD_FINPAT = row6.CD_FINPAT;

						row6_HashRow.LB_FINPAT = row6.LB_FINPAT;

						row6_HashRow.CD_TYFINPAT = row6.CD_TYFINPAT;

						row6_HashRow.LB_TYFINPAT = row6.LB_TYFINPAT;

						row6_HashRow.DT_MELOC = row6.DT_MELOC;

						row6_HashRow.DTF_PREVIS = row6.DTF_PREVIS;

						row6_HashRow.DTD_MEVENTE = row6.DTD_MEVENTE;

						row6_HashRow.DTF_MEVENTE = row6.DTF_MEVENTE;

						row6_HashRow.DTD_REHAB = row6.DTD_REHAB;

						row6_HashRow.DTF_REHAB = row6.DTF_REHAB;

						row6_HashRow.CD_VENDUA = row6.CD_VENDUA;

						row6_HashRow.LB_VENDUA = row6.LB_VENDUA;

						row6_HashRow.CPLPA1_NOM = row6.CPLPA1_NOM;

						row6_HashRow.CPLPA1_COD = row6.CPLPA1_COD;

						row6_HashRow.CPLPA1_LIB = row6.CPLPA1_LIB;

						row6_HashRow.CPLPA2_NOM = row6.CPLPA2_NOM;

						row6_HashRow.CPLPA2_COD = row6.CPLPA2_COD;

						row6_HashRow.CPLPA2_LIB = row6.CPLPA2_LIB;

						row6_HashRow.CPLPA3_NOM = row6.CPLPA3_NOM;

						row6_HashRow.CPLPA3_COD = row6.CPLPA3_COD;

						row6_HashRow.CPLPA4_NOM = row6.CPLPA4_NOM;

						row6_HashRow.CPLPA4_COD = row6.CPLPA4_COD;

						row6_HashRow.MT_PUMES = row6.MT_PUMES;

						row6_HashRow.MT_FORMES = row6.MT_FORMES;

						row6_HashRow.MT_PULIC = row6.MT_PULIC;

						row6_HashRow.MT_FORLIC = row6.MT_FORLIC;

						row6_HashRow.DT_INDLIC = row6.DT_INDLIC;

						row6_HashRow.MT_PUMAX = row6.MT_PUMAX;

						row6_HashRow.MT_FORMAX = row6.MT_FORMAX;

						row6_HashRow.MT_PUOBJ = row6.MT_PUOBJ;

						row6_HashRow.MT_FOROBJ = row6.MT_FOROBJ;

						row6_HashRow.MT_PUPRA = row6.MT_PUPRA;

						row6_HashRow.MT_TOTRUB = row6.MT_TOTRUB;

						row6_HashRow.MT_LOYER = row6.MT_LOYER;

						row6_HashRow.MT_LOYANNX = row6.MT_LOYANNX;

						row6_HashRow.MT_LOYFORF = row6.MT_LOYFORF;

						row6_HashRow.MT_HLOYER = row6.MT_HLOYER;

						row6_HashRow.MT_CHARGES = row6.MT_CHARGES;

						row6_HashRow.MT_CHAUFF = row6.MT_CHAUFF;

						row6_HashRow.CD_PERIOD = row6.CD_PERIOD;

						row6_HashRow.LB_PERIOD = row6.LB_PERIOD;

						row6_HashRow.NB_PERIOD = row6.NB_PERIOD;

						row6_HashRow.MT_PUREL = row6.MT_PUREL;

						row6_HashRow.MT_TRUBREL = row6.MT_TRUBREL;

						row6_HashRow.MT_LOYREL = row6.MT_LOYREL;

						row6_HashRow.MT_LAXREL = row6.MT_LAXREL;

						row6_HashRow.MT_LFOREL = row6.MT_LFOREL;

						row6_HashRow.MT_HLOYREL = row6.MT_HLOYREL;

						row6_HashRow.MT_CHAREL = row6.MT_CHAREL;

						row6_HashRow.MT_CHFREL = row6.MT_CHFREL;

						row6_HashRow.FACTURDEF = row6.FACTURDEF;

						row6_HashRow.NO_BAILDEF = row6.NO_BAILDEF;

						row6_HashRow.LB_BAILDEF = row6.LB_BAILDEF;

						row6_HashRow.ON_DISTMAN = row6.ON_DISTMAN;

						row6_HashRow.NO_LOGTRES = row6.NO_LOGTRES;

						row6_HashRow.CD_TAXE = row6.CD_TAXE;

						row6_HashRow.NO_INTERN1 = row6.NO_INTERN1;

						row6_HashRow.NO_INTERN2 = row6.NO_INTERN2;

						row6_HashRow.ON_NONVAL = row6.ON_NONVAL;

						row6_HashRow.DTD_NONVAL = row6.DTD_NONVAL;

						row6_HashRow.DTF_NONVAL = row6.DTF_NONVAL;

						row6_HashRow.TY_NONVAL = row6.TY_NONVAL;

						row6_HashRow.LB_NONVAL = row6.LB_NONVAL;

						row6_HashRow.ON_VACANT = row6.ON_VACANT;

						row6_HashRow.ID_GARD = row6.ID_GARD;

						row6_HashRow.NOM_GARD = row6.NOM_GARD;

						row6_HashRow.PRE_GARD = row6.PRE_GARD;

						row6_HashRow.TEL_GARD = row6.TEL_GARD;

						row6_HashRow.MAIL_GARD = row6.MAIL_GARD;

						row6_HashRow.TY_GARD = row6.TY_GARD;

						row6_HashRow.ID_RESPTR = row6.ID_RESPTR;

						row6_HashRow.NOM_RESPTR = row6.NOM_RESPTR;

						row6_HashRow.PRE_RESPTR = row6.PRE_RESPTR;

						row6_HashRow.TEL_RESPTR = row6.TEL_RESPTR;

						row6_HashRow.MAIL_RESPTR = row6.MAIL_RESPTR;

						row6_HashRow.TY_RESPTR = row6.TY_RESPTR;

						row6_HashRow.ID_PERCEP = row6.ID_PERCEP;

						row6_HashRow.NOM_PERCEP = row6.NOM_PERCEP;

						row6_HashRow.ID_BURENR = row6.ID_BURENR;

						row6_HashRow.NOM_BURENR = row6.NOM_BURENR;

						row6_HashRow.ID_MAIRIE = row6.ID_MAIRIE;

						row6_HashRow.NOM_MAIRIE = row6.NOM_MAIRIE;

						row6_HashRow.ON_MAIRGEST = row6.ON_MAIRGEST;

						row6_HashRow.LB_MAIRIE = row6.LB_MAIRIE;

						row6_HashRow.ID_PREF = row6.ID_PREF;

						row6_HashRow.NOM_PREF = row6.NOM_PREF;

						row6_HashRow.ID_ENCAIS = row6.ID_ENCAIS;

						row6_HashRow.NOM_ENCAIS = row6.NOM_ENCAIS;

						row6_HashRow.TY_ENCAIS = row6.TY_ENCAIS;

						row6_HashRow.ON_CONVLOC = row6.ON_CONVLOC;

						row6_HashRow.CD_CNVM = row6.CD_CNVM;

						row6_HashRow.DTD_CNVM = row6.DTD_CNVM;

						row6_HashRow.DTF_CNVM = row6.DTF_CNVM;

						row6_HashRow.DT_SI_CNVM = row6.DT_SI_CNVM;

						row6_HashRow.DT_SI_CNVMO = row6.DT_SI_CNVMO;

						row6_HashRow.TY_CNVM = row6.TY_CNVM;

						row6_HashRow.LB_TY_CNVM = row6.LB_TY_CNVM;

						row6_HashRow.ON_CONVCUS = row6.ON_CONVCUS;

						row6_HashRow.ON_ROLCUS = row6.ON_ROLCUS;

						row6_HashRow.CD_CNVCUS = row6.CD_CNVCUS;

						row6_HashRow.DTD_CNVCUS = row6.DTD_CNVCUS;

						row6_HashRow.DTF_CNVCUS = row6.DTF_CNVCUS;

						row6_HashRow.DT_SI_CNVCUS = row6.DT_SI_CNVCUS;

						row6_HashRow.CD_CLASCUS = row6.CD_CLASCUS;

						row6_HashRow.LB_CLASCUS = row6.LB_CLASCUS;

						row6_HashRow.NO_CNV_RVN = row6.NO_CNV_RVN;

						row6_HashRow.NO_CNV_RVT = row6.NO_CNV_RVT;

						row6_HashRow.TY_CNV = row6.TY_CNV;

						row6_HashRow.CD_NAT_CNV = row6.CD_NAT_CNV;

						row6_HashRow.LB_NAT_CNV = row6.LB_NAT_CNV;

						row6_HashRow.TY_DT_RNV = row6.TY_DT_RNV;

						row6_HashRow.DUR_RVN_AN = row6.DUR_RVN_AN;

						row6_HashRow.DUR_RVN_MO = row6.DUR_RVN_MO;

						row6_HashRow.DTD_RVN_PA = row6.DTD_RVN_PA;

						row6_HashRow.DTF_RVN_PA = row6.DTF_RVN_PA;

						row6_HashRow.MT_UNI_RNV = row6.MT_UNI_RNV;

						row6_HashRow.ID_RVT = row6.ID_RVT;

						row6_HashRow.NOM_RVT = row6.NOM_RVT;

						row6_HashRow.TY_RVT = row6.TY_RVT;

						row6_HashRow.LB_SOCIETE = row6.LB_SOCIETE;

						row6_HashRow.DT_ALIM = row6.DT_ALIM;

						tHash_Lookup_row6.put(row6_HashRow);

						tos_count_tAdvancedHash_row6++;

						/**
						 * [tAdvancedHash_row6 main ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row6 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row6";

						/**
						 * [tAdvancedHash_row6 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
					if (conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {

						conn_tDBInput_5.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row6 end ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				tHash_Lookup_row6.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tAdvancedHash_row6", true);
				end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row6 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row6 finally ] start
				 */

				currentComponent = "tAdvancedHash_row6";

				/**
				 * [tAdvancedHash_row6 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public BigDecimal CD_HIERORG;

		public BigDecimal getCD_HIERORG() {
			return this.CD_HIERORG;
		}

		public BigDecimal CD_ENT_HIER;

		public BigDecimal getCD_ENT_HIER() {
			return this.CD_ENT_HIER;
		}

		public String TY_ENT_HIER;

		public String getTY_ENT_HIER() {
			return this.TY_ENT_HIER;
		}

		public Integer CD_PROFOND;

		public Integer getCD_PROFOND() {
			return this.CD_PROFOND;
		}

		public String CD_HIERAR;

		public String getCD_HIERAR() {
			return this.CD_HIERAR;
		}

		public String CD_HIERAR1;

		public String getCD_HIERAR1() {
			return this.CD_HIERAR1;
		}

		public String CD_HIERAR2;

		public String getCD_HIERAR2() {
			return this.CD_HIERAR2;
		}

		public String CD_HIERAR3;

		public String getCD_HIERAR3() {
			return this.CD_HIERAR3;
		}

		public String CD_HIERAR4;

		public String getCD_HIERAR4() {
			return this.CD_HIERAR4;
		}

		public String CD_HIERAR5;

		public String getCD_HIERAR5() {
			return this.CD_HIERAR5;
		}

		public String CD_HIERAR6;

		public String getCD_HIERAR6() {
			return this.CD_HIERAR6;
		}

		public String CD_HIERAR7;

		public String getCD_HIERAR7() {
			return this.CD_HIERAR7;
		}

		public String CD_HIERAR8;

		public String getCD_HIERAR8() {
			return this.CD_HIERAR8;
		}

		public String CD_HIERAR9;

		public String getCD_HIERAR9() {
			return this.CD_HIERAR9;
		}

		public String LB_CODE;

		public String getLB_CODE() {
			return this.LB_CODE;
		}

		public String LB_CODE1;

		public String getLB_CODE1() {
			return this.LB_CODE1;
		}

		public String LB_CODE2;

		public String getLB_CODE2() {
			return this.LB_CODE2;
		}

		public String LB_CODE3;

		public String getLB_CODE3() {
			return this.LB_CODE3;
		}

		public String LB_CODE4;

		public String getLB_CODE4() {
			return this.LB_CODE4;
		}

		public String LB_CODE5;

		public String getLB_CODE5() {
			return this.LB_CODE5;
		}

		public String LB_CODE6;

		public String getLB_CODE6() {
			return this.LB_CODE6;
		}

		public String LB_CODE7;

		public String getLB_CODE7() {
			return this.LB_CODE7;
		}

		public String LB_CODE8;

		public String getLB_CODE8() {
			return this.LB_CODE8;
		}

		public String LB_CODE9;

		public String getLB_CODE9() {
			return this.LB_CODE9;
		}

		public String CD_SUPP;

		public String getCD_SUPP() {
			return this.CD_SUPP;
		}

		public String HRD_CONTACT;

		public String getHRD_CONTACT() {
			return this.HRD_CONTACT;
		}

		public String HRF_CONTACT;

		public String getHRF_CONTACT() {
			return this.HRF_CONTACT;
		}

		public String LB_CORRESP;

		public String getLB_CORRESP() {
			return this.LB_CORRESP;
		}

		public String LB_CORRESP_CPLT;

		public String getLB_CORRESP_CPLT() {
			return this.LB_CORRESP_CPLT;
		}

		public String ON_ROUGE;

		public String getON_ROUGE() {
			return this.ON_ROUGE;
		}

		public String TEL_CORRESP;

		public String getTEL_CORRESP() {
			return this.TEL_CORRESP;
		}

		public String TEL_FAXCOR;

		public String getTEL_FAXCOR() {
			return this.TEL_FAXCOR;
		}

		public String MAIL_CORRESP;

		public String getMAIL_CORRESP() {
			return this.MAIL_CORRESP;
		}

		public String ADR_DESTINA;

		public String getADR_DESTINA() {
			return this.ADR_DESTINA;
		}

		public String ADR_COMPLT;

		public String getADR_COMPLT() {
			return this.ADR_COMPLT;
		}

		public String ADR_BATIM;

		public String getADR_BATIM() {
			return this.ADR_BATIM;
		}

		public String ADR_ESCALIE;

		public String getADR_ESCALIE() {
			return this.ADR_ESCALIE;
		}

		public String ADR_ETAGE;

		public String getADR_ETAGE() {
			return this.ADR_ETAGE;
		}

		public String ADR_APPART;

		public String getADR_APPART() {
			return this.ADR_APPART;
		}

		public String ADR_DISTRIB;

		public String getADR_DISTRIB() {
			return this.ADR_DISTRIB;
		}

		public String ADR_NORU;

		public String getADR_NORU() {
			return this.ADR_NORU;
		}

		public String ADR_CDRU;

		public String getADR_CDRU() {
			return this.ADR_CDRU;
		}

		public String ADR_RUE1;

		public String getADR_RUE1() {
			return this.ADR_RUE1;
		}

		public String ADR_RUE2;

		public String getADR_RUE2() {
			return this.ADR_RUE2;
		}

		public String ADR_CP;

		public String getADR_CP() {
			return this.ADR_CP;
		}

		public String ADR_LOC;

		public String getADR_LOC() {
			return this.ADR_LOC;
		}

		public String ADR_CDX;

		public String getADR_CDX() {
			return this.ADR_CDX;
		}

		public String ADR_PAY;

		public String getADR_PAY() {
			return this.ADR_PAY;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CD_HIERORG == null) ? 0 : new Double(this.CD_HIERORG.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CD_HIERORG == null) {
				if (other.CD_HIERORG != null)
					return false;

			} else if ((other.CD_HIERORG == null) || (this.CD_HIERORG.compareTo(other.CD_HIERORG) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_HIERORG = this.CD_HIERORG;
			other.CD_ENT_HIER = this.CD_ENT_HIER;
			other.TY_ENT_HIER = this.TY_ENT_HIER;
			other.CD_PROFOND = this.CD_PROFOND;
			other.CD_HIERAR = this.CD_HIERAR;
			other.CD_HIERAR1 = this.CD_HIERAR1;
			other.CD_HIERAR2 = this.CD_HIERAR2;
			other.CD_HIERAR3 = this.CD_HIERAR3;
			other.CD_HIERAR4 = this.CD_HIERAR4;
			other.CD_HIERAR5 = this.CD_HIERAR5;
			other.CD_HIERAR6 = this.CD_HIERAR6;
			other.CD_HIERAR7 = this.CD_HIERAR7;
			other.CD_HIERAR8 = this.CD_HIERAR8;
			other.CD_HIERAR9 = this.CD_HIERAR9;
			other.LB_CODE = this.LB_CODE;
			other.LB_CODE1 = this.LB_CODE1;
			other.LB_CODE2 = this.LB_CODE2;
			other.LB_CODE3 = this.LB_CODE3;
			other.LB_CODE4 = this.LB_CODE4;
			other.LB_CODE5 = this.LB_CODE5;
			other.LB_CODE6 = this.LB_CODE6;
			other.LB_CODE7 = this.LB_CODE7;
			other.LB_CODE8 = this.LB_CODE8;
			other.LB_CODE9 = this.LB_CODE9;
			other.CD_SUPP = this.CD_SUPP;
			other.HRD_CONTACT = this.HRD_CONTACT;
			other.HRF_CONTACT = this.HRF_CONTACT;
			other.LB_CORRESP = this.LB_CORRESP;
			other.LB_CORRESP_CPLT = this.LB_CORRESP_CPLT;
			other.ON_ROUGE = this.ON_ROUGE;
			other.TEL_CORRESP = this.TEL_CORRESP;
			other.TEL_FAXCOR = this.TEL_FAXCOR;
			other.MAIL_CORRESP = this.MAIL_CORRESP;
			other.ADR_DESTINA = this.ADR_DESTINA;
			other.ADR_COMPLT = this.ADR_COMPLT;
			other.ADR_BATIM = this.ADR_BATIM;
			other.ADR_ESCALIE = this.ADR_ESCALIE;
			other.ADR_ETAGE = this.ADR_ETAGE;
			other.ADR_APPART = this.ADR_APPART;
			other.ADR_DISTRIB = this.ADR_DISTRIB;
			other.ADR_NORU = this.ADR_NORU;
			other.ADR_CDRU = this.ADR_CDRU;
			other.ADR_RUE1 = this.ADR_RUE1;
			other.ADR_RUE2 = this.ADR_RUE2;
			other.ADR_CP = this.ADR_CP;
			other.ADR_LOC = this.ADR_LOC;
			other.ADR_CDX = this.ADR_CDX;
			other.ADR_PAY = this.ADR_PAY;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CD_HIERORG = this.CD_HIERORG;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_HIERORG = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.CD_HIERORG);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ENT_HIER = (BigDecimal) ois.readObject();

				this.TY_ENT_HIER = readString(dis, ois);

				this.CD_PROFOND = readInteger(dis, ois);

				this.CD_HIERAR = readString(dis, ois);

				this.CD_HIERAR1 = readString(dis, ois);

				this.CD_HIERAR2 = readString(dis, ois);

				this.CD_HIERAR3 = readString(dis, ois);

				this.CD_HIERAR4 = readString(dis, ois);

				this.CD_HIERAR5 = readString(dis, ois);

				this.CD_HIERAR6 = readString(dis, ois);

				this.CD_HIERAR7 = readString(dis, ois);

				this.CD_HIERAR8 = readString(dis, ois);

				this.CD_HIERAR9 = readString(dis, ois);

				this.LB_CODE = readString(dis, ois);

				this.LB_CODE1 = readString(dis, ois);

				this.LB_CODE2 = readString(dis, ois);

				this.LB_CODE3 = readString(dis, ois);

				this.LB_CODE4 = readString(dis, ois);

				this.LB_CODE5 = readString(dis, ois);

				this.LB_CODE6 = readString(dis, ois);

				this.LB_CODE7 = readString(dis, ois);

				this.LB_CODE8 = readString(dis, ois);

				this.LB_CODE9 = readString(dis, ois);

				this.CD_SUPP = readString(dis, ois);

				this.HRD_CONTACT = readString(dis, ois);

				this.HRF_CONTACT = readString(dis, ois);

				this.LB_CORRESP = readString(dis, ois);

				this.LB_CORRESP_CPLT = readString(dis, ois);

				this.ON_ROUGE = readString(dis, ois);

				this.TEL_CORRESP = readString(dis, ois);

				this.TEL_FAXCOR = readString(dis, ois);

				this.MAIL_CORRESP = readString(dis, ois);

				this.ADR_DESTINA = readString(dis, ois);

				this.ADR_COMPLT = readString(dis, ois);

				this.ADR_BATIM = readString(dis, ois);

				this.ADR_ESCALIE = readString(dis, ois);

				this.ADR_ETAGE = readString(dis, ois);

				this.ADR_APPART = readString(dis, ois);

				this.ADR_DISTRIB = readString(dis, ois);

				this.ADR_NORU = readString(dis, ois);

				this.ADR_CDRU = readString(dis, ois);

				this.ADR_RUE1 = readString(dis, ois);

				this.ADR_RUE2 = readString(dis, ois);

				this.ADR_CP = readString(dis, ois);

				this.ADR_LOC = readString(dis, ois);

				this.ADR_CDX = readString(dis, ois);

				this.ADR_PAY = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				oos.writeObject(this.CD_ENT_HIER);

				writeString(this.TY_ENT_HIER, dos, oos);

				writeInteger(this.CD_PROFOND, dos, oos);

				writeString(this.CD_HIERAR, dos, oos);

				writeString(this.CD_HIERAR1, dos, oos);

				writeString(this.CD_HIERAR2, dos, oos);

				writeString(this.CD_HIERAR3, dos, oos);

				writeString(this.CD_HIERAR4, dos, oos);

				writeString(this.CD_HIERAR5, dos, oos);

				writeString(this.CD_HIERAR6, dos, oos);

				writeString(this.CD_HIERAR7, dos, oos);

				writeString(this.CD_HIERAR8, dos, oos);

				writeString(this.CD_HIERAR9, dos, oos);

				writeString(this.LB_CODE, dos, oos);

				writeString(this.LB_CODE1, dos, oos);

				writeString(this.LB_CODE2, dos, oos);

				writeString(this.LB_CODE3, dos, oos);

				writeString(this.LB_CODE4, dos, oos);

				writeString(this.LB_CODE5, dos, oos);

				writeString(this.LB_CODE6, dos, oos);

				writeString(this.LB_CODE7, dos, oos);

				writeString(this.LB_CODE8, dos, oos);

				writeString(this.LB_CODE9, dos, oos);

				writeString(this.CD_SUPP, dos, oos);

				writeString(this.HRD_CONTACT, dos, oos);

				writeString(this.HRF_CONTACT, dos, oos);

				writeString(this.LB_CORRESP, dos, oos);

				writeString(this.LB_CORRESP_CPLT, dos, oos);

				writeString(this.ON_ROUGE, dos, oos);

				writeString(this.TEL_CORRESP, dos, oos);

				writeString(this.TEL_FAXCOR, dos, oos);

				writeString(this.MAIL_CORRESP, dos, oos);

				writeString(this.ADR_DESTINA, dos, oos);

				writeString(this.ADR_COMPLT, dos, oos);

				writeString(this.ADR_BATIM, dos, oos);

				writeString(this.ADR_ESCALIE, dos, oos);

				writeString(this.ADR_ETAGE, dos, oos);

				writeString(this.ADR_APPART, dos, oos);

				writeString(this.ADR_DISTRIB, dos, oos);

				writeString(this.ADR_NORU, dos, oos);

				writeString(this.ADR_CDRU, dos, oos);

				writeString(this.ADR_RUE1, dos, oos);

				writeString(this.ADR_RUE2, dos, oos);

				writeString(this.ADR_CP, dos, oos);

				writeString(this.ADR_LOC, dos, oos);

				writeString(this.ADR_CDX, dos, oos);

				writeString(this.ADR_PAY, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_HIERORG=" + String.valueOf(CD_HIERORG));
			sb.append(",CD_ENT_HIER=" + String.valueOf(CD_ENT_HIER));
			sb.append(",TY_ENT_HIER=" + TY_ENT_HIER);
			sb.append(",CD_PROFOND=" + String.valueOf(CD_PROFOND));
			sb.append(",CD_HIERAR=" + CD_HIERAR);
			sb.append(",CD_HIERAR1=" + CD_HIERAR1);
			sb.append(",CD_HIERAR2=" + CD_HIERAR2);
			sb.append(",CD_HIERAR3=" + CD_HIERAR3);
			sb.append(",CD_HIERAR4=" + CD_HIERAR4);
			sb.append(",CD_HIERAR5=" + CD_HIERAR5);
			sb.append(",CD_HIERAR6=" + CD_HIERAR6);
			sb.append(",CD_HIERAR7=" + CD_HIERAR7);
			sb.append(",CD_HIERAR8=" + CD_HIERAR8);
			sb.append(",CD_HIERAR9=" + CD_HIERAR9);
			sb.append(",LB_CODE=" + LB_CODE);
			sb.append(",LB_CODE1=" + LB_CODE1);
			sb.append(",LB_CODE2=" + LB_CODE2);
			sb.append(",LB_CODE3=" + LB_CODE3);
			sb.append(",LB_CODE4=" + LB_CODE4);
			sb.append(",LB_CODE5=" + LB_CODE5);
			sb.append(",LB_CODE6=" + LB_CODE6);
			sb.append(",LB_CODE7=" + LB_CODE7);
			sb.append(",LB_CODE8=" + LB_CODE8);
			sb.append(",LB_CODE9=" + LB_CODE9);
			sb.append(",CD_SUPP=" + CD_SUPP);
			sb.append(",HRD_CONTACT=" + HRD_CONTACT);
			sb.append(",HRF_CONTACT=" + HRF_CONTACT);
			sb.append(",LB_CORRESP=" + LB_CORRESP);
			sb.append(",LB_CORRESP_CPLT=" + LB_CORRESP_CPLT);
			sb.append(",ON_ROUGE=" + ON_ROUGE);
			sb.append(",TEL_CORRESP=" + TEL_CORRESP);
			sb.append(",TEL_FAXCOR=" + TEL_FAXCOR);
			sb.append(",MAIL_CORRESP=" + MAIL_CORRESP);
			sb.append(",ADR_DESTINA=" + ADR_DESTINA);
			sb.append(",ADR_COMPLT=" + ADR_COMPLT);
			sb.append(",ADR_BATIM=" + ADR_BATIM);
			sb.append(",ADR_ESCALIE=" + ADR_ESCALIE);
			sb.append(",ADR_ETAGE=" + ADR_ETAGE);
			sb.append(",ADR_APPART=" + ADR_APPART);
			sb.append(",ADR_DISTRIB=" + ADR_DISTRIB);
			sb.append(",ADR_NORU=" + ADR_NORU);
			sb.append(",ADR_CDRU=" + ADR_CDRU);
			sb.append(",ADR_RUE1=" + ADR_RUE1);
			sb.append(",ADR_RUE2=" + ADR_RUE2);
			sb.append(",ADR_CP=" + ADR_CP);
			sb.append(",ADR_LOC=" + ADR_LOC);
			sb.append(",ADR_CDX=" + ADR_CDX);
			sb.append(",ADR_PAY=" + ADR_PAY);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_HIERORG, other.CD_HIERORG);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tDBInput_9 - inputs:(after_tDBInput_2) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row6,row16,row17) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct>getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tDBInput_9 begin ] start
				 */

				ok_Hash.put("tDBInput_9", false);
				start_Hash.put("tDBInput_9", System.currentTimeMillis());

				currentComponent = "tDBInput_9";

				int tos_count_tDBInput_9 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_9 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_9 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_9 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_9, talendToDBArray_tDBInput_9);
				int nb_line_tDBInput_9 = 0;
				java.sql.Connection conn_tDBInput_9 = null;
				String driverClass_tDBInput_9 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_9 = java.lang.Class.forName(driverClass_tDBInput_9);
				String dbUser_tDBInput_9 = "";

				final String decryptedPassword_tDBInput_9 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Cwl1ekZfIQ1MknvSrGV04dSdxicOCblTGUa+nA==");

				String dbPwd_tDBInput_9 = decryptedPassword_tDBInput_9;

				String port_tDBInput_9 = "1433";
				String dbname_tDBInput_9 = "ACGINFO1";
				String url_tDBInput_9 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_9)) {
					url_tDBInput_9 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_9)) {
					url_tDBInput_9 += "//" + "ACGINFO1";
				}
				url_tDBInput_9 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_9 = "";

				conn_tDBInput_9 = java.sql.DriverManager.getConnection(url_tDBInput_9, dbUser_tDBInput_9,
						dbPwd_tDBInput_9);

				java.sql.Statement stmt_tDBInput_9 = conn_tDBInput_9.createStatement();

				String dbquery_tDBInput_9 = "SELECT ORGANISAT_GIM.CD_SOCIETE,\n		ORGANISAT_GIM.CD_HIERORG,\n		ORGANISAT_GIM.CD_ENT_HIER,\n		ORGANISAT_GIM.TY_ENT_HIER,\n"
						+ "		ORGANISAT_GIM.CD_PROFOND,\n		ORGANISAT_GIM.CD_HIERAR,\n		ORGANISAT_GIM.CD_HIERAR1,\n		ORGANISAT_GIM.CD_HIERAR2,\n		ORGANIS"
						+ "AT_GIM.CD_HIERAR3,\n		ORGANISAT_GIM.CD_HIERAR4,\n		ORGANISAT_GIM.CD_HIERAR5,\n		ORGANISAT_GIM.CD_HIERAR6,\n		ORGANISAT_GIM.C"
						+ "D_HIERAR7,\n		ORGANISAT_GIM.CD_HIERAR8,\n		ORGANISAT_GIM.CD_HIERAR9,\n		ORGANISAT_GIM.LB_CODE,\n		ORGANISAT_GIM.LB_CODE1,\n		"
						+ "ORGANISAT_GIM.LB_CODE2,\n		ORGANISAT_GIM.LB_CODE3,\n		ORGANISAT_GIM.LB_CODE4,\n		ORGANISAT_GIM.LB_CODE5,\n		ORGANISAT_GIM.LB"
						+ "_CODE6,\n		ORGANISAT_GIM.LB_CODE7,\n		ORGANISAT_GIM.LB_CODE8,\n		ORGANISAT_GIM.LB_CODE9,\n		ORGANISAT_GIM.CD_SUPP,\n		ORGANIS"
						+ "AT_GIM.HRD_CONTACT,\n		ORGANISAT_GIM.HRF_CONTACT,\n		ORGANISAT_GIM.LB_CORRESP,\n		ORGANISAT_GIM.LB_CORRESP_CPLT,\n		ORGANISA"
						+ "T_GIM.ON_ROUGE,\n		ORGANISAT_GIM.TEL_CORRESP,\n		ORGANISAT_GIM.TEL_FAXCOR,\n		ORGANISAT_GIM.MAIL_CORRESP,\n		ORGANISAT_GIM.A"
						+ "DR_DESTINA,\n		ORGANISAT_GIM.ADR_COMPLT,\n		ORGANISAT_GIM.ADR_BATIM,\n		ORGANISAT_GIM.ADR_ESCALIE,\n		ORGANISAT_GIM.ADR_ETAG"
						+ "E,\n		ORGANISAT_GIM.ADR_APPART,\n		ORGANISAT_GIM.ADR_DISTRIB,\n		ORGANISAT_GIM.ADR_NORU,\n		ORGANISAT_GIM.ADR_CDRU,\n		ORGANI"
						+ "SAT_GIM.ADR_RUE1,\n		ORGANISAT_GIM.ADR_RUE2,\n		ORGANISAT_GIM.ADR_CP,\n		ORGANISAT_GIM.ADR_LOC,\n		ORGANISAT_GIM.ADR_CDX,\n		"
						+ "ORGANISAT_GIM.ADR_PAY,\n		ORGANISAT_GIM.DT_ALIM\nFROM	ORGANISAT_GIM";

				globalMap.put("tDBInput_9_QUERY", dbquery_tDBInput_9);
				java.sql.ResultSet rs_tDBInput_9 = null;

				try {
					rs_tDBInput_9 = stmt_tDBInput_9.executeQuery(dbquery_tDBInput_9);
					java.sql.ResultSetMetaData rsmd_tDBInput_9 = rs_tDBInput_9.getMetaData();
					int colQtyInRs_tDBInput_9 = rsmd_tDBInput_9.getColumnCount();

					String tmpContent_tDBInput_9 = null;

					while (rs_tDBInput_9.next()) {
						nb_line_tDBInput_9++;

						if (colQtyInRs_tDBInput_9 < 1) {
							row16.CD_SOCIETE = null;
						} else {

							row16.CD_SOCIETE = rs_tDBInput_9.getBigDecimal(1);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 2) {
							row16.CD_HIERORG = null;
						} else {

							row16.CD_HIERORG = rs_tDBInput_9.getBigDecimal(2);
							if (rs_tDBInput_9.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_9 < 3) {
							row16.CD_ENT_HIER = null;
						} else {

							row16.CD_ENT_HIER = rs_tDBInput_9.getBigDecimal(3);
							if (rs_tDBInput_9.wasNull()) {
								row16.CD_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 4) {
							row16.TY_ENT_HIER = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(4);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.TY_ENT_HIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.TY_ENT_HIER = tmpContent_tDBInput_9;
								}
							} else {
								row16.TY_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 5) {
							row16.CD_PROFOND = null;
						} else {

							row16.CD_PROFOND = rs_tDBInput_9.getInt(5);
							if (rs_tDBInput_9.wasNull()) {
								row16.CD_PROFOND = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 6) {
							row16.CD_HIERAR = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(6);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 7) {
							row16.CD_HIERAR1 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(7);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR1 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR1 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 8) {
							row16.CD_HIERAR2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(8);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR2 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 9) {
							row16.CD_HIERAR3 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(9);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR3 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR3 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 10) {
							row16.CD_HIERAR4 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(10);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR4 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR4 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 11) {
							row16.CD_HIERAR5 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(11);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR5 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR5 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 12) {
							row16.CD_HIERAR6 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(12);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR6 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR6 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 13) {
							row16.CD_HIERAR7 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(13);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR7 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR7 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 14) {
							row16.CD_HIERAR8 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(14);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR8 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR8 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 15) {
							row16.CD_HIERAR9 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(15);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_HIERAR9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_HIERAR9 = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_HIERAR9 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 16) {
							row16.LB_CODE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(16);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 17) {
							row16.LB_CODE1 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(17);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE1 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 18) {
							row16.LB_CODE2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(18);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE2 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 19) {
							row16.LB_CODE3 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(19);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE3 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE3 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 20) {
							row16.LB_CODE4 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(20);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE4 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE4 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 21) {
							row16.LB_CODE5 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(21);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE5 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE5 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 22) {
							row16.LB_CODE6 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(22);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE6 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE6 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 23) {
							row16.LB_CODE7 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(23);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE7 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE7 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 24) {
							row16.LB_CODE8 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(24);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE8 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE8 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 25) {
							row16.LB_CODE9 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(25);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CODE9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CODE9 = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CODE9 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 26) {
							row16.CD_SUPP = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(26);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_SUPP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.CD_SUPP = tmpContent_tDBInput_9;
								}
							} else {
								row16.CD_SUPP = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 27) {
							row16.HRD_CONTACT = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(27);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.HRD_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.HRD_CONTACT = tmpContent_tDBInput_9;
								}
							} else {
								row16.HRD_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 28) {
							row16.HRF_CONTACT = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(28);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.HRF_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.HRF_CONTACT = tmpContent_tDBInput_9;
								}
							} else {
								row16.HRF_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 29) {
							row16.LB_CORRESP = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(29);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CORRESP = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 30) {
							row16.LB_CORRESP_CPLT = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(30);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.LB_CORRESP_CPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.LB_CORRESP_CPLT = tmpContent_tDBInput_9;
								}
							} else {
								row16.LB_CORRESP_CPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 31) {
							row16.ON_ROUGE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(31);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ON_ROUGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ON_ROUGE = tmpContent_tDBInput_9;
								}
							} else {
								row16.ON_ROUGE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 32) {
							row16.TEL_CORRESP = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(32);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.TEL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.TEL_CORRESP = tmpContent_tDBInput_9;
								}
							} else {
								row16.TEL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 33) {
							row16.TEL_FAXCOR = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(33);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.TEL_FAXCOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.TEL_FAXCOR = tmpContent_tDBInput_9;
								}
							} else {
								row16.TEL_FAXCOR = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 34) {
							row16.MAIL_CORRESP = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(34);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.MAIL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.MAIL_CORRESP = tmpContent_tDBInput_9;
								}
							} else {
								row16.MAIL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 35) {
							row16.ADR_DESTINA = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(35);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_DESTINA = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 36) {
							row16.ADR_COMPLT = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(36);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_COMPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_COMPLT = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_COMPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 37) {
							row16.ADR_BATIM = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(37);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_BATIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_BATIM = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_BATIM = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 38) {
							row16.ADR_ESCALIE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(38);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_ESCALIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_ESCALIE = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_ESCALIE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 39) {
							row16.ADR_ETAGE = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(39);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_ETAGE = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 40) {
							row16.ADR_APPART = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(40);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_APPART = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_APPART = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_APPART = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 41) {
							row16.ADR_DISTRIB = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(41);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_DISTRIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_DISTRIB = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_DISTRIB = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 42) {
							row16.ADR_NORU = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(42);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_NORU = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 43) {
							row16.ADR_CDRU = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(43);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_CDRU = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 44) {
							row16.ADR_RUE1 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(44);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_RUE1 = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 45) {
							row16.ADR_RUE2 = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(45);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_RUE2 = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 46) {
							row16.ADR_CP = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(46);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_CP = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 47) {
							row16.ADR_LOC = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(47);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_LOC = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 48) {
							row16.ADR_CDX = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(48);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_CDX = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_CDX = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_CDX = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 49) {
							row16.ADR_PAY = null;
						} else {

							tmpContent_tDBInput_9 = rs_tDBInput_9.getString(49);
							if (tmpContent_tDBInput_9 != null) {
								if (talendToDBList_tDBInput_9.contains(
										rsmd_tDBInput_9.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.ADR_PAY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_9);
								} else {
									row16.ADR_PAY = tmpContent_tDBInput_9;
								}
							} else {
								row16.ADR_PAY = null;
							}
						}
						if (colQtyInRs_tDBInput_9 < 50) {
							row16.DT_ALIM = null;
						} else {

							row16.DT_ALIM = mssqlGTU_tDBInput_9.getDate(rsmd_tDBInput_9, rs_tDBInput_9, 50);

						}

						/**
						 * [tDBInput_9 begin ] stop
						 */

						/**
						 * [tDBInput_9 main ] start
						 */

						currentComponent = "tDBInput_9";

						tos_count_tDBInput_9++;

						/**
						 * [tDBInput_9 main ] stop
						 */

						/**
						 * [tDBInput_9 process_data_begin ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
						}

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.CD_SOCIETE = row16.CD_SOCIETE;

						row16_HashRow.CD_HIERORG = row16.CD_HIERORG;

						row16_HashRow.CD_ENT_HIER = row16.CD_ENT_HIER;

						row16_HashRow.TY_ENT_HIER = row16.TY_ENT_HIER;

						row16_HashRow.CD_PROFOND = row16.CD_PROFOND;

						row16_HashRow.CD_HIERAR = row16.CD_HIERAR;

						row16_HashRow.CD_HIERAR1 = row16.CD_HIERAR1;

						row16_HashRow.CD_HIERAR2 = row16.CD_HIERAR2;

						row16_HashRow.CD_HIERAR3 = row16.CD_HIERAR3;

						row16_HashRow.CD_HIERAR4 = row16.CD_HIERAR4;

						row16_HashRow.CD_HIERAR5 = row16.CD_HIERAR5;

						row16_HashRow.CD_HIERAR6 = row16.CD_HIERAR6;

						row16_HashRow.CD_HIERAR7 = row16.CD_HIERAR7;

						row16_HashRow.CD_HIERAR8 = row16.CD_HIERAR8;

						row16_HashRow.CD_HIERAR9 = row16.CD_HIERAR9;

						row16_HashRow.LB_CODE = row16.LB_CODE;

						row16_HashRow.LB_CODE1 = row16.LB_CODE1;

						row16_HashRow.LB_CODE2 = row16.LB_CODE2;

						row16_HashRow.LB_CODE3 = row16.LB_CODE3;

						row16_HashRow.LB_CODE4 = row16.LB_CODE4;

						row16_HashRow.LB_CODE5 = row16.LB_CODE5;

						row16_HashRow.LB_CODE6 = row16.LB_CODE6;

						row16_HashRow.LB_CODE7 = row16.LB_CODE7;

						row16_HashRow.LB_CODE8 = row16.LB_CODE8;

						row16_HashRow.LB_CODE9 = row16.LB_CODE9;

						row16_HashRow.CD_SUPP = row16.CD_SUPP;

						row16_HashRow.HRD_CONTACT = row16.HRD_CONTACT;

						row16_HashRow.HRF_CONTACT = row16.HRF_CONTACT;

						row16_HashRow.LB_CORRESP = row16.LB_CORRESP;

						row16_HashRow.LB_CORRESP_CPLT = row16.LB_CORRESP_CPLT;

						row16_HashRow.ON_ROUGE = row16.ON_ROUGE;

						row16_HashRow.TEL_CORRESP = row16.TEL_CORRESP;

						row16_HashRow.TEL_FAXCOR = row16.TEL_FAXCOR;

						row16_HashRow.MAIL_CORRESP = row16.MAIL_CORRESP;

						row16_HashRow.ADR_DESTINA = row16.ADR_DESTINA;

						row16_HashRow.ADR_COMPLT = row16.ADR_COMPLT;

						row16_HashRow.ADR_BATIM = row16.ADR_BATIM;

						row16_HashRow.ADR_ESCALIE = row16.ADR_ESCALIE;

						row16_HashRow.ADR_ETAGE = row16.ADR_ETAGE;

						row16_HashRow.ADR_APPART = row16.ADR_APPART;

						row16_HashRow.ADR_DISTRIB = row16.ADR_DISTRIB;

						row16_HashRow.ADR_NORU = row16.ADR_NORU;

						row16_HashRow.ADR_CDRU = row16.ADR_CDRU;

						row16_HashRow.ADR_RUE1 = row16.ADR_RUE1;

						row16_HashRow.ADR_RUE2 = row16.ADR_RUE2;

						row16_HashRow.ADR_CP = row16.ADR_CP;

						row16_HashRow.ADR_LOC = row16.ADR_LOC;

						row16_HashRow.ADR_CDX = row16.ADR_CDX;

						row16_HashRow.ADR_PAY = row16.ADR_PAY;

						row16_HashRow.DT_ALIM = row16.DT_ALIM;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 process_data_end ] start
						 */

						currentComponent = "tDBInput_9";

						/**
						 * [tDBInput_9 process_data_end ] stop
						 */

						/**
						 * [tDBInput_9 end ] start
						 */

						currentComponent = "tDBInput_9";

					}
				} finally {
					if (rs_tDBInput_9 != null) {
						rs_tDBInput_9.close();
					}
					if (stmt_tDBInput_9 != null) {
						stmt_tDBInput_9.close();
					}
					if (conn_tDBInput_9 != null && !conn_tDBInput_9.isClosed()) {

						conn_tDBInput_9.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_9_NB_LINE", nb_line_tDBInput_9);

				ok_Hash.put("tDBInput_9", true);
				end_Hash.put("tDBInput_9", System.currentTimeMillis());

				/**
				 * [tDBInput_9 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_9 finally ] start
				 */

				currentComponent = "tDBInput_9";

				/**
				 * [tDBInput_9 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_9_SUBPROCESS_STATE", 1);
	}

	public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public BigDecimal CD_HIERORG;

		public BigDecimal getCD_HIERORG() {
			return this.CD_HIERORG;
		}

		public BigDecimal CD_ENT_HIER;

		public BigDecimal getCD_ENT_HIER() {
			return this.CD_ENT_HIER;
		}

		public String TY_ENT_HIER;

		public String getTY_ENT_HIER() {
			return this.TY_ENT_HIER;
		}

		public Integer CD_PROFOND;

		public Integer getCD_PROFOND() {
			return this.CD_PROFOND;
		}

		public String CD_HIERAR;

		public String getCD_HIERAR() {
			return this.CD_HIERAR;
		}

		public String CD_HIERAR1;

		public String getCD_HIERAR1() {
			return this.CD_HIERAR1;
		}

		public String CD_HIERAR2;

		public String getCD_HIERAR2() {
			return this.CD_HIERAR2;
		}

		public String CD_HIERAR3;

		public String getCD_HIERAR3() {
			return this.CD_HIERAR3;
		}

		public String CD_HIERAR4;

		public String getCD_HIERAR4() {
			return this.CD_HIERAR4;
		}

		public String CD_HIERAR5;

		public String getCD_HIERAR5() {
			return this.CD_HIERAR5;
		}

		public String CD_HIERAR6;

		public String getCD_HIERAR6() {
			return this.CD_HIERAR6;
		}

		public String CD_HIERAR7;

		public String getCD_HIERAR7() {
			return this.CD_HIERAR7;
		}

		public String CD_HIERAR8;

		public String getCD_HIERAR8() {
			return this.CD_HIERAR8;
		}

		public String CD_HIERAR9;

		public String getCD_HIERAR9() {
			return this.CD_HIERAR9;
		}

		public String LB_CODE;

		public String getLB_CODE() {
			return this.LB_CODE;
		}

		public String LB_CODE1;

		public String getLB_CODE1() {
			return this.LB_CODE1;
		}

		public String LB_CODE2;

		public String getLB_CODE2() {
			return this.LB_CODE2;
		}

		public String LB_CODE3;

		public String getLB_CODE3() {
			return this.LB_CODE3;
		}

		public String LB_CODE4;

		public String getLB_CODE4() {
			return this.LB_CODE4;
		}

		public String LB_CODE5;

		public String getLB_CODE5() {
			return this.LB_CODE5;
		}

		public String LB_CODE6;

		public String getLB_CODE6() {
			return this.LB_CODE6;
		}

		public String LB_CODE7;

		public String getLB_CODE7() {
			return this.LB_CODE7;
		}

		public String LB_CODE8;

		public String getLB_CODE8() {
			return this.LB_CODE8;
		}

		public String LB_CODE9;

		public String getLB_CODE9() {
			return this.LB_CODE9;
		}

		public String CD_SUPP;

		public String getCD_SUPP() {
			return this.CD_SUPP;
		}

		public String HRD_CONTACT;

		public String getHRD_CONTACT() {
			return this.HRD_CONTACT;
		}

		public String HRF_CONTACT;

		public String getHRF_CONTACT() {
			return this.HRF_CONTACT;
		}

		public String LB_CORRESP;

		public String getLB_CORRESP() {
			return this.LB_CORRESP;
		}

		public String LB_CORRESP_CPLT;

		public String getLB_CORRESP_CPLT() {
			return this.LB_CORRESP_CPLT;
		}

		public String ON_ROUGE;

		public String getON_ROUGE() {
			return this.ON_ROUGE;
		}

		public String TEL_CORRESP;

		public String getTEL_CORRESP() {
			return this.TEL_CORRESP;
		}

		public String TEL_FAXCOR;

		public String getTEL_FAXCOR() {
			return this.TEL_FAXCOR;
		}

		public String MAIL_CORRESP;

		public String getMAIL_CORRESP() {
			return this.MAIL_CORRESP;
		}

		public String ADR_DESTINA;

		public String getADR_DESTINA() {
			return this.ADR_DESTINA;
		}

		public String ADR_COMPLT;

		public String getADR_COMPLT() {
			return this.ADR_COMPLT;
		}

		public String ADR_BATIM;

		public String getADR_BATIM() {
			return this.ADR_BATIM;
		}

		public String ADR_ESCALIE;

		public String getADR_ESCALIE() {
			return this.ADR_ESCALIE;
		}

		public String ADR_ETAGE;

		public String getADR_ETAGE() {
			return this.ADR_ETAGE;
		}

		public String ADR_APPART;

		public String getADR_APPART() {
			return this.ADR_APPART;
		}

		public String ADR_DISTRIB;

		public String getADR_DISTRIB() {
			return this.ADR_DISTRIB;
		}

		public String ADR_NORU;

		public String getADR_NORU() {
			return this.ADR_NORU;
		}

		public String ADR_CDRU;

		public String getADR_CDRU() {
			return this.ADR_CDRU;
		}

		public String ADR_RUE1;

		public String getADR_RUE1() {
			return this.ADR_RUE1;
		}

		public String ADR_RUE2;

		public String getADR_RUE2() {
			return this.ADR_RUE2;
		}

		public String ADR_CP;

		public String getADR_CP() {
			return this.ADR_CP;
		}

		public String ADR_LOC;

		public String getADR_LOC() {
			return this.ADR_LOC;
		}

		public String ADR_CDX;

		public String getADR_CDX() {
			return this.ADR_CDX;
		}

		public String ADR_PAY;

		public String getADR_PAY() {
			return this.ADR_PAY;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CD_HIERORG == null) ? 0 : new Double(this.CD_HIERORG.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row17Struct other = (row17Struct) obj;

			if (this.CD_HIERORG == null) {
				if (other.CD_HIERORG != null)
					return false;

			} else if ((other.CD_HIERORG == null) || (this.CD_HIERORG.compareTo(other.CD_HIERORG) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row17Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_HIERORG = this.CD_HIERORG;
			other.CD_ENT_HIER = this.CD_ENT_HIER;
			other.TY_ENT_HIER = this.TY_ENT_HIER;
			other.CD_PROFOND = this.CD_PROFOND;
			other.CD_HIERAR = this.CD_HIERAR;
			other.CD_HIERAR1 = this.CD_HIERAR1;
			other.CD_HIERAR2 = this.CD_HIERAR2;
			other.CD_HIERAR3 = this.CD_HIERAR3;
			other.CD_HIERAR4 = this.CD_HIERAR4;
			other.CD_HIERAR5 = this.CD_HIERAR5;
			other.CD_HIERAR6 = this.CD_HIERAR6;
			other.CD_HIERAR7 = this.CD_HIERAR7;
			other.CD_HIERAR8 = this.CD_HIERAR8;
			other.CD_HIERAR9 = this.CD_HIERAR9;
			other.LB_CODE = this.LB_CODE;
			other.LB_CODE1 = this.LB_CODE1;
			other.LB_CODE2 = this.LB_CODE2;
			other.LB_CODE3 = this.LB_CODE3;
			other.LB_CODE4 = this.LB_CODE4;
			other.LB_CODE5 = this.LB_CODE5;
			other.LB_CODE6 = this.LB_CODE6;
			other.LB_CODE7 = this.LB_CODE7;
			other.LB_CODE8 = this.LB_CODE8;
			other.LB_CODE9 = this.LB_CODE9;
			other.CD_SUPP = this.CD_SUPP;
			other.HRD_CONTACT = this.HRD_CONTACT;
			other.HRF_CONTACT = this.HRF_CONTACT;
			other.LB_CORRESP = this.LB_CORRESP;
			other.LB_CORRESP_CPLT = this.LB_CORRESP_CPLT;
			other.ON_ROUGE = this.ON_ROUGE;
			other.TEL_CORRESP = this.TEL_CORRESP;
			other.TEL_FAXCOR = this.TEL_FAXCOR;
			other.MAIL_CORRESP = this.MAIL_CORRESP;
			other.ADR_DESTINA = this.ADR_DESTINA;
			other.ADR_COMPLT = this.ADR_COMPLT;
			other.ADR_BATIM = this.ADR_BATIM;
			other.ADR_ESCALIE = this.ADR_ESCALIE;
			other.ADR_ETAGE = this.ADR_ETAGE;
			other.ADR_APPART = this.ADR_APPART;
			other.ADR_DISTRIB = this.ADR_DISTRIB;
			other.ADR_NORU = this.ADR_NORU;
			other.ADR_CDRU = this.ADR_CDRU;
			other.ADR_RUE1 = this.ADR_RUE1;
			other.ADR_RUE2 = this.ADR_RUE2;
			other.ADR_CP = this.ADR_CP;
			other.ADR_LOC = this.ADR_LOC;
			other.ADR_CDX = this.ADR_CDX;
			other.ADR_PAY = this.ADR_PAY;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row17Struct other) {

			other.CD_HIERORG = this.CD_HIERORG;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_HIERORG = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.CD_HIERORG);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ENT_HIER = (BigDecimal) ois.readObject();

				this.TY_ENT_HIER = readString(dis, ois);

				this.CD_PROFOND = readInteger(dis, ois);

				this.CD_HIERAR = readString(dis, ois);

				this.CD_HIERAR1 = readString(dis, ois);

				this.CD_HIERAR2 = readString(dis, ois);

				this.CD_HIERAR3 = readString(dis, ois);

				this.CD_HIERAR4 = readString(dis, ois);

				this.CD_HIERAR5 = readString(dis, ois);

				this.CD_HIERAR6 = readString(dis, ois);

				this.CD_HIERAR7 = readString(dis, ois);

				this.CD_HIERAR8 = readString(dis, ois);

				this.CD_HIERAR9 = readString(dis, ois);

				this.LB_CODE = readString(dis, ois);

				this.LB_CODE1 = readString(dis, ois);

				this.LB_CODE2 = readString(dis, ois);

				this.LB_CODE3 = readString(dis, ois);

				this.LB_CODE4 = readString(dis, ois);

				this.LB_CODE5 = readString(dis, ois);

				this.LB_CODE6 = readString(dis, ois);

				this.LB_CODE7 = readString(dis, ois);

				this.LB_CODE8 = readString(dis, ois);

				this.LB_CODE9 = readString(dis, ois);

				this.CD_SUPP = readString(dis, ois);

				this.HRD_CONTACT = readString(dis, ois);

				this.HRF_CONTACT = readString(dis, ois);

				this.LB_CORRESP = readString(dis, ois);

				this.LB_CORRESP_CPLT = readString(dis, ois);

				this.ON_ROUGE = readString(dis, ois);

				this.TEL_CORRESP = readString(dis, ois);

				this.TEL_FAXCOR = readString(dis, ois);

				this.MAIL_CORRESP = readString(dis, ois);

				this.ADR_DESTINA = readString(dis, ois);

				this.ADR_COMPLT = readString(dis, ois);

				this.ADR_BATIM = readString(dis, ois);

				this.ADR_ESCALIE = readString(dis, ois);

				this.ADR_ETAGE = readString(dis, ois);

				this.ADR_APPART = readString(dis, ois);

				this.ADR_DISTRIB = readString(dis, ois);

				this.ADR_NORU = readString(dis, ois);

				this.ADR_CDRU = readString(dis, ois);

				this.ADR_RUE1 = readString(dis, ois);

				this.ADR_RUE2 = readString(dis, ois);

				this.ADR_CP = readString(dis, ois);

				this.ADR_LOC = readString(dis, ois);

				this.ADR_CDX = readString(dis, ois);

				this.ADR_PAY = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				oos.writeObject(this.CD_ENT_HIER);

				writeString(this.TY_ENT_HIER, dos, oos);

				writeInteger(this.CD_PROFOND, dos, oos);

				writeString(this.CD_HIERAR, dos, oos);

				writeString(this.CD_HIERAR1, dos, oos);

				writeString(this.CD_HIERAR2, dos, oos);

				writeString(this.CD_HIERAR3, dos, oos);

				writeString(this.CD_HIERAR4, dos, oos);

				writeString(this.CD_HIERAR5, dos, oos);

				writeString(this.CD_HIERAR6, dos, oos);

				writeString(this.CD_HIERAR7, dos, oos);

				writeString(this.CD_HIERAR8, dos, oos);

				writeString(this.CD_HIERAR9, dos, oos);

				writeString(this.LB_CODE, dos, oos);

				writeString(this.LB_CODE1, dos, oos);

				writeString(this.LB_CODE2, dos, oos);

				writeString(this.LB_CODE3, dos, oos);

				writeString(this.LB_CODE4, dos, oos);

				writeString(this.LB_CODE5, dos, oos);

				writeString(this.LB_CODE6, dos, oos);

				writeString(this.LB_CODE7, dos, oos);

				writeString(this.LB_CODE8, dos, oos);

				writeString(this.LB_CODE9, dos, oos);

				writeString(this.CD_SUPP, dos, oos);

				writeString(this.HRD_CONTACT, dos, oos);

				writeString(this.HRF_CONTACT, dos, oos);

				writeString(this.LB_CORRESP, dos, oos);

				writeString(this.LB_CORRESP_CPLT, dos, oos);

				writeString(this.ON_ROUGE, dos, oos);

				writeString(this.TEL_CORRESP, dos, oos);

				writeString(this.TEL_FAXCOR, dos, oos);

				writeString(this.MAIL_CORRESP, dos, oos);

				writeString(this.ADR_DESTINA, dos, oos);

				writeString(this.ADR_COMPLT, dos, oos);

				writeString(this.ADR_BATIM, dos, oos);

				writeString(this.ADR_ESCALIE, dos, oos);

				writeString(this.ADR_ETAGE, dos, oos);

				writeString(this.ADR_APPART, dos, oos);

				writeString(this.ADR_DISTRIB, dos, oos);

				writeString(this.ADR_NORU, dos, oos);

				writeString(this.ADR_CDRU, dos, oos);

				writeString(this.ADR_RUE1, dos, oos);

				writeString(this.ADR_RUE2, dos, oos);

				writeString(this.ADR_CP, dos, oos);

				writeString(this.ADR_LOC, dos, oos);

				writeString(this.ADR_CDX, dos, oos);

				writeString(this.ADR_PAY, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_HIERORG=" + String.valueOf(CD_HIERORG));
			sb.append(",CD_ENT_HIER=" + String.valueOf(CD_ENT_HIER));
			sb.append(",TY_ENT_HIER=" + TY_ENT_HIER);
			sb.append(",CD_PROFOND=" + String.valueOf(CD_PROFOND));
			sb.append(",CD_HIERAR=" + CD_HIERAR);
			sb.append(",CD_HIERAR1=" + CD_HIERAR1);
			sb.append(",CD_HIERAR2=" + CD_HIERAR2);
			sb.append(",CD_HIERAR3=" + CD_HIERAR3);
			sb.append(",CD_HIERAR4=" + CD_HIERAR4);
			sb.append(",CD_HIERAR5=" + CD_HIERAR5);
			sb.append(",CD_HIERAR6=" + CD_HIERAR6);
			sb.append(",CD_HIERAR7=" + CD_HIERAR7);
			sb.append(",CD_HIERAR8=" + CD_HIERAR8);
			sb.append(",CD_HIERAR9=" + CD_HIERAR9);
			sb.append(",LB_CODE=" + LB_CODE);
			sb.append(",LB_CODE1=" + LB_CODE1);
			sb.append(",LB_CODE2=" + LB_CODE2);
			sb.append(",LB_CODE3=" + LB_CODE3);
			sb.append(",LB_CODE4=" + LB_CODE4);
			sb.append(",LB_CODE5=" + LB_CODE5);
			sb.append(",LB_CODE6=" + LB_CODE6);
			sb.append(",LB_CODE7=" + LB_CODE7);
			sb.append(",LB_CODE8=" + LB_CODE8);
			sb.append(",LB_CODE9=" + LB_CODE9);
			sb.append(",CD_SUPP=" + CD_SUPP);
			sb.append(",HRD_CONTACT=" + HRD_CONTACT);
			sb.append(",HRF_CONTACT=" + HRF_CONTACT);
			sb.append(",LB_CORRESP=" + LB_CORRESP);
			sb.append(",LB_CORRESP_CPLT=" + LB_CORRESP_CPLT);
			sb.append(",ON_ROUGE=" + ON_ROUGE);
			sb.append(",TEL_CORRESP=" + TEL_CORRESP);
			sb.append(",TEL_FAXCOR=" + TEL_FAXCOR);
			sb.append(",MAIL_CORRESP=" + MAIL_CORRESP);
			sb.append(",ADR_DESTINA=" + ADR_DESTINA);
			sb.append(",ADR_COMPLT=" + ADR_COMPLT);
			sb.append(",ADR_BATIM=" + ADR_BATIM);
			sb.append(",ADR_ESCALIE=" + ADR_ESCALIE);
			sb.append(",ADR_ETAGE=" + ADR_ETAGE);
			sb.append(",ADR_APPART=" + ADR_APPART);
			sb.append(",ADR_DISTRIB=" + ADR_DISTRIB);
			sb.append(",ADR_NORU=" + ADR_NORU);
			sb.append(",ADR_CDRU=" + ADR_CDRU);
			sb.append(",ADR_RUE1=" + ADR_RUE1);
			sb.append(",ADR_RUE2=" + ADR_RUE2);
			sb.append(",ADR_CP=" + ADR_CP);
			sb.append(",ADR_LOC=" + ADR_LOC);
			sb.append(",ADR_CDX=" + ADR_CDX);
			sb.append(",ADR_PAY=" + ADR_PAY);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_HIERORG, other.CD_HIERORG);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row17Struct row17 = new row17Struct();

				/**
				 * [tAdvancedHash_row17 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row17", false);
				start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row17";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17");
				}

				int tos_count_tAdvancedHash_row17 = 0;

				// connection name:row17
				// source node:tDBInput_10 - inputs:(after_tDBInput_2) outputs:(row17,row17) |
				// target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
				// linked node: tMap_2 - inputs:(row3,row4,row6,row16,row17) outputs:(out2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row17Struct>getLookup(matchingModeEnum_row17);

				globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);

				/**
				 * [tAdvancedHash_row17 begin ] stop
				 */

				/**
				 * [tDBInput_10 begin ] start
				 */

				ok_Hash.put("tDBInput_10", false);
				start_Hash.put("tDBInput_10", System.currentTimeMillis());

				currentComponent = "tDBInput_10";

				int tos_count_tDBInput_10 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_10 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_10 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_10 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_10, talendToDBArray_tDBInput_10);
				int nb_line_tDBInput_10 = 0;
				java.sql.Connection conn_tDBInput_10 = null;
				String driverClass_tDBInput_10 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_10 = java.lang.Class.forName(driverClass_tDBInput_10);
				String dbUser_tDBInput_10 = "";

				final String decryptedPassword_tDBInput_10 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:G0ZXdWHTn1k8cqDVMgKcAmLk14lQSWTaKXVL7g==");

				String dbPwd_tDBInput_10 = decryptedPassword_tDBInput_10;

				String port_tDBInput_10 = "1433";
				String dbname_tDBInput_10 = "ACGINFO1";
				String url_tDBInput_10 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_10)) {
					url_tDBInput_10 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_10)) {
					url_tDBInput_10 += "//" + "ACGINFO1";
				}
				url_tDBInput_10 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_10 = "";

				conn_tDBInput_10 = java.sql.DriverManager.getConnection(url_tDBInput_10, dbUser_tDBInput_10,
						dbPwd_tDBInput_10);

				java.sql.Statement stmt_tDBInput_10 = conn_tDBInput_10.createStatement();

				String dbquery_tDBInput_10 = "SELECT ORGANISAT_GIM.CD_SOCIETE,\n		ORGANISAT_GIM.CD_HIERORG,\n		ORGANISAT_GIM.CD_ENT_HIER,\n		ORGANISAT_GIM.TY_ENT_HIER,\n"
						+ "		ORGANISAT_GIM.CD_PROFOND,\n		ORGANISAT_GIM.CD_HIERAR,\n		ORGANISAT_GIM.CD_HIERAR1,\n		ORGANISAT_GIM.CD_HIERAR2,\n		ORGANIS"
						+ "AT_GIM.CD_HIERAR3,\n		ORGANISAT_GIM.CD_HIERAR4,\n		ORGANISAT_GIM.CD_HIERAR5,\n		ORGANISAT_GIM.CD_HIERAR6,\n		ORGANISAT_GIM.C"
						+ "D_HIERAR7,\n		ORGANISAT_GIM.CD_HIERAR8,\n		ORGANISAT_GIM.CD_HIERAR9,\n		ORGANISAT_GIM.LB_CODE,\n		ORGANISAT_GIM.LB_CODE1,\n		"
						+ "ORGANISAT_GIM.LB_CODE2,\n		ORGANISAT_GIM.LB_CODE3,\n		ORGANISAT_GIM.LB_CODE4,\n		ORGANISAT_GIM.LB_CODE5,\n		ORGANISAT_GIM.LB"
						+ "_CODE6,\n		ORGANISAT_GIM.LB_CODE7,\n		ORGANISAT_GIM.LB_CODE8,\n		ORGANISAT_GIM.LB_CODE9,\n		ORGANISAT_GIM.CD_SUPP,\n		ORGANIS"
						+ "AT_GIM.HRD_CONTACT,\n		ORGANISAT_GIM.HRF_CONTACT,\n		ORGANISAT_GIM.LB_CORRESP,\n		ORGANISAT_GIM.LB_CORRESP_CPLT,\n		ORGANISA"
						+ "T_GIM.ON_ROUGE,\n		ORGANISAT_GIM.TEL_CORRESP,\n		ORGANISAT_GIM.TEL_FAXCOR,\n		ORGANISAT_GIM.MAIL_CORRESP,\n		ORGANISAT_GIM.A"
						+ "DR_DESTINA,\n		ORGANISAT_GIM.ADR_COMPLT,\n		ORGANISAT_GIM.ADR_BATIM,\n		ORGANISAT_GIM.ADR_ESCALIE,\n		ORGANISAT_GIM.ADR_ETAG"
						+ "E,\n		ORGANISAT_GIM.ADR_APPART,\n		ORGANISAT_GIM.ADR_DISTRIB,\n		ORGANISAT_GIM.ADR_NORU,\n		ORGANISAT_GIM.ADR_CDRU,\n		ORGANI"
						+ "SAT_GIM.ADR_RUE1,\n		ORGANISAT_GIM.ADR_RUE2,\n		ORGANISAT_GIM.ADR_CP,\n		ORGANISAT_GIM.ADR_LOC,\n		ORGANISAT_GIM.ADR_CDX,\n		"
						+ "ORGANISAT_GIM.ADR_PAY,\n		ORGANISAT_GIM.DT_ALIM\nFROM	ORGANISAT_GIM";

				globalMap.put("tDBInput_10_QUERY", dbquery_tDBInput_10);
				java.sql.ResultSet rs_tDBInput_10 = null;

				try {
					rs_tDBInput_10 = stmt_tDBInput_10.executeQuery(dbquery_tDBInput_10);
					java.sql.ResultSetMetaData rsmd_tDBInput_10 = rs_tDBInput_10.getMetaData();
					int colQtyInRs_tDBInput_10 = rsmd_tDBInput_10.getColumnCount();

					String tmpContent_tDBInput_10 = null;

					while (rs_tDBInput_10.next()) {
						nb_line_tDBInput_10++;

						if (colQtyInRs_tDBInput_10 < 1) {
							row17.CD_SOCIETE = null;
						} else {

							row17.CD_SOCIETE = rs_tDBInput_10.getBigDecimal(1);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 2) {
							row17.CD_HIERORG = null;
						} else {

							row17.CD_HIERORG = rs_tDBInput_10.getBigDecimal(2);
							if (rs_tDBInput_10.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_10 < 3) {
							row17.CD_ENT_HIER = null;
						} else {

							row17.CD_ENT_HIER = rs_tDBInput_10.getBigDecimal(3);
							if (rs_tDBInput_10.wasNull()) {
								row17.CD_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 4) {
							row17.TY_ENT_HIER = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(4);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.TY_ENT_HIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.TY_ENT_HIER = tmpContent_tDBInput_10;
								}
							} else {
								row17.TY_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 5) {
							row17.CD_PROFOND = null;
						} else {

							row17.CD_PROFOND = rs_tDBInput_10.getInt(5);
							if (rs_tDBInput_10.wasNull()) {
								row17.CD_PROFOND = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 6) {
							row17.CD_HIERAR = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(6);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 7) {
							row17.CD_HIERAR1 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(7);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR1 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR1 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 8) {
							row17.CD_HIERAR2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(8);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR2 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 9) {
							row17.CD_HIERAR3 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(9);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR3 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR3 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 10) {
							row17.CD_HIERAR4 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(10);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR4 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR4 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 11) {
							row17.CD_HIERAR5 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(11);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR5 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR5 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 12) {
							row17.CD_HIERAR6 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(12);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR6 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR6 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 13) {
							row17.CD_HIERAR7 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(13);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR7 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR7 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 14) {
							row17.CD_HIERAR8 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(14);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR8 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR8 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 15) {
							row17.CD_HIERAR9 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(15);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_HIERAR9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_HIERAR9 = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_HIERAR9 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 16) {
							row17.LB_CODE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(16);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 17) {
							row17.LB_CODE1 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(17);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE1 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 18) {
							row17.LB_CODE2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(18);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE2 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 19) {
							row17.LB_CODE3 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(19);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE3 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE3 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 20) {
							row17.LB_CODE4 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(20);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE4 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE4 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 21) {
							row17.LB_CODE5 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(21);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE5 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE5 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 22) {
							row17.LB_CODE6 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(22);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE6 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE6 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 23) {
							row17.LB_CODE7 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(23);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE7 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE7 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 24) {
							row17.LB_CODE8 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(24);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE8 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE8 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 25) {
							row17.LB_CODE9 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(25);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CODE9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CODE9 = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CODE9 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 26) {
							row17.CD_SUPP = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(26);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.CD_SUPP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.CD_SUPP = tmpContent_tDBInput_10;
								}
							} else {
								row17.CD_SUPP = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 27) {
							row17.HRD_CONTACT = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(27);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.HRD_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.HRD_CONTACT = tmpContent_tDBInput_10;
								}
							} else {
								row17.HRD_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 28) {
							row17.HRF_CONTACT = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(28);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.HRF_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.HRF_CONTACT = tmpContent_tDBInput_10;
								}
							} else {
								row17.HRF_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 29) {
							row17.LB_CORRESP = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(29);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CORRESP = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 30) {
							row17.LB_CORRESP_CPLT = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(30);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.LB_CORRESP_CPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.LB_CORRESP_CPLT = tmpContent_tDBInput_10;
								}
							} else {
								row17.LB_CORRESP_CPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 31) {
							row17.ON_ROUGE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(31);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ON_ROUGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ON_ROUGE = tmpContent_tDBInput_10;
								}
							} else {
								row17.ON_ROUGE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 32) {
							row17.TEL_CORRESP = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(32);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.TEL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.TEL_CORRESP = tmpContent_tDBInput_10;
								}
							} else {
								row17.TEL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 33) {
							row17.TEL_FAXCOR = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(33);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.TEL_FAXCOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.TEL_FAXCOR = tmpContent_tDBInput_10;
								}
							} else {
								row17.TEL_FAXCOR = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 34) {
							row17.MAIL_CORRESP = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(34);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.MAIL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.MAIL_CORRESP = tmpContent_tDBInput_10;
								}
							} else {
								row17.MAIL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 35) {
							row17.ADR_DESTINA = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(35);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_DESTINA = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 36) {
							row17.ADR_COMPLT = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(36);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_COMPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_COMPLT = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_COMPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 37) {
							row17.ADR_BATIM = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(37);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_BATIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_BATIM = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_BATIM = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 38) {
							row17.ADR_ESCALIE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(38);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_ESCALIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_ESCALIE = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_ESCALIE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 39) {
							row17.ADR_ETAGE = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(39);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_ETAGE = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 40) {
							row17.ADR_APPART = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(40);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_APPART = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_APPART = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_APPART = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 41) {
							row17.ADR_DISTRIB = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(41);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_DISTRIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_DISTRIB = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_DISTRIB = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 42) {
							row17.ADR_NORU = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(42);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_NORU = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 43) {
							row17.ADR_CDRU = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(43);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_CDRU = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 44) {
							row17.ADR_RUE1 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(44);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_RUE1 = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 45) {
							row17.ADR_RUE2 = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(45);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_RUE2 = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 46) {
							row17.ADR_CP = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(46);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_CP = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 47) {
							row17.ADR_LOC = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(47);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_LOC = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 48) {
							row17.ADR_CDX = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(48);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_CDX = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_CDX = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_CDX = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 49) {
							row17.ADR_PAY = null;
						} else {

							tmpContent_tDBInput_10 = rs_tDBInput_10.getString(49);
							if (tmpContent_tDBInput_10 != null) {
								if (talendToDBList_tDBInput_10.contains(
										rsmd_tDBInput_10.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row17.ADR_PAY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_10);
								} else {
									row17.ADR_PAY = tmpContent_tDBInput_10;
								}
							} else {
								row17.ADR_PAY = null;
							}
						}
						if (colQtyInRs_tDBInput_10 < 50) {
							row17.DT_ALIM = null;
						} else {

							row17.DT_ALIM = mssqlGTU_tDBInput_10.getDate(rsmd_tDBInput_10, rs_tDBInput_10, 50);

						}

						/**
						 * [tDBInput_10 begin ] stop
						 */

						/**
						 * [tDBInput_10 main ] start
						 */

						currentComponent = "tDBInput_10";

						tos_count_tDBInput_10++;

						/**
						 * [tDBInput_10 main ] stop
						 */

						/**
						 * [tDBInput_10 process_data_begin ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row17 main ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
						}

						row17Struct row17_HashRow = new row17Struct();

						row17_HashRow.CD_SOCIETE = row17.CD_SOCIETE;

						row17_HashRow.CD_HIERORG = row17.CD_HIERORG;

						row17_HashRow.CD_ENT_HIER = row17.CD_ENT_HIER;

						row17_HashRow.TY_ENT_HIER = row17.TY_ENT_HIER;

						row17_HashRow.CD_PROFOND = row17.CD_PROFOND;

						row17_HashRow.CD_HIERAR = row17.CD_HIERAR;

						row17_HashRow.CD_HIERAR1 = row17.CD_HIERAR1;

						row17_HashRow.CD_HIERAR2 = row17.CD_HIERAR2;

						row17_HashRow.CD_HIERAR3 = row17.CD_HIERAR3;

						row17_HashRow.CD_HIERAR4 = row17.CD_HIERAR4;

						row17_HashRow.CD_HIERAR5 = row17.CD_HIERAR5;

						row17_HashRow.CD_HIERAR6 = row17.CD_HIERAR6;

						row17_HashRow.CD_HIERAR7 = row17.CD_HIERAR7;

						row17_HashRow.CD_HIERAR8 = row17.CD_HIERAR8;

						row17_HashRow.CD_HIERAR9 = row17.CD_HIERAR9;

						row17_HashRow.LB_CODE = row17.LB_CODE;

						row17_HashRow.LB_CODE1 = row17.LB_CODE1;

						row17_HashRow.LB_CODE2 = row17.LB_CODE2;

						row17_HashRow.LB_CODE3 = row17.LB_CODE3;

						row17_HashRow.LB_CODE4 = row17.LB_CODE4;

						row17_HashRow.LB_CODE5 = row17.LB_CODE5;

						row17_HashRow.LB_CODE6 = row17.LB_CODE6;

						row17_HashRow.LB_CODE7 = row17.LB_CODE7;

						row17_HashRow.LB_CODE8 = row17.LB_CODE8;

						row17_HashRow.LB_CODE9 = row17.LB_CODE9;

						row17_HashRow.CD_SUPP = row17.CD_SUPP;

						row17_HashRow.HRD_CONTACT = row17.HRD_CONTACT;

						row17_HashRow.HRF_CONTACT = row17.HRF_CONTACT;

						row17_HashRow.LB_CORRESP = row17.LB_CORRESP;

						row17_HashRow.LB_CORRESP_CPLT = row17.LB_CORRESP_CPLT;

						row17_HashRow.ON_ROUGE = row17.ON_ROUGE;

						row17_HashRow.TEL_CORRESP = row17.TEL_CORRESP;

						row17_HashRow.TEL_FAXCOR = row17.TEL_FAXCOR;

						row17_HashRow.MAIL_CORRESP = row17.MAIL_CORRESP;

						row17_HashRow.ADR_DESTINA = row17.ADR_DESTINA;

						row17_HashRow.ADR_COMPLT = row17.ADR_COMPLT;

						row17_HashRow.ADR_BATIM = row17.ADR_BATIM;

						row17_HashRow.ADR_ESCALIE = row17.ADR_ESCALIE;

						row17_HashRow.ADR_ETAGE = row17.ADR_ETAGE;

						row17_HashRow.ADR_APPART = row17.ADR_APPART;

						row17_HashRow.ADR_DISTRIB = row17.ADR_DISTRIB;

						row17_HashRow.ADR_NORU = row17.ADR_NORU;

						row17_HashRow.ADR_CDRU = row17.ADR_CDRU;

						row17_HashRow.ADR_RUE1 = row17.ADR_RUE1;

						row17_HashRow.ADR_RUE2 = row17.ADR_RUE2;

						row17_HashRow.ADR_CP = row17.ADR_CP;

						row17_HashRow.ADR_LOC = row17.ADR_LOC;

						row17_HashRow.ADR_CDX = row17.ADR_CDX;

						row17_HashRow.ADR_PAY = row17.ADR_PAY;

						row17_HashRow.DT_ALIM = row17.DT_ALIM;

						tHash_Lookup_row17.put(row17_HashRow);

						tos_count_tAdvancedHash_row17++;

						/**
						 * [tAdvancedHash_row17 main ] stop
						 */

						/**
						 * [tAdvancedHash_row17 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						/**
						 * [tAdvancedHash_row17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row17 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row17";

						/**
						 * [tAdvancedHash_row17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 process_data_end ] start
						 */

						currentComponent = "tDBInput_10";

						/**
						 * [tDBInput_10 process_data_end ] stop
						 */

						/**
						 * [tDBInput_10 end ] start
						 */

						currentComponent = "tDBInput_10";

					}
				} finally {
					if (rs_tDBInput_10 != null) {
						rs_tDBInput_10.close();
					}
					if (stmt_tDBInput_10 != null) {
						stmt_tDBInput_10.close();
					}
					if (conn_tDBInput_10 != null && !conn_tDBInput_10.isClosed()) {

						conn_tDBInput_10.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_10_NB_LINE", nb_line_tDBInput_10);

				ok_Hash.put("tDBInput_10", true);
				end_Hash.put("tDBInput_10", System.currentTimeMillis());

				/**
				 * [tDBInput_10 end ] stop
				 */

				/**
				 * [tAdvancedHash_row17 end ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				tHash_Lookup_row17.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17");
				}

				ok_Hash.put("tAdvancedHash_row17", true);
				end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row17 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_10 finally ] start
				 */

				currentComponent = "tDBInput_10";

				/**
				 * [tDBInput_10 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row17 finally ] start
				 */

				currentComponent = "tAdvancedHash_row17";

				/**
				 * [tAdvancedHash_row17 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_10_SUBPROCESS_STATE", 1);
	}

	public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public BigDecimal CD_HIERORG;

		public BigDecimal getCD_HIERORG() {
			return this.CD_HIERORG;
		}

		public BigDecimal CD_ENT_HIER;

		public BigDecimal getCD_ENT_HIER() {
			return this.CD_ENT_HIER;
		}

		public String TY_ENT_HIER;

		public String getTY_ENT_HIER() {
			return this.TY_ENT_HIER;
		}

		public Integer CD_PROFOND;

		public Integer getCD_PROFOND() {
			return this.CD_PROFOND;
		}

		public String CD_HIERAR;

		public String getCD_HIERAR() {
			return this.CD_HIERAR;
		}

		public String CD_HIERAR1;

		public String getCD_HIERAR1() {
			return this.CD_HIERAR1;
		}

		public String CD_HIERAR2;

		public String getCD_HIERAR2() {
			return this.CD_HIERAR2;
		}

		public String CD_HIERAR3;

		public String getCD_HIERAR3() {
			return this.CD_HIERAR3;
		}

		public String CD_HIERAR4;

		public String getCD_HIERAR4() {
			return this.CD_HIERAR4;
		}

		public String CD_HIERAR5;

		public String getCD_HIERAR5() {
			return this.CD_HIERAR5;
		}

		public String CD_HIERAR6;

		public String getCD_HIERAR6() {
			return this.CD_HIERAR6;
		}

		public String CD_HIERAR7;

		public String getCD_HIERAR7() {
			return this.CD_HIERAR7;
		}

		public String CD_HIERAR8;

		public String getCD_HIERAR8() {
			return this.CD_HIERAR8;
		}

		public String CD_HIERAR9;

		public String getCD_HIERAR9() {
			return this.CD_HIERAR9;
		}

		public String LB_CODE;

		public String getLB_CODE() {
			return this.LB_CODE;
		}

		public String LB_CODE1;

		public String getLB_CODE1() {
			return this.LB_CODE1;
		}

		public String LB_CODE2;

		public String getLB_CODE2() {
			return this.LB_CODE2;
		}

		public String LB_CODE3;

		public String getLB_CODE3() {
			return this.LB_CODE3;
		}

		public String LB_CODE4;

		public String getLB_CODE4() {
			return this.LB_CODE4;
		}

		public String LB_CODE5;

		public String getLB_CODE5() {
			return this.LB_CODE5;
		}

		public String LB_CODE6;

		public String getLB_CODE6() {
			return this.LB_CODE6;
		}

		public String LB_CODE7;

		public String getLB_CODE7() {
			return this.LB_CODE7;
		}

		public String LB_CODE8;

		public String getLB_CODE8() {
			return this.LB_CODE8;
		}

		public String LB_CODE9;

		public String getLB_CODE9() {
			return this.LB_CODE9;
		}

		public String CD_SUPP;

		public String getCD_SUPP() {
			return this.CD_SUPP;
		}

		public String HRD_CONTACT;

		public String getHRD_CONTACT() {
			return this.HRD_CONTACT;
		}

		public String HRF_CONTACT;

		public String getHRF_CONTACT() {
			return this.HRF_CONTACT;
		}

		public String LB_CORRESP;

		public String getLB_CORRESP() {
			return this.LB_CORRESP;
		}

		public String LB_CORRESP_CPLT;

		public String getLB_CORRESP_CPLT() {
			return this.LB_CORRESP_CPLT;
		}

		public String ON_ROUGE;

		public String getON_ROUGE() {
			return this.ON_ROUGE;
		}

		public String TEL_CORRESP;

		public String getTEL_CORRESP() {
			return this.TEL_CORRESP;
		}

		public String TEL_FAXCOR;

		public String getTEL_FAXCOR() {
			return this.TEL_FAXCOR;
		}

		public String MAIL_CORRESP;

		public String getMAIL_CORRESP() {
			return this.MAIL_CORRESP;
		}

		public String ADR_DESTINA;

		public String getADR_DESTINA() {
			return this.ADR_DESTINA;
		}

		public String ADR_COMPLT;

		public String getADR_COMPLT() {
			return this.ADR_COMPLT;
		}

		public String ADR_BATIM;

		public String getADR_BATIM() {
			return this.ADR_BATIM;
		}

		public String ADR_ESCALIE;

		public String getADR_ESCALIE() {
			return this.ADR_ESCALIE;
		}

		public String ADR_ETAGE;

		public String getADR_ETAGE() {
			return this.ADR_ETAGE;
		}

		public String ADR_APPART;

		public String getADR_APPART() {
			return this.ADR_APPART;
		}

		public String ADR_DISTRIB;

		public String getADR_DISTRIB() {
			return this.ADR_DISTRIB;
		}

		public String ADR_NORU;

		public String getADR_NORU() {
			return this.ADR_NORU;
		}

		public String ADR_CDRU;

		public String getADR_CDRU() {
			return this.ADR_CDRU;
		}

		public String ADR_RUE1;

		public String getADR_RUE1() {
			return this.ADR_RUE1;
		}

		public String ADR_RUE2;

		public String getADR_RUE2() {
			return this.ADR_RUE2;
		}

		public String ADR_CP;

		public String getADR_CP() {
			return this.ADR_CP;
		}

		public String ADR_LOC;

		public String getADR_LOC() {
			return this.ADR_LOC;
		}

		public String ADR_CDX;

		public String getADR_CDX() {
			return this.ADR_CDX;
		}

		public String ADR_PAY;

		public String getADR_PAY() {
			return this.ADR_PAY;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CD_HIERORG == null) ? 0 : new Double(this.CD_HIERORG.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.CD_HIERORG == null) {
				if (other.CD_HIERORG != null)
					return false;

			} else if ((other.CD_HIERORG == null) || (this.CD_HIERORG.compareTo(other.CD_HIERORG) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_HIERORG = this.CD_HIERORG;
			other.CD_ENT_HIER = this.CD_ENT_HIER;
			other.TY_ENT_HIER = this.TY_ENT_HIER;
			other.CD_PROFOND = this.CD_PROFOND;
			other.CD_HIERAR = this.CD_HIERAR;
			other.CD_HIERAR1 = this.CD_HIERAR1;
			other.CD_HIERAR2 = this.CD_HIERAR2;
			other.CD_HIERAR3 = this.CD_HIERAR3;
			other.CD_HIERAR4 = this.CD_HIERAR4;
			other.CD_HIERAR5 = this.CD_HIERAR5;
			other.CD_HIERAR6 = this.CD_HIERAR6;
			other.CD_HIERAR7 = this.CD_HIERAR7;
			other.CD_HIERAR8 = this.CD_HIERAR8;
			other.CD_HIERAR9 = this.CD_HIERAR9;
			other.LB_CODE = this.LB_CODE;
			other.LB_CODE1 = this.LB_CODE1;
			other.LB_CODE2 = this.LB_CODE2;
			other.LB_CODE3 = this.LB_CODE3;
			other.LB_CODE4 = this.LB_CODE4;
			other.LB_CODE5 = this.LB_CODE5;
			other.LB_CODE6 = this.LB_CODE6;
			other.LB_CODE7 = this.LB_CODE7;
			other.LB_CODE8 = this.LB_CODE8;
			other.LB_CODE9 = this.LB_CODE9;
			other.CD_SUPP = this.CD_SUPP;
			other.HRD_CONTACT = this.HRD_CONTACT;
			other.HRF_CONTACT = this.HRF_CONTACT;
			other.LB_CORRESP = this.LB_CORRESP;
			other.LB_CORRESP_CPLT = this.LB_CORRESP_CPLT;
			other.ON_ROUGE = this.ON_ROUGE;
			other.TEL_CORRESP = this.TEL_CORRESP;
			other.TEL_FAXCOR = this.TEL_FAXCOR;
			other.MAIL_CORRESP = this.MAIL_CORRESP;
			other.ADR_DESTINA = this.ADR_DESTINA;
			other.ADR_COMPLT = this.ADR_COMPLT;
			other.ADR_BATIM = this.ADR_BATIM;
			other.ADR_ESCALIE = this.ADR_ESCALIE;
			other.ADR_ETAGE = this.ADR_ETAGE;
			other.ADR_APPART = this.ADR_APPART;
			other.ADR_DISTRIB = this.ADR_DISTRIB;
			other.ADR_NORU = this.ADR_NORU;
			other.ADR_CDRU = this.ADR_CDRU;
			other.ADR_RUE1 = this.ADR_RUE1;
			other.ADR_RUE2 = this.ADR_RUE2;
			other.ADR_CP = this.ADR_CP;
			other.ADR_LOC = this.ADR_LOC;
			other.ADR_CDX = this.ADR_CDX;
			other.ADR_PAY = this.ADR_PAY;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.CD_HIERORG = this.CD_HIERORG;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_HIERORG = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.CD_HIERORG);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ENT_HIER = (BigDecimal) ois.readObject();

				this.TY_ENT_HIER = readString(dis, ois);

				this.CD_PROFOND = readInteger(dis, ois);

				this.CD_HIERAR = readString(dis, ois);

				this.CD_HIERAR1 = readString(dis, ois);

				this.CD_HIERAR2 = readString(dis, ois);

				this.CD_HIERAR3 = readString(dis, ois);

				this.CD_HIERAR4 = readString(dis, ois);

				this.CD_HIERAR5 = readString(dis, ois);

				this.CD_HIERAR6 = readString(dis, ois);

				this.CD_HIERAR7 = readString(dis, ois);

				this.CD_HIERAR8 = readString(dis, ois);

				this.CD_HIERAR9 = readString(dis, ois);

				this.LB_CODE = readString(dis, ois);

				this.LB_CODE1 = readString(dis, ois);

				this.LB_CODE2 = readString(dis, ois);

				this.LB_CODE3 = readString(dis, ois);

				this.LB_CODE4 = readString(dis, ois);

				this.LB_CODE5 = readString(dis, ois);

				this.LB_CODE6 = readString(dis, ois);

				this.LB_CODE7 = readString(dis, ois);

				this.LB_CODE8 = readString(dis, ois);

				this.LB_CODE9 = readString(dis, ois);

				this.CD_SUPP = readString(dis, ois);

				this.HRD_CONTACT = readString(dis, ois);

				this.HRF_CONTACT = readString(dis, ois);

				this.LB_CORRESP = readString(dis, ois);

				this.LB_CORRESP_CPLT = readString(dis, ois);

				this.ON_ROUGE = readString(dis, ois);

				this.TEL_CORRESP = readString(dis, ois);

				this.TEL_FAXCOR = readString(dis, ois);

				this.MAIL_CORRESP = readString(dis, ois);

				this.ADR_DESTINA = readString(dis, ois);

				this.ADR_COMPLT = readString(dis, ois);

				this.ADR_BATIM = readString(dis, ois);

				this.ADR_ESCALIE = readString(dis, ois);

				this.ADR_ETAGE = readString(dis, ois);

				this.ADR_APPART = readString(dis, ois);

				this.ADR_DISTRIB = readString(dis, ois);

				this.ADR_NORU = readString(dis, ois);

				this.ADR_CDRU = readString(dis, ois);

				this.ADR_RUE1 = readString(dis, ois);

				this.ADR_RUE2 = readString(dis, ois);

				this.ADR_CP = readString(dis, ois);

				this.ADR_LOC = readString(dis, ois);

				this.ADR_CDX = readString(dis, ois);

				this.ADR_PAY = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				oos.writeObject(this.CD_ENT_HIER);

				writeString(this.TY_ENT_HIER, dos, oos);

				writeInteger(this.CD_PROFOND, dos, oos);

				writeString(this.CD_HIERAR, dos, oos);

				writeString(this.CD_HIERAR1, dos, oos);

				writeString(this.CD_HIERAR2, dos, oos);

				writeString(this.CD_HIERAR3, dos, oos);

				writeString(this.CD_HIERAR4, dos, oos);

				writeString(this.CD_HIERAR5, dos, oos);

				writeString(this.CD_HIERAR6, dos, oos);

				writeString(this.CD_HIERAR7, dos, oos);

				writeString(this.CD_HIERAR8, dos, oos);

				writeString(this.CD_HIERAR9, dos, oos);

				writeString(this.LB_CODE, dos, oos);

				writeString(this.LB_CODE1, dos, oos);

				writeString(this.LB_CODE2, dos, oos);

				writeString(this.LB_CODE3, dos, oos);

				writeString(this.LB_CODE4, dos, oos);

				writeString(this.LB_CODE5, dos, oos);

				writeString(this.LB_CODE6, dos, oos);

				writeString(this.LB_CODE7, dos, oos);

				writeString(this.LB_CODE8, dos, oos);

				writeString(this.LB_CODE9, dos, oos);

				writeString(this.CD_SUPP, dos, oos);

				writeString(this.HRD_CONTACT, dos, oos);

				writeString(this.HRF_CONTACT, dos, oos);

				writeString(this.LB_CORRESP, dos, oos);

				writeString(this.LB_CORRESP_CPLT, dos, oos);

				writeString(this.ON_ROUGE, dos, oos);

				writeString(this.TEL_CORRESP, dos, oos);

				writeString(this.TEL_FAXCOR, dos, oos);

				writeString(this.MAIL_CORRESP, dos, oos);

				writeString(this.ADR_DESTINA, dos, oos);

				writeString(this.ADR_COMPLT, dos, oos);

				writeString(this.ADR_BATIM, dos, oos);

				writeString(this.ADR_ESCALIE, dos, oos);

				writeString(this.ADR_ETAGE, dos, oos);

				writeString(this.ADR_APPART, dos, oos);

				writeString(this.ADR_DISTRIB, dos, oos);

				writeString(this.ADR_NORU, dos, oos);

				writeString(this.ADR_CDRU, dos, oos);

				writeString(this.ADR_RUE1, dos, oos);

				writeString(this.ADR_RUE2, dos, oos);

				writeString(this.ADR_CP, dos, oos);

				writeString(this.ADR_LOC, dos, oos);

				writeString(this.ADR_CDX, dos, oos);

				writeString(this.ADR_PAY, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_HIERORG=" + String.valueOf(CD_HIERORG));
			sb.append(",CD_ENT_HIER=" + String.valueOf(CD_ENT_HIER));
			sb.append(",TY_ENT_HIER=" + TY_ENT_HIER);
			sb.append(",CD_PROFOND=" + String.valueOf(CD_PROFOND));
			sb.append(",CD_HIERAR=" + CD_HIERAR);
			sb.append(",CD_HIERAR1=" + CD_HIERAR1);
			sb.append(",CD_HIERAR2=" + CD_HIERAR2);
			sb.append(",CD_HIERAR3=" + CD_HIERAR3);
			sb.append(",CD_HIERAR4=" + CD_HIERAR4);
			sb.append(",CD_HIERAR5=" + CD_HIERAR5);
			sb.append(",CD_HIERAR6=" + CD_HIERAR6);
			sb.append(",CD_HIERAR7=" + CD_HIERAR7);
			sb.append(",CD_HIERAR8=" + CD_HIERAR8);
			sb.append(",CD_HIERAR9=" + CD_HIERAR9);
			sb.append(",LB_CODE=" + LB_CODE);
			sb.append(",LB_CODE1=" + LB_CODE1);
			sb.append(",LB_CODE2=" + LB_CODE2);
			sb.append(",LB_CODE3=" + LB_CODE3);
			sb.append(",LB_CODE4=" + LB_CODE4);
			sb.append(",LB_CODE5=" + LB_CODE5);
			sb.append(",LB_CODE6=" + LB_CODE6);
			sb.append(",LB_CODE7=" + LB_CODE7);
			sb.append(",LB_CODE8=" + LB_CODE8);
			sb.append(",LB_CODE9=" + LB_CODE9);
			sb.append(",CD_SUPP=" + CD_SUPP);
			sb.append(",HRD_CONTACT=" + HRD_CONTACT);
			sb.append(",HRF_CONTACT=" + HRF_CONTACT);
			sb.append(",LB_CORRESP=" + LB_CORRESP);
			sb.append(",LB_CORRESP_CPLT=" + LB_CORRESP_CPLT);
			sb.append(",ON_ROUGE=" + ON_ROUGE);
			sb.append(",TEL_CORRESP=" + TEL_CORRESP);
			sb.append(",TEL_FAXCOR=" + TEL_FAXCOR);
			sb.append(",MAIL_CORRESP=" + MAIL_CORRESP);
			sb.append(",ADR_DESTINA=" + ADR_DESTINA);
			sb.append(",ADR_COMPLT=" + ADR_COMPLT);
			sb.append(",ADR_BATIM=" + ADR_BATIM);
			sb.append(",ADR_ESCALIE=" + ADR_ESCALIE);
			sb.append(",ADR_ETAGE=" + ADR_ETAGE);
			sb.append(",ADR_APPART=" + ADR_APPART);
			sb.append(",ADR_DISTRIB=" + ADR_DISTRIB);
			sb.append(",ADR_NORU=" + ADR_NORU);
			sb.append(",ADR_CDRU=" + ADR_CDRU);
			sb.append(",ADR_RUE1=" + ADR_RUE1);
			sb.append(",ADR_RUE2=" + ADR_RUE2);
			sb.append(",ADR_CP=" + ADR_CP);
			sb.append(",ADR_LOC=" + ADR_LOC);
			sb.append(",ADR_CDX=" + ADR_CDX);
			sb.append(",ADR_PAY=" + ADR_PAY);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_HIERORG, other.CD_HIERORG);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row14Struct row14 = new row14Struct();

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tDBInput_14 - inputs:(after_tDBInput_13) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_5 - inputs:(row13,row14,row15,row20,row21)
				// outputs:(copyOfout2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct>getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tDBInput_14 begin ] start
				 */

				ok_Hash.put("tDBInput_14", false);
				start_Hash.put("tDBInput_14", System.currentTimeMillis());

				currentComponent = "tDBInput_14";

				int tos_count_tDBInput_14 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_14 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_14 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_14 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_14, talendToDBArray_tDBInput_14);
				int nb_line_tDBInput_14 = 0;
				java.sql.Connection conn_tDBInput_14 = null;
				String driverClass_tDBInput_14 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_14 = java.lang.Class.forName(driverClass_tDBInput_14);
				String dbUser_tDBInput_14 = "";

				final String decryptedPassword_tDBInput_14 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:dIid/7gJ7lisYF+Mz9WJDZPCrNBVqLh6de9l/g==");

				String dbPwd_tDBInput_14 = decryptedPassword_tDBInput_14;

				String port_tDBInput_14 = "1433";
				String dbname_tDBInput_14 = "ACGINFO1";
				String url_tDBInput_14 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_14)) {
					url_tDBInput_14 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_14)) {
					url_tDBInput_14 += "//" + "ACGINFO1";
				}
				url_tDBInput_14 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_14 = "";

				conn_tDBInput_14 = java.sql.DriverManager.getConnection(url_tDBInput_14, dbUser_tDBInput_14,
						dbPwd_tDBInput_14);

				java.sql.Statement stmt_tDBInput_14 = conn_tDBInput_14.createStatement();

				String dbquery_tDBInput_14 = "SELECT ORGANISAT_GIM.CD_SOCIETE,\n		ORGANISAT_GIM.CD_HIERORG,\n		ORGANISAT_GIM.CD_ENT_HIER,\n		ORGANISAT_GIM.TY_ENT_HIER,\n"
						+ "		ORGANISAT_GIM.CD_PROFOND,\n		ORGANISAT_GIM.CD_HIERAR,\n		ORGANISAT_GIM.CD_HIERAR1,\n		ORGANISAT_GIM.CD_HIERAR2,\n		ORGANIS"
						+ "AT_GIM.CD_HIERAR3,\n		ORGANISAT_GIM.CD_HIERAR4,\n		ORGANISAT_GIM.CD_HIERAR5,\n		ORGANISAT_GIM.CD_HIERAR6,\n		ORGANISAT_GIM.C"
						+ "D_HIERAR7,\n		ORGANISAT_GIM.CD_HIERAR8,\n		ORGANISAT_GIM.CD_HIERAR9,\n		ORGANISAT_GIM.LB_CODE,\n		ORGANISAT_GIM.LB_CODE1,\n		"
						+ "ORGANISAT_GIM.LB_CODE2,\n		ORGANISAT_GIM.LB_CODE3,\n		ORGANISAT_GIM.LB_CODE4,\n		ORGANISAT_GIM.LB_CODE5,\n		ORGANISAT_GIM.LB"
						+ "_CODE6,\n		ORGANISAT_GIM.LB_CODE7,\n		ORGANISAT_GIM.LB_CODE8,\n		ORGANISAT_GIM.LB_CODE9,\n		ORGANISAT_GIM.CD_SUPP,\n		ORGANIS"
						+ "AT_GIM.HRD_CONTACT,\n		ORGANISAT_GIM.HRF_CONTACT,\n		ORGANISAT_GIM.LB_CORRESP,\n		ORGANISAT_GIM.LB_CORRESP_CPLT,\n		ORGANISA"
						+ "T_GIM.ON_ROUGE,\n		ORGANISAT_GIM.TEL_CORRESP,\n		ORGANISAT_GIM.TEL_FAXCOR,\n		ORGANISAT_GIM.MAIL_CORRESP,\n		ORGANISAT_GIM.A"
						+ "DR_DESTINA,\n		ORGANISAT_GIM.ADR_COMPLT,\n		ORGANISAT_GIM.ADR_BATIM,\n		ORGANISAT_GIM.ADR_ESCALIE,\n		ORGANISAT_GIM.ADR_ETAG"
						+ "E,\n		ORGANISAT_GIM.ADR_APPART,\n		ORGANISAT_GIM.ADR_DISTRIB,\n		ORGANISAT_GIM.ADR_NORU,\n		ORGANISAT_GIM.ADR_CDRU,\n		ORGANI"
						+ "SAT_GIM.ADR_RUE1,\n		ORGANISAT_GIM.ADR_RUE2,\n		ORGANISAT_GIM.ADR_CP,\n		ORGANISAT_GIM.ADR_LOC,\n		ORGANISAT_GIM.ADR_CDX,\n		"
						+ "ORGANISAT_GIM.ADR_PAY,\n		ORGANISAT_GIM.DT_ALIM\nFROM	ORGANISAT_GIM";

				globalMap.put("tDBInput_14_QUERY", dbquery_tDBInput_14);
				java.sql.ResultSet rs_tDBInput_14 = null;

				try {
					rs_tDBInput_14 = stmt_tDBInput_14.executeQuery(dbquery_tDBInput_14);
					java.sql.ResultSetMetaData rsmd_tDBInput_14 = rs_tDBInput_14.getMetaData();
					int colQtyInRs_tDBInput_14 = rsmd_tDBInput_14.getColumnCount();

					String tmpContent_tDBInput_14 = null;

					while (rs_tDBInput_14.next()) {
						nb_line_tDBInput_14++;

						if (colQtyInRs_tDBInput_14 < 1) {
							row14.CD_SOCIETE = null;
						} else {

							row14.CD_SOCIETE = rs_tDBInput_14.getBigDecimal(1);
							if (rs_tDBInput_14.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 2) {
							row14.CD_HIERORG = null;
						} else {

							row14.CD_HIERORG = rs_tDBInput_14.getBigDecimal(2);
							if (rs_tDBInput_14.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_14 < 3) {
							row14.CD_ENT_HIER = null;
						} else {

							row14.CD_ENT_HIER = rs_tDBInput_14.getBigDecimal(3);
							if (rs_tDBInput_14.wasNull()) {
								row14.CD_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 4) {
							row14.TY_ENT_HIER = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(4);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.TY_ENT_HIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.TY_ENT_HIER = tmpContent_tDBInput_14;
								}
							} else {
								row14.TY_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 5) {
							row14.CD_PROFOND = null;
						} else {

							row14.CD_PROFOND = rs_tDBInput_14.getInt(5);
							if (rs_tDBInput_14.wasNull()) {
								row14.CD_PROFOND = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 6) {
							row14.CD_HIERAR = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(6);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 7) {
							row14.CD_HIERAR1 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(7);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR1 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR1 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 8) {
							row14.CD_HIERAR2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(8);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR2 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 9) {
							row14.CD_HIERAR3 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(9);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR3 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR3 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 10) {
							row14.CD_HIERAR4 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(10);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR4 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR4 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 11) {
							row14.CD_HIERAR5 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(11);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR5 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR5 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 12) {
							row14.CD_HIERAR6 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(12);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR6 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR6 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 13) {
							row14.CD_HIERAR7 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(13);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR7 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR7 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 14) {
							row14.CD_HIERAR8 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(14);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR8 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR8 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 15) {
							row14.CD_HIERAR9 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(15);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_HIERAR9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_HIERAR9 = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_HIERAR9 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 16) {
							row14.LB_CODE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(16);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 17) {
							row14.LB_CODE1 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(17);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE1 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 18) {
							row14.LB_CODE2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(18);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE2 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 19) {
							row14.LB_CODE3 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(19);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE3 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE3 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 20) {
							row14.LB_CODE4 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(20);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE4 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE4 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 21) {
							row14.LB_CODE5 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(21);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE5 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE5 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 22) {
							row14.LB_CODE6 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(22);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE6 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE6 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 23) {
							row14.LB_CODE7 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(23);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE7 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE7 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 24) {
							row14.LB_CODE8 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(24);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE8 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE8 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 25) {
							row14.LB_CODE9 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(25);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CODE9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CODE9 = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CODE9 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 26) {
							row14.CD_SUPP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(26);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.CD_SUPP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.CD_SUPP = tmpContent_tDBInput_14;
								}
							} else {
								row14.CD_SUPP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 27) {
							row14.HRD_CONTACT = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(27);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.HRD_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.HRD_CONTACT = tmpContent_tDBInput_14;
								}
							} else {
								row14.HRD_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 28) {
							row14.HRF_CONTACT = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(28);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.HRF_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.HRF_CONTACT = tmpContent_tDBInput_14;
								}
							} else {
								row14.HRF_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 29) {
							row14.LB_CORRESP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(29);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CORRESP = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 30) {
							row14.LB_CORRESP_CPLT = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(30);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.LB_CORRESP_CPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.LB_CORRESP_CPLT = tmpContent_tDBInput_14;
								}
							} else {
								row14.LB_CORRESP_CPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 31) {
							row14.ON_ROUGE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(31);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ON_ROUGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ON_ROUGE = tmpContent_tDBInput_14;
								}
							} else {
								row14.ON_ROUGE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 32) {
							row14.TEL_CORRESP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(32);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.TEL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.TEL_CORRESP = tmpContent_tDBInput_14;
								}
							} else {
								row14.TEL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 33) {
							row14.TEL_FAXCOR = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(33);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.TEL_FAXCOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.TEL_FAXCOR = tmpContent_tDBInput_14;
								}
							} else {
								row14.TEL_FAXCOR = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 34) {
							row14.MAIL_CORRESP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(34);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.MAIL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.MAIL_CORRESP = tmpContent_tDBInput_14;
								}
							} else {
								row14.MAIL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 35) {
							row14.ADR_DESTINA = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(35);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_DESTINA = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 36) {
							row14.ADR_COMPLT = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(36);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_COMPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_COMPLT = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_COMPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 37) {
							row14.ADR_BATIM = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(37);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_BATIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_BATIM = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_BATIM = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 38) {
							row14.ADR_ESCALIE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(38);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_ESCALIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_ESCALIE = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_ESCALIE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 39) {
							row14.ADR_ETAGE = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(39);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_ETAGE = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 40) {
							row14.ADR_APPART = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(40);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_APPART = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_APPART = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_APPART = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 41) {
							row14.ADR_DISTRIB = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(41);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_DISTRIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_DISTRIB = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_DISTRIB = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 42) {
							row14.ADR_NORU = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(42);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_NORU = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 43) {
							row14.ADR_CDRU = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(43);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_CDRU = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 44) {
							row14.ADR_RUE1 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(44);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_RUE1 = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 45) {
							row14.ADR_RUE2 = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(45);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_RUE2 = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 46) {
							row14.ADR_CP = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(46);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_CP = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 47) {
							row14.ADR_LOC = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(47);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_LOC = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 48) {
							row14.ADR_CDX = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(48);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_CDX = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_CDX = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_CDX = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 49) {
							row14.ADR_PAY = null;
						} else {

							tmpContent_tDBInput_14 = rs_tDBInput_14.getString(49);
							if (tmpContent_tDBInput_14 != null) {
								if (talendToDBList_tDBInput_14.contains(
										rsmd_tDBInput_14.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row14.ADR_PAY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_14);
								} else {
									row14.ADR_PAY = tmpContent_tDBInput_14;
								}
							} else {
								row14.ADR_PAY = null;
							}
						}
						if (colQtyInRs_tDBInput_14 < 50) {
							row14.DT_ALIM = null;
						} else {

							row14.DT_ALIM = mssqlGTU_tDBInput_14.getDate(rsmd_tDBInput_14, rs_tDBInput_14, 50);

						}

						/**
						 * [tDBInput_14 begin ] stop
						 */

						/**
						 * [tDBInput_14 main ] start
						 */

						currentComponent = "tDBInput_14";

						tos_count_tDBInput_14++;

						/**
						 * [tDBInput_14 main ] stop
						 */

						/**
						 * [tDBInput_14 process_data_begin ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 main ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
						}

						row14Struct row14_HashRow = new row14Struct();

						row14_HashRow.CD_SOCIETE = row14.CD_SOCIETE;

						row14_HashRow.CD_HIERORG = row14.CD_HIERORG;

						row14_HashRow.CD_ENT_HIER = row14.CD_ENT_HIER;

						row14_HashRow.TY_ENT_HIER = row14.TY_ENT_HIER;

						row14_HashRow.CD_PROFOND = row14.CD_PROFOND;

						row14_HashRow.CD_HIERAR = row14.CD_HIERAR;

						row14_HashRow.CD_HIERAR1 = row14.CD_HIERAR1;

						row14_HashRow.CD_HIERAR2 = row14.CD_HIERAR2;

						row14_HashRow.CD_HIERAR3 = row14.CD_HIERAR3;

						row14_HashRow.CD_HIERAR4 = row14.CD_HIERAR4;

						row14_HashRow.CD_HIERAR5 = row14.CD_HIERAR5;

						row14_HashRow.CD_HIERAR6 = row14.CD_HIERAR6;

						row14_HashRow.CD_HIERAR7 = row14.CD_HIERAR7;

						row14_HashRow.CD_HIERAR8 = row14.CD_HIERAR8;

						row14_HashRow.CD_HIERAR9 = row14.CD_HIERAR9;

						row14_HashRow.LB_CODE = row14.LB_CODE;

						row14_HashRow.LB_CODE1 = row14.LB_CODE1;

						row14_HashRow.LB_CODE2 = row14.LB_CODE2;

						row14_HashRow.LB_CODE3 = row14.LB_CODE3;

						row14_HashRow.LB_CODE4 = row14.LB_CODE4;

						row14_HashRow.LB_CODE5 = row14.LB_CODE5;

						row14_HashRow.LB_CODE6 = row14.LB_CODE6;

						row14_HashRow.LB_CODE7 = row14.LB_CODE7;

						row14_HashRow.LB_CODE8 = row14.LB_CODE8;

						row14_HashRow.LB_CODE9 = row14.LB_CODE9;

						row14_HashRow.CD_SUPP = row14.CD_SUPP;

						row14_HashRow.HRD_CONTACT = row14.HRD_CONTACT;

						row14_HashRow.HRF_CONTACT = row14.HRF_CONTACT;

						row14_HashRow.LB_CORRESP = row14.LB_CORRESP;

						row14_HashRow.LB_CORRESP_CPLT = row14.LB_CORRESP_CPLT;

						row14_HashRow.ON_ROUGE = row14.ON_ROUGE;

						row14_HashRow.TEL_CORRESP = row14.TEL_CORRESP;

						row14_HashRow.TEL_FAXCOR = row14.TEL_FAXCOR;

						row14_HashRow.MAIL_CORRESP = row14.MAIL_CORRESP;

						row14_HashRow.ADR_DESTINA = row14.ADR_DESTINA;

						row14_HashRow.ADR_COMPLT = row14.ADR_COMPLT;

						row14_HashRow.ADR_BATIM = row14.ADR_BATIM;

						row14_HashRow.ADR_ESCALIE = row14.ADR_ESCALIE;

						row14_HashRow.ADR_ETAGE = row14.ADR_ETAGE;

						row14_HashRow.ADR_APPART = row14.ADR_APPART;

						row14_HashRow.ADR_DISTRIB = row14.ADR_DISTRIB;

						row14_HashRow.ADR_NORU = row14.ADR_NORU;

						row14_HashRow.ADR_CDRU = row14.ADR_CDRU;

						row14_HashRow.ADR_RUE1 = row14.ADR_RUE1;

						row14_HashRow.ADR_RUE2 = row14.ADR_RUE2;

						row14_HashRow.ADR_CP = row14.ADR_CP;

						row14_HashRow.ADR_LOC = row14.ADR_LOC;

						row14_HashRow.ADR_CDX = row14.ADR_CDX;

						row14_HashRow.ADR_PAY = row14.ADR_PAY;

						row14_HashRow.DT_ALIM = row14.DT_ALIM;

						tHash_Lookup_row14.put(row14_HashRow);

						tos_count_tAdvancedHash_row14++;

						/**
						 * [tAdvancedHash_row14 main ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row14 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row14";

						/**
						 * [tAdvancedHash_row14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 process_data_end ] start
						 */

						currentComponent = "tDBInput_14";

						/**
						 * [tDBInput_14 process_data_end ] stop
						 */

						/**
						 * [tDBInput_14 end ] start
						 */

						currentComponent = "tDBInput_14";

					}
				} finally {
					if (rs_tDBInput_14 != null) {
						rs_tDBInput_14.close();
					}
					if (stmt_tDBInput_14 != null) {
						stmt_tDBInput_14.close();
					}
					if (conn_tDBInput_14 != null && !conn_tDBInput_14.isClosed()) {

						conn_tDBInput_14.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_14_NB_LINE", nb_line_tDBInput_14);

				ok_Hash.put("tDBInput_14", true);
				end_Hash.put("tDBInput_14", System.currentTimeMillis());

				/**
				 * [tDBInput_14 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_14 finally ] start
				 */

				currentComponent = "tDBInput_14";

				/**
				 * [tDBInput_14 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_14_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public BigDecimal CD_HIERORG;

		public BigDecimal getCD_HIERORG() {
			return this.CD_HIERORG;
		}

		public BigDecimal CD_ENT_HIER;

		public BigDecimal getCD_ENT_HIER() {
			return this.CD_ENT_HIER;
		}

		public String TY_ENT_HIER;

		public String getTY_ENT_HIER() {
			return this.TY_ENT_HIER;
		}

		public Integer CD_PROFOND;

		public Integer getCD_PROFOND() {
			return this.CD_PROFOND;
		}

		public String CD_HIERAR;

		public String getCD_HIERAR() {
			return this.CD_HIERAR;
		}

		public String CD_HIERAR1;

		public String getCD_HIERAR1() {
			return this.CD_HIERAR1;
		}

		public String CD_HIERAR2;

		public String getCD_HIERAR2() {
			return this.CD_HIERAR2;
		}

		public String CD_HIERAR3;

		public String getCD_HIERAR3() {
			return this.CD_HIERAR3;
		}

		public String CD_HIERAR4;

		public String getCD_HIERAR4() {
			return this.CD_HIERAR4;
		}

		public String CD_HIERAR5;

		public String getCD_HIERAR5() {
			return this.CD_HIERAR5;
		}

		public String CD_HIERAR6;

		public String getCD_HIERAR6() {
			return this.CD_HIERAR6;
		}

		public String CD_HIERAR7;

		public String getCD_HIERAR7() {
			return this.CD_HIERAR7;
		}

		public String CD_HIERAR8;

		public String getCD_HIERAR8() {
			return this.CD_HIERAR8;
		}

		public String CD_HIERAR9;

		public String getCD_HIERAR9() {
			return this.CD_HIERAR9;
		}

		public String LB_CODE;

		public String getLB_CODE() {
			return this.LB_CODE;
		}

		public String LB_CODE1;

		public String getLB_CODE1() {
			return this.LB_CODE1;
		}

		public String LB_CODE2;

		public String getLB_CODE2() {
			return this.LB_CODE2;
		}

		public String LB_CODE3;

		public String getLB_CODE3() {
			return this.LB_CODE3;
		}

		public String LB_CODE4;

		public String getLB_CODE4() {
			return this.LB_CODE4;
		}

		public String LB_CODE5;

		public String getLB_CODE5() {
			return this.LB_CODE5;
		}

		public String LB_CODE6;

		public String getLB_CODE6() {
			return this.LB_CODE6;
		}

		public String LB_CODE7;

		public String getLB_CODE7() {
			return this.LB_CODE7;
		}

		public String LB_CODE8;

		public String getLB_CODE8() {
			return this.LB_CODE8;
		}

		public String LB_CODE9;

		public String getLB_CODE9() {
			return this.LB_CODE9;
		}

		public String CD_SUPP;

		public String getCD_SUPP() {
			return this.CD_SUPP;
		}

		public String HRD_CONTACT;

		public String getHRD_CONTACT() {
			return this.HRD_CONTACT;
		}

		public String HRF_CONTACT;

		public String getHRF_CONTACT() {
			return this.HRF_CONTACT;
		}

		public String LB_CORRESP;

		public String getLB_CORRESP() {
			return this.LB_CORRESP;
		}

		public String LB_CORRESP_CPLT;

		public String getLB_CORRESP_CPLT() {
			return this.LB_CORRESP_CPLT;
		}

		public String ON_ROUGE;

		public String getON_ROUGE() {
			return this.ON_ROUGE;
		}

		public String TEL_CORRESP;

		public String getTEL_CORRESP() {
			return this.TEL_CORRESP;
		}

		public String TEL_FAXCOR;

		public String getTEL_FAXCOR() {
			return this.TEL_FAXCOR;
		}

		public String MAIL_CORRESP;

		public String getMAIL_CORRESP() {
			return this.MAIL_CORRESP;
		}

		public String ADR_DESTINA;

		public String getADR_DESTINA() {
			return this.ADR_DESTINA;
		}

		public String ADR_COMPLT;

		public String getADR_COMPLT() {
			return this.ADR_COMPLT;
		}

		public String ADR_BATIM;

		public String getADR_BATIM() {
			return this.ADR_BATIM;
		}

		public String ADR_ESCALIE;

		public String getADR_ESCALIE() {
			return this.ADR_ESCALIE;
		}

		public String ADR_ETAGE;

		public String getADR_ETAGE() {
			return this.ADR_ETAGE;
		}

		public String ADR_APPART;

		public String getADR_APPART() {
			return this.ADR_APPART;
		}

		public String ADR_DISTRIB;

		public String getADR_DISTRIB() {
			return this.ADR_DISTRIB;
		}

		public String ADR_NORU;

		public String getADR_NORU() {
			return this.ADR_NORU;
		}

		public String ADR_CDRU;

		public String getADR_CDRU() {
			return this.ADR_CDRU;
		}

		public String ADR_RUE1;

		public String getADR_RUE1() {
			return this.ADR_RUE1;
		}

		public String ADR_RUE2;

		public String getADR_RUE2() {
			return this.ADR_RUE2;
		}

		public String ADR_CP;

		public String getADR_CP() {
			return this.ADR_CP;
		}

		public String ADR_LOC;

		public String getADR_LOC() {
			return this.ADR_LOC;
		}

		public String ADR_CDX;

		public String getADR_CDX() {
			return this.ADR_CDX;
		}

		public String ADR_PAY;

		public String getADR_PAY() {
			return this.ADR_PAY;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result
						+ ((this.CD_HIERORG == null) ? 0 : new Double(this.CD_HIERORG.doubleValue()).hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.CD_HIERORG == null) {
				if (other.CD_HIERORG != null)
					return false;

			} else if ((other.CD_HIERORG == null) || (this.CD_HIERORG.compareTo(other.CD_HIERORG) != 0))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_HIERORG = this.CD_HIERORG;
			other.CD_ENT_HIER = this.CD_ENT_HIER;
			other.TY_ENT_HIER = this.TY_ENT_HIER;
			other.CD_PROFOND = this.CD_PROFOND;
			other.CD_HIERAR = this.CD_HIERAR;
			other.CD_HIERAR1 = this.CD_HIERAR1;
			other.CD_HIERAR2 = this.CD_HIERAR2;
			other.CD_HIERAR3 = this.CD_HIERAR3;
			other.CD_HIERAR4 = this.CD_HIERAR4;
			other.CD_HIERAR5 = this.CD_HIERAR5;
			other.CD_HIERAR6 = this.CD_HIERAR6;
			other.CD_HIERAR7 = this.CD_HIERAR7;
			other.CD_HIERAR8 = this.CD_HIERAR8;
			other.CD_HIERAR9 = this.CD_HIERAR9;
			other.LB_CODE = this.LB_CODE;
			other.LB_CODE1 = this.LB_CODE1;
			other.LB_CODE2 = this.LB_CODE2;
			other.LB_CODE3 = this.LB_CODE3;
			other.LB_CODE4 = this.LB_CODE4;
			other.LB_CODE5 = this.LB_CODE5;
			other.LB_CODE6 = this.LB_CODE6;
			other.LB_CODE7 = this.LB_CODE7;
			other.LB_CODE8 = this.LB_CODE8;
			other.LB_CODE9 = this.LB_CODE9;
			other.CD_SUPP = this.CD_SUPP;
			other.HRD_CONTACT = this.HRD_CONTACT;
			other.HRF_CONTACT = this.HRF_CONTACT;
			other.LB_CORRESP = this.LB_CORRESP;
			other.LB_CORRESP_CPLT = this.LB_CORRESP_CPLT;
			other.ON_ROUGE = this.ON_ROUGE;
			other.TEL_CORRESP = this.TEL_CORRESP;
			other.TEL_FAXCOR = this.TEL_FAXCOR;
			other.MAIL_CORRESP = this.MAIL_CORRESP;
			other.ADR_DESTINA = this.ADR_DESTINA;
			other.ADR_COMPLT = this.ADR_COMPLT;
			other.ADR_BATIM = this.ADR_BATIM;
			other.ADR_ESCALIE = this.ADR_ESCALIE;
			other.ADR_ETAGE = this.ADR_ETAGE;
			other.ADR_APPART = this.ADR_APPART;
			other.ADR_DISTRIB = this.ADR_DISTRIB;
			other.ADR_NORU = this.ADR_NORU;
			other.ADR_CDRU = this.ADR_CDRU;
			other.ADR_RUE1 = this.ADR_RUE1;
			other.ADR_RUE2 = this.ADR_RUE2;
			other.ADR_CP = this.ADR_CP;
			other.ADR_LOC = this.ADR_LOC;
			other.ADR_CDX = this.ADR_CDX;
			other.ADR_PAY = this.ADR_PAY;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.CD_HIERORG = this.CD_HIERORG;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_HIERORG = (BigDecimal) dis.readObject();

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// BigDecimal

				dos.writeObject(this.CD_HIERORG);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ENT_HIER = (BigDecimal) ois.readObject();

				this.TY_ENT_HIER = readString(dis, ois);

				this.CD_PROFOND = readInteger(dis, ois);

				this.CD_HIERAR = readString(dis, ois);

				this.CD_HIERAR1 = readString(dis, ois);

				this.CD_HIERAR2 = readString(dis, ois);

				this.CD_HIERAR3 = readString(dis, ois);

				this.CD_HIERAR4 = readString(dis, ois);

				this.CD_HIERAR5 = readString(dis, ois);

				this.CD_HIERAR6 = readString(dis, ois);

				this.CD_HIERAR7 = readString(dis, ois);

				this.CD_HIERAR8 = readString(dis, ois);

				this.CD_HIERAR9 = readString(dis, ois);

				this.LB_CODE = readString(dis, ois);

				this.LB_CODE1 = readString(dis, ois);

				this.LB_CODE2 = readString(dis, ois);

				this.LB_CODE3 = readString(dis, ois);

				this.LB_CODE4 = readString(dis, ois);

				this.LB_CODE5 = readString(dis, ois);

				this.LB_CODE6 = readString(dis, ois);

				this.LB_CODE7 = readString(dis, ois);

				this.LB_CODE8 = readString(dis, ois);

				this.LB_CODE9 = readString(dis, ois);

				this.CD_SUPP = readString(dis, ois);

				this.HRD_CONTACT = readString(dis, ois);

				this.HRF_CONTACT = readString(dis, ois);

				this.LB_CORRESP = readString(dis, ois);

				this.LB_CORRESP_CPLT = readString(dis, ois);

				this.ON_ROUGE = readString(dis, ois);

				this.TEL_CORRESP = readString(dis, ois);

				this.TEL_FAXCOR = readString(dis, ois);

				this.MAIL_CORRESP = readString(dis, ois);

				this.ADR_DESTINA = readString(dis, ois);

				this.ADR_COMPLT = readString(dis, ois);

				this.ADR_BATIM = readString(dis, ois);

				this.ADR_ESCALIE = readString(dis, ois);

				this.ADR_ETAGE = readString(dis, ois);

				this.ADR_APPART = readString(dis, ois);

				this.ADR_DISTRIB = readString(dis, ois);

				this.ADR_NORU = readString(dis, ois);

				this.ADR_CDRU = readString(dis, ois);

				this.ADR_RUE1 = readString(dis, ois);

				this.ADR_RUE2 = readString(dis, ois);

				this.ADR_CP = readString(dis, ois);

				this.ADR_LOC = readString(dis, ois);

				this.ADR_CDX = readString(dis, ois);

				this.ADR_PAY = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				oos.writeObject(this.CD_ENT_HIER);

				writeString(this.TY_ENT_HIER, dos, oos);

				writeInteger(this.CD_PROFOND, dos, oos);

				writeString(this.CD_HIERAR, dos, oos);

				writeString(this.CD_HIERAR1, dos, oos);

				writeString(this.CD_HIERAR2, dos, oos);

				writeString(this.CD_HIERAR3, dos, oos);

				writeString(this.CD_HIERAR4, dos, oos);

				writeString(this.CD_HIERAR5, dos, oos);

				writeString(this.CD_HIERAR6, dos, oos);

				writeString(this.CD_HIERAR7, dos, oos);

				writeString(this.CD_HIERAR8, dos, oos);

				writeString(this.CD_HIERAR9, dos, oos);

				writeString(this.LB_CODE, dos, oos);

				writeString(this.LB_CODE1, dos, oos);

				writeString(this.LB_CODE2, dos, oos);

				writeString(this.LB_CODE3, dos, oos);

				writeString(this.LB_CODE4, dos, oos);

				writeString(this.LB_CODE5, dos, oos);

				writeString(this.LB_CODE6, dos, oos);

				writeString(this.LB_CODE7, dos, oos);

				writeString(this.LB_CODE8, dos, oos);

				writeString(this.LB_CODE9, dos, oos);

				writeString(this.CD_SUPP, dos, oos);

				writeString(this.HRD_CONTACT, dos, oos);

				writeString(this.HRF_CONTACT, dos, oos);

				writeString(this.LB_CORRESP, dos, oos);

				writeString(this.LB_CORRESP_CPLT, dos, oos);

				writeString(this.ON_ROUGE, dos, oos);

				writeString(this.TEL_CORRESP, dos, oos);

				writeString(this.TEL_FAXCOR, dos, oos);

				writeString(this.MAIL_CORRESP, dos, oos);

				writeString(this.ADR_DESTINA, dos, oos);

				writeString(this.ADR_COMPLT, dos, oos);

				writeString(this.ADR_BATIM, dos, oos);

				writeString(this.ADR_ESCALIE, dos, oos);

				writeString(this.ADR_ETAGE, dos, oos);

				writeString(this.ADR_APPART, dos, oos);

				writeString(this.ADR_DISTRIB, dos, oos);

				writeString(this.ADR_NORU, dos, oos);

				writeString(this.ADR_CDRU, dos, oos);

				writeString(this.ADR_RUE1, dos, oos);

				writeString(this.ADR_RUE2, dos, oos);

				writeString(this.ADR_CP, dos, oos);

				writeString(this.ADR_LOC, dos, oos);

				writeString(this.ADR_CDX, dos, oos);

				writeString(this.ADR_PAY, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_HIERORG=" + String.valueOf(CD_HIERORG));
			sb.append(",CD_ENT_HIER=" + String.valueOf(CD_ENT_HIER));
			sb.append(",TY_ENT_HIER=" + TY_ENT_HIER);
			sb.append(",CD_PROFOND=" + String.valueOf(CD_PROFOND));
			sb.append(",CD_HIERAR=" + CD_HIERAR);
			sb.append(",CD_HIERAR1=" + CD_HIERAR1);
			sb.append(",CD_HIERAR2=" + CD_HIERAR2);
			sb.append(",CD_HIERAR3=" + CD_HIERAR3);
			sb.append(",CD_HIERAR4=" + CD_HIERAR4);
			sb.append(",CD_HIERAR5=" + CD_HIERAR5);
			sb.append(",CD_HIERAR6=" + CD_HIERAR6);
			sb.append(",CD_HIERAR7=" + CD_HIERAR7);
			sb.append(",CD_HIERAR8=" + CD_HIERAR8);
			sb.append(",CD_HIERAR9=" + CD_HIERAR9);
			sb.append(",LB_CODE=" + LB_CODE);
			sb.append(",LB_CODE1=" + LB_CODE1);
			sb.append(",LB_CODE2=" + LB_CODE2);
			sb.append(",LB_CODE3=" + LB_CODE3);
			sb.append(",LB_CODE4=" + LB_CODE4);
			sb.append(",LB_CODE5=" + LB_CODE5);
			sb.append(",LB_CODE6=" + LB_CODE6);
			sb.append(",LB_CODE7=" + LB_CODE7);
			sb.append(",LB_CODE8=" + LB_CODE8);
			sb.append(",LB_CODE9=" + LB_CODE9);
			sb.append(",CD_SUPP=" + CD_SUPP);
			sb.append(",HRD_CONTACT=" + HRD_CONTACT);
			sb.append(",HRF_CONTACT=" + HRF_CONTACT);
			sb.append(",LB_CORRESP=" + LB_CORRESP);
			sb.append(",LB_CORRESP_CPLT=" + LB_CORRESP_CPLT);
			sb.append(",ON_ROUGE=" + ON_ROUGE);
			sb.append(",TEL_CORRESP=" + TEL_CORRESP);
			sb.append(",TEL_FAXCOR=" + TEL_FAXCOR);
			sb.append(",MAIL_CORRESP=" + MAIL_CORRESP);
			sb.append(",ADR_DESTINA=" + ADR_DESTINA);
			sb.append(",ADR_COMPLT=" + ADR_COMPLT);
			sb.append(",ADR_BATIM=" + ADR_BATIM);
			sb.append(",ADR_ESCALIE=" + ADR_ESCALIE);
			sb.append(",ADR_ETAGE=" + ADR_ETAGE);
			sb.append(",ADR_APPART=" + ADR_APPART);
			sb.append(",ADR_DISTRIB=" + ADR_DISTRIB);
			sb.append(",ADR_NORU=" + ADR_NORU);
			sb.append(",ADR_CDRU=" + ADR_CDRU);
			sb.append(",ADR_RUE1=" + ADR_RUE1);
			sb.append(",ADR_RUE2=" + ADR_RUE2);
			sb.append(",ADR_CP=" + ADR_CP);
			sb.append(",ADR_LOC=" + ADR_LOC);
			sb.append(",ADR_CDX=" + ADR_CDX);
			sb.append(",ADR_PAY=" + ADR_PAY);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_HIERORG, other.CD_HIERORG);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row15Struct row15 = new row15Struct();

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tDBInput_15 - inputs:(after_tDBInput_13) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_5 - inputs:(row13,row14,row15,row20,row21)
				// outputs:(copyOfout2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct>getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tDBInput_15 begin ] start
				 */

				ok_Hash.put("tDBInput_15", false);
				start_Hash.put("tDBInput_15", System.currentTimeMillis());

				currentComponent = "tDBInput_15";

				int tos_count_tDBInput_15 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_15 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_15 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_15 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_15, talendToDBArray_tDBInput_15);
				int nb_line_tDBInput_15 = 0;
				java.sql.Connection conn_tDBInput_15 = null;
				String driverClass_tDBInput_15 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_15 = java.lang.Class.forName(driverClass_tDBInput_15);
				String dbUser_tDBInput_15 = "";

				final String decryptedPassword_tDBInput_15 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:87EVhuOdf5+u+E/g3jRk9Nzh7H0bgLBtnugV7w==");

				String dbPwd_tDBInput_15 = decryptedPassword_tDBInput_15;

				String port_tDBInput_15 = "1433";
				String dbname_tDBInput_15 = "ACGINFO1";
				String url_tDBInput_15 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				if (!"".equals(port_tDBInput_15)) {
					url_tDBInput_15 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_15)) {
					url_tDBInput_15 += "//" + "ACGINFO1";
				}
				url_tDBInput_15 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbschema_tDBInput_15 = "";

				conn_tDBInput_15 = java.sql.DriverManager.getConnection(url_tDBInput_15, dbUser_tDBInput_15,
						dbPwd_tDBInput_15);

				java.sql.Statement stmt_tDBInput_15 = conn_tDBInput_15.createStatement();

				String dbquery_tDBInput_15 = "SELECT ORGANISAT_GIM.CD_SOCIETE,\n		ORGANISAT_GIM.CD_HIERORG,\n		ORGANISAT_GIM.CD_ENT_HIER,\n		ORGANISAT_GIM.TY_ENT_HIER,\n"
						+ "		ORGANISAT_GIM.CD_PROFOND,\n		ORGANISAT_GIM.CD_HIERAR,\n		ORGANISAT_GIM.CD_HIERAR1,\n		ORGANISAT_GIM.CD_HIERAR2,\n		ORGANIS"
						+ "AT_GIM.CD_HIERAR3,\n		ORGANISAT_GIM.CD_HIERAR4,\n		ORGANISAT_GIM.CD_HIERAR5,\n		ORGANISAT_GIM.CD_HIERAR6,\n		ORGANISAT_GIM.C"
						+ "D_HIERAR7,\n		ORGANISAT_GIM.CD_HIERAR8,\n		ORGANISAT_GIM.CD_HIERAR9,\n		ORGANISAT_GIM.LB_CODE,\n		ORGANISAT_GIM.LB_CODE1,\n		"
						+ "ORGANISAT_GIM.LB_CODE2,\n		ORGANISAT_GIM.LB_CODE3,\n		ORGANISAT_GIM.LB_CODE4,\n		ORGANISAT_GIM.LB_CODE5,\n		ORGANISAT_GIM.LB"
						+ "_CODE6,\n		ORGANISAT_GIM.LB_CODE7,\n		ORGANISAT_GIM.LB_CODE8,\n		ORGANISAT_GIM.LB_CODE9,\n		ORGANISAT_GIM.CD_SUPP,\n		ORGANIS"
						+ "AT_GIM.HRD_CONTACT,\n		ORGANISAT_GIM.HRF_CONTACT,\n		ORGANISAT_GIM.LB_CORRESP,\n		ORGANISAT_GIM.LB_CORRESP_CPLT,\n		ORGANISA"
						+ "T_GIM.ON_ROUGE,\n		ORGANISAT_GIM.TEL_CORRESP,\n		ORGANISAT_GIM.TEL_FAXCOR,\n		ORGANISAT_GIM.MAIL_CORRESP,\n		ORGANISAT_GIM.A"
						+ "DR_DESTINA,\n		ORGANISAT_GIM.ADR_COMPLT,\n		ORGANISAT_GIM.ADR_BATIM,\n		ORGANISAT_GIM.ADR_ESCALIE,\n		ORGANISAT_GIM.ADR_ETAG"
						+ "E,\n		ORGANISAT_GIM.ADR_APPART,\n		ORGANISAT_GIM.ADR_DISTRIB,\n		ORGANISAT_GIM.ADR_NORU,\n		ORGANISAT_GIM.ADR_CDRU,\n		ORGANI"
						+ "SAT_GIM.ADR_RUE1,\n		ORGANISAT_GIM.ADR_RUE2,\n		ORGANISAT_GIM.ADR_CP,\n		ORGANISAT_GIM.ADR_LOC,\n		ORGANISAT_GIM.ADR_CDX,\n		"
						+ "ORGANISAT_GIM.ADR_PAY,\n		ORGANISAT_GIM.DT_ALIM\nFROM	ORGANISAT_GIM";

				globalMap.put("tDBInput_15_QUERY", dbquery_tDBInput_15);
				java.sql.ResultSet rs_tDBInput_15 = null;

				try {
					rs_tDBInput_15 = stmt_tDBInput_15.executeQuery(dbquery_tDBInput_15);
					java.sql.ResultSetMetaData rsmd_tDBInput_15 = rs_tDBInput_15.getMetaData();
					int colQtyInRs_tDBInput_15 = rsmd_tDBInput_15.getColumnCount();

					String tmpContent_tDBInput_15 = null;

					while (rs_tDBInput_15.next()) {
						nb_line_tDBInput_15++;

						if (colQtyInRs_tDBInput_15 < 1) {
							row15.CD_SOCIETE = null;
						} else {

							row15.CD_SOCIETE = rs_tDBInput_15.getBigDecimal(1);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 2) {
							row15.CD_HIERORG = null;
						} else {

							row15.CD_HIERORG = rs_tDBInput_15.getBigDecimal(2);
							if (rs_tDBInput_15.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_15 < 3) {
							row15.CD_ENT_HIER = null;
						} else {

							row15.CD_ENT_HIER = rs_tDBInput_15.getBigDecimal(3);
							if (rs_tDBInput_15.wasNull()) {
								row15.CD_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 4) {
							row15.TY_ENT_HIER = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(4);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.TY_ENT_HIER = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.TY_ENT_HIER = tmpContent_tDBInput_15;
								}
							} else {
								row15.TY_ENT_HIER = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 5) {
							row15.CD_PROFOND = null;
						} else {

							row15.CD_PROFOND = rs_tDBInput_15.getInt(5);
							if (rs_tDBInput_15.wasNull()) {
								row15.CD_PROFOND = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 6) {
							row15.CD_HIERAR = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(6);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 7) {
							row15.CD_HIERAR1 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(7);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR1 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR1 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 8) {
							row15.CD_HIERAR2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(8);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR2 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 9) {
							row15.CD_HIERAR3 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(9);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR3 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR3 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 10) {
							row15.CD_HIERAR4 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(10);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR4 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR4 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 11) {
							row15.CD_HIERAR5 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(11);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR5 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR5 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 12) {
							row15.CD_HIERAR6 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(12);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR6 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR6 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 13) {
							row15.CD_HIERAR7 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(13);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR7 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR7 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 14) {
							row15.CD_HIERAR8 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(14);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR8 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR8 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 15) {
							row15.CD_HIERAR9 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(15);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_HIERAR9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_HIERAR9 = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_HIERAR9 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 16) {
							row15.LB_CODE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(16);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 17) {
							row15.LB_CODE1 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(17);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE1 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 18) {
							row15.LB_CODE2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(18);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE2 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 19) {
							row15.LB_CODE3 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(19);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE3 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE3 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 20) {
							row15.LB_CODE4 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(20);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE4 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE4 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 21) {
							row15.LB_CODE5 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(21);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE5 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE5 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 22) {
							row15.LB_CODE6 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(22);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE6 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE6 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 23) {
							row15.LB_CODE7 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(23);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(23).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE7 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE7 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE7 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 24) {
							row15.LB_CODE8 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(24);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE8 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE8 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE8 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 25) {
							row15.LB_CODE9 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(25);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CODE9 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CODE9 = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CODE9 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 26) {
							row15.CD_SUPP = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(26);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(26).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.CD_SUPP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.CD_SUPP = tmpContent_tDBInput_15;
								}
							} else {
								row15.CD_SUPP = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 27) {
							row15.HRD_CONTACT = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(27);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.HRD_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.HRD_CONTACT = tmpContent_tDBInput_15;
								}
							} else {
								row15.HRD_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 28) {
							row15.HRF_CONTACT = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(28);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.HRF_CONTACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.HRF_CONTACT = tmpContent_tDBInput_15;
								}
							} else {
								row15.HRF_CONTACT = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 29) {
							row15.LB_CORRESP = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(29);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CORRESP = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 30) {
							row15.LB_CORRESP_CPLT = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(30);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.LB_CORRESP_CPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.LB_CORRESP_CPLT = tmpContent_tDBInput_15;
								}
							} else {
								row15.LB_CORRESP_CPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 31) {
							row15.ON_ROUGE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(31);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ON_ROUGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ON_ROUGE = tmpContent_tDBInput_15;
								}
							} else {
								row15.ON_ROUGE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 32) {
							row15.TEL_CORRESP = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(32);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.TEL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.TEL_CORRESP = tmpContent_tDBInput_15;
								}
							} else {
								row15.TEL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 33) {
							row15.TEL_FAXCOR = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(33);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.TEL_FAXCOR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.TEL_FAXCOR = tmpContent_tDBInput_15;
								}
							} else {
								row15.TEL_FAXCOR = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 34) {
							row15.MAIL_CORRESP = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(34);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.MAIL_CORRESP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.MAIL_CORRESP = tmpContent_tDBInput_15;
								}
							} else {
								row15.MAIL_CORRESP = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 35) {
							row15.ADR_DESTINA = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(35);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_DESTINA = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 36) {
							row15.ADR_COMPLT = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(36);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_COMPLT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_COMPLT = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_COMPLT = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 37) {
							row15.ADR_BATIM = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(37);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_BATIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_BATIM = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_BATIM = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 38) {
							row15.ADR_ESCALIE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(38);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_ESCALIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_ESCALIE = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_ESCALIE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 39) {
							row15.ADR_ETAGE = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(39);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_ETAGE = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 40) {
							row15.ADR_APPART = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(40);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_APPART = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_APPART = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_APPART = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 41) {
							row15.ADR_DISTRIB = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(41);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_DISTRIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_DISTRIB = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_DISTRIB = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 42) {
							row15.ADR_NORU = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(42);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_NORU = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 43) {
							row15.ADR_CDRU = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(43);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_CDRU = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 44) {
							row15.ADR_RUE1 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(44);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(44).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_RUE1 = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 45) {
							row15.ADR_RUE2 = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(45);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(45).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_RUE2 = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 46) {
							row15.ADR_CP = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(46);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_CP = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 47) {
							row15.ADR_LOC = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(47);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_LOC = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 48) {
							row15.ADR_CDX = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(48);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_CDX = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_CDX = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_CDX = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 49) {
							row15.ADR_PAY = null;
						} else {

							tmpContent_tDBInput_15 = rs_tDBInput_15.getString(49);
							if (tmpContent_tDBInput_15 != null) {
								if (talendToDBList_tDBInput_15.contains(
										rsmd_tDBInput_15.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row15.ADR_PAY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_15);
								} else {
									row15.ADR_PAY = tmpContent_tDBInput_15;
								}
							} else {
								row15.ADR_PAY = null;
							}
						}
						if (colQtyInRs_tDBInput_15 < 50) {
							row15.DT_ALIM = null;
						} else {

							row15.DT_ALIM = mssqlGTU_tDBInput_15.getDate(rsmd_tDBInput_15, rs_tDBInput_15, 50);

						}

						/**
						 * [tDBInput_15 begin ] stop
						 */

						/**
						 * [tDBInput_15 main ] start
						 */

						currentComponent = "tDBInput_15";

						tos_count_tDBInput_15++;

						/**
						 * [tDBInput_15 main ] stop
						 */

						/**
						 * [tDBInput_15 process_data_begin ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row15 main ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
						}

						row15Struct row15_HashRow = new row15Struct();

						row15_HashRow.CD_SOCIETE = row15.CD_SOCIETE;

						row15_HashRow.CD_HIERORG = row15.CD_HIERORG;

						row15_HashRow.CD_ENT_HIER = row15.CD_ENT_HIER;

						row15_HashRow.TY_ENT_HIER = row15.TY_ENT_HIER;

						row15_HashRow.CD_PROFOND = row15.CD_PROFOND;

						row15_HashRow.CD_HIERAR = row15.CD_HIERAR;

						row15_HashRow.CD_HIERAR1 = row15.CD_HIERAR1;

						row15_HashRow.CD_HIERAR2 = row15.CD_HIERAR2;

						row15_HashRow.CD_HIERAR3 = row15.CD_HIERAR3;

						row15_HashRow.CD_HIERAR4 = row15.CD_HIERAR4;

						row15_HashRow.CD_HIERAR5 = row15.CD_HIERAR5;

						row15_HashRow.CD_HIERAR6 = row15.CD_HIERAR6;

						row15_HashRow.CD_HIERAR7 = row15.CD_HIERAR7;

						row15_HashRow.CD_HIERAR8 = row15.CD_HIERAR8;

						row15_HashRow.CD_HIERAR9 = row15.CD_HIERAR9;

						row15_HashRow.LB_CODE = row15.LB_CODE;

						row15_HashRow.LB_CODE1 = row15.LB_CODE1;

						row15_HashRow.LB_CODE2 = row15.LB_CODE2;

						row15_HashRow.LB_CODE3 = row15.LB_CODE3;

						row15_HashRow.LB_CODE4 = row15.LB_CODE4;

						row15_HashRow.LB_CODE5 = row15.LB_CODE5;

						row15_HashRow.LB_CODE6 = row15.LB_CODE6;

						row15_HashRow.LB_CODE7 = row15.LB_CODE7;

						row15_HashRow.LB_CODE8 = row15.LB_CODE8;

						row15_HashRow.LB_CODE9 = row15.LB_CODE9;

						row15_HashRow.CD_SUPP = row15.CD_SUPP;

						row15_HashRow.HRD_CONTACT = row15.HRD_CONTACT;

						row15_HashRow.HRF_CONTACT = row15.HRF_CONTACT;

						row15_HashRow.LB_CORRESP = row15.LB_CORRESP;

						row15_HashRow.LB_CORRESP_CPLT = row15.LB_CORRESP_CPLT;

						row15_HashRow.ON_ROUGE = row15.ON_ROUGE;

						row15_HashRow.TEL_CORRESP = row15.TEL_CORRESP;

						row15_HashRow.TEL_FAXCOR = row15.TEL_FAXCOR;

						row15_HashRow.MAIL_CORRESP = row15.MAIL_CORRESP;

						row15_HashRow.ADR_DESTINA = row15.ADR_DESTINA;

						row15_HashRow.ADR_COMPLT = row15.ADR_COMPLT;

						row15_HashRow.ADR_BATIM = row15.ADR_BATIM;

						row15_HashRow.ADR_ESCALIE = row15.ADR_ESCALIE;

						row15_HashRow.ADR_ETAGE = row15.ADR_ETAGE;

						row15_HashRow.ADR_APPART = row15.ADR_APPART;

						row15_HashRow.ADR_DISTRIB = row15.ADR_DISTRIB;

						row15_HashRow.ADR_NORU = row15.ADR_NORU;

						row15_HashRow.ADR_CDRU = row15.ADR_CDRU;

						row15_HashRow.ADR_RUE1 = row15.ADR_RUE1;

						row15_HashRow.ADR_RUE2 = row15.ADR_RUE2;

						row15_HashRow.ADR_CP = row15.ADR_CP;

						row15_HashRow.ADR_LOC = row15.ADR_LOC;

						row15_HashRow.ADR_CDX = row15.ADR_CDX;

						row15_HashRow.ADR_PAY = row15.ADR_PAY;

						row15_HashRow.DT_ALIM = row15.DT_ALIM;

						tHash_Lookup_row15.put(row15_HashRow);

						tos_count_tAdvancedHash_row15++;

						/**
						 * [tAdvancedHash_row15 main ] stop
						 */

						/**
						 * [tAdvancedHash_row15 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						/**
						 * [tAdvancedHash_row15 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row15 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row15";

						/**
						 * [tAdvancedHash_row15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 process_data_end ] start
						 */

						currentComponent = "tDBInput_15";

						/**
						 * [tDBInput_15 process_data_end ] stop
						 */

						/**
						 * [tDBInput_15 end ] start
						 */

						currentComponent = "tDBInput_15";

					}
				} finally {
					if (rs_tDBInput_15 != null) {
						rs_tDBInput_15.close();
					}
					if (stmt_tDBInput_15 != null) {
						stmt_tDBInput_15.close();
					}
					if (conn_tDBInput_15 != null && !conn_tDBInput_15.isClosed()) {

						conn_tDBInput_15.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_15_NB_LINE", nb_line_tDBInput_15);

				ok_Hash.put("tDBInput_15", true);
				end_Hash.put("tDBInput_15", System.currentTimeMillis());

				/**
				 * [tDBInput_15 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_15 finally ] start
				 */

				currentComponent = "tDBInput_15";

				/**
				 * [tDBInput_15 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_15_SUBPROCESS_STATE", 1);
	}

	public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public BigDecimal CD_SOCIETE;

		public BigDecimal getCD_SOCIETE() {
			return this.CD_SOCIETE;
		}

		public String CD_ACTIVIT;

		public String getCD_ACTIVIT() {
			return this.CD_ACTIVIT;
		}

		public int CD_PATRIM1;

		public int getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public int CD_PATRIM2;

		public int getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public int CD_PATRIM3;

		public int getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public int CD_PATRIM4;

		public int getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public int CD_PATRIM5;

		public int getCD_PATRIM5() {
			return this.CD_PATRIM5;
		}

		public int CD_PATRIM6;

		public int getCD_PATRIM6() {
			return this.CD_PATRIM6;
		}

		public String CD_PATRIM;

		public String getCD_PATRIM() {
			return this.CD_PATRIM;
		}

		public String LB_PATRIM1;

		public String getLB_PATRIM1() {
			return this.LB_PATRIM1;
		}

		public String LB_PATRIM2;

		public String getLB_PATRIM2() {
			return this.LB_PATRIM2;
		}

		public String LB_PATRIM3;

		public String getLB_PATRIM3() {
			return this.LB_PATRIM3;
		}

		public String LB_PATRIM4;

		public String getLB_PATRIM4() {
			return this.LB_PATRIM4;
		}

		public String LB_PATRIM5;

		public String getLB_PATRIM5() {
			return this.LB_PATRIM5;
		}

		public String LB_PATRIM6;

		public String getLB_PATRIM6() {
			return this.LB_PATRIM6;
		}

		public String CD_ETAT;

		public String getCD_ETAT() {
			return this.CD_ETAT;
		}

		public Integer ID_PATRIM;

		public Integer getID_PATRIM() {
			return this.ID_PATRIM;
		}

		public String ID_RLLBS;

		public String getID_RLLBS() {
			return this.ID_RLLBS;
		}

		public String ID_INVARIANT;

		public String getID_INVARIANT() {
			return this.ID_INVARIANT;
		}

		public Integer CD_ENT_PAT;

		public Integer getCD_ENT_PAT() {
			return this.CD_ENT_PAT;
		}

		public Integer NIV_PAT;

		public Integer getNIV_PAT() {
			return this.NIV_PAT;
		}

		public String CD_QUALIF;

		public String getCD_QUALIF() {
			return this.CD_QUALIF;
		}

		public Integer CD_ENT_SEC;

		public Integer getCD_ENT_SEC() {
			return this.CD_ENT_SEC;
		}

		public BigDecimal CD_ORG_SEC;

		public BigDecimal getCD_ORG_SEC() {
			return this.CD_ORG_SEC;
		}

		public Integer NIV_SEC;

		public Integer getNIV_SEC() {
			return this.NIV_SEC;
		}

		public Integer CD_ENT_CTX;

		public Integer getCD_ENT_CTX() {
			return this.CD_ENT_CTX;
		}

		public BigDecimal CD_ORG_CTX;

		public BigDecimal getCD_ORG_CTX() {
			return this.CD_ORG_CTX;
		}

		public BigDecimal CD_SOC_REG;

		public BigDecimal getCD_SOC_REG() {
			return this.CD_SOC_REG;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String CD_LOCALI2;

		public String getCD_LOCALI2() {
			return this.CD_LOCALI2;
		}

		public String CD_LOCALI3;

		public String getCD_LOCALI3() {
			return this.CD_LOCALI3;
		}

		public String CD_LOCALI4;

		public String getCD_LOCALI4() {
			return this.CD_LOCALI4;
		}

		public String CD_LOCALI5;

		public String getCD_LOCALI5() {
			return this.CD_LOCALI5;
		}

		public String ON_ADRPOST;

		public String getON_ADRPOST() {
			return this.ON_ADRPOST;
		}

		public String ADRPA_NORU;

		public String getADRPA_NORU() {
			return this.ADRPA_NORU;
		}

		public String ADRPA_CDRU;

		public String getADRPA_CDRU() {
			return this.ADRPA_CDRU;
		}

		public String ADRPA_RUE1;

		public String getADRPA_RUE1() {
			return this.ADRPA_RUE1;
		}

		public String ADRPA_RUE2;

		public String getADRPA_RUE2() {
			return this.ADRPA_RUE2;
		}

		public String ADRPA_LOC;

		public String getADRPA_LOC() {
			return this.ADRPA_LOC;
		}

		public String ADRPA_CP;

		public String getADRPA_CP() {
			return this.ADRPA_CP;
		}

		public String ADRPA_BD;

		public String getADRPA_BD() {
			return this.ADRPA_BD;
		}

		public String NO_INSEE;

		public String getNO_INSEE() {
			return this.NO_INSEE;
		}

		public String NO_DEPT;

		public String getNO_DEPT() {
			return this.NO_DEPT;
		}

		public BigDecimal GPS_LONGIT;

		public BigDecimal getGPS_LONGIT() {
			return this.GPS_LONGIT;
		}

		public BigDecimal GPS_LATIT;

		public BigDecimal getGPS_LATIT() {
			return this.GPS_LATIT;
		}

		public String CD_Z_GEOG;

		public String getCD_Z_GEOG() {
			return this.CD_Z_GEOG;
		}

		public String NO_QPV;

		public String getNO_QPV() {
			return this.NO_QPV;
		}

		public String LB_QPV;

		public String getLB_QPV() {
			return this.LB_QPV;
		}

		public String ON_ZUS;

		public String getON_ZUS() {
			return this.ON_ZUS;
		}

		public String ON_ZRR;

		public String getON_ZRR() {
			return this.ON_ZRR;
		}

		public String ON_ZFU;

		public String getON_ZFU() {
			return this.ON_ZFU;
		}

		public String CD_SEGCUS;

		public String getCD_SEGCUS() {
			return this.CD_SEGCUS;
		}

		public String LB_SEGCUS;

		public String getLB_SEGCUS() {
			return this.LB_SEGCUS;
		}

		public String NO_ANRU;

		public String getNO_ANRU() {
			return this.NO_ANRU;
		}

		public String ON_ANRU;

		public String getON_ANRU() {
			return this.ON_ANRU;
		}

		public String NO_CUCS;

		public String getNO_CUCS() {
			return this.NO_CUCS;
		}

		public String ON_CUCS;

		public String getON_CUCS() {
			return this.ON_CUCS;
		}

		public String ON_PCS;

		public String getON_PCS() {
			return this.ON_PCS;
		}

		public BigDecimal CD_PROGRAM;

		public BigDecimal getCD_PROGRAM() {
			return this.CD_PROGRAM;
		}

		public BigDecimal CD_TRANCHE;

		public BigDecimal getCD_TRANCHE() {
			return this.CD_TRANCHE;
		}

		public String LB_PR_TR;

		public String getLB_PR_TR() {
			return this.LB_PR_TR;
		}

		public BigDecimal CD_PAT_TC1;

		public BigDecimal getCD_PAT_TC1() {
			return this.CD_PAT_TC1;
		}

		public BigDecimal CD_PAT_TC2;

		public BigDecimal getCD_PAT_TC2() {
			return this.CD_PAT_TC2;
		}

		public BigDecimal CD_PAT_TC3;

		public BigDecimal getCD_PAT_TC3() {
			return this.CD_PAT_TC3;
		}

		public BigDecimal CD_PAT_TC4;

		public BigDecimal getCD_PAT_TC4() {
			return this.CD_PAT_TC4;
		}

		public BigDecimal CD_PAT_TC5;

		public BigDecimal getCD_PAT_TC5() {
			return this.CD_PAT_TC5;
		}

		public BigDecimal CD_PAT_TC6;

		public BigDecimal getCD_PAT_TC6() {
			return this.CD_PAT_TC6;
		}

		public String CD_DESTINA;

		public String getCD_DESTINA() {
			return this.CD_DESTINA;
		}

		public String LB_DESTINA;

		public String getLB_DESTINA() {
			return this.LB_DESTINA;
		}

		public BigDecimal SURF_HAB;

		public BigDecimal getSURF_HAB() {
			return this.SURF_HAB;
		}

		public BigDecimal SURF_REEL;

		public BigDecimal getSURF_REEL() {
			return this.SURF_REEL;
		}

		public BigDecimal SURF_CORR;

		public BigDecimal getSURF_CORR() {
			return this.SURF_CORR;
		}

		public BigDecimal SURF_CHAUF;

		public BigDecimal getSURF_CHAUF() {
			return this.SURF_CHAUF;
		}

		public BigDecimal SURF_UTILE;

		public BigDecimal getSURF_UTILE() {
			return this.SURF_UTILE;
		}

		public String SURF_DECPT;

		public String getSURF_DECPT() {
			return this.SURF_DECPT;
		}

		public BigDecimal MT_EQUIBUD;

		public BigDecimal getMT_EQUIBUD() {
			return this.MT_EQUIBUD;
		}

		public String TY_CHAUFF;

		public String getTY_CHAUFF() {
			return this.TY_CHAUFF;
		}

		public String CD_ENERGIE;

		public String getCD_ENERGIE() {
			return this.CD_ENERGIE;
		}

		public String LB_ENERGIE;

		public String getLB_ENERGIE() {
			return this.LB_ENERGIE;
		}

		public String CD_ENEREAU;

		public String getCD_ENEREAU() {
			return this.CD_ENEREAU;
		}

		public String LB_ENEREAU;

		public String getLB_ENEREAU() {
			return this.LB_ENEREAU;
		}

		public java.util.Date DT_DPE;

		public java.util.Date getDT_DPE() {
			return this.DT_DPE;
		}

		public BigDecimal CONSO_CCE;

		public BigDecimal getCONSO_CCE() {
			return this.CONSO_CCE;
		}

		public String CLAS_CCE;

		public String getCLAS_CCE() {
			return this.CLAS_CCE;
		}

		public BigDecimal CONSO_CEG;

		public BigDecimal getCONSO_CEG() {
			return this.CONSO_CEG;
		}

		public String CLAS_CEG;

		public String getCLAS_CEG() {
			return this.CLAS_CEG;
		}

		public String ON_ADPTHAN;

		public String getON_ADPTHAN() {
			return this.ON_ADPTHAN;
		}

		public String CD_ADPTHAN;

		public String getCD_ADPTHAN() {
			return this.CD_ADPTHAN;
		}

		public String LB_ADPTHAN;

		public String getLB_ADPTHAN() {
			return this.LB_ADPTHAN;
		}

		public String ON_ADPTEHAN;

		public String getON_ADPTEHAN() {
			return this.ON_ADPTEHAN;
		}

		public String ON_ACCHAN;

		public String getON_ACCHAN() {
			return this.ON_ACCHAN;
		}

		public String CD_CATACCHAN;

		public String getCD_CATACCHAN() {
			return this.CD_CATACCHAN;
		}

		public String LB_CATACCHAN;

		public String getLB_CATACCHAN() {
			return this.LB_CATACCHAN;
		}

		public String CD_SECTEUR;

		public String getCD_SECTEUR() {
			return this.CD_SECTEUR;
		}

		public String LB_SECTEUR;

		public String getLB_SECTEUR() {
			return this.LB_SECTEUR;
		}

		public BigDecimal CD_SOCPROP;

		public BigDecimal getCD_SOCPROP() {
			return this.CD_SOCPROP;
		}

		public String LB_SOCPROP;

		public String getLB_SOCPROP() {
			return this.LB_SOCPROP;
		}

		public String ON_COPROP;

		public String getON_COPROP() {
			return this.ON_COPROP;
		}

		public String CD_TYPROP;

		public String getCD_TYPROP() {
			return this.CD_TYPROP;
		}

		public String LB_TYPROP;

		public String getLB_TYPROP() {
			return this.LB_TYPROP;
		}

		public String CD_CATPROP;

		public String getCD_CATPROP() {
			return this.CD_CATPROP;
		}

		public String LB_CATPROP;

		public String getLB_CATPROP() {
			return this.LB_CATPROP;
		}

		public java.util.Date DTF_BAILEM;

		public java.util.Date getDTF_BAILEM() {
			return this.DTF_BAILEM;
		}

		public String CD_MANDGES;

		public String getCD_MANDGES() {
			return this.CD_MANDGES;
		}

		public String LB_MANDGES;

		public String getLB_MANDGES() {
			return this.LB_MANDGES;
		}

		public String CD_TYFOY;

		public String getCD_TYFOY() {
			return this.CD_TYFOY;
		}

		public String LB_TYFOY;

		public String getLB_TYFOY() {
			return this.LB_TYFOY;
		}

		public String CD_CATFOY;

		public String getCD_CATFOY() {
			return this.CD_CATFOY;
		}

		public String LB_CATFOY;

		public String getLB_CATFOY() {
			return this.LB_CATFOY;
		}

		public String TY_CONSTR;

		public String getTY_CONSTR() {
			return this.TY_CONSTR;
		}

		public String CD_NATLOC;

		public String getCD_NATLOC() {
			return this.CD_NATLOC;
		}

		public String LB_NATLOC;

		public String getLB_NATLOC() {
			return this.LB_NATLOC;
		}

		public String CD_RGNATUR;

		public String getCD_RGNATUR() {
			return this.CD_RGNATUR;
		}

		public String CD_TYPLOC;

		public String getCD_TYPLOC() {
			return this.CD_TYPLOC;
		}

		public String LB_TYPLOC;

		public String getLB_TYPLOC() {
			return this.LB_TYPLOC;
		}

		public Integer REP_CHARGE;

		public Integer getREP_CHARGE() {
			return this.REP_CHARGE;
		}

		public Integer NB_PIEPRIN;

		public Integer getNB_PIEPRIN() {
			return this.NB_PIEPRIN;
		}

		public String CD_ETAGE;

		public String getCD_ETAGE() {
			return this.CD_ETAGE;
		}

		public String LB_ETAGE;

		public String getLB_ETAGE() {
			return this.LB_ETAGE;
		}

		public BigDecimal NIV_ETAGE;

		public BigDecimal getNIV_ETAGE() {
			return this.NIV_ETAGE;
		}

		public BigDecimal NB_NIVEAUX;

		public BigDecimal getNB_NIVEAUX() {
			return this.NB_NIVEAUX;
		}

		public BigDecimal SNO_ETAGE;

		public BigDecimal getSNO_ETAGE() {
			return this.SNO_ETAGE;
		}

		public String ON_ASC;

		public String getON_ASC() {
			return this.ON_ASC;
		}

		public String ON_REP_ASC;

		public String getON_REP_ASC() {
			return this.ON_REP_ASC;
		}

		public String CD_CATFP;

		public String getCD_CATFP() {
			return this.CD_CATFP;
		}

		public String LB_CATFP;

		public String getLB_CATFP() {
			return this.LB_CATFP;
		}

		public String CD_CATPLAF;

		public String getCD_CATPLAF() {
			return this.CD_CATPLAF;
		}

		public String LB_CATPLAF;

		public String getLB_CATPLAF() {
			return this.LB_CATPLAF;
		}

		public String ON_ELIGCUS;

		public String getON_ELIGCUS() {
			return this.ON_ELIGCUS;
		}

		public String CD_CLF_CUS;

		public String getCD_CLF_CUS() {
			return this.CD_CLF_CUS;
		}

		public java.util.Date DT_ACQUIS;

		public java.util.Date getDT_ACQUIS() {
			return this.DT_ACQUIS;
		}

		public String CD_ACHETEA;

		public String getCD_ACHETEA() {
			return this.CD_ACHETEA;
		}

		public String LB_ACHETEA;

		public String getLB_ACHETEA() {
			return this.LB_ACHETEA;
		}

		public java.util.Date DTD_PAT_G;

		public java.util.Date getDTD_PAT_G() {
			return this.DTD_PAT_G;
		}

		public java.util.Date DTD_PAT_R;

		public java.util.Date getDTD_PAT_R() {
			return this.DTD_PAT_R;
		}

		public String CD_DEBPAT;

		public String getCD_DEBPAT() {
			return this.CD_DEBPAT;
		}

		public String LB_DEBPAT;

		public String getLB_DEBPAT() {
			return this.LB_DEBPAT;
		}

		public String CD_TYDEBPAT;

		public String getCD_TYDEBPAT() {
			return this.CD_TYDEBPAT;
		}

		public String LB_TYDEBPAT;

		public String getLB_TYDEBPAT() {
			return this.LB_TYDEBPAT;
		}

		public java.util.Date DTF_PAT_G;

		public java.util.Date getDTF_PAT_G() {
			return this.DTF_PAT_G;
		}

		public java.util.Date DTF_PAT_R;

		public java.util.Date getDTF_PAT_R() {
			return this.DTF_PAT_R;
		}

		public String CD_FINPAT;

		public String getCD_FINPAT() {
			return this.CD_FINPAT;
		}

		public String LB_FINPAT;

		public String getLB_FINPAT() {
			return this.LB_FINPAT;
		}

		public String CD_TYFINPAT;

		public String getCD_TYFINPAT() {
			return this.CD_TYFINPAT;
		}

		public String LB_TYFINPAT;

		public String getLB_TYFINPAT() {
			return this.LB_TYFINPAT;
		}

		public java.util.Date DT_MELOC;

		public java.util.Date getDT_MELOC() {
			return this.DT_MELOC;
		}

		public java.util.Date DTF_PREVIS;

		public java.util.Date getDTF_PREVIS() {
			return this.DTF_PREVIS;
		}

		public java.util.Date DTD_MEVENTE;

		public java.util.Date getDTD_MEVENTE() {
			return this.DTD_MEVENTE;
		}

		public java.util.Date DTF_MEVENTE;

		public java.util.Date getDTF_MEVENTE() {
			return this.DTF_MEVENTE;
		}

		public java.util.Date DTD_REHAB;

		public java.util.Date getDTD_REHAB() {
			return this.DTD_REHAB;
		}

		public java.util.Date DTF_REHAB;

		public java.util.Date getDTF_REHAB() {
			return this.DTF_REHAB;
		}

		public String CD_VENDUA;

		public String getCD_VENDUA() {
			return this.CD_VENDUA;
		}

		public String LB_VENDUA;

		public String getLB_VENDUA() {
			return this.LB_VENDUA;
		}

		public String CPLPA1_NOM;

		public String getCPLPA1_NOM() {
			return this.CPLPA1_NOM;
		}

		public String CPLPA1_COD;

		public String getCPLPA1_COD() {
			return this.CPLPA1_COD;
		}

		public String CPLPA1_LIB;

		public String getCPLPA1_LIB() {
			return this.CPLPA1_LIB;
		}

		public String CPLPA2_NOM;

		public String getCPLPA2_NOM() {
			return this.CPLPA2_NOM;
		}

		public String CPLPA2_COD;

		public String getCPLPA2_COD() {
			return this.CPLPA2_COD;
		}

		public String CPLPA2_LIB;

		public String getCPLPA2_LIB() {
			return this.CPLPA2_LIB;
		}

		public String CPLPA3_NOM;

		public String getCPLPA3_NOM() {
			return this.CPLPA3_NOM;
		}

		public String CPLPA3_COD;

		public String getCPLPA3_COD() {
			return this.CPLPA3_COD;
		}

		public String CPLPA4_NOM;

		public String getCPLPA4_NOM() {
			return this.CPLPA4_NOM;
		}

		public String CPLPA4_COD;

		public String getCPLPA4_COD() {
			return this.CPLPA4_COD;
		}

		public BigDecimal MT_PUMES;

		public BigDecimal getMT_PUMES() {
			return this.MT_PUMES;
		}

		public BigDecimal MT_FORMES;

		public BigDecimal getMT_FORMES() {
			return this.MT_FORMES;
		}

		public BigDecimal MT_PULIC;

		public BigDecimal getMT_PULIC() {
			return this.MT_PULIC;
		}

		public BigDecimal MT_FORLIC;

		public BigDecimal getMT_FORLIC() {
			return this.MT_FORLIC;
		}

		public java.util.Date DT_INDLIC;

		public java.util.Date getDT_INDLIC() {
			return this.DT_INDLIC;
		}

		public BigDecimal MT_PUMAX;

		public BigDecimal getMT_PUMAX() {
			return this.MT_PUMAX;
		}

		public BigDecimal MT_FORMAX;

		public BigDecimal getMT_FORMAX() {
			return this.MT_FORMAX;
		}

		public BigDecimal MT_PUOBJ;

		public BigDecimal getMT_PUOBJ() {
			return this.MT_PUOBJ;
		}

		public BigDecimal MT_FOROBJ;

		public BigDecimal getMT_FOROBJ() {
			return this.MT_FOROBJ;
		}

		public BigDecimal MT_PUPRA;

		public BigDecimal getMT_PUPRA() {
			return this.MT_PUPRA;
		}

		public BigDecimal MT_TOTRUB;

		public BigDecimal getMT_TOTRUB() {
			return this.MT_TOTRUB;
		}

		public BigDecimal MT_LOYER;

		public BigDecimal getMT_LOYER() {
			return this.MT_LOYER;
		}

		public BigDecimal MT_LOYANNX;

		public BigDecimal getMT_LOYANNX() {
			return this.MT_LOYANNX;
		}

		public BigDecimal MT_LOYFORF;

		public BigDecimal getMT_LOYFORF() {
			return this.MT_LOYFORF;
		}

		public BigDecimal MT_HLOYER;

		public BigDecimal getMT_HLOYER() {
			return this.MT_HLOYER;
		}

		public BigDecimal MT_CHARGES;

		public BigDecimal getMT_CHARGES() {
			return this.MT_CHARGES;
		}

		public BigDecimal MT_CHAUFF;

		public BigDecimal getMT_CHAUFF() {
			return this.MT_CHAUFF;
		}

		public String CD_PERIOD;

		public String getCD_PERIOD() {
			return this.CD_PERIOD;
		}

		public String LB_PERIOD;

		public String getLB_PERIOD() {
			return this.LB_PERIOD;
		}

		public Integer NB_PERIOD;

		public Integer getNB_PERIOD() {
			return this.NB_PERIOD;
		}

		public BigDecimal MT_PUREL;

		public BigDecimal getMT_PUREL() {
			return this.MT_PUREL;
		}

		public BigDecimal MT_TRUBREL;

		public BigDecimal getMT_TRUBREL() {
			return this.MT_TRUBREL;
		}

		public BigDecimal MT_LOYREL;

		public BigDecimal getMT_LOYREL() {
			return this.MT_LOYREL;
		}

		public BigDecimal MT_LAXREL;

		public BigDecimal getMT_LAXREL() {
			return this.MT_LAXREL;
		}

		public BigDecimal MT_LFOREL;

		public BigDecimal getMT_LFOREL() {
			return this.MT_LFOREL;
		}

		public BigDecimal MT_HLOYREL;

		public BigDecimal getMT_HLOYREL() {
			return this.MT_HLOYREL;
		}

		public BigDecimal MT_CHAREL;

		public BigDecimal getMT_CHAREL() {
			return this.MT_CHAREL;
		}

		public BigDecimal MT_CHFREL;

		public BigDecimal getMT_CHFREL() {
			return this.MT_CHFREL;
		}

		public String FACTURDEF;

		public String getFACTURDEF() {
			return this.FACTURDEF;
		}

		public String NO_BAILDEF;

		public String getNO_BAILDEF() {
			return this.NO_BAILDEF;
		}

		public String LB_BAILDEF;

		public String getLB_BAILDEF() {
			return this.LB_BAILDEF;
		}

		public String ON_DISTMAN;

		public String getON_DISTMAN() {
			return this.ON_DISTMAN;
		}

		public BigDecimal NO_LOGTRES;

		public BigDecimal getNO_LOGTRES() {
			return this.NO_LOGTRES;
		}

		public String CD_TAXE;

		public String getCD_TAXE() {
			return this.CD_TAXE;
		}

		public Integer NO_INTERN1;

		public Integer getNO_INTERN1() {
			return this.NO_INTERN1;
		}

		public String NO_INTERN2;

		public String getNO_INTERN2() {
			return this.NO_INTERN2;
		}

		public String ON_NONVAL;

		public String getON_NONVAL() {
			return this.ON_NONVAL;
		}

		public java.util.Date DTD_NONVAL;

		public java.util.Date getDTD_NONVAL() {
			return this.DTD_NONVAL;
		}

		public java.util.Date DTF_NONVAL;

		public java.util.Date getDTF_NONVAL() {
			return this.DTF_NONVAL;
		}

		public String TY_NONVAL;

		public String getTY_NONVAL() {
			return this.TY_NONVAL;
		}

		public String LB_NONVAL;

		public String getLB_NONVAL() {
			return this.LB_NONVAL;
		}

		public String ON_VACANT;

		public String getON_VACANT() {
			return this.ON_VACANT;
		}

		public Integer ID_GARD;

		public Integer getID_GARD() {
			return this.ID_GARD;
		}

		public String NOM_GARD;

		public String getNOM_GARD() {
			return this.NOM_GARD;
		}

		public String PRE_GARD;

		public String getPRE_GARD() {
			return this.PRE_GARD;
		}

		public String TEL_GARD;

		public String getTEL_GARD() {
			return this.TEL_GARD;
		}

		public String MAIL_GARD;

		public String getMAIL_GARD() {
			return this.MAIL_GARD;
		}

		public String TY_GARD;

		public String getTY_GARD() {
			return this.TY_GARD;
		}

		public Integer ID_RESPTR;

		public Integer getID_RESPTR() {
			return this.ID_RESPTR;
		}

		public String NOM_RESPTR;

		public String getNOM_RESPTR() {
			return this.NOM_RESPTR;
		}

		public String PRE_RESPTR;

		public String getPRE_RESPTR() {
			return this.PRE_RESPTR;
		}

		public String TEL_RESPTR;

		public String getTEL_RESPTR() {
			return this.TEL_RESPTR;
		}

		public String MAIL_RESPTR;

		public String getMAIL_RESPTR() {
			return this.MAIL_RESPTR;
		}

		public String TY_RESPTR;

		public String getTY_RESPTR() {
			return this.TY_RESPTR;
		}

		public Integer ID_PERCEP;

		public Integer getID_PERCEP() {
			return this.ID_PERCEP;
		}

		public String NOM_PERCEP;

		public String getNOM_PERCEP() {
			return this.NOM_PERCEP;
		}

		public Integer ID_BURENR;

		public Integer getID_BURENR() {
			return this.ID_BURENR;
		}

		public String NOM_BURENR;

		public String getNOM_BURENR() {
			return this.NOM_BURENR;
		}

		public Integer ID_MAIRIE;

		public Integer getID_MAIRIE() {
			return this.ID_MAIRIE;
		}

		public String NOM_MAIRIE;

		public String getNOM_MAIRIE() {
			return this.NOM_MAIRIE;
		}

		public String ON_MAIRGEST;

		public String getON_MAIRGEST() {
			return this.ON_MAIRGEST;
		}

		public String LB_MAIRIE;

		public String getLB_MAIRIE() {
			return this.LB_MAIRIE;
		}

		public Integer ID_PREF;

		public Integer getID_PREF() {
			return this.ID_PREF;
		}

		public String NOM_PREF;

		public String getNOM_PREF() {
			return this.NOM_PREF;
		}

		public Integer ID_ENCAIS;

		public Integer getID_ENCAIS() {
			return this.ID_ENCAIS;
		}

		public String NOM_ENCAIS;

		public String getNOM_ENCAIS() {
			return this.NOM_ENCAIS;
		}

		public String TY_ENCAIS;

		public String getTY_ENCAIS() {
			return this.TY_ENCAIS;
		}

		public String ON_CONVLOC;

		public String getON_CONVLOC() {
			return this.ON_CONVLOC;
		}

		public String CD_CNVM;

		public String getCD_CNVM() {
			return this.CD_CNVM;
		}

		public java.util.Date DTD_CNVM;

		public java.util.Date getDTD_CNVM() {
			return this.DTD_CNVM;
		}

		public java.util.Date DTF_CNVM;

		public java.util.Date getDTF_CNVM() {
			return this.DTF_CNVM;
		}

		public java.util.Date DT_SI_CNVM;

		public java.util.Date getDT_SI_CNVM() {
			return this.DT_SI_CNVM;
		}

		public java.util.Date DT_SI_CNVMO;

		public java.util.Date getDT_SI_CNVMO() {
			return this.DT_SI_CNVMO;
		}

		public String TY_CNVM;

		public String getTY_CNVM() {
			return this.TY_CNVM;
		}

		public String LB_TY_CNVM;

		public String getLB_TY_CNVM() {
			return this.LB_TY_CNVM;
		}

		public String ON_CONVCUS;

		public String getON_CONVCUS() {
			return this.ON_CONVCUS;
		}

		public String ON_ROLCUS;

		public String getON_ROLCUS() {
			return this.ON_ROLCUS;
		}

		public String CD_CNVCUS;

		public String getCD_CNVCUS() {
			return this.CD_CNVCUS;
		}

		public java.util.Date DTD_CNVCUS;

		public java.util.Date getDTD_CNVCUS() {
			return this.DTD_CNVCUS;
		}

		public java.util.Date DTF_CNVCUS;

		public java.util.Date getDTF_CNVCUS() {
			return this.DTF_CNVCUS;
		}

		public java.util.Date DT_SI_CNVCUS;

		public java.util.Date getDT_SI_CNVCUS() {
			return this.DT_SI_CNVCUS;
		}

		public String CD_CLASCUS;

		public String getCD_CLASCUS() {
			return this.CD_CLASCUS;
		}

		public String LB_CLASCUS;

		public String getLB_CLASCUS() {
			return this.LB_CLASCUS;
		}

		public Integer NO_CNV_RVN;

		public Integer getNO_CNV_RVN() {
			return this.NO_CNV_RVN;
		}

		public String NO_CNV_RVT;

		public String getNO_CNV_RVT() {
			return this.NO_CNV_RVT;
		}

		public String TY_CNV;

		public String getTY_CNV() {
			return this.TY_CNV;
		}

		public String CD_NAT_CNV;

		public String getCD_NAT_CNV() {
			return this.CD_NAT_CNV;
		}

		public String LB_NAT_CNV;

		public String getLB_NAT_CNV() {
			return this.LB_NAT_CNV;
		}

		public String TY_DT_RNV;

		public String getTY_DT_RNV() {
			return this.TY_DT_RNV;
		}

		public Integer DUR_RVN_AN;

		public Integer getDUR_RVN_AN() {
			return this.DUR_RVN_AN;
		}

		public Integer DUR_RVN_MO;

		public Integer getDUR_RVN_MO() {
			return this.DUR_RVN_MO;
		}

		public java.util.Date DTD_RVN_PA;

		public java.util.Date getDTD_RVN_PA() {
			return this.DTD_RVN_PA;
		}

		public java.util.Date DTF_RVN_PA;

		public java.util.Date getDTF_RVN_PA() {
			return this.DTF_RVN_PA;
		}

		public BigDecimal MT_UNI_RNV;

		public BigDecimal getMT_UNI_RNV() {
			return this.MT_UNI_RNV;
		}

		public Integer ID_RVT;

		public Integer getID_RVT() {
			return this.ID_RVT;
		}

		public String NOM_RVT;

		public String getNOM_RVT() {
			return this.NOM_RVT;
		}

		public String TY_RVT;

		public String getTY_RVT() {
			return this.TY_RVT;
		}

		public String LB_SOCIETE;

		public String getLB_SOCIETE() {
			return this.LB_SOCIETE;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + (int) this.CD_PATRIM1;

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row20Struct other = (row20Struct) obj;

			if (this.CD_PATRIM1 != other.CD_PATRIM1)
				return false;

			return true;
		}

		public void copyDataTo(row20Struct other) {

			other.CD_SOCIETE = this.CD_SOCIETE;
			other.CD_ACTIVIT = this.CD_ACTIVIT;
			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;
			other.CD_PATRIM5 = this.CD_PATRIM5;
			other.CD_PATRIM6 = this.CD_PATRIM6;
			other.CD_PATRIM = this.CD_PATRIM;
			other.LB_PATRIM1 = this.LB_PATRIM1;
			other.LB_PATRIM2 = this.LB_PATRIM2;
			other.LB_PATRIM3 = this.LB_PATRIM3;
			other.LB_PATRIM4 = this.LB_PATRIM4;
			other.LB_PATRIM5 = this.LB_PATRIM5;
			other.LB_PATRIM6 = this.LB_PATRIM6;
			other.CD_ETAT = this.CD_ETAT;
			other.ID_PATRIM = this.ID_PATRIM;
			other.ID_RLLBS = this.ID_RLLBS;
			other.ID_INVARIANT = this.ID_INVARIANT;
			other.CD_ENT_PAT = this.CD_ENT_PAT;
			other.NIV_PAT = this.NIV_PAT;
			other.CD_QUALIF = this.CD_QUALIF;
			other.CD_ENT_SEC = this.CD_ENT_SEC;
			other.CD_ORG_SEC = this.CD_ORG_SEC;
			other.NIV_SEC = this.NIV_SEC;
			other.CD_ENT_CTX = this.CD_ENT_CTX;
			other.CD_ORG_CTX = this.CD_ORG_CTX;
			other.CD_SOC_REG = this.CD_SOC_REG;
			other.CD_LOCALI1 = this.CD_LOCALI1;
			other.CD_LOCALI2 = this.CD_LOCALI2;
			other.CD_LOCALI3 = this.CD_LOCALI3;
			other.CD_LOCALI4 = this.CD_LOCALI4;
			other.CD_LOCALI5 = this.CD_LOCALI5;
			other.ON_ADRPOST = this.ON_ADRPOST;
			other.ADRPA_NORU = this.ADRPA_NORU;
			other.ADRPA_CDRU = this.ADRPA_CDRU;
			other.ADRPA_RUE1 = this.ADRPA_RUE1;
			other.ADRPA_RUE2 = this.ADRPA_RUE2;
			other.ADRPA_LOC = this.ADRPA_LOC;
			other.ADRPA_CP = this.ADRPA_CP;
			other.ADRPA_BD = this.ADRPA_BD;
			other.NO_INSEE = this.NO_INSEE;
			other.NO_DEPT = this.NO_DEPT;
			other.GPS_LONGIT = this.GPS_LONGIT;
			other.GPS_LATIT = this.GPS_LATIT;
			other.CD_Z_GEOG = this.CD_Z_GEOG;
			other.NO_QPV = this.NO_QPV;
			other.LB_QPV = this.LB_QPV;
			other.ON_ZUS = this.ON_ZUS;
			other.ON_ZRR = this.ON_ZRR;
			other.ON_ZFU = this.ON_ZFU;
			other.CD_SEGCUS = this.CD_SEGCUS;
			other.LB_SEGCUS = this.LB_SEGCUS;
			other.NO_ANRU = this.NO_ANRU;
			other.ON_ANRU = this.ON_ANRU;
			other.NO_CUCS = this.NO_CUCS;
			other.ON_CUCS = this.ON_CUCS;
			other.ON_PCS = this.ON_PCS;
			other.CD_PROGRAM = this.CD_PROGRAM;
			other.CD_TRANCHE = this.CD_TRANCHE;
			other.LB_PR_TR = this.LB_PR_TR;
			other.CD_PAT_TC1 = this.CD_PAT_TC1;
			other.CD_PAT_TC2 = this.CD_PAT_TC2;
			other.CD_PAT_TC3 = this.CD_PAT_TC3;
			other.CD_PAT_TC4 = this.CD_PAT_TC4;
			other.CD_PAT_TC5 = this.CD_PAT_TC5;
			other.CD_PAT_TC6 = this.CD_PAT_TC6;
			other.CD_DESTINA = this.CD_DESTINA;
			other.LB_DESTINA = this.LB_DESTINA;
			other.SURF_HAB = this.SURF_HAB;
			other.SURF_REEL = this.SURF_REEL;
			other.SURF_CORR = this.SURF_CORR;
			other.SURF_CHAUF = this.SURF_CHAUF;
			other.SURF_UTILE = this.SURF_UTILE;
			other.SURF_DECPT = this.SURF_DECPT;
			other.MT_EQUIBUD = this.MT_EQUIBUD;
			other.TY_CHAUFF = this.TY_CHAUFF;
			other.CD_ENERGIE = this.CD_ENERGIE;
			other.LB_ENERGIE = this.LB_ENERGIE;
			other.CD_ENEREAU = this.CD_ENEREAU;
			other.LB_ENEREAU = this.LB_ENEREAU;
			other.DT_DPE = this.DT_DPE;
			other.CONSO_CCE = this.CONSO_CCE;
			other.CLAS_CCE = this.CLAS_CCE;
			other.CONSO_CEG = this.CONSO_CEG;
			other.CLAS_CEG = this.CLAS_CEG;
			other.ON_ADPTHAN = this.ON_ADPTHAN;
			other.CD_ADPTHAN = this.CD_ADPTHAN;
			other.LB_ADPTHAN = this.LB_ADPTHAN;
			other.ON_ADPTEHAN = this.ON_ADPTEHAN;
			other.ON_ACCHAN = this.ON_ACCHAN;
			other.CD_CATACCHAN = this.CD_CATACCHAN;
			other.LB_CATACCHAN = this.LB_CATACCHAN;
			other.CD_SECTEUR = this.CD_SECTEUR;
			other.LB_SECTEUR = this.LB_SECTEUR;
			other.CD_SOCPROP = this.CD_SOCPROP;
			other.LB_SOCPROP = this.LB_SOCPROP;
			other.ON_COPROP = this.ON_COPROP;
			other.CD_TYPROP = this.CD_TYPROP;
			other.LB_TYPROP = this.LB_TYPROP;
			other.CD_CATPROP = this.CD_CATPROP;
			other.LB_CATPROP = this.LB_CATPROP;
			other.DTF_BAILEM = this.DTF_BAILEM;
			other.CD_MANDGES = this.CD_MANDGES;
			other.LB_MANDGES = this.LB_MANDGES;
			other.CD_TYFOY = this.CD_TYFOY;
			other.LB_TYFOY = this.LB_TYFOY;
			other.CD_CATFOY = this.CD_CATFOY;
			other.LB_CATFOY = this.LB_CATFOY;
			other.TY_CONSTR = this.TY_CONSTR;
			other.CD_NATLOC = this.CD_NATLOC;
			other.LB_NATLOC = this.LB_NATLOC;
			other.CD_RGNATUR = this.CD_RGNATUR;
			other.CD_TYPLOC = this.CD_TYPLOC;
			other.LB_TYPLOC = this.LB_TYPLOC;
			other.REP_CHARGE = this.REP_CHARGE;
			other.NB_PIEPRIN = this.NB_PIEPRIN;
			other.CD_ETAGE = this.CD_ETAGE;
			other.LB_ETAGE = this.LB_ETAGE;
			other.NIV_ETAGE = this.NIV_ETAGE;
			other.NB_NIVEAUX = this.NB_NIVEAUX;
			other.SNO_ETAGE = this.SNO_ETAGE;
			other.ON_ASC = this.ON_ASC;
			other.ON_REP_ASC = this.ON_REP_ASC;
			other.CD_CATFP = this.CD_CATFP;
			other.LB_CATFP = this.LB_CATFP;
			other.CD_CATPLAF = this.CD_CATPLAF;
			other.LB_CATPLAF = this.LB_CATPLAF;
			other.ON_ELIGCUS = this.ON_ELIGCUS;
			other.CD_CLF_CUS = this.CD_CLF_CUS;
			other.DT_ACQUIS = this.DT_ACQUIS;
			other.CD_ACHETEA = this.CD_ACHETEA;
			other.LB_ACHETEA = this.LB_ACHETEA;
			other.DTD_PAT_G = this.DTD_PAT_G;
			other.DTD_PAT_R = this.DTD_PAT_R;
			other.CD_DEBPAT = this.CD_DEBPAT;
			other.LB_DEBPAT = this.LB_DEBPAT;
			other.CD_TYDEBPAT = this.CD_TYDEBPAT;
			other.LB_TYDEBPAT = this.LB_TYDEBPAT;
			other.DTF_PAT_G = this.DTF_PAT_G;
			other.DTF_PAT_R = this.DTF_PAT_R;
			other.CD_FINPAT = this.CD_FINPAT;
			other.LB_FINPAT = this.LB_FINPAT;
			other.CD_TYFINPAT = this.CD_TYFINPAT;
			other.LB_TYFINPAT = this.LB_TYFINPAT;
			other.DT_MELOC = this.DT_MELOC;
			other.DTF_PREVIS = this.DTF_PREVIS;
			other.DTD_MEVENTE = this.DTD_MEVENTE;
			other.DTF_MEVENTE = this.DTF_MEVENTE;
			other.DTD_REHAB = this.DTD_REHAB;
			other.DTF_REHAB = this.DTF_REHAB;
			other.CD_VENDUA = this.CD_VENDUA;
			other.LB_VENDUA = this.LB_VENDUA;
			other.CPLPA1_NOM = this.CPLPA1_NOM;
			other.CPLPA1_COD = this.CPLPA1_COD;
			other.CPLPA1_LIB = this.CPLPA1_LIB;
			other.CPLPA2_NOM = this.CPLPA2_NOM;
			other.CPLPA2_COD = this.CPLPA2_COD;
			other.CPLPA2_LIB = this.CPLPA2_LIB;
			other.CPLPA3_NOM = this.CPLPA3_NOM;
			other.CPLPA3_COD = this.CPLPA3_COD;
			other.CPLPA4_NOM = this.CPLPA4_NOM;
			other.CPLPA4_COD = this.CPLPA4_COD;
			other.MT_PUMES = this.MT_PUMES;
			other.MT_FORMES = this.MT_FORMES;
			other.MT_PULIC = this.MT_PULIC;
			other.MT_FORLIC = this.MT_FORLIC;
			other.DT_INDLIC = this.DT_INDLIC;
			other.MT_PUMAX = this.MT_PUMAX;
			other.MT_FORMAX = this.MT_FORMAX;
			other.MT_PUOBJ = this.MT_PUOBJ;
			other.MT_FOROBJ = this.MT_FOROBJ;
			other.MT_PUPRA = this.MT_PUPRA;
			other.MT_TOTRUB = this.MT_TOTRUB;
			other.MT_LOYER = this.MT_LOYER;
			other.MT_LOYANNX = this.MT_LOYANNX;
			other.MT_LOYFORF = this.MT_LOYFORF;
			other.MT_HLOYER = this.MT_HLOYER;
			other.MT_CHARGES = this.MT_CHARGES;
			other.MT_CHAUFF = this.MT_CHAUFF;
			other.CD_PERIOD = this.CD_PERIOD;
			other.LB_PERIOD = this.LB_PERIOD;
			other.NB_PERIOD = this.NB_PERIOD;
			other.MT_PUREL = this.MT_PUREL;
			other.MT_TRUBREL = this.MT_TRUBREL;
			other.MT_LOYREL = this.MT_LOYREL;
			other.MT_LAXREL = this.MT_LAXREL;
			other.MT_LFOREL = this.MT_LFOREL;
			other.MT_HLOYREL = this.MT_HLOYREL;
			other.MT_CHAREL = this.MT_CHAREL;
			other.MT_CHFREL = this.MT_CHFREL;
			other.FACTURDEF = this.FACTURDEF;
			other.NO_BAILDEF = this.NO_BAILDEF;
			other.LB_BAILDEF = this.LB_BAILDEF;
			other.ON_DISTMAN = this.ON_DISTMAN;
			other.NO_LOGTRES = this.NO_LOGTRES;
			other.CD_TAXE = this.CD_TAXE;
			other.NO_INTERN1 = this.NO_INTERN1;
			other.NO_INTERN2 = this.NO_INTERN2;
			other.ON_NONVAL = this.ON_NONVAL;
			other.DTD_NONVAL = this.DTD_NONVAL;
			other.DTF_NONVAL = this.DTF_NONVAL;
			other.TY_NONVAL = this.TY_NONVAL;
			other.LB_NONVAL = this.LB_NONVAL;
			other.ON_VACANT = this.ON_VACANT;
			other.ID_GARD = this.ID_GARD;
			other.NOM_GARD = this.NOM_GARD;
			other.PRE_GARD = this.PRE_GARD;
			other.TEL_GARD = this.TEL_GARD;
			other.MAIL_GARD = this.MAIL_GARD;
			other.TY_GARD = this.TY_GARD;
			other.ID_RESPTR = this.ID_RESPTR;
			other.NOM_RESPTR = this.NOM_RESPTR;
			other.PRE_RESPTR = this.PRE_RESPTR;
			other.TEL_RESPTR = this.TEL_RESPTR;
			other.MAIL_RESPTR = this.MAIL_RESPTR;
			other.TY_RESPTR = this.TY_RESPTR;
			other.ID_PERCEP = this.ID_PERCEP;
			other.NOM_PERCEP = this.NOM_PERCEP;
			other.ID_BURENR = this.ID_BURENR;
			other.NOM_BURENR = this.NOM_BURENR;
			other.ID_MAIRIE = this.ID_MAIRIE;
			other.NOM_MAIRIE = this.NOM_MAIRIE;
			other.ON_MAIRGEST = this.ON_MAIRGEST;
			other.LB_MAIRIE = this.LB_MAIRIE;
			other.ID_PREF = this.ID_PREF;
			other.NOM_PREF = this.NOM_PREF;
			other.ID_ENCAIS = this.ID_ENCAIS;
			other.NOM_ENCAIS = this.NOM_ENCAIS;
			other.TY_ENCAIS = this.TY_ENCAIS;
			other.ON_CONVLOC = this.ON_CONVLOC;
			other.CD_CNVM = this.CD_CNVM;
			other.DTD_CNVM = this.DTD_CNVM;
			other.DTF_CNVM = this.DTF_CNVM;
			other.DT_SI_CNVM = this.DT_SI_CNVM;
			other.DT_SI_CNVMO = this.DT_SI_CNVMO;
			other.TY_CNVM = this.TY_CNVM;
			other.LB_TY_CNVM = this.LB_TY_CNVM;
			other.ON_CONVCUS = this.ON_CONVCUS;
			other.ON_ROLCUS = this.ON_ROLCUS;
			other.CD_CNVCUS = this.CD_CNVCUS;
			other.DTD_CNVCUS = this.DTD_CNVCUS;
			other.DTF_CNVCUS = this.DTF_CNVCUS;
			other.DT_SI_CNVCUS = this.DT_SI_CNVCUS;
			other.CD_CLASCUS = this.CD_CLASCUS;
			other.LB_CLASCUS = this.LB_CLASCUS;
			other.NO_CNV_RVN = this.NO_CNV_RVN;
			other.NO_CNV_RVT = this.NO_CNV_RVT;
			other.TY_CNV = this.TY_CNV;
			other.CD_NAT_CNV = this.CD_NAT_CNV;
			other.LB_NAT_CNV = this.LB_NAT_CNV;
			other.TY_DT_RNV = this.TY_DT_RNV;
			other.DUR_RVN_AN = this.DUR_RVN_AN;
			other.DUR_RVN_MO = this.DUR_RVN_MO;
			other.DTD_RVN_PA = this.DTD_RVN_PA;
			other.DTF_RVN_PA = this.DTF_RVN_PA;
			other.MT_UNI_RNV = this.MT_UNI_RNV;
			other.ID_RVT = this.ID_RVT;
			other.NOM_RVT = this.NOM_RVT;
			other.TY_RVT = this.TY_RVT;
			other.LB_SOCIETE = this.LB_SOCIETE;
			other.DT_ALIM = this.DT_ALIM;

		}

		public void copyKeysDataTo(row20Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_PATRIM1 = dis.readInt();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// int

				dos.writeInt(this.CD_PATRIM1);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.CD_SOCIETE = (BigDecimal) ois.readObject();

				this.CD_ACTIVIT = readString(dis, ois);

				this.CD_PATRIM2 = dis.readInt();

				this.CD_PATRIM3 = dis.readInt();

				this.CD_PATRIM4 = dis.readInt();

				this.CD_PATRIM5 = dis.readInt();

				this.CD_PATRIM6 = dis.readInt();

				this.CD_PATRIM = readString(dis, ois);

				this.LB_PATRIM1 = readString(dis, ois);

				this.LB_PATRIM2 = readString(dis, ois);

				this.LB_PATRIM3 = readString(dis, ois);

				this.LB_PATRIM4 = readString(dis, ois);

				this.LB_PATRIM5 = readString(dis, ois);

				this.LB_PATRIM6 = readString(dis, ois);

				this.CD_ETAT = readString(dis, ois);

				this.ID_PATRIM = readInteger(dis, ois);

				this.ID_RLLBS = readString(dis, ois);

				this.ID_INVARIANT = readString(dis, ois);

				this.CD_ENT_PAT = readInteger(dis, ois);

				this.NIV_PAT = readInteger(dis, ois);

				this.CD_QUALIF = readString(dis, ois);

				this.CD_ENT_SEC = readInteger(dis, ois);

				this.CD_ORG_SEC = (BigDecimal) ois.readObject();

				this.NIV_SEC = readInteger(dis, ois);

				this.CD_ENT_CTX = readInteger(dis, ois);

				this.CD_ORG_CTX = (BigDecimal) ois.readObject();

				this.CD_SOC_REG = (BigDecimal) ois.readObject();

				this.CD_LOCALI1 = readString(dis, ois);

				this.CD_LOCALI2 = readString(dis, ois);

				this.CD_LOCALI3 = readString(dis, ois);

				this.CD_LOCALI4 = readString(dis, ois);

				this.CD_LOCALI5 = readString(dis, ois);

				this.ON_ADRPOST = readString(dis, ois);

				this.ADRPA_NORU = readString(dis, ois);

				this.ADRPA_CDRU = readString(dis, ois);

				this.ADRPA_RUE1 = readString(dis, ois);

				this.ADRPA_RUE2 = readString(dis, ois);

				this.ADRPA_LOC = readString(dis, ois);

				this.ADRPA_CP = readString(dis, ois);

				this.ADRPA_BD = readString(dis, ois);

				this.NO_INSEE = readString(dis, ois);

				this.NO_DEPT = readString(dis, ois);

				this.GPS_LONGIT = (BigDecimal) ois.readObject();

				this.GPS_LATIT = (BigDecimal) ois.readObject();

				this.CD_Z_GEOG = readString(dis, ois);

				this.NO_QPV = readString(dis, ois);

				this.LB_QPV = readString(dis, ois);

				this.ON_ZUS = readString(dis, ois);

				this.ON_ZRR = readString(dis, ois);

				this.ON_ZFU = readString(dis, ois);

				this.CD_SEGCUS = readString(dis, ois);

				this.LB_SEGCUS = readString(dis, ois);

				this.NO_ANRU = readString(dis, ois);

				this.ON_ANRU = readString(dis, ois);

				this.NO_CUCS = readString(dis, ois);

				this.ON_CUCS = readString(dis, ois);

				this.ON_PCS = readString(dis, ois);

				this.CD_PROGRAM = (BigDecimal) ois.readObject();

				this.CD_TRANCHE = (BigDecimal) ois.readObject();

				this.LB_PR_TR = readString(dis, ois);

				this.CD_PAT_TC1 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC2 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC3 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC4 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC5 = (BigDecimal) ois.readObject();

				this.CD_PAT_TC6 = (BigDecimal) ois.readObject();

				this.CD_DESTINA = readString(dis, ois);

				this.LB_DESTINA = readString(dis, ois);

				this.SURF_HAB = (BigDecimal) ois.readObject();

				this.SURF_REEL = (BigDecimal) ois.readObject();

				this.SURF_CORR = (BigDecimal) ois.readObject();

				this.SURF_CHAUF = (BigDecimal) ois.readObject();

				this.SURF_UTILE = (BigDecimal) ois.readObject();

				this.SURF_DECPT = readString(dis, ois);

				this.MT_EQUIBUD = (BigDecimal) ois.readObject();

				this.TY_CHAUFF = readString(dis, ois);

				this.CD_ENERGIE = readString(dis, ois);

				this.LB_ENERGIE = readString(dis, ois);

				this.CD_ENEREAU = readString(dis, ois);

				this.LB_ENEREAU = readString(dis, ois);

				this.DT_DPE = readDate(dis, ois);

				this.CONSO_CCE = (BigDecimal) ois.readObject();

				this.CLAS_CCE = readString(dis, ois);

				this.CONSO_CEG = (BigDecimal) ois.readObject();

				this.CLAS_CEG = readString(dis, ois);

				this.ON_ADPTHAN = readString(dis, ois);

				this.CD_ADPTHAN = readString(dis, ois);

				this.LB_ADPTHAN = readString(dis, ois);

				this.ON_ADPTEHAN = readString(dis, ois);

				this.ON_ACCHAN = readString(dis, ois);

				this.CD_CATACCHAN = readString(dis, ois);

				this.LB_CATACCHAN = readString(dis, ois);

				this.CD_SECTEUR = readString(dis, ois);

				this.LB_SECTEUR = readString(dis, ois);

				this.CD_SOCPROP = (BigDecimal) ois.readObject();

				this.LB_SOCPROP = readString(dis, ois);

				this.ON_COPROP = readString(dis, ois);

				this.CD_TYPROP = readString(dis, ois);

				this.LB_TYPROP = readString(dis, ois);

				this.CD_CATPROP = readString(dis, ois);

				this.LB_CATPROP = readString(dis, ois);

				this.DTF_BAILEM = readDate(dis, ois);

				this.CD_MANDGES = readString(dis, ois);

				this.LB_MANDGES = readString(dis, ois);

				this.CD_TYFOY = readString(dis, ois);

				this.LB_TYFOY = readString(dis, ois);

				this.CD_CATFOY = readString(dis, ois);

				this.LB_CATFOY = readString(dis, ois);

				this.TY_CONSTR = readString(dis, ois);

				this.CD_NATLOC = readString(dis, ois);

				this.LB_NATLOC = readString(dis, ois);

				this.CD_RGNATUR = readString(dis, ois);

				this.CD_TYPLOC = readString(dis, ois);

				this.LB_TYPLOC = readString(dis, ois);

				this.REP_CHARGE = readInteger(dis, ois);

				this.NB_PIEPRIN = readInteger(dis, ois);

				this.CD_ETAGE = readString(dis, ois);

				this.LB_ETAGE = readString(dis, ois);

				this.NIV_ETAGE = (BigDecimal) ois.readObject();

				this.NB_NIVEAUX = (BigDecimal) ois.readObject();

				this.SNO_ETAGE = (BigDecimal) ois.readObject();

				this.ON_ASC = readString(dis, ois);

				this.ON_REP_ASC = readString(dis, ois);

				this.CD_CATFP = readString(dis, ois);

				this.LB_CATFP = readString(dis, ois);

				this.CD_CATPLAF = readString(dis, ois);

				this.LB_CATPLAF = readString(dis, ois);

				this.ON_ELIGCUS = readString(dis, ois);

				this.CD_CLF_CUS = readString(dis, ois);

				this.DT_ACQUIS = readDate(dis, ois);

				this.CD_ACHETEA = readString(dis, ois);

				this.LB_ACHETEA = readString(dis, ois);

				this.DTD_PAT_G = readDate(dis, ois);

				this.DTD_PAT_R = readDate(dis, ois);

				this.CD_DEBPAT = readString(dis, ois);

				this.LB_DEBPAT = readString(dis, ois);

				this.CD_TYDEBPAT = readString(dis, ois);

				this.LB_TYDEBPAT = readString(dis, ois);

				this.DTF_PAT_G = readDate(dis, ois);

				this.DTF_PAT_R = readDate(dis, ois);

				this.CD_FINPAT = readString(dis, ois);

				this.LB_FINPAT = readString(dis, ois);

				this.CD_TYFINPAT = readString(dis, ois);

				this.LB_TYFINPAT = readString(dis, ois);

				this.DT_MELOC = readDate(dis, ois);

				this.DTF_PREVIS = readDate(dis, ois);

				this.DTD_MEVENTE = readDate(dis, ois);

				this.DTF_MEVENTE = readDate(dis, ois);

				this.DTD_REHAB = readDate(dis, ois);

				this.DTF_REHAB = readDate(dis, ois);

				this.CD_VENDUA = readString(dis, ois);

				this.LB_VENDUA = readString(dis, ois);

				this.CPLPA1_NOM = readString(dis, ois);

				this.CPLPA1_COD = readString(dis, ois);

				this.CPLPA1_LIB = readString(dis, ois);

				this.CPLPA2_NOM = readString(dis, ois);

				this.CPLPA2_COD = readString(dis, ois);

				this.CPLPA2_LIB = readString(dis, ois);

				this.CPLPA3_NOM = readString(dis, ois);

				this.CPLPA3_COD = readString(dis, ois);

				this.CPLPA4_NOM = readString(dis, ois);

				this.CPLPA4_COD = readString(dis, ois);

				this.MT_PUMES = (BigDecimal) ois.readObject();

				this.MT_FORMES = (BigDecimal) ois.readObject();

				this.MT_PULIC = (BigDecimal) ois.readObject();

				this.MT_FORLIC = (BigDecimal) ois.readObject();

				this.DT_INDLIC = readDate(dis, ois);

				this.MT_PUMAX = (BigDecimal) ois.readObject();

				this.MT_FORMAX = (BigDecimal) ois.readObject();

				this.MT_PUOBJ = (BigDecimal) ois.readObject();

				this.MT_FOROBJ = (BigDecimal) ois.readObject();

				this.MT_PUPRA = (BigDecimal) ois.readObject();

				this.MT_TOTRUB = (BigDecimal) ois.readObject();

				this.MT_LOYER = (BigDecimal) ois.readObject();

				this.MT_LOYANNX = (BigDecimal) ois.readObject();

				this.MT_LOYFORF = (BigDecimal) ois.readObject();

				this.MT_HLOYER = (BigDecimal) ois.readObject();

				this.MT_CHARGES = (BigDecimal) ois.readObject();

				this.MT_CHAUFF = (BigDecimal) ois.readObject();

				this.CD_PERIOD = readString(dis, ois);

				this.LB_PERIOD = readString(dis, ois);

				this.NB_PERIOD = readInteger(dis, ois);

				this.MT_PUREL = (BigDecimal) ois.readObject();

				this.MT_TRUBREL = (BigDecimal) ois.readObject();

				this.MT_LOYREL = (BigDecimal) ois.readObject();

				this.MT_LAXREL = (BigDecimal) ois.readObject();

				this.MT_LFOREL = (BigDecimal) ois.readObject();

				this.MT_HLOYREL = (BigDecimal) ois.readObject();

				this.MT_CHAREL = (BigDecimal) ois.readObject();

				this.MT_CHFREL = (BigDecimal) ois.readObject();

				this.FACTURDEF = readString(dis, ois);

				this.NO_BAILDEF = readString(dis, ois);

				this.LB_BAILDEF = readString(dis, ois);

				this.ON_DISTMAN = readString(dis, ois);

				this.NO_LOGTRES = (BigDecimal) ois.readObject();

				this.CD_TAXE = readString(dis, ois);

				this.NO_INTERN1 = readInteger(dis, ois);

				this.NO_INTERN2 = readString(dis, ois);

				this.ON_NONVAL = readString(dis, ois);

				this.DTD_NONVAL = readDate(dis, ois);

				this.DTF_NONVAL = readDate(dis, ois);

				this.TY_NONVAL = readString(dis, ois);

				this.LB_NONVAL = readString(dis, ois);

				this.ON_VACANT = readString(dis, ois);

				this.ID_GARD = readInteger(dis, ois);

				this.NOM_GARD = readString(dis, ois);

				this.PRE_GARD = readString(dis, ois);

				this.TEL_GARD = readString(dis, ois);

				this.MAIL_GARD = readString(dis, ois);

				this.TY_GARD = readString(dis, ois);

				this.ID_RESPTR = readInteger(dis, ois);

				this.NOM_RESPTR = readString(dis, ois);

				this.PRE_RESPTR = readString(dis, ois);

				this.TEL_RESPTR = readString(dis, ois);

				this.MAIL_RESPTR = readString(dis, ois);

				this.TY_RESPTR = readString(dis, ois);

				this.ID_PERCEP = readInteger(dis, ois);

				this.NOM_PERCEP = readString(dis, ois);

				this.ID_BURENR = readInteger(dis, ois);

				this.NOM_BURENR = readString(dis, ois);

				this.ID_MAIRIE = readInteger(dis, ois);

				this.NOM_MAIRIE = readString(dis, ois);

				this.ON_MAIRGEST = readString(dis, ois);

				this.LB_MAIRIE = readString(dis, ois);

				this.ID_PREF = readInteger(dis, ois);

				this.NOM_PREF = readString(dis, ois);

				this.ID_ENCAIS = readInteger(dis, ois);

				this.NOM_ENCAIS = readString(dis, ois);

				this.TY_ENCAIS = readString(dis, ois);

				this.ON_CONVLOC = readString(dis, ois);

				this.CD_CNVM = readString(dis, ois);

				this.DTD_CNVM = readDate(dis, ois);

				this.DTF_CNVM = readDate(dis, ois);

				this.DT_SI_CNVM = readDate(dis, ois);

				this.DT_SI_CNVMO = readDate(dis, ois);

				this.TY_CNVM = readString(dis, ois);

				this.LB_TY_CNVM = readString(dis, ois);

				this.ON_CONVCUS = readString(dis, ois);

				this.ON_ROLCUS = readString(dis, ois);

				this.CD_CNVCUS = readString(dis, ois);

				this.DTD_CNVCUS = readDate(dis, ois);

				this.DTF_CNVCUS = readDate(dis, ois);

				this.DT_SI_CNVCUS = readDate(dis, ois);

				this.CD_CLASCUS = readString(dis, ois);

				this.LB_CLASCUS = readString(dis, ois);

				this.NO_CNV_RVN = readInteger(dis, ois);

				this.NO_CNV_RVT = readString(dis, ois);

				this.TY_CNV = readString(dis, ois);

				this.CD_NAT_CNV = readString(dis, ois);

				this.LB_NAT_CNV = readString(dis, ois);

				this.TY_DT_RNV = readString(dis, ois);

				this.DUR_RVN_AN = readInteger(dis, ois);

				this.DUR_RVN_MO = readInteger(dis, ois);

				this.DTD_RVN_PA = readDate(dis, ois);

				this.DTF_RVN_PA = readDate(dis, ois);

				this.MT_UNI_RNV = (BigDecimal) ois.readObject();

				this.ID_RVT = readInteger(dis, ois);

				this.NOM_RVT = readString(dis, ois);

				this.TY_RVT = readString(dis, ois);

				this.LB_SOCIETE = readString(dis, ois);

				this.DT_ALIM = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			} catch (ClassNotFoundException eCNFE) {
				throw new RuntimeException(eCNFE);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				oos.writeObject(this.CD_SOCIETE);

				writeString(this.CD_ACTIVIT, dos, oos);

				dos.writeInt(this.CD_PATRIM2);

				dos.writeInt(this.CD_PATRIM3);

				dos.writeInt(this.CD_PATRIM4);

				dos.writeInt(this.CD_PATRIM5);

				dos.writeInt(this.CD_PATRIM6);

				writeString(this.CD_PATRIM, dos, oos);

				writeString(this.LB_PATRIM1, dos, oos);

				writeString(this.LB_PATRIM2, dos, oos);

				writeString(this.LB_PATRIM3, dos, oos);

				writeString(this.LB_PATRIM4, dos, oos);

				writeString(this.LB_PATRIM5, dos, oos);

				writeString(this.LB_PATRIM6, dos, oos);

				writeString(this.CD_ETAT, dos, oos);

				writeInteger(this.ID_PATRIM, dos, oos);

				writeString(this.ID_RLLBS, dos, oos);

				writeString(this.ID_INVARIANT, dos, oos);

				writeInteger(this.CD_ENT_PAT, dos, oos);

				writeInteger(this.NIV_PAT, dos, oos);

				writeString(this.CD_QUALIF, dos, oos);

				writeInteger(this.CD_ENT_SEC, dos, oos);

				oos.writeObject(this.CD_ORG_SEC);

				writeInteger(this.NIV_SEC, dos, oos);

				writeInteger(this.CD_ENT_CTX, dos, oos);

				oos.writeObject(this.CD_ORG_CTX);

				oos.writeObject(this.CD_SOC_REG);

				writeString(this.CD_LOCALI1, dos, oos);

				writeString(this.CD_LOCALI2, dos, oos);

				writeString(this.CD_LOCALI3, dos, oos);

				writeString(this.CD_LOCALI4, dos, oos);

				writeString(this.CD_LOCALI5, dos, oos);

				writeString(this.ON_ADRPOST, dos, oos);

				writeString(this.ADRPA_NORU, dos, oos);

				writeString(this.ADRPA_CDRU, dos, oos);

				writeString(this.ADRPA_RUE1, dos, oos);

				writeString(this.ADRPA_RUE2, dos, oos);

				writeString(this.ADRPA_LOC, dos, oos);

				writeString(this.ADRPA_CP, dos, oos);

				writeString(this.ADRPA_BD, dos, oos);

				writeString(this.NO_INSEE, dos, oos);

				writeString(this.NO_DEPT, dos, oos);

				oos.writeObject(this.GPS_LONGIT);

				oos.writeObject(this.GPS_LATIT);

				writeString(this.CD_Z_GEOG, dos, oos);

				writeString(this.NO_QPV, dos, oos);

				writeString(this.LB_QPV, dos, oos);

				writeString(this.ON_ZUS, dos, oos);

				writeString(this.ON_ZRR, dos, oos);

				writeString(this.ON_ZFU, dos, oos);

				writeString(this.CD_SEGCUS, dos, oos);

				writeString(this.LB_SEGCUS, dos, oos);

				writeString(this.NO_ANRU, dos, oos);

				writeString(this.ON_ANRU, dos, oos);

				writeString(this.NO_CUCS, dos, oos);

				writeString(this.ON_CUCS, dos, oos);

				writeString(this.ON_PCS, dos, oos);

				oos.writeObject(this.CD_PROGRAM);

				oos.writeObject(this.CD_TRANCHE);

				writeString(this.LB_PR_TR, dos, oos);

				oos.writeObject(this.CD_PAT_TC1);

				oos.writeObject(this.CD_PAT_TC2);

				oos.writeObject(this.CD_PAT_TC3);

				oos.writeObject(this.CD_PAT_TC4);

				oos.writeObject(this.CD_PAT_TC5);

				oos.writeObject(this.CD_PAT_TC6);

				writeString(this.CD_DESTINA, dos, oos);

				writeString(this.LB_DESTINA, dos, oos);

				oos.writeObject(this.SURF_HAB);

				oos.writeObject(this.SURF_REEL);

				oos.writeObject(this.SURF_CORR);

				oos.writeObject(this.SURF_CHAUF);

				oos.writeObject(this.SURF_UTILE);

				writeString(this.SURF_DECPT, dos, oos);

				oos.writeObject(this.MT_EQUIBUD);

				writeString(this.TY_CHAUFF, dos, oos);

				writeString(this.CD_ENERGIE, dos, oos);

				writeString(this.LB_ENERGIE, dos, oos);

				writeString(this.CD_ENEREAU, dos, oos);

				writeString(this.LB_ENEREAU, dos, oos);

				writeDate(this.DT_DPE, dos, oos);

				oos.writeObject(this.CONSO_CCE);

				writeString(this.CLAS_CCE, dos, oos);

				oos.writeObject(this.CONSO_CEG);

				writeString(this.CLAS_CEG, dos, oos);

				writeString(this.ON_ADPTHAN, dos, oos);

				writeString(this.CD_ADPTHAN, dos, oos);

				writeString(this.LB_ADPTHAN, dos, oos);

				writeString(this.ON_ADPTEHAN, dos, oos);

				writeString(this.ON_ACCHAN, dos, oos);

				writeString(this.CD_CATACCHAN, dos, oos);

				writeString(this.LB_CATACCHAN, dos, oos);

				writeString(this.CD_SECTEUR, dos, oos);

				writeString(this.LB_SECTEUR, dos, oos);

				oos.writeObject(this.CD_SOCPROP);

				writeString(this.LB_SOCPROP, dos, oos);

				writeString(this.ON_COPROP, dos, oos);

				writeString(this.CD_TYPROP, dos, oos);

				writeString(this.LB_TYPROP, dos, oos);

				writeString(this.CD_CATPROP, dos, oos);

				writeString(this.LB_CATPROP, dos, oos);

				writeDate(this.DTF_BAILEM, dos, oos);

				writeString(this.CD_MANDGES, dos, oos);

				writeString(this.LB_MANDGES, dos, oos);

				writeString(this.CD_TYFOY, dos, oos);

				writeString(this.LB_TYFOY, dos, oos);

				writeString(this.CD_CATFOY, dos, oos);

				writeString(this.LB_CATFOY, dos, oos);

				writeString(this.TY_CONSTR, dos, oos);

				writeString(this.CD_NATLOC, dos, oos);

				writeString(this.LB_NATLOC, dos, oos);

				writeString(this.CD_RGNATUR, dos, oos);

				writeString(this.CD_TYPLOC, dos, oos);

				writeString(this.LB_TYPLOC, dos, oos);

				writeInteger(this.REP_CHARGE, dos, oos);

				writeInteger(this.NB_PIEPRIN, dos, oos);

				writeString(this.CD_ETAGE, dos, oos);

				writeString(this.LB_ETAGE, dos, oos);

				oos.writeObject(this.NIV_ETAGE);

				oos.writeObject(this.NB_NIVEAUX);

				oos.writeObject(this.SNO_ETAGE);

				writeString(this.ON_ASC, dos, oos);

				writeString(this.ON_REP_ASC, dos, oos);

				writeString(this.CD_CATFP, dos, oos);

				writeString(this.LB_CATFP, dos, oos);

				writeString(this.CD_CATPLAF, dos, oos);

				writeString(this.LB_CATPLAF, dos, oos);

				writeString(this.ON_ELIGCUS, dos, oos);

				writeString(this.CD_CLF_CUS, dos, oos);

				writeDate(this.DT_ACQUIS, dos, oos);

				writeString(this.CD_ACHETEA, dos, oos);

				writeString(this.LB_ACHETEA, dos, oos);

				writeDate(this.DTD_PAT_G, dos, oos);

				writeDate(this.DTD_PAT_R, dos, oos);

				writeString(this.CD_DEBPAT, dos, oos);

				writeString(this.LB_DEBPAT, dos, oos);

				writeString(this.CD_TYDEBPAT, dos, oos);

				writeString(this.LB_TYDEBPAT, dos, oos);

				writeDate(this.DTF_PAT_G, dos, oos);

				writeDate(this.DTF_PAT_R, dos, oos);

				writeString(this.CD_FINPAT, dos, oos);

				writeString(this.LB_FINPAT, dos, oos);

				writeString(this.CD_TYFINPAT, dos, oos);

				writeString(this.LB_TYFINPAT, dos, oos);

				writeDate(this.DT_MELOC, dos, oos);

				writeDate(this.DTF_PREVIS, dos, oos);

				writeDate(this.DTD_MEVENTE, dos, oos);

				writeDate(this.DTF_MEVENTE, dos, oos);

				writeDate(this.DTD_REHAB, dos, oos);

				writeDate(this.DTF_REHAB, dos, oos);

				writeString(this.CD_VENDUA, dos, oos);

				writeString(this.LB_VENDUA, dos, oos);

				writeString(this.CPLPA1_NOM, dos, oos);

				writeString(this.CPLPA1_COD, dos, oos);

				writeString(this.CPLPA1_LIB, dos, oos);

				writeString(this.CPLPA2_NOM, dos, oos);

				writeString(this.CPLPA2_COD, dos, oos);

				writeString(this.CPLPA2_LIB, dos, oos);

				writeString(this.CPLPA3_NOM, dos, oos);

				writeString(this.CPLPA3_COD, dos, oos);

				writeString(this.CPLPA4_NOM, dos, oos);

				writeString(this.CPLPA4_COD, dos, oos);

				oos.writeObject(this.MT_PUMES);

				oos.writeObject(this.MT_FORMES);

				oos.writeObject(this.MT_PULIC);

				oos.writeObject(this.MT_FORLIC);

				writeDate(this.DT_INDLIC, dos, oos);

				oos.writeObject(this.MT_PUMAX);

				oos.writeObject(this.MT_FORMAX);

				oos.writeObject(this.MT_PUOBJ);

				oos.writeObject(this.MT_FOROBJ);

				oos.writeObject(this.MT_PUPRA);

				oos.writeObject(this.MT_TOTRUB);

				oos.writeObject(this.MT_LOYER);

				oos.writeObject(this.MT_LOYANNX);

				oos.writeObject(this.MT_LOYFORF);

				oos.writeObject(this.MT_HLOYER);

				oos.writeObject(this.MT_CHARGES);

				oos.writeObject(this.MT_CHAUFF);

				writeString(this.CD_PERIOD, dos, oos);

				writeString(this.LB_PERIOD, dos, oos);

				writeInteger(this.NB_PERIOD, dos, oos);

				oos.writeObject(this.MT_PUREL);

				oos.writeObject(this.MT_TRUBREL);

				oos.writeObject(this.MT_LOYREL);

				oos.writeObject(this.MT_LAXREL);

				oos.writeObject(this.MT_LFOREL);

				oos.writeObject(this.MT_HLOYREL);

				oos.writeObject(this.MT_CHAREL);

				oos.writeObject(this.MT_CHFREL);

				writeString(this.FACTURDEF, dos, oos);

				writeString(this.NO_BAILDEF, dos, oos);

				writeString(this.LB_BAILDEF, dos, oos);

				writeString(this.ON_DISTMAN, dos, oos);

				oos.writeObject(this.NO_LOGTRES);

				writeString(this.CD_TAXE, dos, oos);

				writeInteger(this.NO_INTERN1, dos, oos);

				writeString(this.NO_INTERN2, dos, oos);

				writeString(this.ON_NONVAL, dos, oos);

				writeDate(this.DTD_NONVAL, dos, oos);

				writeDate(this.DTF_NONVAL, dos, oos);

				writeString(this.TY_NONVAL, dos, oos);

				writeString(this.LB_NONVAL, dos, oos);

				writeString(this.ON_VACANT, dos, oos);

				writeInteger(this.ID_GARD, dos, oos);

				writeString(this.NOM_GARD, dos, oos);

				writeString(this.PRE_GARD, dos, oos);

				writeString(this.TEL_GARD, dos, oos);

				writeString(this.MAIL_GARD, dos, oos);

				writeString(this.TY_GARD, dos, oos);

				writeInteger(this.ID_RESPTR, dos, oos);

				writeString(this.NOM_RESPTR, dos, oos);

				writeString(this.PRE_RESPTR, dos, oos);

				writeString(this.TEL_RESPTR, dos, oos);

				writeString(this.MAIL_RESPTR, dos, oos);

				writeString(this.TY_RESPTR, dos, oos);

				writeInteger(this.ID_PERCEP, dos, oos);

				writeString(this.NOM_PERCEP, dos, oos);

				writeInteger(this.ID_BURENR, dos, oos);

				writeString(this.NOM_BURENR, dos, oos);

				writeInteger(this.ID_MAIRIE, dos, oos);

				writeString(this.NOM_MAIRIE, dos, oos);

				writeString(this.ON_MAIRGEST, dos, oos);

				writeString(this.LB_MAIRIE, dos, oos);

				writeInteger(this.ID_PREF, dos, oos);

				writeString(this.NOM_PREF, dos, oos);

				writeInteger(this.ID_ENCAIS, dos, oos);

				writeString(this.NOM_ENCAIS, dos, oos);

				writeString(this.TY_ENCAIS, dos, oos);

				writeString(this.ON_CONVLOC, dos, oos);

				writeString(this.CD_CNVM, dos, oos);

				writeDate(this.DTD_CNVM, dos, oos);

				writeDate(this.DTF_CNVM, dos, oos);

				writeDate(this.DT_SI_CNVM, dos, oos);

				writeDate(this.DT_SI_CNVMO, dos, oos);

				writeString(this.TY_CNVM, dos, oos);

				writeString(this.LB_TY_CNVM, dos, oos);

				writeString(this.ON_CONVCUS, dos, oos);

				writeString(this.ON_ROLCUS, dos, oos);

				writeString(this.CD_CNVCUS, dos, oos);

				writeDate(this.DTD_CNVCUS, dos, oos);

				writeDate(this.DTF_CNVCUS, dos, oos);

				writeDate(this.DT_SI_CNVCUS, dos, oos);

				writeString(this.CD_CLASCUS, dos, oos);

				writeString(this.LB_CLASCUS, dos, oos);

				writeInteger(this.NO_CNV_RVN, dos, oos);

				writeString(this.NO_CNV_RVT, dos, oos);

				writeString(this.TY_CNV, dos, oos);

				writeString(this.CD_NAT_CNV, dos, oos);

				writeString(this.LB_NAT_CNV, dos, oos);

				writeString(this.TY_DT_RNV, dos, oos);

				writeInteger(this.DUR_RVN_AN, dos, oos);

				writeInteger(this.DUR_RVN_MO, dos, oos);

				writeDate(this.DTD_RVN_PA, dos, oos);

				writeDate(this.DTF_RVN_PA, dos, oos);

				oos.writeObject(this.MT_UNI_RNV);

				writeInteger(this.ID_RVT, dos, oos);

				writeString(this.NOM_RVT, dos, oos);

				writeString(this.TY_RVT, dos, oos);

				writeString(this.LB_SOCIETE, dos, oos);

				writeDate(this.DT_ALIM, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_SOCIETE=" + String.valueOf(CD_SOCIETE));
			sb.append(",CD_ACTIVIT=" + CD_ACTIVIT);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",CD_PATRIM5=" + String.valueOf(CD_PATRIM5));
			sb.append(",CD_PATRIM6=" + String.valueOf(CD_PATRIM6));
			sb.append(",CD_PATRIM=" + CD_PATRIM);
			sb.append(",LB_PATRIM1=" + LB_PATRIM1);
			sb.append(",LB_PATRIM2=" + LB_PATRIM2);
			sb.append(",LB_PATRIM3=" + LB_PATRIM3);
			sb.append(",LB_PATRIM4=" + LB_PATRIM4);
			sb.append(",LB_PATRIM5=" + LB_PATRIM5);
			sb.append(",LB_PATRIM6=" + LB_PATRIM6);
			sb.append(",CD_ETAT=" + CD_ETAT);
			sb.append(",ID_PATRIM=" + String.valueOf(ID_PATRIM));
			sb.append(",ID_RLLBS=" + ID_RLLBS);
			sb.append(",ID_INVARIANT=" + ID_INVARIANT);
			sb.append(",CD_ENT_PAT=" + String.valueOf(CD_ENT_PAT));
			sb.append(",NIV_PAT=" + String.valueOf(NIV_PAT));
			sb.append(",CD_QUALIF=" + CD_QUALIF);
			sb.append(",CD_ENT_SEC=" + String.valueOf(CD_ENT_SEC));
			sb.append(",CD_ORG_SEC=" + String.valueOf(CD_ORG_SEC));
			sb.append(",NIV_SEC=" + String.valueOf(NIV_SEC));
			sb.append(",CD_ENT_CTX=" + String.valueOf(CD_ENT_CTX));
			sb.append(",CD_ORG_CTX=" + String.valueOf(CD_ORG_CTX));
			sb.append(",CD_SOC_REG=" + String.valueOf(CD_SOC_REG));
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",CD_LOCALI2=" + CD_LOCALI2);
			sb.append(",CD_LOCALI3=" + CD_LOCALI3);
			sb.append(",CD_LOCALI4=" + CD_LOCALI4);
			sb.append(",CD_LOCALI5=" + CD_LOCALI5);
			sb.append(",ON_ADRPOST=" + ON_ADRPOST);
			sb.append(",ADRPA_NORU=" + ADRPA_NORU);
			sb.append(",ADRPA_CDRU=" + ADRPA_CDRU);
			sb.append(",ADRPA_RUE1=" + ADRPA_RUE1);
			sb.append(",ADRPA_RUE2=" + ADRPA_RUE2);
			sb.append(",ADRPA_LOC=" + ADRPA_LOC);
			sb.append(",ADRPA_CP=" + ADRPA_CP);
			sb.append(",ADRPA_BD=" + ADRPA_BD);
			sb.append(",NO_INSEE=" + NO_INSEE);
			sb.append(",NO_DEPT=" + NO_DEPT);
			sb.append(",GPS_LONGIT=" + String.valueOf(GPS_LONGIT));
			sb.append(",GPS_LATIT=" + String.valueOf(GPS_LATIT));
			sb.append(",CD_Z_GEOG=" + CD_Z_GEOG);
			sb.append(",NO_QPV=" + NO_QPV);
			sb.append(",LB_QPV=" + LB_QPV);
			sb.append(",ON_ZUS=" + ON_ZUS);
			sb.append(",ON_ZRR=" + ON_ZRR);
			sb.append(",ON_ZFU=" + ON_ZFU);
			sb.append(",CD_SEGCUS=" + CD_SEGCUS);
			sb.append(",LB_SEGCUS=" + LB_SEGCUS);
			sb.append(",NO_ANRU=" + NO_ANRU);
			sb.append(",ON_ANRU=" + ON_ANRU);
			sb.append(",NO_CUCS=" + NO_CUCS);
			sb.append(",ON_CUCS=" + ON_CUCS);
			sb.append(",ON_PCS=" + ON_PCS);
			sb.append(",CD_PROGRAM=" + String.valueOf(CD_PROGRAM));
			sb.append(",CD_TRANCHE=" + String.valueOf(CD_TRANCHE));
			sb.append(",LB_PR_TR=" + LB_PR_TR);
			sb.append(",CD_PAT_TC1=" + String.valueOf(CD_PAT_TC1));
			sb.append(",CD_PAT_TC2=" + String.valueOf(CD_PAT_TC2));
			sb.append(",CD_PAT_TC3=" + String.valueOf(CD_PAT_TC3));
			sb.append(",CD_PAT_TC4=" + String.valueOf(CD_PAT_TC4));
			sb.append(",CD_PAT_TC5=" + String.valueOf(CD_PAT_TC5));
			sb.append(",CD_PAT_TC6=" + String.valueOf(CD_PAT_TC6));
			sb.append(",CD_DESTINA=" + CD_DESTINA);
			sb.append(",LB_DESTINA=" + LB_DESTINA);
			sb.append(",SURF_HAB=" + String.valueOf(SURF_HAB));
			sb.append(",SURF_REEL=" + String.valueOf(SURF_REEL));
			sb.append(",SURF_CORR=" + String.valueOf(SURF_CORR));
			sb.append(",SURF_CHAUF=" + String.valueOf(SURF_CHAUF));
			sb.append(",SURF_UTILE=" + String.valueOf(SURF_UTILE));
			sb.append(",SURF_DECPT=" + SURF_DECPT);
			sb.append(",MT_EQUIBUD=" + String.valueOf(MT_EQUIBUD));
			sb.append(",TY_CHAUFF=" + TY_CHAUFF);
			sb.append(",CD_ENERGIE=" + CD_ENERGIE);
			sb.append(",LB_ENERGIE=" + LB_ENERGIE);
			sb.append(",CD_ENEREAU=" + CD_ENEREAU);
			sb.append(",LB_ENEREAU=" + LB_ENEREAU);
			sb.append(",DT_DPE=" + String.valueOf(DT_DPE));
			sb.append(",CONSO_CCE=" + String.valueOf(CONSO_CCE));
			sb.append(",CLAS_CCE=" + CLAS_CCE);
			sb.append(",CONSO_CEG=" + String.valueOf(CONSO_CEG));
			sb.append(",CLAS_CEG=" + CLAS_CEG);
			sb.append(",ON_ADPTHAN=" + ON_ADPTHAN);
			sb.append(",CD_ADPTHAN=" + CD_ADPTHAN);
			sb.append(",LB_ADPTHAN=" + LB_ADPTHAN);
			sb.append(",ON_ADPTEHAN=" + ON_ADPTEHAN);
			sb.append(",ON_ACCHAN=" + ON_ACCHAN);
			sb.append(",CD_CATACCHAN=" + CD_CATACCHAN);
			sb.append(",LB_CATACCHAN=" + LB_CATACCHAN);
			sb.append(",CD_SECTEUR=" + CD_SECTEUR);
			sb.append(",LB_SECTEUR=" + LB_SECTEUR);
			sb.append(",CD_SOCPROP=" + String.valueOf(CD_SOCPROP));
			sb.append(",LB_SOCPROP=" + LB_SOCPROP);
			sb.append(",ON_COPROP=" + ON_COPROP);
			sb.append(",CD_TYPROP=" + CD_TYPROP);
			sb.append(",LB_TYPROP=" + LB_TYPROP);
			sb.append(",CD_CATPROP=" + CD_CATPROP);
			sb.append(",LB_CATPROP=" + LB_CATPROP);
			sb.append(",DTF_BAILEM=" + String.valueOf(DTF_BAILEM));
			sb.append(",CD_MANDGES=" + CD_MANDGES);
			sb.append(",LB_MANDGES=" + LB_MANDGES);
			sb.append(",CD_TYFOY=" + CD_TYFOY);
			sb.append(",LB_TYFOY=" + LB_TYFOY);
			sb.append(",CD_CATFOY=" + CD_CATFOY);
			sb.append(",LB_CATFOY=" + LB_CATFOY);
			sb.append(",TY_CONSTR=" + TY_CONSTR);
			sb.append(",CD_NATLOC=" + CD_NATLOC);
			sb.append(",LB_NATLOC=" + LB_NATLOC);
			sb.append(",CD_RGNATUR=" + CD_RGNATUR);
			sb.append(",CD_TYPLOC=" + CD_TYPLOC);
			sb.append(",LB_TYPLOC=" + LB_TYPLOC);
			sb.append(",REP_CHARGE=" + String.valueOf(REP_CHARGE));
			sb.append(",NB_PIEPRIN=" + String.valueOf(NB_PIEPRIN));
			sb.append(",CD_ETAGE=" + CD_ETAGE);
			sb.append(",LB_ETAGE=" + LB_ETAGE);
			sb.append(",NIV_ETAGE=" + String.valueOf(NIV_ETAGE));
			sb.append(",NB_NIVEAUX=" + String.valueOf(NB_NIVEAUX));
			sb.append(",SNO_ETAGE=" + String.valueOf(SNO_ETAGE));
			sb.append(",ON_ASC=" + ON_ASC);
			sb.append(",ON_REP_ASC=" + ON_REP_ASC);
			sb.append(",CD_CATFP=" + CD_CATFP);
			sb.append(",LB_CATFP=" + LB_CATFP);
			sb.append(",CD_CATPLAF=" + CD_CATPLAF);
			sb.append(",LB_CATPLAF=" + LB_CATPLAF);
			sb.append(",ON_ELIGCUS=" + ON_ELIGCUS);
			sb.append(",CD_CLF_CUS=" + CD_CLF_CUS);
			sb.append(",DT_ACQUIS=" + String.valueOf(DT_ACQUIS));
			sb.append(",CD_ACHETEA=" + CD_ACHETEA);
			sb.append(",LB_ACHETEA=" + LB_ACHETEA);
			sb.append(",DTD_PAT_G=" + String.valueOf(DTD_PAT_G));
			sb.append(",DTD_PAT_R=" + String.valueOf(DTD_PAT_R));
			sb.append(",CD_DEBPAT=" + CD_DEBPAT);
			sb.append(",LB_DEBPAT=" + LB_DEBPAT);
			sb.append(",CD_TYDEBPAT=" + CD_TYDEBPAT);
			sb.append(",LB_TYDEBPAT=" + LB_TYDEBPAT);
			sb.append(",DTF_PAT_G=" + String.valueOf(DTF_PAT_G));
			sb.append(",DTF_PAT_R=" + String.valueOf(DTF_PAT_R));
			sb.append(",CD_FINPAT=" + CD_FINPAT);
			sb.append(",LB_FINPAT=" + LB_FINPAT);
			sb.append(",CD_TYFINPAT=" + CD_TYFINPAT);
			sb.append(",LB_TYFINPAT=" + LB_TYFINPAT);
			sb.append(",DT_MELOC=" + String.valueOf(DT_MELOC));
			sb.append(",DTF_PREVIS=" + String.valueOf(DTF_PREVIS));
			sb.append(",DTD_MEVENTE=" + String.valueOf(DTD_MEVENTE));
			sb.append(",DTF_MEVENTE=" + String.valueOf(DTF_MEVENTE));
			sb.append(",DTD_REHAB=" + String.valueOf(DTD_REHAB));
			sb.append(",DTF_REHAB=" + String.valueOf(DTF_REHAB));
			sb.append(",CD_VENDUA=" + CD_VENDUA);
			sb.append(",LB_VENDUA=" + LB_VENDUA);
			sb.append(",CPLPA1_NOM=" + CPLPA1_NOM);
			sb.append(",CPLPA1_COD=" + CPLPA1_COD);
			sb.append(",CPLPA1_LIB=" + CPLPA1_LIB);
			sb.append(",CPLPA2_NOM=" + CPLPA2_NOM);
			sb.append(",CPLPA2_COD=" + CPLPA2_COD);
			sb.append(",CPLPA2_LIB=" + CPLPA2_LIB);
			sb.append(",CPLPA3_NOM=" + CPLPA3_NOM);
			sb.append(",CPLPA3_COD=" + CPLPA3_COD);
			sb.append(",CPLPA4_NOM=" + CPLPA4_NOM);
			sb.append(",CPLPA4_COD=" + CPLPA4_COD);
			sb.append(",MT_PUMES=" + String.valueOf(MT_PUMES));
			sb.append(",MT_FORMES=" + String.valueOf(MT_FORMES));
			sb.append(",MT_PULIC=" + String.valueOf(MT_PULIC));
			sb.append(",MT_FORLIC=" + String.valueOf(MT_FORLIC));
			sb.append(",DT_INDLIC=" + String.valueOf(DT_INDLIC));
			sb.append(",MT_PUMAX=" + String.valueOf(MT_PUMAX));
			sb.append(",MT_FORMAX=" + String.valueOf(MT_FORMAX));
			sb.append(",MT_PUOBJ=" + String.valueOf(MT_PUOBJ));
			sb.append(",MT_FOROBJ=" + String.valueOf(MT_FOROBJ));
			sb.append(",MT_PUPRA=" + String.valueOf(MT_PUPRA));
			sb.append(",MT_TOTRUB=" + String.valueOf(MT_TOTRUB));
			sb.append(",MT_LOYER=" + String.valueOf(MT_LOYER));
			sb.append(",MT_LOYANNX=" + String.valueOf(MT_LOYANNX));
			sb.append(",MT_LOYFORF=" + String.valueOf(MT_LOYFORF));
			sb.append(",MT_HLOYER=" + String.valueOf(MT_HLOYER));
			sb.append(",MT_CHARGES=" + String.valueOf(MT_CHARGES));
			sb.append(",MT_CHAUFF=" + String.valueOf(MT_CHAUFF));
			sb.append(",CD_PERIOD=" + CD_PERIOD);
			sb.append(",LB_PERIOD=" + LB_PERIOD);
			sb.append(",NB_PERIOD=" + String.valueOf(NB_PERIOD));
			sb.append(",MT_PUREL=" + String.valueOf(MT_PUREL));
			sb.append(",MT_TRUBREL=" + String.valueOf(MT_TRUBREL));
			sb.append(",MT_LOYREL=" + String.valueOf(MT_LOYREL));
			sb.append(",MT_LAXREL=" + String.valueOf(MT_LAXREL));
			sb.append(",MT_LFOREL=" + String.valueOf(MT_LFOREL));
			sb.append(",MT_HLOYREL=" + String.valueOf(MT_HLOYREL));
			sb.append(",MT_CHAREL=" + String.valueOf(MT_CHAREL));
			sb.append(",MT_CHFREL=" + String.valueOf(MT_CHFREL));
			sb.append(",FACTURDEF=" + FACTURDEF);
			sb.append(",NO_BAILDEF=" + NO_BAILDEF);
			sb.append(",LB_BAILDEF=" + LB_BAILDEF);
			sb.append(",ON_DISTMAN=" + ON_DISTMAN);
			sb.append(",NO_LOGTRES=" + String.valueOf(NO_LOGTRES));
			sb.append(",CD_TAXE=" + CD_TAXE);
			sb.append(",NO_INTERN1=" + String.valueOf(NO_INTERN1));
			sb.append(",NO_INTERN2=" + NO_INTERN2);
			sb.append(",ON_NONVAL=" + ON_NONVAL);
			sb.append(",DTD_NONVAL=" + String.valueOf(DTD_NONVAL));
			sb.append(",DTF_NONVAL=" + String.valueOf(DTF_NONVAL));
			sb.append(",TY_NONVAL=" + TY_NONVAL);
			sb.append(",LB_NONVAL=" + LB_NONVAL);
			sb.append(",ON_VACANT=" + ON_VACANT);
			sb.append(",ID_GARD=" + String.valueOf(ID_GARD));
			sb.append(",NOM_GARD=" + NOM_GARD);
			sb.append(",PRE_GARD=" + PRE_GARD);
			sb.append(",TEL_GARD=" + TEL_GARD);
			sb.append(",MAIL_GARD=" + MAIL_GARD);
			sb.append(",TY_GARD=" + TY_GARD);
			sb.append(",ID_RESPTR=" + String.valueOf(ID_RESPTR));
			sb.append(",NOM_RESPTR=" + NOM_RESPTR);
			sb.append(",PRE_RESPTR=" + PRE_RESPTR);
			sb.append(",TEL_RESPTR=" + TEL_RESPTR);
			sb.append(",MAIL_RESPTR=" + MAIL_RESPTR);
			sb.append(",TY_RESPTR=" + TY_RESPTR);
			sb.append(",ID_PERCEP=" + String.valueOf(ID_PERCEP));
			sb.append(",NOM_PERCEP=" + NOM_PERCEP);
			sb.append(",ID_BURENR=" + String.valueOf(ID_BURENR));
			sb.append(",NOM_BURENR=" + NOM_BURENR);
			sb.append(",ID_MAIRIE=" + String.valueOf(ID_MAIRIE));
			sb.append(",NOM_MAIRIE=" + NOM_MAIRIE);
			sb.append(",ON_MAIRGEST=" + ON_MAIRGEST);
			sb.append(",LB_MAIRIE=" + LB_MAIRIE);
			sb.append(",ID_PREF=" + String.valueOf(ID_PREF));
			sb.append(",NOM_PREF=" + NOM_PREF);
			sb.append(",ID_ENCAIS=" + String.valueOf(ID_ENCAIS));
			sb.append(",NOM_ENCAIS=" + NOM_ENCAIS);
			sb.append(",TY_ENCAIS=" + TY_ENCAIS);
			sb.append(",ON_CONVLOC=" + ON_CONVLOC);
			sb.append(",CD_CNVM=" + CD_CNVM);
			sb.append(",DTD_CNVM=" + String.valueOf(DTD_CNVM));
			sb.append(",DTF_CNVM=" + String.valueOf(DTF_CNVM));
			sb.append(",DT_SI_CNVM=" + String.valueOf(DT_SI_CNVM));
			sb.append(",DT_SI_CNVMO=" + String.valueOf(DT_SI_CNVMO));
			sb.append(",TY_CNVM=" + TY_CNVM);
			sb.append(",LB_TY_CNVM=" + LB_TY_CNVM);
			sb.append(",ON_CONVCUS=" + ON_CONVCUS);
			sb.append(",ON_ROLCUS=" + ON_ROLCUS);
			sb.append(",CD_CNVCUS=" + CD_CNVCUS);
			sb.append(",DTD_CNVCUS=" + String.valueOf(DTD_CNVCUS));
			sb.append(",DTF_CNVCUS=" + String.valueOf(DTF_CNVCUS));
			sb.append(",DT_SI_CNVCUS=" + String.valueOf(DT_SI_CNVCUS));
			sb.append(",CD_CLASCUS=" + CD_CLASCUS);
			sb.append(",LB_CLASCUS=" + LB_CLASCUS);
			sb.append(",NO_CNV_RVN=" + String.valueOf(NO_CNV_RVN));
			sb.append(",NO_CNV_RVT=" + NO_CNV_RVT);
			sb.append(",TY_CNV=" + TY_CNV);
			sb.append(",CD_NAT_CNV=" + CD_NAT_CNV);
			sb.append(",LB_NAT_CNV=" + LB_NAT_CNV);
			sb.append(",TY_DT_RNV=" + TY_DT_RNV);
			sb.append(",DUR_RVN_AN=" + String.valueOf(DUR_RVN_AN));
			sb.append(",DUR_RVN_MO=" + String.valueOf(DUR_RVN_MO));
			sb.append(",DTD_RVN_PA=" + String.valueOf(DTD_RVN_PA));
			sb.append(",DTF_RVN_PA=" + String.valueOf(DTF_RVN_PA));
			sb.append(",MT_UNI_RNV=" + String.valueOf(MT_UNI_RNV));
			sb.append(",ID_RVT=" + String.valueOf(ID_RVT));
			sb.append(",NOM_RVT=" + NOM_RVT);
			sb.append(",TY_RVT=" + TY_RVT);
			sb.append(",LB_SOCIETE=" + LB_SOCIETE);
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row20Struct row20 = new row20Struct();

				/**
				 * [tAdvancedHash_row20 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row20", false);
				start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row20";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tAdvancedHash_row20 = 0;

				// connection name:row20
				// source node:tDBInput_16 - inputs:(after_tDBInput_13) outputs:(row20,row20) |
				// target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
				// linked node: tMap_5 - inputs:(row13,row14,row15,row20,row21)
				// outputs:(copyOfout2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row20Struct>getLookup(matchingModeEnum_row20);

				globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);

				/**
				 * [tAdvancedHash_row20 begin ] stop
				 */

				/**
				 * [tDBInput_16 begin ] start
				 */

				ok_Hash.put("tDBInput_16", false);
				start_Hash.put("tDBInput_16", System.currentTimeMillis());

				currentComponent = "tDBInput_16";

				int tos_count_tDBInput_16 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_16 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_16 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_16 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_16, talendToDBArray_tDBInput_16);
				int nb_line_tDBInput_16 = 0;
				java.sql.Connection conn_tDBInput_16 = null;
				String driverClass_tDBInput_16 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_16 = java.lang.Class.forName(driverClass_tDBInput_16);
				String dbUser_tDBInput_16 = "";

				final String decryptedPassword_tDBInput_16 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:b8YNZkZPlA7Bi09P8Mh3Hcwhpn3f4iolH6RoWQ==");

				String dbPwd_tDBInput_16 = decryptedPassword_tDBInput_16;

				String port_tDBInput_16 = "1433";
				String dbname_tDBInput_16 = "HDSHData";
				String url_tDBInput_16 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_16)) {
					url_tDBInput_16 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_16)) {
					url_tDBInput_16 += "//" + "HDSHData";
				}
				url_tDBInput_16 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_16 = "";

				conn_tDBInput_16 = java.sql.DriverManager.getConnection(url_tDBInput_16, dbUser_tDBInput_16,
						dbPwd_tDBInput_16);

				java.sql.Statement stmt_tDBInput_16 = conn_tDBInput_16.createStatement();

				String dbquery_tDBInput_16 = "SELECT T_PATRIMOINE_GIM.CD_SOCIETE,\n		T_PATRIMOINE_GIM.CD_ACTIVIT,\n		T_PATRIMOINE_GIM.CD_PATRIM1,\n		T_PATRIMOINE_GIM.CD"
						+ "_PATRIM2,\n		T_PATRIMOINE_GIM.CD_PATRIM3,\n		T_PATRIMOINE_GIM.CD_PATRIM4,\n		T_PATRIMOINE_GIM.CD_PATRIM5,\n		T_PATRIMOINE_GI"
						+ "M.CD_PATRIM6,\n		T_PATRIMOINE_GIM.CD_PATRIM,\n		T_PATRIMOINE_GIM.LB_PATRIM1,\n		T_PATRIMOINE_GIM.LB_PATRIM2,\n		T_PATRIMOINE"
						+ "_GIM.LB_PATRIM3,\n		T_PATRIMOINE_GIM.LB_PATRIM4,\n		T_PATRIMOINE_GIM.LB_PATRIM5,\n		T_PATRIMOINE_GIM.LB_PATRIM6,\n		T_PATRIM"
						+ "OINE_GIM.CD_ETAT,\n		T_PATRIMOINE_GIM.ID_PATRIM,\n		T_PATRIMOINE_GIM.ID_RLLBS,\n		T_PATRIMOINE_GIM.ID_INVARIANT,\n		T_PATRIM"
						+ "OINE_GIM.CD_ENT_PAT,\n		T_PATRIMOINE_GIM.NIV_PAT,\n		T_PATRIMOINE_GIM.CD_QUALIF,\n		T_PATRIMOINE_GIM.CD_ENT_SEC,\n		T_PATRIM"
						+ "OINE_GIM.CD_ORG_SEC,\n		T_PATRIMOINE_GIM.NIV_SEC,\n		T_PATRIMOINE_GIM.CD_ENT_CTX,\n		T_PATRIMOINE_GIM.CD_ORG_CTX,\n		T_PATRI"
						+ "MOINE_GIM.CD_SOC_REG,\n		T_PATRIMOINE_GIM.CD_LOCALI1,\n		T_PATRIMOINE_GIM.CD_LOCALI2,\n		T_PATRIMOINE_GIM.CD_LOCALI3,\n		T_P"
						+ "ATRIMOINE_GIM.CD_LOCALI4,\n		T_PATRIMOINE_GIM.CD_LOCALI5,\n		T_PATRIMOINE_GIM.ON_ADRPOST,\n		T_PATRIMOINE_GIM.ADRPA_NORU,\n	"
						+ "	T_PATRIMOINE_GIM.ADRPA_CDRU,\n		T_PATRIMOINE_GIM.ADRPA_RUE1,\n		T_PATRIMOINE_GIM.ADRPA_RUE2,\n		T_PATRIMOINE_GIM.ADRPA_LOC"
						+ ",\n		T_PATRIMOINE_GIM.ADRPA_CP,\n		T_PATRIMOINE_GIM.ADRPA_BD,\n		T_PATRIMOINE_GIM.NO_INSEE,\n		T_PATRIMOINE_GIM.NO_DEPT,\n		T"
						+ "_PATRIMOINE_GIM.GPS_LONGIT,\n		T_PATRIMOINE_GIM.GPS_LATIT,\n		T_PATRIMOINE_GIM.CD_Z_GEOG,\n		T_PATRIMOINE_GIM.NO_QPV,\n		T_P"
						+ "ATRIMOINE_GIM.LB_QPV,\n		T_PATRIMOINE_GIM.ON_ZUS,\n		T_PATRIMOINE_GIM.ON_ZRR,\n		T_PATRIMOINE_GIM.ON_ZFU,\n		T_PATRIMOINE_GI"
						+ "M.CD_SEGCUS,\n		T_PATRIMOINE_GIM.LB_SEGCUS,\n		T_PATRIMOINE_GIM.NO_ANRU,\n		T_PATRIMOINE_GIM.ON_ANRU,\n		T_PATRIMOINE_GIM.NO"
						+ "_CUCS,\n		T_PATRIMOINE_GIM.ON_CUCS,\n		T_PATRIMOINE_GIM.ON_PCS,\n		T_PATRIMOINE_GIM.CD_PROGRAM,\n		T_PATRIMOINE_GIM.CD_TRANC"
						+ "HE,\n		T_PATRIMOINE_GIM.LB_PR_TR,\n		T_PATRIMOINE_GIM.CD_PAT_TC1,\n		T_PATRIMOINE_GIM.CD_PAT_TC2,\n		T_PATRIMOINE_GIM.CD_PAT"
						+ "_TC3,\n		T_PATRIMOINE_GIM.CD_PAT_TC4,\n		T_PATRIMOINE_GIM.CD_PAT_TC5,\n		T_PATRIMOINE_GIM.CD_PAT_TC6,\n		T_PATRIMOINE_GIM.CD"
						+ "_DESTINA,\n		T_PATRIMOINE_GIM.LB_DESTINA,\n		T_PATRIMOINE_GIM.SURF_HAB,\n		T_PATRIMOINE_GIM.SURF_REEL,\n		T_PATRIMOINE_GIM.S"
						+ "URF_CORR,\n		T_PATRIMOINE_GIM.SURF_CHAUF,\n		T_PATRIMOINE_GIM.SURF_UTILE,\n		T_PATRIMOINE_GIM.SURF_DECPT,\n		T_PATRIMOINE_GI"
						+ "M.MT_EQUIBUD,\n		T_PATRIMOINE_GIM.TY_CHAUFF,\n		T_PATRIMOINE_GIM.CD_ENERGIE,\n		T_PATRIMOINE_GIM.LB_ENERGIE,\n		T_PATRIMOINE"
						+ "_GIM.CD_ENEREAU,\n		T_PATRIMOINE_GIM.LB_ENEREAU,\n		T_PATRIMOINE_GIM.DT_DPE,\n		T_PATRIMOINE_GIM.CONSO_CCE,\n		T_PATRIMOINE_"
						+ "GIM.CLAS_CCE,\n		T_PATRIMOINE_GIM.CONSO_CEG,\n		T_PATRIMOINE_GIM.CLAS_CEG,\n		T_PATRIMOINE_GIM.ON_ADPTHAN,\n		T_PATRIMOINE_G"
						+ "IM.CD_ADPTHAN,\n		T_PATRIMOINE_GIM.LB_ADPTHAN,\n		T_PATRIMOINE_GIM.ON_ADPTEHAN,\n		T_PATRIMOINE_GIM.ON_ACCHAN,\n		T_PATRIMOI"
						+ "NE_GIM.CD_CATACCHAN,\n		T_PATRIMOINE_GIM.LB_CATACCHAN,\n		T_PATRIMOINE_GIM.CD_SECTEUR,\n		T_PATRIMOINE_GIM.LB_SECTEUR,\n		T_"
						+ "PATRIMOINE_GIM.CD_SOCPROP,\n		T_PATRIMOINE_GIM.LB_SOCPROP,\n		T_PATRIMOINE_GIM.ON_COPROP,\n		T_PATRIMOINE_GIM.CD_TYPROP,\n		"
						+ "T_PATRIMOINE_GIM.LB_TYPROP,\n		T_PATRIMOINE_GIM.CD_CATPROP,\n		T_PATRIMOINE_GIM.LB_CATPROP,\n		T_PATRIMOINE_GIM.DTF_BAILEM,"
						+ "\n		T_PATRIMOINE_GIM.CD_MANDGES,\n		T_PATRIMOINE_GIM.LB_MANDGES,\n		T_PATRIMOINE_GIM.CD_TYFOY,\n		T_PATRIMOINE_GIM.LB_TYFOY,"
						+ "\n		T_PATRIMOINE_GIM.CD_CATFOY,\n		T_PATRIMOINE_GIM.LB_CATFOY,\n		T_PATRIMOINE_GIM.TY_CONSTR,\n		T_PATRIMOINE_GIM.CD_NATLOC,"
						+ "\n		T_PATRIMOINE_GIM.LB_NATLOC,\n		T_PATRIMOINE_GIM.CD_RGNATUR,\n		T_PATRIMOINE_GIM.CD_TYPLOC,\n		T_PATRIMOINE_GIM.LB_TYPLOC"
						+ ",\n		T_PATRIMOINE_GIM.REP_CHARGE,\n		T_PATRIMOINE_GIM.NB_PIEPRIN,\n		T_PATRIMOINE_GIM.CD_ETAGE,\n		T_PATRIMOINE_GIM.LB_ETAGE"
						+ ",\n		T_PATRIMOINE_GIM.NIV_ETAGE,\n		T_PATRIMOINE_GIM.NB_NIVEAUX,\n		T_PATRIMOINE_GIM.SNO_ETAGE,\n		T_PATRIMOINE_GIM.ON_ASC,\n"
						+ "		T_PATRIMOINE_GIM.ON_REP_ASC,\n		T_PATRIMOINE_GIM.CD_CATFP,\n		T_PATRIMOINE_GIM.LB_CATFP,\n		T_PATRIMOINE_GIM.CD_CATPLAF,\n"
						+ "		T_PATRIMOINE_GIM.LB_CATPLAF,\n		T_PATRIMOINE_GIM.ON_ELIGCUS,\n		T_PATRIMOINE_GIM.CD_CLF_CUS,\n		T_PATRIMOINE_GIM.DT_ACQUI"
						+ "S,\n		T_PATRIMOINE_GIM.CD_ACHETEA,\n		T_PATRIMOINE_GIM.LB_ACHETEA,\n		T_PATRIMOINE_GIM.DTD_PAT_G,\n		T_PATRIMOINE_GIM.DTD_PA"
						+ "T_R,\n		T_PATRIMOINE_GIM.CD_DEBPAT,\n		T_PATRIMOINE_GIM.LB_DEBPAT,\n		T_PATRIMOINE_GIM.CD_TYDEBPAT,\n		T_PATRIMOINE_GIM.LB_T"
						+ "YDEBPAT,\n		T_PATRIMOINE_GIM.DTF_PAT_G,\n		T_PATRIMOINE_GIM.DTF_PAT_R,\n		T_PATRIMOINE_GIM.CD_FINPAT,\n		T_PATRIMOINE_GIM.LB"
						+ "_FINPAT,\n		T_PATRIMOINE_GIM.CD_TYFINPAT,\n		T_PATRIMOINE_GIM.LB_TYFINPAT,\n		T_PATRIMOINE_GIM.DT_MELOC,\n		T_PATRIMOINE_GIM"
						+ ".DTF_PREVIS,\n		T_PATRIMOINE_GIM.DTD_MEVENTE,\n		T_PATRIMOINE_GIM.DTF_MEVENTE,\n		T_PATRIMOINE_GIM.DTD_REHAB,\n		T_PATRIMOIN"
						+ "E_GIM.DTF_REHAB,\n		T_PATRIMOINE_GIM.CD_VENDUA,\n		T_PATRIMOINE_GIM.LB_VENDUA,\n		T_PATRIMOINE_GIM.CPLPA1_NOM,\n		T_PATRIMOI"
						+ "NE_GIM.CPLPA1_COD,\n		T_PATRIMOINE_GIM.CPLPA1_LIB,\n		T_PATRIMOINE_GIM.CPLPA2_NOM,\n		T_PATRIMOINE_GIM.CPLPA2_COD,\n		T_PATR"
						+ "IMOINE_GIM.CPLPA2_LIB,\n		T_PATRIMOINE_GIM.CPLPA3_NOM,\n		T_PATRIMOINE_GIM.CPLPA3_COD,\n		T_PATRIMOINE_GIM.CPLPA4_NOM,\n		T_"
						+ "PATRIMOINE_GIM.CPLPA4_COD,\n		T_PATRIMOINE_GIM.MT_PUMES,\n		T_PATRIMOINE_GIM.MT_FORMES,\n		T_PATRIMOINE_GIM.MT_PULIC,\n		T_P"
						+ "ATRIMOINE_GIM.MT_FORLIC,\n		T_PATRIMOINE_GIM.DT_INDLIC,\n		T_PATRIMOINE_GIM.MT_PUMAX,\n		T_PATRIMOINE_GIM.MT_FORMAX,\n		T_PA"
						+ "TRIMOINE_GIM.MT_PUOBJ,\n		T_PATRIMOINE_GIM.MT_FOROBJ,\n		T_PATRIMOINE_GIM.MT_PUPRA,\n		T_PATRIMOINE_GIM.MT_TOTRUB,\n		T_PATR"
						+ "IMOINE_GIM.MT_LOYER,\n		T_PATRIMOINE_GIM.MT_LOYANNX,\n		T_PATRIMOINE_GIM.MT_LOYFORF,\n		T_PATRIMOINE_GIM.MT_HLOYER,\n		T_PAT"
						+ "RIMOINE_GIM.MT_CHARGES,\n		T_PATRIMOINE_GIM.MT_CHAUFF,\n		T_PATRIMOINE_GIM.CD_PERIOD,\n		T_PATRIMOINE_GIM.LB_PERIOD,\n		T_PA"
						+ "TRIMOINE_GIM.NB_PERIOD,\n		T_PATRIMOINE_GIM.MT_PUREL,\n		T_PATRIMOINE_GIM.MT_TRUBREL,\n		T_PATRIMOINE_GIM.MT_LOYREL,\n		T_PA"
						+ "TRIMOINE_GIM.MT_LAXREL,\n		T_PATRIMOINE_GIM.MT_LFOREL,\n		T_PATRIMOINE_GIM.MT_HLOYREL,\n		T_PATRIMOINE_GIM.MT_CHAREL,\n		T_P"
						+ "ATRIMOINE_GIM.MT_CHFREL,\n		T_PATRIMOINE_GIM.FACTURDEF,\n		T_PATRIMOINE_GIM.NO_BAILDEF,\n		T_PATRIMOINE_GIM.LB_BAILDEF,\n		T"
						+ "_PATRIMOINE_GIM.ON_DISTMAN,\n		T_PATRIMOINE_GIM.NO_LOGTRES,\n		T_PATRIMOINE_GIM.CD_TAXE,\n		T_PATRIMOINE_GIM.NO_INTERN1,\n		"
						+ "T_PATRIMOINE_GIM.NO_INTERN2,\n		T_PATRIMOINE_GIM.ON_NONVAL,\n		T_PATRIMOINE_GIM.DTD_NONVAL,\n		T_PATRIMOINE_GIM.DTF_NONVAL,"
						+ "\n		T_PATRIMOINE_GIM.TY_NONVAL,\n		T_PATRIMOINE_GIM.LB_NONVAL,\n		T_PATRIMOINE_GIM.ON_VACANT,\n		T_PATRIMOINE_GIM.ID_GARD,\n	"
						+ "	T_PATRIMOINE_GIM.NOM_GARD,\n		T_PATRIMOINE_GIM.PRE_GARD,\n		T_PATRIMOINE_GIM.TEL_GARD,\n		T_PATRIMOINE_GIM.MAIL_GARD,\n		T_"
						+ "PATRIMOINE_GIM.TY_GARD,\n		T_PATRIMOINE_GIM.ID_RESPTR,\n		T_PATRIMOINE_GIM.NOM_RESPTR,\n		T_PATRIMOINE_GIM.PRE_RESPTR,\n		T_"
						+ "PATRIMOINE_GIM.TEL_RESPTR,\n		T_PATRIMOINE_GIM.MAIL_RESPTR,\n		T_PATRIMOINE_GIM.TY_RESPTR,\n		T_PATRIMOINE_GIM.ID_PERCEP,\n	"
						+ "	T_PATRIMOINE_GIM.NOM_PERCEP,\n		T_PATRIMOINE_GIM.ID_BURENR,\n		T_PATRIMOINE_GIM.NOM_BURENR,\n		T_PATRIMOINE_GIM.ID_MAIRIE,"
						+ "\n		T_PATRIMOINE_GIM.NOM_MAIRIE,\n		T_PATRIMOINE_GIM.ON_MAIRGEST,\n		T_PATRIMOINE_GIM.LB_MAIRIE,\n		T_PATRIMOINE_GIM.ID_PREF"
						+ ",\n		T_PATRIMOINE_GIM.NOM_PREF,\n		T_PATRIMOINE_GIM.ID_ENCAIS,\n		T_PATRIMOINE_GIM.NOM_ENCAIS,\n		T_PATRIMOINE_GIM.TY_ENCAIS"
						+ ",\n		T_PATRIMOINE_GIM.ON_CONVLOC,\n		T_PATRIMOINE_GIM.CD_CNVM,\n		T_PATRIMOINE_GIM.DTD_CNVM,\n		T_PATRIMOINE_GIM.DTF_CNVM,\n	"
						+ "	T_PATRIMOINE_GIM.DT_SI_CNVM,\n		T_PATRIMOINE_GIM.DT_SI_CNVMO,\n		T_PATRIMOINE_GIM.TY_CNVM,\n		T_PATRIMOINE_GIM.LB_TY_CNVM,"
						+ "\n		T_PATRIMOINE_GIM.ON_CONVCUS,\n		T_PATRIMOINE_GIM.ON_ROLCUS,\n		T_PATRIMOINE_GIM.CD_CNVCUS,\n		T_PATRIMOINE_GIM.DTD_CNVCU"
						+ "S,\n		T_PATRIMOINE_GIM.DTF_CNVCUS,\n		T_PATRIMOINE_GIM.DT_SI_CNVCUS,\n		T_PATRIMOINE_GIM.CD_CLASCUS,\n		T_PATRIMOINE_GIM.LB_"
						+ "CLASCUS,\n		T_PATRIMOINE_GIM.NO_CNV_RVN,\n		T_PATRIMOINE_GIM.NO_CNV_RVT,\n		T_PATRIMOINE_GIM.TY_CNV,\n		T_PATRIMOINE_GIM.CD_"
						+ "NAT_CNV,\n		T_PATRIMOINE_GIM.LB_NAT_CNV,\n		T_PATRIMOINE_GIM.TY_DT_RNV,\n		T_PATRIMOINE_GIM.DUR_RVN_AN,\n		T_PATRIMOINE_GIM."
						+ "DUR_RVN_MO,\n		T_PATRIMOINE_GIM.DTD_RVN_PA,\n		T_PATRIMOINE_GIM.DTF_RVN_PA,\n		T_PATRIMOINE_GIM.MT_UNI_RNV,\n		T_PATRIMOINE_"
						+ "GIM.ID_RVT,\n		T_PATRIMOINE_GIM.NOM_RVT,\n		T_PATRIMOINE_GIM.TY_RVT,\n		T_PATRIMOINE_GIM.LB_SOCIETE,\n		T_PATRIMOINE_GIM.DT_"
						+ "ALIM\nFROM	T_PATRIMOINE_GIM";

				globalMap.put("tDBInput_16_QUERY", dbquery_tDBInput_16);
				java.sql.ResultSet rs_tDBInput_16 = null;

				try {
					rs_tDBInput_16 = stmt_tDBInput_16.executeQuery(dbquery_tDBInput_16);
					java.sql.ResultSetMetaData rsmd_tDBInput_16 = rs_tDBInput_16.getMetaData();
					int colQtyInRs_tDBInput_16 = rsmd_tDBInput_16.getColumnCount();

					String tmpContent_tDBInput_16 = null;

					while (rs_tDBInput_16.next()) {
						nb_line_tDBInput_16++;

						if (colQtyInRs_tDBInput_16 < 1) {
							row20.CD_SOCIETE = null;
						} else {

							row20.CD_SOCIETE = rs_tDBInput_16.getBigDecimal(1);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 2) {
							row20.CD_ACTIVIT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(2);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ACTIVIT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ACTIVIT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ACTIVIT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 3) {
							row20.CD_PATRIM1 = 0;
						} else {

							row20.CD_PATRIM1 = rs_tDBInput_16.getInt(3);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 4) {
							row20.CD_PATRIM2 = 0;
						} else {

							row20.CD_PATRIM2 = rs_tDBInput_16.getInt(4);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 5) {
							row20.CD_PATRIM3 = 0;
						} else {

							row20.CD_PATRIM3 = rs_tDBInput_16.getInt(5);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 6) {
							row20.CD_PATRIM4 = 0;
						} else {

							row20.CD_PATRIM4 = rs_tDBInput_16.getInt(6);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 7) {
							row20.CD_PATRIM5 = 0;
						} else {

							row20.CD_PATRIM5 = rs_tDBInput_16.getInt(7);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 8) {
							row20.CD_PATRIM6 = 0;
						} else {

							row20.CD_PATRIM6 = rs_tDBInput_16.getInt(8);
							if (rs_tDBInput_16.wasNull()) {
								throw new RuntimeException("Null value in non-Nullable column");
							}
						}
						if (colQtyInRs_tDBInput_16 < 9) {
							row20.CD_PATRIM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(9);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_PATRIM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 10) {
							row20.LB_PATRIM1 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(10);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM1 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 11) {
							row20.LB_PATRIM2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(11);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM2 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 12) {
							row20.LB_PATRIM3 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(12);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM3 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 13) {
							row20.LB_PATRIM4 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(13);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM4 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 14) {
							row20.LB_PATRIM5 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(14);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM5 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM5 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 15) {
							row20.LB_PATRIM6 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(15);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PATRIM6 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PATRIM6 = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PATRIM6 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 16) {
							row20.CD_ETAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(16);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ETAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ETAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ETAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 17) {
							row20.ID_PATRIM = null;
						} else {

							row20.ID_PATRIM = rs_tDBInput_16.getInt(17);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 18) {
							row20.ID_RLLBS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(18);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ID_RLLBS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ID_RLLBS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ID_RLLBS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 19) {
							row20.ID_INVARIANT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(19);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ID_INVARIANT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ID_INVARIANT = tmpContent_tDBInput_16;
								}
							} else {
								row20.ID_INVARIANT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 20) {
							row20.CD_ENT_PAT = null;
						} else {

							row20.CD_ENT_PAT = rs_tDBInput_16.getInt(20);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_ENT_PAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 21) {
							row20.NIV_PAT = null;
						} else {

							row20.NIV_PAT = rs_tDBInput_16.getInt(21);
							if (rs_tDBInput_16.wasNull()) {
								row20.NIV_PAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 22) {
							row20.CD_QUALIF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(22);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_QUALIF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_QUALIF = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_QUALIF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 23) {
							row20.CD_ENT_SEC = null;
						} else {

							row20.CD_ENT_SEC = rs_tDBInput_16.getInt(23);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_ENT_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 24) {
							row20.CD_ORG_SEC = null;
						} else {

							row20.CD_ORG_SEC = rs_tDBInput_16.getBigDecimal(24);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_ORG_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 25) {
							row20.NIV_SEC = null;
						} else {

							row20.NIV_SEC = rs_tDBInput_16.getInt(25);
							if (rs_tDBInput_16.wasNull()) {
								row20.NIV_SEC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 26) {
							row20.CD_ENT_CTX = null;
						} else {

							row20.CD_ENT_CTX = rs_tDBInput_16.getInt(26);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_ENT_CTX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 27) {
							row20.CD_ORG_CTX = null;
						} else {

							row20.CD_ORG_CTX = rs_tDBInput_16.getBigDecimal(27);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_ORG_CTX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 28) {
							row20.CD_SOC_REG = null;
						} else {

							row20.CD_SOC_REG = rs_tDBInput_16.getBigDecimal(28);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_SOC_REG = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 29) {
							row20.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(29);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(29).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_LOCALI1 = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 30) {
							row20.CD_LOCALI2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(30);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(30).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_LOCALI2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_LOCALI2 = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_LOCALI2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 31) {
							row20.CD_LOCALI3 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(31);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(31).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_LOCALI3 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_LOCALI3 = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_LOCALI3 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 32) {
							row20.CD_LOCALI4 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(32);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(32).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_LOCALI4 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_LOCALI4 = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_LOCALI4 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 33) {
							row20.CD_LOCALI5 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(33);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(33).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_LOCALI5 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_LOCALI5 = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_LOCALI5 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 34) {
							row20.ON_ADRPOST = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(34);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(34).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ADRPOST = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ADRPOST = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ADRPOST = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 35) {
							row20.ADRPA_NORU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(35);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(35).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_NORU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_NORU = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_NORU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 36) {
							row20.ADRPA_CDRU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(36);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(36).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_CDRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_CDRU = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_CDRU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 37) {
							row20.ADRPA_RUE1 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(37);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(37).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_RUE1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_RUE1 = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_RUE1 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 38) {
							row20.ADRPA_RUE2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(38);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(38).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_RUE2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_RUE2 = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_RUE2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 39) {
							row20.ADRPA_LOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(39);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(39).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_LOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_LOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_LOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 40) {
							row20.ADRPA_CP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(40);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(40).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_CP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_CP = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_CP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 41) {
							row20.ADRPA_BD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(41);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(41).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRPA_BD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ADRPA_BD = tmpContent_tDBInput_16;
								}
							} else {
								row20.ADRPA_BD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 42) {
							row20.NO_INSEE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(42);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(42).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_INSEE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_INSEE = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_INSEE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 43) {
							row20.NO_DEPT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(43);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(43).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_DEPT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_DEPT = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_DEPT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 44) {
							row20.GPS_LONGIT = null;
						} else {

							row20.GPS_LONGIT = rs_tDBInput_16.getBigDecimal(44);
							if (rs_tDBInput_16.wasNull()) {
								row20.GPS_LONGIT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 45) {
							row20.GPS_LATIT = null;
						} else {

							row20.GPS_LATIT = rs_tDBInput_16.getBigDecimal(45);
							if (rs_tDBInput_16.wasNull()) {
								row20.GPS_LATIT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 46) {
							row20.CD_Z_GEOG = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(46);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(46).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_Z_GEOG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_Z_GEOG = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_Z_GEOG = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 47) {
							row20.NO_QPV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(47);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(47).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_QPV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_QPV = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_QPV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 48) {
							row20.LB_QPV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(48);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(48).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_QPV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_QPV = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_QPV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 49) {
							row20.ON_ZUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(49);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(49).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ZUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ZUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ZUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 50) {
							row20.ON_ZRR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(50);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(50).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ZRR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ZRR = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ZRR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 51) {
							row20.ON_ZFU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(51);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(51).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ZFU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ZFU = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ZFU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 52) {
							row20.CD_SEGCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(52);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(52).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_SEGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_SEGCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_SEGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 53) {
							row20.LB_SEGCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(53);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(53).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_SEGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_SEGCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_SEGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 54) {
							row20.NO_ANRU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(54);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(54).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_ANRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_ANRU = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_ANRU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 55) {
							row20.ON_ANRU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(55);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(55).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ANRU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ANRU = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ANRU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 56) {
							row20.NO_CUCS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(56);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(56).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_CUCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_CUCS = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_CUCS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 57) {
							row20.ON_CUCS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(57);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(57).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_CUCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_CUCS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_CUCS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 58) {
							row20.ON_PCS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(58);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(58).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_PCS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_PCS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_PCS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 59) {
							row20.CD_PROGRAM = null;
						} else {

							row20.CD_PROGRAM = rs_tDBInput_16.getBigDecimal(59);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PROGRAM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 60) {
							row20.CD_TRANCHE = null;
						} else {

							row20.CD_TRANCHE = rs_tDBInput_16.getBigDecimal(60);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_TRANCHE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 61) {
							row20.LB_PR_TR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(61);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(61).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PR_TR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PR_TR = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PR_TR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 62) {
							row20.CD_PAT_TC1 = null;
						} else {

							row20.CD_PAT_TC1 = rs_tDBInput_16.getBigDecimal(62);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC1 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 63) {
							row20.CD_PAT_TC2 = null;
						} else {

							row20.CD_PAT_TC2 = rs_tDBInput_16.getBigDecimal(63);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 64) {
							row20.CD_PAT_TC3 = null;
						} else {

							row20.CD_PAT_TC3 = rs_tDBInput_16.getBigDecimal(64);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC3 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 65) {
							row20.CD_PAT_TC4 = null;
						} else {

							row20.CD_PAT_TC4 = rs_tDBInput_16.getBigDecimal(65);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC4 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 66) {
							row20.CD_PAT_TC5 = null;
						} else {

							row20.CD_PAT_TC5 = rs_tDBInput_16.getBigDecimal(66);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC5 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 67) {
							row20.CD_PAT_TC6 = null;
						} else {

							row20.CD_PAT_TC6 = rs_tDBInput_16.getBigDecimal(67);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_PAT_TC6 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 68) {
							row20.CD_DESTINA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(68);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(68).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_DESTINA = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 69) {
							row20.LB_DESTINA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(69);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(69).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_DESTINA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_DESTINA = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_DESTINA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 70) {
							row20.SURF_HAB = null;
						} else {

							row20.SURF_HAB = rs_tDBInput_16.getBigDecimal(70);
							if (rs_tDBInput_16.wasNull()) {
								row20.SURF_HAB = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 71) {
							row20.SURF_REEL = null;
						} else {

							row20.SURF_REEL = rs_tDBInput_16.getBigDecimal(71);
							if (rs_tDBInput_16.wasNull()) {
								row20.SURF_REEL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 72) {
							row20.SURF_CORR = null;
						} else {

							row20.SURF_CORR = rs_tDBInput_16.getBigDecimal(72);
							if (rs_tDBInput_16.wasNull()) {
								row20.SURF_CORR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 73) {
							row20.SURF_CHAUF = null;
						} else {

							row20.SURF_CHAUF = rs_tDBInput_16.getBigDecimal(73);
							if (rs_tDBInput_16.wasNull()) {
								row20.SURF_CHAUF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 74) {
							row20.SURF_UTILE = null;
						} else {

							row20.SURF_UTILE = rs_tDBInput_16.getBigDecimal(74);
							if (rs_tDBInput_16.wasNull()) {
								row20.SURF_UTILE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 75) {
							row20.SURF_DECPT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(75);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(75).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.SURF_DECPT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.SURF_DECPT = tmpContent_tDBInput_16;
								}
							} else {
								row20.SURF_DECPT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 76) {
							row20.MT_EQUIBUD = null;
						} else {

							row20.MT_EQUIBUD = rs_tDBInput_16.getBigDecimal(76);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_EQUIBUD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 77) {
							row20.TY_CHAUFF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(77);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(77).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_CHAUFF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_CHAUFF = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_CHAUFF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 78) {
							row20.CD_ENERGIE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(78);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(78).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ENERGIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ENERGIE = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ENERGIE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 79) {
							row20.LB_ENERGIE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(79);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(79).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_ENERGIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_ENERGIE = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_ENERGIE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 80) {
							row20.CD_ENEREAU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(80);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(80).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ENEREAU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ENEREAU = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ENEREAU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 81) {
							row20.LB_ENEREAU = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(81);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(81).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_ENEREAU = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_ENEREAU = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_ENEREAU = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 82) {
							row20.DT_DPE = null;
						} else {

							row20.DT_DPE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 82);

						}
						if (colQtyInRs_tDBInput_16 < 83) {
							row20.CONSO_CCE = null;
						} else {

							row20.CONSO_CCE = rs_tDBInput_16.getBigDecimal(83);
							if (rs_tDBInput_16.wasNull()) {
								row20.CONSO_CCE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 84) {
							row20.CLAS_CCE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(84);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(84).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CLAS_CCE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CLAS_CCE = tmpContent_tDBInput_16;
								}
							} else {
								row20.CLAS_CCE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 85) {
							row20.CONSO_CEG = null;
						} else {

							row20.CONSO_CEG = rs_tDBInput_16.getBigDecimal(85);
							if (rs_tDBInput_16.wasNull()) {
								row20.CONSO_CEG = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 86) {
							row20.CLAS_CEG = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(86);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(86).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CLAS_CEG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CLAS_CEG = tmpContent_tDBInput_16;
								}
							} else {
								row20.CLAS_CEG = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 87) {
							row20.ON_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(87);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(87).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ADPTHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 88) {
							row20.CD_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(88);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(88).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ADPTHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 89) {
							row20.LB_ADPTHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(89);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(89).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_ADPTHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_ADPTHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_ADPTHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 90) {
							row20.ON_ADPTEHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(90);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(90).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ADPTEHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ADPTEHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ADPTEHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 91) {
							row20.ON_ACCHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(91);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(91).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ACCHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 92) {
							row20.CD_CATACCHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(92);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(92).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CATACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CATACCHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CATACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 93) {
							row20.LB_CATACCHAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(93);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(93).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CATACCHAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CATACCHAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CATACCHAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 94) {
							row20.CD_SECTEUR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(94);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(94).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_SECTEUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_SECTEUR = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_SECTEUR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 95) {
							row20.LB_SECTEUR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(95);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(95).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_SECTEUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_SECTEUR = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_SECTEUR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 96) {
							row20.CD_SOCPROP = null;
						} else {

							row20.CD_SOCPROP = rs_tDBInput_16.getBigDecimal(96);
							if (rs_tDBInput_16.wasNull()) {
								row20.CD_SOCPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 97) {
							row20.LB_SOCPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(97);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(97).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_SOCPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_SOCPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_SOCPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 98) {
							row20.ON_COPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(98);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(98).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_COPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_COPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_COPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 99) {
							row20.CD_TYPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(99);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(
										rsmd_tDBInput_16.getColumnTypeName(99).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TYPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TYPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TYPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 100) {
							row20.LB_TYPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(100);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(100)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TYPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TYPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TYPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 101) {
							row20.CD_CATPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(101);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(101)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CATPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CATPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CATPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 102) {
							row20.LB_CATPROP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(102);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(102)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CATPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CATPROP = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CATPROP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 103) {
							row20.DTF_BAILEM = null;
						} else {

							row20.DTF_BAILEM = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 103);

						}
						if (colQtyInRs_tDBInput_16 < 104) {
							row20.CD_MANDGES = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(104);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(104)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_MANDGES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_MANDGES = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_MANDGES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 105) {
							row20.LB_MANDGES = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(105);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(105)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_MANDGES = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_MANDGES = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_MANDGES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 106) {
							row20.CD_TYFOY = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(106);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(106)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TYFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TYFOY = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TYFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 107) {
							row20.LB_TYFOY = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(107);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(107)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TYFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TYFOY = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TYFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 108) {
							row20.CD_CATFOY = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(108);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(108)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CATFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CATFOY = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CATFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 109) {
							row20.LB_CATFOY = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(109);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(109)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CATFOY = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CATFOY = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CATFOY = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 110) {
							row20.TY_CONSTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(110);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(110)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_CONSTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_CONSTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_CONSTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 111) {
							row20.CD_NATLOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(111);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(111)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_NATLOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 112) {
							row20.LB_NATLOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(112);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(112)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_NATLOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_NATLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 113) {
							row20.CD_RGNATUR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(113);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(113)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_RGNATUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_RGNATUR = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_RGNATUR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 114) {
							row20.CD_TYPLOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(114);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(114)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TYPLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TYPLOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TYPLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 115) {
							row20.LB_TYPLOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(115);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(115)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TYPLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TYPLOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TYPLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 116) {
							row20.REP_CHARGE = null;
						} else {

							row20.REP_CHARGE = rs_tDBInput_16.getInt(116);
							if (rs_tDBInput_16.wasNull()) {
								row20.REP_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 117) {
							row20.NB_PIEPRIN = null;
						} else {

							row20.NB_PIEPRIN = rs_tDBInput_16.getInt(117);
							if (rs_tDBInput_16.wasNull()) {
								row20.NB_PIEPRIN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 118) {
							row20.CD_ETAGE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(118);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(118)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ETAGE = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 119) {
							row20.LB_ETAGE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(119);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(119)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_ETAGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_ETAGE = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 120) {
							row20.NIV_ETAGE = null;
						} else {

							row20.NIV_ETAGE = rs_tDBInput_16.getBigDecimal(120);
							if (rs_tDBInput_16.wasNull()) {
								row20.NIV_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 121) {
							row20.NB_NIVEAUX = null;
						} else {

							row20.NB_NIVEAUX = rs_tDBInput_16.getBigDecimal(121);
							if (rs_tDBInput_16.wasNull()) {
								row20.NB_NIVEAUX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 122) {
							row20.SNO_ETAGE = null;
						} else {

							row20.SNO_ETAGE = rs_tDBInput_16.getBigDecimal(122);
							if (rs_tDBInput_16.wasNull()) {
								row20.SNO_ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 123) {
							row20.ON_ASC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(123);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(123)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ASC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ASC = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ASC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 124) {
							row20.ON_REP_ASC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(124);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(124)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_REP_ASC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_REP_ASC = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_REP_ASC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 125) {
							row20.CD_CATFP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(125);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(125)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CATFP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CATFP = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CATFP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 126) {
							row20.LB_CATFP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(126);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(126)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CATFP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CATFP = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CATFP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 127) {
							row20.CD_CATPLAF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(127);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(127)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CATPLAF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CATPLAF = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CATPLAF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 128) {
							row20.LB_CATPLAF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(128);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(128)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CATPLAF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CATPLAF = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CATPLAF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 129) {
							row20.ON_ELIGCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(129);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(129)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ELIGCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ELIGCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ELIGCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 130) {
							row20.CD_CLF_CUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(130);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(130)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CLF_CUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CLF_CUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CLF_CUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 131) {
							row20.DT_ACQUIS = null;
						} else {

							row20.DT_ACQUIS = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 131);

						}
						if (colQtyInRs_tDBInput_16 < 132) {
							row20.CD_ACHETEA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(132);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(132)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_ACHETEA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_ACHETEA = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_ACHETEA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 133) {
							row20.LB_ACHETEA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(133);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(133)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_ACHETEA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_ACHETEA = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_ACHETEA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 134) {
							row20.DTD_PAT_G = null;
						} else {

							row20.DTD_PAT_G = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 134);

						}
						if (colQtyInRs_tDBInput_16 < 135) {
							row20.DTD_PAT_R = null;
						} else {

							row20.DTD_PAT_R = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 135);

						}
						if (colQtyInRs_tDBInput_16 < 136) {
							row20.CD_DEBPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(136);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(136)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_DEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_DEBPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_DEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 137) {
							row20.LB_DEBPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(137);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(137)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_DEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_DEBPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_DEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 138) {
							row20.CD_TYDEBPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(138);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(138)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TYDEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TYDEBPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TYDEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 139) {
							row20.LB_TYDEBPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(139);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(139)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TYDEBPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TYDEBPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TYDEBPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 140) {
							row20.DTF_PAT_G = null;
						} else {

							row20.DTF_PAT_G = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 140);

						}
						if (colQtyInRs_tDBInput_16 < 141) {
							row20.DTF_PAT_R = null;
						} else {

							row20.DTF_PAT_R = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 141);

						}
						if (colQtyInRs_tDBInput_16 < 142) {
							row20.CD_FINPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(142);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(142)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_FINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_FINPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_FINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 143) {
							row20.LB_FINPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(143);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(143)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_FINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_FINPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_FINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 144) {
							row20.CD_TYFINPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(144);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(144)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TYFINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TYFINPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TYFINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 145) {
							row20.LB_TYFINPAT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(145);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(145)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TYFINPAT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TYFINPAT = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TYFINPAT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 146) {
							row20.DT_MELOC = null;
						} else {

							row20.DT_MELOC = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 146);

						}
						if (colQtyInRs_tDBInput_16 < 147) {
							row20.DTF_PREVIS = null;
						} else {

							row20.DTF_PREVIS = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 147);

						}
						if (colQtyInRs_tDBInput_16 < 148) {
							row20.DTD_MEVENTE = null;
						} else {

							row20.DTD_MEVENTE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 148);

						}
						if (colQtyInRs_tDBInput_16 < 149) {
							row20.DTF_MEVENTE = null;
						} else {

							row20.DTF_MEVENTE = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 149);

						}
						if (colQtyInRs_tDBInput_16 < 150) {
							row20.DTD_REHAB = null;
						} else {

							row20.DTD_REHAB = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 150);

						}
						if (colQtyInRs_tDBInput_16 < 151) {
							row20.DTF_REHAB = null;
						} else {

							row20.DTF_REHAB = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 151);

						}
						if (colQtyInRs_tDBInput_16 < 152) {
							row20.CD_VENDUA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(152);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(152)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_VENDUA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_VENDUA = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_VENDUA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 153) {
							row20.LB_VENDUA = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(153);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(153)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_VENDUA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_VENDUA = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_VENDUA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 154) {
							row20.CPLPA1_NOM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(154);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(154)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA1_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA1_NOM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA1_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 155) {
							row20.CPLPA1_COD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(155);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(155)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA1_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA1_COD = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA1_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 156) {
							row20.CPLPA1_LIB = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(156);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(156)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA1_LIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA1_LIB = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA1_LIB = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 157) {
							row20.CPLPA2_NOM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(157);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(157)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA2_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA2_NOM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA2_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 158) {
							row20.CPLPA2_COD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(158);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(158)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA2_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA2_COD = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA2_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 159) {
							row20.CPLPA2_LIB = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(159);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(159)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA2_LIB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA2_LIB = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA2_LIB = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 160) {
							row20.CPLPA3_NOM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(160);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(160)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA3_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA3_NOM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA3_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 161) {
							row20.CPLPA3_COD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(161);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(161)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA3_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA3_COD = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA3_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 162) {
							row20.CPLPA4_NOM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(162);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(162)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA4_NOM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA4_NOM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA4_NOM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 163) {
							row20.CPLPA4_COD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(163);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(163)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CPLPA4_COD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CPLPA4_COD = tmpContent_tDBInput_16;
								}
							} else {
								row20.CPLPA4_COD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 164) {
							row20.MT_PUMES = null;
						} else {

							row20.MT_PUMES = rs_tDBInput_16.getBigDecimal(164);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PUMES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 165) {
							row20.MT_FORMES = null;
						} else {

							row20.MT_FORMES = rs_tDBInput_16.getBigDecimal(165);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_FORMES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 166) {
							row20.MT_PULIC = null;
						} else {

							row20.MT_PULIC = rs_tDBInput_16.getBigDecimal(166);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PULIC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 167) {
							row20.MT_FORLIC = null;
						} else {

							row20.MT_FORLIC = rs_tDBInput_16.getBigDecimal(167);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_FORLIC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 168) {
							row20.DT_INDLIC = null;
						} else {

							row20.DT_INDLIC = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 168);

						}
						if (colQtyInRs_tDBInput_16 < 169) {
							row20.MT_PUMAX = null;
						} else {

							row20.MT_PUMAX = rs_tDBInput_16.getBigDecimal(169);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PUMAX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 170) {
							row20.MT_FORMAX = null;
						} else {

							row20.MT_FORMAX = rs_tDBInput_16.getBigDecimal(170);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_FORMAX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 171) {
							row20.MT_PUOBJ = null;
						} else {

							row20.MT_PUOBJ = rs_tDBInput_16.getBigDecimal(171);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PUOBJ = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 172) {
							row20.MT_FOROBJ = null;
						} else {

							row20.MT_FOROBJ = rs_tDBInput_16.getBigDecimal(172);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_FOROBJ = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 173) {
							row20.MT_PUPRA = null;
						} else {

							row20.MT_PUPRA = rs_tDBInput_16.getBigDecimal(173);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PUPRA = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 174) {
							row20.MT_TOTRUB = null;
						} else {

							row20.MT_TOTRUB = rs_tDBInput_16.getBigDecimal(174);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_TOTRUB = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 175) {
							row20.MT_LOYER = null;
						} else {

							row20.MT_LOYER = rs_tDBInput_16.getBigDecimal(175);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LOYER = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 176) {
							row20.MT_LOYANNX = null;
						} else {

							row20.MT_LOYANNX = rs_tDBInput_16.getBigDecimal(176);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LOYANNX = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 177) {
							row20.MT_LOYFORF = null;
						} else {

							row20.MT_LOYFORF = rs_tDBInput_16.getBigDecimal(177);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LOYFORF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 178) {
							row20.MT_HLOYER = null;
						} else {

							row20.MT_HLOYER = rs_tDBInput_16.getBigDecimal(178);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_HLOYER = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 179) {
							row20.MT_CHARGES = null;
						} else {

							row20.MT_CHARGES = rs_tDBInput_16.getBigDecimal(179);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_CHARGES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 180) {
							row20.MT_CHAUFF = null;
						} else {

							row20.MT_CHAUFF = rs_tDBInput_16.getBigDecimal(180);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_CHAUFF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 181) {
							row20.CD_PERIOD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(181);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(181)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_PERIOD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_PERIOD = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 182) {
							row20.LB_PERIOD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(182);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(182)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_PERIOD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_PERIOD = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 183) {
							row20.NB_PERIOD = null;
						} else {

							row20.NB_PERIOD = rs_tDBInput_16.getInt(183);
							if (rs_tDBInput_16.wasNull()) {
								row20.NB_PERIOD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 184) {
							row20.MT_PUREL = null;
						} else {

							row20.MT_PUREL = rs_tDBInput_16.getBigDecimal(184);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_PUREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 185) {
							row20.MT_TRUBREL = null;
						} else {

							row20.MT_TRUBREL = rs_tDBInput_16.getBigDecimal(185);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_TRUBREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 186) {
							row20.MT_LOYREL = null;
						} else {

							row20.MT_LOYREL = rs_tDBInput_16.getBigDecimal(186);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LOYREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 187) {
							row20.MT_LAXREL = null;
						} else {

							row20.MT_LAXREL = rs_tDBInput_16.getBigDecimal(187);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LAXREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 188) {
							row20.MT_LFOREL = null;
						} else {

							row20.MT_LFOREL = rs_tDBInput_16.getBigDecimal(188);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_LFOREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 189) {
							row20.MT_HLOYREL = null;
						} else {

							row20.MT_HLOYREL = rs_tDBInput_16.getBigDecimal(189);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_HLOYREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 190) {
							row20.MT_CHAREL = null;
						} else {

							row20.MT_CHAREL = rs_tDBInput_16.getBigDecimal(190);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_CHAREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 191) {
							row20.MT_CHFREL = null;
						} else {

							row20.MT_CHFREL = rs_tDBInput_16.getBigDecimal(191);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_CHFREL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 192) {
							row20.FACTURDEF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(192);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(192)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.FACTURDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.FACTURDEF = tmpContent_tDBInput_16;
								}
							} else {
								row20.FACTURDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 193) {
							row20.NO_BAILDEF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(193);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(193)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_BAILDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_BAILDEF = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_BAILDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 194) {
							row20.LB_BAILDEF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(194);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(194)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_BAILDEF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_BAILDEF = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_BAILDEF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 195) {
							row20.ON_DISTMAN = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(195);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(195)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_DISTMAN = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_DISTMAN = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_DISTMAN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 196) {
							row20.NO_LOGTRES = null;
						} else {

							row20.NO_LOGTRES = rs_tDBInput_16.getBigDecimal(196);
							if (rs_tDBInput_16.wasNull()) {
								row20.NO_LOGTRES = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 197) {
							row20.CD_TAXE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(197);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(197)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_TAXE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_TAXE = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_TAXE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 198) {
							row20.NO_INTERN1 = null;
						} else {

							row20.NO_INTERN1 = rs_tDBInput_16.getInt(198);
							if (rs_tDBInput_16.wasNull()) {
								row20.NO_INTERN1 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 199) {
							row20.NO_INTERN2 = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(199);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(199)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_INTERN2 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_INTERN2 = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_INTERN2 = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 200) {
							row20.ON_NONVAL = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(200);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(200)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_NONVAL = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 201) {
							row20.DTD_NONVAL = null;
						} else {

							row20.DTD_NONVAL = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 201);

						}
						if (colQtyInRs_tDBInput_16 < 202) {
							row20.DTF_NONVAL = null;
						} else {

							row20.DTF_NONVAL = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 202);

						}
						if (colQtyInRs_tDBInput_16 < 203) {
							row20.TY_NONVAL = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(203);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(203)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_NONVAL = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 204) {
							row20.LB_NONVAL = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(204);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(204)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_NONVAL = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_NONVAL = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_NONVAL = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 205) {
							row20.ON_VACANT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(205);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(205)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_VACANT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_VACANT = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_VACANT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 206) {
							row20.ID_GARD = null;
						} else {

							row20.ID_GARD = rs_tDBInput_16.getInt(206);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 207) {
							row20.NOM_GARD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(207);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(207)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_GARD = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 208) {
							row20.PRE_GARD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(208);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(208)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.PRE_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.PRE_GARD = tmpContent_tDBInput_16;
								}
							} else {
								row20.PRE_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 209) {
							row20.TEL_GARD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(209);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(209)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TEL_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TEL_GARD = tmpContent_tDBInput_16;
								}
							} else {
								row20.TEL_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 210) {
							row20.MAIL_GARD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(210);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(210)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.MAIL_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.MAIL_GARD = tmpContent_tDBInput_16;
								}
							} else {
								row20.MAIL_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 211) {
							row20.TY_GARD = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(211);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(211)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_GARD = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_GARD = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_GARD = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 212) {
							row20.ID_RESPTR = null;
						} else {

							row20.ID_RESPTR = rs_tDBInput_16.getInt(212);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 213) {
							row20.NOM_RESPTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(213);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(213)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_RESPTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 214) {
							row20.PRE_RESPTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(214);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(214)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.PRE_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.PRE_RESPTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.PRE_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 215) {
							row20.TEL_RESPTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(215);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(215)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TEL_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TEL_RESPTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.TEL_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 216) {
							row20.MAIL_RESPTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(216);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(216)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.MAIL_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.MAIL_RESPTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.MAIL_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 217) {
							row20.TY_RESPTR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(217);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(217)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_RESPTR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_RESPTR = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_RESPTR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 218) {
							row20.ID_PERCEP = null;
						} else {

							row20.ID_PERCEP = rs_tDBInput_16.getInt(218);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_PERCEP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 219) {
							row20.NOM_PERCEP = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(219);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(219)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_PERCEP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_PERCEP = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_PERCEP = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 220) {
							row20.ID_BURENR = null;
						} else {

							row20.ID_BURENR = rs_tDBInput_16.getInt(220);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_BURENR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 221) {
							row20.NOM_BURENR = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(221);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(221)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_BURENR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_BURENR = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_BURENR = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 222) {
							row20.ID_MAIRIE = null;
						} else {

							row20.ID_MAIRIE = rs_tDBInput_16.getInt(222);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 223) {
							row20.NOM_MAIRIE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(223);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(223)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_MAIRIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_MAIRIE = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 224) {
							row20.ON_MAIRGEST = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(224);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(224)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_MAIRGEST = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_MAIRGEST = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_MAIRGEST = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 225) {
							row20.LB_MAIRIE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(225);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(225)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_MAIRIE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_MAIRIE = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_MAIRIE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 226) {
							row20.ID_PREF = null;
						} else {

							row20.ID_PREF = rs_tDBInput_16.getInt(226);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_PREF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 227) {
							row20.NOM_PREF = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(227);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(227)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_PREF = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_PREF = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_PREF = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 228) {
							row20.ID_ENCAIS = null;
						} else {

							row20.ID_ENCAIS = rs_tDBInput_16.getInt(228);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 229) {
							row20.NOM_ENCAIS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(229);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(229)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_ENCAIS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_ENCAIS = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 230) {
							row20.TY_ENCAIS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(230);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(230)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_ENCAIS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_ENCAIS = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_ENCAIS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 231) {
							row20.ON_CONVLOC = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(231);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(231)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_CONVLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_CONVLOC = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_CONVLOC = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 232) {
							row20.CD_CNVM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(232);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(232)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CNVM = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 233) {
							row20.DTD_CNVM = null;
						} else {

							row20.DTD_CNVM = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 233);

						}
						if (colQtyInRs_tDBInput_16 < 234) {
							row20.DTF_CNVM = null;
						} else {

							row20.DTF_CNVM = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 234);

						}
						if (colQtyInRs_tDBInput_16 < 235) {
							row20.DT_SI_CNVM = null;
						} else {

							row20.DT_SI_CNVM = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 235);

						}
						if (colQtyInRs_tDBInput_16 < 236) {
							row20.DT_SI_CNVMO = null;
						} else {

							row20.DT_SI_CNVMO = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 236);

						}
						if (colQtyInRs_tDBInput_16 < 237) {
							row20.TY_CNVM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(237);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(237)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_CNVM = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 238) {
							row20.LB_TY_CNVM = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(238);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(238)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_TY_CNVM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_TY_CNVM = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_TY_CNVM = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 239) {
							row20.ON_CONVCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(239);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(239)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_CONVCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_CONVCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_CONVCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 240) {
							row20.ON_ROLCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(240);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(240)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_ROLCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.ON_ROLCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.ON_ROLCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 241) {
							row20.CD_CNVCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(241);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(241)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CNVCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CNVCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CNVCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 242) {
							row20.DTD_CNVCUS = null;
						} else {

							row20.DTD_CNVCUS = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 242);

						}
						if (colQtyInRs_tDBInput_16 < 243) {
							row20.DTF_CNVCUS = null;
						} else {

							row20.DTF_CNVCUS = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 243);

						}
						if (colQtyInRs_tDBInput_16 < 244) {
							row20.DT_SI_CNVCUS = null;
						} else {

							row20.DT_SI_CNVCUS = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 244);

						}
						if (colQtyInRs_tDBInput_16 < 245) {
							row20.CD_CLASCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(245);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(245)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_CLASCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_CLASCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_CLASCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 246) {
							row20.LB_CLASCUS = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(246);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(246)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_CLASCUS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_CLASCUS = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_CLASCUS = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 247) {
							row20.NO_CNV_RVN = null;
						} else {

							row20.NO_CNV_RVN = rs_tDBInput_16.getInt(247);
							if (rs_tDBInput_16.wasNull()) {
								row20.NO_CNV_RVN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 248) {
							row20.NO_CNV_RVT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(248);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(248)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NO_CNV_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NO_CNV_RVT = tmpContent_tDBInput_16;
								}
							} else {
								row20.NO_CNV_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 249) {
							row20.TY_CNV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(249);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(249)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_CNV = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 250) {
							row20.CD_NAT_CNV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(250);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(250)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CD_NAT_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.CD_NAT_CNV = tmpContent_tDBInput_16;
								}
							} else {
								row20.CD_NAT_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 251) {
							row20.LB_NAT_CNV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(251);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(251)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_NAT_CNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_NAT_CNV = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_NAT_CNV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 252) {
							row20.TY_DT_RNV = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(252);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(252)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_DT_RNV = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_DT_RNV = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_DT_RNV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 253) {
							row20.DUR_RVN_AN = null;
						} else {

							row20.DUR_RVN_AN = rs_tDBInput_16.getInt(253);
							if (rs_tDBInput_16.wasNull()) {
								row20.DUR_RVN_AN = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 254) {
							row20.DUR_RVN_MO = null;
						} else {

							row20.DUR_RVN_MO = rs_tDBInput_16.getInt(254);
							if (rs_tDBInput_16.wasNull()) {
								row20.DUR_RVN_MO = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 255) {
							row20.DTD_RVN_PA = null;
						} else {

							row20.DTD_RVN_PA = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 255);

						}
						if (colQtyInRs_tDBInput_16 < 256) {
							row20.DTF_RVN_PA = null;
						} else {

							row20.DTF_RVN_PA = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 256);

						}
						if (colQtyInRs_tDBInput_16 < 257) {
							row20.MT_UNI_RNV = null;
						} else {

							row20.MT_UNI_RNV = rs_tDBInput_16.getBigDecimal(257);
							if (rs_tDBInput_16.wasNull()) {
								row20.MT_UNI_RNV = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 258) {
							row20.ID_RVT = null;
						} else {

							row20.ID_RVT = rs_tDBInput_16.getInt(258);
							if (rs_tDBInput_16.wasNull()) {
								row20.ID_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 259) {
							row20.NOM_RVT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(259);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(259)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.NOM_RVT = tmpContent_tDBInput_16;
								}
							} else {
								row20.NOM_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 260) {
							row20.TY_RVT = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(260);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(260)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.TY_RVT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.TY_RVT = tmpContent_tDBInput_16;
								}
							} else {
								row20.TY_RVT = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 261) {
							row20.LB_SOCIETE = null;
						} else {

							tmpContent_tDBInput_16 = rs_tDBInput_16.getString(261);
							if (tmpContent_tDBInput_16 != null) {
								if (talendToDBList_tDBInput_16.contains(rsmd_tDBInput_16.getColumnTypeName(261)
										.toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LB_SOCIETE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_16);
								} else {
									row20.LB_SOCIETE = tmpContent_tDBInput_16;
								}
							} else {
								row20.LB_SOCIETE = null;
							}
						}
						if (colQtyInRs_tDBInput_16 < 262) {
							row20.DT_ALIM = null;
						} else {

							row20.DT_ALIM = mssqlGTU_tDBInput_16.getDate(rsmd_tDBInput_16, rs_tDBInput_16, 262);

						}

						/**
						 * [tDBInput_16 begin ] stop
						 */

						/**
						 * [tDBInput_16 main ] start
						 */

						currentComponent = "tDBInput_16";

						tos_count_tDBInput_16++;

						/**
						 * [tDBInput_16 main ] stop
						 */

						/**
						 * [tDBInput_16 process_data_begin ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row20 main ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
						}

						row20Struct row20_HashRow = new row20Struct();

						row20_HashRow.CD_SOCIETE = row20.CD_SOCIETE;

						row20_HashRow.CD_ACTIVIT = row20.CD_ACTIVIT;

						row20_HashRow.CD_PATRIM1 = row20.CD_PATRIM1;

						row20_HashRow.CD_PATRIM2 = row20.CD_PATRIM2;

						row20_HashRow.CD_PATRIM3 = row20.CD_PATRIM3;

						row20_HashRow.CD_PATRIM4 = row20.CD_PATRIM4;

						row20_HashRow.CD_PATRIM5 = row20.CD_PATRIM5;

						row20_HashRow.CD_PATRIM6 = row20.CD_PATRIM6;

						row20_HashRow.CD_PATRIM = row20.CD_PATRIM;

						row20_HashRow.LB_PATRIM1 = row20.LB_PATRIM1;

						row20_HashRow.LB_PATRIM2 = row20.LB_PATRIM2;

						row20_HashRow.LB_PATRIM3 = row20.LB_PATRIM3;

						row20_HashRow.LB_PATRIM4 = row20.LB_PATRIM4;

						row20_HashRow.LB_PATRIM5 = row20.LB_PATRIM5;

						row20_HashRow.LB_PATRIM6 = row20.LB_PATRIM6;

						row20_HashRow.CD_ETAT = row20.CD_ETAT;

						row20_HashRow.ID_PATRIM = row20.ID_PATRIM;

						row20_HashRow.ID_RLLBS = row20.ID_RLLBS;

						row20_HashRow.ID_INVARIANT = row20.ID_INVARIANT;

						row20_HashRow.CD_ENT_PAT = row20.CD_ENT_PAT;

						row20_HashRow.NIV_PAT = row20.NIV_PAT;

						row20_HashRow.CD_QUALIF = row20.CD_QUALIF;

						row20_HashRow.CD_ENT_SEC = row20.CD_ENT_SEC;

						row20_HashRow.CD_ORG_SEC = row20.CD_ORG_SEC;

						row20_HashRow.NIV_SEC = row20.NIV_SEC;

						row20_HashRow.CD_ENT_CTX = row20.CD_ENT_CTX;

						row20_HashRow.CD_ORG_CTX = row20.CD_ORG_CTX;

						row20_HashRow.CD_SOC_REG = row20.CD_SOC_REG;

						row20_HashRow.CD_LOCALI1 = row20.CD_LOCALI1;

						row20_HashRow.CD_LOCALI2 = row20.CD_LOCALI2;

						row20_HashRow.CD_LOCALI3 = row20.CD_LOCALI3;

						row20_HashRow.CD_LOCALI4 = row20.CD_LOCALI4;

						row20_HashRow.CD_LOCALI5 = row20.CD_LOCALI5;

						row20_HashRow.ON_ADRPOST = row20.ON_ADRPOST;

						row20_HashRow.ADRPA_NORU = row20.ADRPA_NORU;

						row20_HashRow.ADRPA_CDRU = row20.ADRPA_CDRU;

						row20_HashRow.ADRPA_RUE1 = row20.ADRPA_RUE1;

						row20_HashRow.ADRPA_RUE2 = row20.ADRPA_RUE2;

						row20_HashRow.ADRPA_LOC = row20.ADRPA_LOC;

						row20_HashRow.ADRPA_CP = row20.ADRPA_CP;

						row20_HashRow.ADRPA_BD = row20.ADRPA_BD;

						row20_HashRow.NO_INSEE = row20.NO_INSEE;

						row20_HashRow.NO_DEPT = row20.NO_DEPT;

						row20_HashRow.GPS_LONGIT = row20.GPS_LONGIT;

						row20_HashRow.GPS_LATIT = row20.GPS_LATIT;

						row20_HashRow.CD_Z_GEOG = row20.CD_Z_GEOG;

						row20_HashRow.NO_QPV = row20.NO_QPV;

						row20_HashRow.LB_QPV = row20.LB_QPV;

						row20_HashRow.ON_ZUS = row20.ON_ZUS;

						row20_HashRow.ON_ZRR = row20.ON_ZRR;

						row20_HashRow.ON_ZFU = row20.ON_ZFU;

						row20_HashRow.CD_SEGCUS = row20.CD_SEGCUS;

						row20_HashRow.LB_SEGCUS = row20.LB_SEGCUS;

						row20_HashRow.NO_ANRU = row20.NO_ANRU;

						row20_HashRow.ON_ANRU = row20.ON_ANRU;

						row20_HashRow.NO_CUCS = row20.NO_CUCS;

						row20_HashRow.ON_CUCS = row20.ON_CUCS;

						row20_HashRow.ON_PCS = row20.ON_PCS;

						row20_HashRow.CD_PROGRAM = row20.CD_PROGRAM;

						row20_HashRow.CD_TRANCHE = row20.CD_TRANCHE;

						row20_HashRow.LB_PR_TR = row20.LB_PR_TR;

						row20_HashRow.CD_PAT_TC1 = row20.CD_PAT_TC1;

						row20_HashRow.CD_PAT_TC2 = row20.CD_PAT_TC2;

						row20_HashRow.CD_PAT_TC3 = row20.CD_PAT_TC3;

						row20_HashRow.CD_PAT_TC4 = row20.CD_PAT_TC4;

						row20_HashRow.CD_PAT_TC5 = row20.CD_PAT_TC5;

						row20_HashRow.CD_PAT_TC6 = row20.CD_PAT_TC6;

						row20_HashRow.CD_DESTINA = row20.CD_DESTINA;

						row20_HashRow.LB_DESTINA = row20.LB_DESTINA;

						row20_HashRow.SURF_HAB = row20.SURF_HAB;

						row20_HashRow.SURF_REEL = row20.SURF_REEL;

						row20_HashRow.SURF_CORR = row20.SURF_CORR;

						row20_HashRow.SURF_CHAUF = row20.SURF_CHAUF;

						row20_HashRow.SURF_UTILE = row20.SURF_UTILE;

						row20_HashRow.SURF_DECPT = row20.SURF_DECPT;

						row20_HashRow.MT_EQUIBUD = row20.MT_EQUIBUD;

						row20_HashRow.TY_CHAUFF = row20.TY_CHAUFF;

						row20_HashRow.CD_ENERGIE = row20.CD_ENERGIE;

						row20_HashRow.LB_ENERGIE = row20.LB_ENERGIE;

						row20_HashRow.CD_ENEREAU = row20.CD_ENEREAU;

						row20_HashRow.LB_ENEREAU = row20.LB_ENEREAU;

						row20_HashRow.DT_DPE = row20.DT_DPE;

						row20_HashRow.CONSO_CCE = row20.CONSO_CCE;

						row20_HashRow.CLAS_CCE = row20.CLAS_CCE;

						row20_HashRow.CONSO_CEG = row20.CONSO_CEG;

						row20_HashRow.CLAS_CEG = row20.CLAS_CEG;

						row20_HashRow.ON_ADPTHAN = row20.ON_ADPTHAN;

						row20_HashRow.CD_ADPTHAN = row20.CD_ADPTHAN;

						row20_HashRow.LB_ADPTHAN = row20.LB_ADPTHAN;

						row20_HashRow.ON_ADPTEHAN = row20.ON_ADPTEHAN;

						row20_HashRow.ON_ACCHAN = row20.ON_ACCHAN;

						row20_HashRow.CD_CATACCHAN = row20.CD_CATACCHAN;

						row20_HashRow.LB_CATACCHAN = row20.LB_CATACCHAN;

						row20_HashRow.CD_SECTEUR = row20.CD_SECTEUR;

						row20_HashRow.LB_SECTEUR = row20.LB_SECTEUR;

						row20_HashRow.CD_SOCPROP = row20.CD_SOCPROP;

						row20_HashRow.LB_SOCPROP = row20.LB_SOCPROP;

						row20_HashRow.ON_COPROP = row20.ON_COPROP;

						row20_HashRow.CD_TYPROP = row20.CD_TYPROP;

						row20_HashRow.LB_TYPROP = row20.LB_TYPROP;

						row20_HashRow.CD_CATPROP = row20.CD_CATPROP;

						row20_HashRow.LB_CATPROP = row20.LB_CATPROP;

						row20_HashRow.DTF_BAILEM = row20.DTF_BAILEM;

						row20_HashRow.CD_MANDGES = row20.CD_MANDGES;

						row20_HashRow.LB_MANDGES = row20.LB_MANDGES;

						row20_HashRow.CD_TYFOY = row20.CD_TYFOY;

						row20_HashRow.LB_TYFOY = row20.LB_TYFOY;

						row20_HashRow.CD_CATFOY = row20.CD_CATFOY;

						row20_HashRow.LB_CATFOY = row20.LB_CATFOY;

						row20_HashRow.TY_CONSTR = row20.TY_CONSTR;

						row20_HashRow.CD_NATLOC = row20.CD_NATLOC;

						row20_HashRow.LB_NATLOC = row20.LB_NATLOC;

						row20_HashRow.CD_RGNATUR = row20.CD_RGNATUR;

						row20_HashRow.CD_TYPLOC = row20.CD_TYPLOC;

						row20_HashRow.LB_TYPLOC = row20.LB_TYPLOC;

						row20_HashRow.REP_CHARGE = row20.REP_CHARGE;

						row20_HashRow.NB_PIEPRIN = row20.NB_PIEPRIN;

						row20_HashRow.CD_ETAGE = row20.CD_ETAGE;

						row20_HashRow.LB_ETAGE = row20.LB_ETAGE;

						row20_HashRow.NIV_ETAGE = row20.NIV_ETAGE;

						row20_HashRow.NB_NIVEAUX = row20.NB_NIVEAUX;

						row20_HashRow.SNO_ETAGE = row20.SNO_ETAGE;

						row20_HashRow.ON_ASC = row20.ON_ASC;

						row20_HashRow.ON_REP_ASC = row20.ON_REP_ASC;

						row20_HashRow.CD_CATFP = row20.CD_CATFP;

						row20_HashRow.LB_CATFP = row20.LB_CATFP;

						row20_HashRow.CD_CATPLAF = row20.CD_CATPLAF;

						row20_HashRow.LB_CATPLAF = row20.LB_CATPLAF;

						row20_HashRow.ON_ELIGCUS = row20.ON_ELIGCUS;

						row20_HashRow.CD_CLF_CUS = row20.CD_CLF_CUS;

						row20_HashRow.DT_ACQUIS = row20.DT_ACQUIS;

						row20_HashRow.CD_ACHETEA = row20.CD_ACHETEA;

						row20_HashRow.LB_ACHETEA = row20.LB_ACHETEA;

						row20_HashRow.DTD_PAT_G = row20.DTD_PAT_G;

						row20_HashRow.DTD_PAT_R = row20.DTD_PAT_R;

						row20_HashRow.CD_DEBPAT = row20.CD_DEBPAT;

						row20_HashRow.LB_DEBPAT = row20.LB_DEBPAT;

						row20_HashRow.CD_TYDEBPAT = row20.CD_TYDEBPAT;

						row20_HashRow.LB_TYDEBPAT = row20.LB_TYDEBPAT;

						row20_HashRow.DTF_PAT_G = row20.DTF_PAT_G;

						row20_HashRow.DTF_PAT_R = row20.DTF_PAT_R;

						row20_HashRow.CD_FINPAT = row20.CD_FINPAT;

						row20_HashRow.LB_FINPAT = row20.LB_FINPAT;

						row20_HashRow.CD_TYFINPAT = row20.CD_TYFINPAT;

						row20_HashRow.LB_TYFINPAT = row20.LB_TYFINPAT;

						row20_HashRow.DT_MELOC = row20.DT_MELOC;

						row20_HashRow.DTF_PREVIS = row20.DTF_PREVIS;

						row20_HashRow.DTD_MEVENTE = row20.DTD_MEVENTE;

						row20_HashRow.DTF_MEVENTE = row20.DTF_MEVENTE;

						row20_HashRow.DTD_REHAB = row20.DTD_REHAB;

						row20_HashRow.DTF_REHAB = row20.DTF_REHAB;

						row20_HashRow.CD_VENDUA = row20.CD_VENDUA;

						row20_HashRow.LB_VENDUA = row20.LB_VENDUA;

						row20_HashRow.CPLPA1_NOM = row20.CPLPA1_NOM;

						row20_HashRow.CPLPA1_COD = row20.CPLPA1_COD;

						row20_HashRow.CPLPA1_LIB = row20.CPLPA1_LIB;

						row20_HashRow.CPLPA2_NOM = row20.CPLPA2_NOM;

						row20_HashRow.CPLPA2_COD = row20.CPLPA2_COD;

						row20_HashRow.CPLPA2_LIB = row20.CPLPA2_LIB;

						row20_HashRow.CPLPA3_NOM = row20.CPLPA3_NOM;

						row20_HashRow.CPLPA3_COD = row20.CPLPA3_COD;

						row20_HashRow.CPLPA4_NOM = row20.CPLPA4_NOM;

						row20_HashRow.CPLPA4_COD = row20.CPLPA4_COD;

						row20_HashRow.MT_PUMES = row20.MT_PUMES;

						row20_HashRow.MT_FORMES = row20.MT_FORMES;

						row20_HashRow.MT_PULIC = row20.MT_PULIC;

						row20_HashRow.MT_FORLIC = row20.MT_FORLIC;

						row20_HashRow.DT_INDLIC = row20.DT_INDLIC;

						row20_HashRow.MT_PUMAX = row20.MT_PUMAX;

						row20_HashRow.MT_FORMAX = row20.MT_FORMAX;

						row20_HashRow.MT_PUOBJ = row20.MT_PUOBJ;

						row20_HashRow.MT_FOROBJ = row20.MT_FOROBJ;

						row20_HashRow.MT_PUPRA = row20.MT_PUPRA;

						row20_HashRow.MT_TOTRUB = row20.MT_TOTRUB;

						row20_HashRow.MT_LOYER = row20.MT_LOYER;

						row20_HashRow.MT_LOYANNX = row20.MT_LOYANNX;

						row20_HashRow.MT_LOYFORF = row20.MT_LOYFORF;

						row20_HashRow.MT_HLOYER = row20.MT_HLOYER;

						row20_HashRow.MT_CHARGES = row20.MT_CHARGES;

						row20_HashRow.MT_CHAUFF = row20.MT_CHAUFF;

						row20_HashRow.CD_PERIOD = row20.CD_PERIOD;

						row20_HashRow.LB_PERIOD = row20.LB_PERIOD;

						row20_HashRow.NB_PERIOD = row20.NB_PERIOD;

						row20_HashRow.MT_PUREL = row20.MT_PUREL;

						row20_HashRow.MT_TRUBREL = row20.MT_TRUBREL;

						row20_HashRow.MT_LOYREL = row20.MT_LOYREL;

						row20_HashRow.MT_LAXREL = row20.MT_LAXREL;

						row20_HashRow.MT_LFOREL = row20.MT_LFOREL;

						row20_HashRow.MT_HLOYREL = row20.MT_HLOYREL;

						row20_HashRow.MT_CHAREL = row20.MT_CHAREL;

						row20_HashRow.MT_CHFREL = row20.MT_CHFREL;

						row20_HashRow.FACTURDEF = row20.FACTURDEF;

						row20_HashRow.NO_BAILDEF = row20.NO_BAILDEF;

						row20_HashRow.LB_BAILDEF = row20.LB_BAILDEF;

						row20_HashRow.ON_DISTMAN = row20.ON_DISTMAN;

						row20_HashRow.NO_LOGTRES = row20.NO_LOGTRES;

						row20_HashRow.CD_TAXE = row20.CD_TAXE;

						row20_HashRow.NO_INTERN1 = row20.NO_INTERN1;

						row20_HashRow.NO_INTERN2 = row20.NO_INTERN2;

						row20_HashRow.ON_NONVAL = row20.ON_NONVAL;

						row20_HashRow.DTD_NONVAL = row20.DTD_NONVAL;

						row20_HashRow.DTF_NONVAL = row20.DTF_NONVAL;

						row20_HashRow.TY_NONVAL = row20.TY_NONVAL;

						row20_HashRow.LB_NONVAL = row20.LB_NONVAL;

						row20_HashRow.ON_VACANT = row20.ON_VACANT;

						row20_HashRow.ID_GARD = row20.ID_GARD;

						row20_HashRow.NOM_GARD = row20.NOM_GARD;

						row20_HashRow.PRE_GARD = row20.PRE_GARD;

						row20_HashRow.TEL_GARD = row20.TEL_GARD;

						row20_HashRow.MAIL_GARD = row20.MAIL_GARD;

						row20_HashRow.TY_GARD = row20.TY_GARD;

						row20_HashRow.ID_RESPTR = row20.ID_RESPTR;

						row20_HashRow.NOM_RESPTR = row20.NOM_RESPTR;

						row20_HashRow.PRE_RESPTR = row20.PRE_RESPTR;

						row20_HashRow.TEL_RESPTR = row20.TEL_RESPTR;

						row20_HashRow.MAIL_RESPTR = row20.MAIL_RESPTR;

						row20_HashRow.TY_RESPTR = row20.TY_RESPTR;

						row20_HashRow.ID_PERCEP = row20.ID_PERCEP;

						row20_HashRow.NOM_PERCEP = row20.NOM_PERCEP;

						row20_HashRow.ID_BURENR = row20.ID_BURENR;

						row20_HashRow.NOM_BURENR = row20.NOM_BURENR;

						row20_HashRow.ID_MAIRIE = row20.ID_MAIRIE;

						row20_HashRow.NOM_MAIRIE = row20.NOM_MAIRIE;

						row20_HashRow.ON_MAIRGEST = row20.ON_MAIRGEST;

						row20_HashRow.LB_MAIRIE = row20.LB_MAIRIE;

						row20_HashRow.ID_PREF = row20.ID_PREF;

						row20_HashRow.NOM_PREF = row20.NOM_PREF;

						row20_HashRow.ID_ENCAIS = row20.ID_ENCAIS;

						row20_HashRow.NOM_ENCAIS = row20.NOM_ENCAIS;

						row20_HashRow.TY_ENCAIS = row20.TY_ENCAIS;

						row20_HashRow.ON_CONVLOC = row20.ON_CONVLOC;

						row20_HashRow.CD_CNVM = row20.CD_CNVM;

						row20_HashRow.DTD_CNVM = row20.DTD_CNVM;

						row20_HashRow.DTF_CNVM = row20.DTF_CNVM;

						row20_HashRow.DT_SI_CNVM = row20.DT_SI_CNVM;

						row20_HashRow.DT_SI_CNVMO = row20.DT_SI_CNVMO;

						row20_HashRow.TY_CNVM = row20.TY_CNVM;

						row20_HashRow.LB_TY_CNVM = row20.LB_TY_CNVM;

						row20_HashRow.ON_CONVCUS = row20.ON_CONVCUS;

						row20_HashRow.ON_ROLCUS = row20.ON_ROLCUS;

						row20_HashRow.CD_CNVCUS = row20.CD_CNVCUS;

						row20_HashRow.DTD_CNVCUS = row20.DTD_CNVCUS;

						row20_HashRow.DTF_CNVCUS = row20.DTF_CNVCUS;

						row20_HashRow.DT_SI_CNVCUS = row20.DT_SI_CNVCUS;

						row20_HashRow.CD_CLASCUS = row20.CD_CLASCUS;

						row20_HashRow.LB_CLASCUS = row20.LB_CLASCUS;

						row20_HashRow.NO_CNV_RVN = row20.NO_CNV_RVN;

						row20_HashRow.NO_CNV_RVT = row20.NO_CNV_RVT;

						row20_HashRow.TY_CNV = row20.TY_CNV;

						row20_HashRow.CD_NAT_CNV = row20.CD_NAT_CNV;

						row20_HashRow.LB_NAT_CNV = row20.LB_NAT_CNV;

						row20_HashRow.TY_DT_RNV = row20.TY_DT_RNV;

						row20_HashRow.DUR_RVN_AN = row20.DUR_RVN_AN;

						row20_HashRow.DUR_RVN_MO = row20.DUR_RVN_MO;

						row20_HashRow.DTD_RVN_PA = row20.DTD_RVN_PA;

						row20_HashRow.DTF_RVN_PA = row20.DTF_RVN_PA;

						row20_HashRow.MT_UNI_RNV = row20.MT_UNI_RNV;

						row20_HashRow.ID_RVT = row20.ID_RVT;

						row20_HashRow.NOM_RVT = row20.NOM_RVT;

						row20_HashRow.TY_RVT = row20.TY_RVT;

						row20_HashRow.LB_SOCIETE = row20.LB_SOCIETE;

						row20_HashRow.DT_ALIM = row20.DT_ALIM;

						tHash_Lookup_row20.put(row20_HashRow);

						tos_count_tAdvancedHash_row20++;

						/**
						 * [tAdvancedHash_row20 main ] stop
						 */

						/**
						 * [tAdvancedHash_row20 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						/**
						 * [tAdvancedHash_row20 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row20 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row20";

						/**
						 * [tAdvancedHash_row20 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 process_data_end ] start
						 */

						currentComponent = "tDBInput_16";

						/**
						 * [tDBInput_16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_16 end ] start
						 */

						currentComponent = "tDBInput_16";

					}
				} finally {
					if (rs_tDBInput_16 != null) {
						rs_tDBInput_16.close();
					}
					if (stmt_tDBInput_16 != null) {
						stmt_tDBInput_16.close();
					}
					if (conn_tDBInput_16 != null && !conn_tDBInput_16.isClosed()) {

						conn_tDBInput_16.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_16_NB_LINE", nb_line_tDBInput_16);

				ok_Hash.put("tDBInput_16", true);
				end_Hash.put("tDBInput_16", System.currentTimeMillis());

				/**
				 * [tDBInput_16 end ] stop
				 */

				/**
				 * [tAdvancedHash_row20 end ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				tHash_Lookup_row20.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tAdvancedHash_row20", true);
				end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row20 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_16 finally ] start
				 */

				currentComponent = "tDBInput_16";

				/**
				 * [tDBInput_16 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row20 finally ] start
				 */

				currentComponent = "tAdvancedHash_row20";

				/**
				 * [tAdvancedHash_row20 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_16_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.CD_LOCALI1 == null) {
				if (other.CD_LOCALI1 != null)
					return false;

			} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;
			other.VILLE = this.VILLE;
			other.DP = this.DP;
			other.DT = this.DT;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.CD_LOCALI1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_LOCALI1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VILLE = readString(dis, ois);

				this.DP = readString(dis, ois);

				this.DT = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VILLE, dos, oos);

				writeString(this.DP, dos, oos);

				writeString(this.DT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",VILLE=" + VILLE);
			sb.append(",DP=" + DP);
			sb.append(",DT=" + DT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tDBInput_17 - inputs:(after_tDBInput_13) outputs:(row21,row21) |
				// target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
				// linked node: tMap_5 - inputs:(row13,row14,row15,row20,row21)
				// outputs:(copyOfout2)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct>getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tDBInput_17 begin ] start
				 */

				ok_Hash.put("tDBInput_17", false);
				start_Hash.put("tDBInput_17", System.currentTimeMillis());

				currentComponent = "tDBInput_17";

				int tos_count_tDBInput_17 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_17 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_17 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_17 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_17, talendToDBArray_tDBInput_17);
				int nb_line_tDBInput_17 = 0;
				java.sql.Connection conn_tDBInput_17 = null;
				String driverClass_tDBInput_17 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_17 = java.lang.Class.forName(driverClass_tDBInput_17);
				String dbUser_tDBInput_17 = "";

				final String decryptedPassword_tDBInput_17 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:0INua3kRyMKZDaZ37a9E6a/oU4soatJKXDlIUA==");

				String dbPwd_tDBInput_17 = decryptedPassword_tDBInput_17;

				String port_tDBInput_17 = "1433";
				String dbname_tDBInput_17 = "HDSHData";
				String url_tDBInput_17 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_17)) {
					url_tDBInput_17 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_17)) {
					url_tDBInput_17 += "//" + "HDSHData";
				}
				url_tDBInput_17 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_17 = "";

				conn_tDBInput_17 = java.sql.DriverManager.getConnection(url_tDBInput_17, dbUser_tDBInput_17,
						dbPwd_tDBInput_17);

				java.sql.Statement stmt_tDBInput_17 = conn_tDBInput_17.createStatement();

				String dbquery_tDBInput_17 = "SELECT T_DEF_LOCALISATION.CD_LOCALI1,\n		T_DEF_LOCALISATION.VILLE,\n		T_DEF_LOCALISATION.DP,\n		T_DEF_LOCALISATION.DT\nFROM"
						+ "	T_DEF_LOCALISATION";

				globalMap.put("tDBInput_17_QUERY", dbquery_tDBInput_17);
				java.sql.ResultSet rs_tDBInput_17 = null;

				try {
					rs_tDBInput_17 = stmt_tDBInput_17.executeQuery(dbquery_tDBInput_17);
					java.sql.ResultSetMetaData rsmd_tDBInput_17 = rs_tDBInput_17.getMetaData();
					int colQtyInRs_tDBInput_17 = rsmd_tDBInput_17.getColumnCount();

					String tmpContent_tDBInput_17 = null;

					while (rs_tDBInput_17.next()) {
						nb_line_tDBInput_17++;

						if (colQtyInRs_tDBInput_17 < 1) {
							row21.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(1);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row21.CD_LOCALI1 = tmpContent_tDBInput_17;
								}
							} else {
								row21.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 2) {
							row21.VILLE = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(2);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row21.VILLE = tmpContent_tDBInput_17;
								}
							} else {
								row21.VILLE = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 3) {
							row21.DP = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(3);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row21.DP = tmpContent_tDBInput_17;
								}
							} else {
								row21.DP = null;
							}
						}
						if (colQtyInRs_tDBInput_17 < 4) {
							row21.DT = null;
						} else {

							tmpContent_tDBInput_17 = rs_tDBInput_17.getString(4);
							if (tmpContent_tDBInput_17 != null) {
								if (talendToDBList_tDBInput_17.contains(
										rsmd_tDBInput_17.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row21.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_17);
								} else {
									row21.DT = tmpContent_tDBInput_17;
								}
							} else {
								row21.DT = null;
							}
						}

						/**
						 * [tDBInput_17 begin ] stop
						 */

						/**
						 * [tDBInput_17 main ] start
						 */

						currentComponent = "tDBInput_17";

						tos_count_tDBInput_17++;

						/**
						 * [tDBInput_17 main ] stop
						 */

						/**
						 * [tDBInput_17 process_data_begin ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row21 main ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
						}

						row21Struct row21_HashRow = new row21Struct();

						row21_HashRow.CD_LOCALI1 = row21.CD_LOCALI1;

						row21_HashRow.VILLE = row21.VILLE;

						row21_HashRow.DP = row21.DP;

						row21_HashRow.DT = row21.DT;

						tHash_Lookup_row21.put(row21_HashRow);

						tos_count_tAdvancedHash_row21++;

						/**
						 * [tAdvancedHash_row21 main ] stop
						 */

						/**
						 * [tAdvancedHash_row21 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						/**
						 * [tAdvancedHash_row21 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row21 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row21";

						/**
						 * [tAdvancedHash_row21 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 process_data_end ] start
						 */

						currentComponent = "tDBInput_17";

						/**
						 * [tDBInput_17 process_data_end ] stop
						 */

						/**
						 * [tDBInput_17 end ] start
						 */

						currentComponent = "tDBInput_17";

					}
				} finally {
					if (rs_tDBInput_17 != null) {
						rs_tDBInput_17.close();
					}
					if (stmt_tDBInput_17 != null) {
						stmt_tDBInput_17.close();
					}
					if (conn_tDBInput_17 != null && !conn_tDBInput_17.isClosed()) {

						conn_tDBInput_17.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_17_NB_LINE", nb_line_tDBInput_17);

				ok_Hash.put("tDBInput_17", true);
				end_Hash.put("tDBInput_17", System.currentTimeMillis());

				/**
				 * [tDBInput_17 end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_17 finally ] start
				 */

				currentComponent = "tDBInput_17";

				/**
				 * [tDBInput_17 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row21 finally ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				/**
				 * [tAdvancedHash_row21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_17_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_HAPPI_test_abder = new byte[0];
		static byte[] commonByteArray_HAPPI_test_abder = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String TypeLocalisation;

		public String getTypeLocalisation() {
			return this.TypeLocalisation;
		}

		public String Localisation;

		public String getLocalisation() {
			return this.Localisation;
		}

		public String ParentType;

		public String getParentType() {
			return this.ParentType;
		}

		public String Parent;

		public String getParent() {
			return this.Parent;
		}

		public Integer Niveau;

		public Integer getNiveau() {
			return this.Niveau;
		}

		public String BG;

		public String getBG() {
			return this.BG;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.Localisation == null) ? 0 : this.Localisation.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.Localisation == null) {
				if (other.Localisation != null)
					return false;

			} else if (!this.Localisation.equals(other.Localisation))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.TypeLocalisation = this.TypeLocalisation;
			other.Localisation = this.Localisation;
			other.ParentType = this.ParentType;
			other.Parent = this.Parent;
			other.Niveau = this.Niveau;
			other.BG = this.BG;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.Localisation = this.Localisation;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_test_abder.length) {
					if (length < 1024 && commonByteArray_HAPPI_test_abder.length == 0) {
						commonByteArray_HAPPI_test_abder = new byte[1024];
					} else {
						commonByteArray_HAPPI_test_abder = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_test_abder, 0, length);
				strReturn = new String(commonByteArray_HAPPI_test_abder, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_test_abder) {

				try {

					int length = 0;

					this.Localisation = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Localisation, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.TypeLocalisation = readString(dis, ois);

				this.ParentType = readString(dis, ois);

				this.Parent = readString(dis, ois);

				this.Niveau = readInteger(dis, ois);

				this.BG = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.TypeLocalisation, dos, oos);

				writeString(this.ParentType, dos, oos);

				writeString(this.Parent, dos, oos);

				writeInteger(this.Niveau, dos, oos);

				writeString(this.BG, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("TypeLocalisation=" + TypeLocalisation);
			sb.append(",Localisation=" + Localisation);
			sb.append(",ParentType=" + ParentType);
			sb.append(",Parent=" + Parent);
			sb.append(",Niveau=" + String.valueOf(Niveau));
			sb.append(",BG=" + BG);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.Localisation, other.Localisation);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tDBInput_18 - inputs:(after_tDBInput_13) outputs:(row24,row24) |
				// target node:tAdvancedHash_row24 - inputs:(row24) outputs:()
				// linked node: tMap_6 - inputs:(row22,row24) outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct>getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tDBInput_18 begin ] start
				 */

				ok_Hash.put("tDBInput_18", false);
				start_Hash.put("tDBInput_18", System.currentTimeMillis());

				currentComponent = "tDBInput_18";

				int tos_count_tDBInput_18 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_18 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_18 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_18 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_18, talendToDBArray_tDBInput_18);
				int nb_line_tDBInput_18 = 0;
				java.sql.Connection conn_tDBInput_18 = null;
				String driverClass_tDBInput_18 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_18 = java.lang.Class.forName(driverClass_tDBInput_18);
				String dbUser_tDBInput_18 = "";

				final String decryptedPassword_tDBInput_18 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:iWUsL4qzOlcAuVkjNzYt6z1unvz2hGwEHNx5QQ==");

				String dbPwd_tDBInput_18 = decryptedPassword_tDBInput_18;

				String port_tDBInput_18 = "1433";
				String dbname_tDBInput_18 = "HDSHData";
				String url_tDBInput_18 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_18)) {
					url_tDBInput_18 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_18)) {
					url_tDBInput_18 += "//" + "HDSHData";
				}
				url_tDBInput_18 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_18 = "";

				conn_tDBInput_18 = java.sql.DriverManager.getConnection(url_tDBInput_18, dbUser_tDBInput_18,
						dbPwd_tDBInput_18);

				java.sql.Statement stmt_tDBInput_18 = conn_tDBInput_18.createStatement();

				String dbquery_tDBInput_18 = "select *\nfrom T_DEF_REPORT\n";

				globalMap.put("tDBInput_18_QUERY", dbquery_tDBInput_18);
				java.sql.ResultSet rs_tDBInput_18 = null;

				try {
					rs_tDBInput_18 = stmt_tDBInput_18.executeQuery(dbquery_tDBInput_18);
					java.sql.ResultSetMetaData rsmd_tDBInput_18 = rs_tDBInput_18.getMetaData();
					int colQtyInRs_tDBInput_18 = rsmd_tDBInput_18.getColumnCount();

					String tmpContent_tDBInput_18 = null;

					while (rs_tDBInput_18.next()) {
						nb_line_tDBInput_18++;

						if (colQtyInRs_tDBInput_18 < 1) {
							row24.TypeLocalisation = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(1);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.TypeLocalisation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row24.TypeLocalisation = tmpContent_tDBInput_18.trim();
								}
							} else {
								row24.TypeLocalisation = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 2) {
							row24.Localisation = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(2);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Localisation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row24.Localisation = tmpContent_tDBInput_18.trim();
								}
							} else {
								row24.Localisation = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 3) {
							row24.ParentType = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(3);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.ParentType = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row24.ParentType = tmpContent_tDBInput_18.trim();
								}
							} else {
								row24.ParentType = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 4) {
							row24.Parent = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(4);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Parent = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row24.Parent = tmpContent_tDBInput_18.trim();
								}
							} else {
								row24.Parent = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 5) {
							row24.Niveau = null;
						} else {

							row24.Niveau = rs_tDBInput_18.getInt(5);
							if (rs_tDBInput_18.wasNull()) {
								row24.Niveau = null;
							}
						}
						if (colQtyInRs_tDBInput_18 < 6) {
							row24.BG = null;
						} else {

							tmpContent_tDBInput_18 = rs_tDBInput_18.getString(6);
							if (tmpContent_tDBInput_18 != null) {
								if (talendToDBList_tDBInput_18.contains(
										rsmd_tDBInput_18.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.BG = FormatterUtils.formatUnwithE(tmpContent_tDBInput_18);
								} else {
									row24.BG = tmpContent_tDBInput_18.trim();
								}
							} else {
								row24.BG = null;
							}
						}

						/**
						 * [tDBInput_18 begin ] stop
						 */

						/**
						 * [tDBInput_18 main ] start
						 */

						currentComponent = "tDBInput_18";

						tos_count_tDBInput_18++;

						/**
						 * [tDBInput_18 main ] stop
						 */

						/**
						 * [tDBInput_18 process_data_begin ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
						}

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.TypeLocalisation = row24.TypeLocalisation;

						row24_HashRow.Localisation = row24.Localisation;

						row24_HashRow.ParentType = row24.ParentType;

						row24_HashRow.Parent = row24.Parent;

						row24_HashRow.Niveau = row24.Niveau;

						row24_HashRow.BG = row24.BG;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 process_data_end ] start
						 */

						currentComponent = "tDBInput_18";

						/**
						 * [tDBInput_18 process_data_end ] stop
						 */

						/**
						 * [tDBInput_18 end ] start
						 */

						currentComponent = "tDBInput_18";

					}
				} finally {
					if (rs_tDBInput_18 != null) {
						rs_tDBInput_18.close();
					}
					if (stmt_tDBInput_18 != null) {
						stmt_tDBInput_18.close();
					}
					if (conn_tDBInput_18 != null && !conn_tDBInput_18.isClosed()) {

						conn_tDBInput_18.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_18_NB_LINE", nb_line_tDBInput_18);

				ok_Hash.put("tDBInput_18", true);
				end_Hash.put("tDBInput_18", System.currentTimeMillis());

				/**
				 * [tDBInput_18 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_18 finally ] start
				 */

				currentComponent = "tDBInput_18";

				/**
				 * [tDBInput_18 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_18_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final test_abder test_abderClass = new test_abder();

		int exitCode = test_abderClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = test_abder.class.getClassLoader()
					.getResourceAsStream("happi/test_abder_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = test_abder.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tDBInput_2Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tDBInput_2) {
			globalMap.put("tDBInput_2_SUBPROCESS_STATE", -1);

			e_tDBInput_2.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : test_abder");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 1217775 characters generated by Talend Open Studio for Data Integration on
 * the 3 mai 2021 11:21:52 CEST
 ************************************************************************************************/