// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.happi_donnees_clefs_livraison_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: HAPPI_Donnees_clefs_Livraison Purpose: Précision sur les livraisons<br>
 * Description: Apporte des élements de précisions sur l'historique des livraisons neufs et sur l'ancien <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HAPPI_Donnees_clefs_Livraison implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "HAPPI_Donnees_clefs_Livraison";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HAPPI_Donnees_clefs_Livraison.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HAPPI_Donnees_clefs_Livraison.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:CLv9mODj0mgTdu3ZlqvSwLfcMi0gKCEHAr1Asg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public java.util.Date DTF_CTRAT;

				public java.util.Date getDTF_CTRAT () {
					return this.DTF_CTRAT;
				}
				
			    public String Plafond;

				public String getPlafond () {
					return this.Plafond;
				}
				
			    public String type_acquisition;

				public String getType_acquisition () {
					return this.type_acquisition;
				}
				
			    public String programmes;

				public String getProgrammes () {
					return this.programmes;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String loyer_charge;

				public String getLoyer_charge () {
					return this.loyer_charge;
				}
				
			    public String surface_habitable;

				public String getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date Annee_DTD_PAT_G;

				public java.util.Date getAnnee_DTD_PAT_G () {
					return this.Annee_DTD_PAT_G;
				}
				
			    public java.util.Date DTD_CTRAT;

				public java.util.Date getDTD_CTRAT () {
					return this.DTD_CTRAT;
				}
				
			    public String jamais_loue;

				public String getJamais_loue () {
					return this.jamais_loue;
				}
				
			    public String motif_vac;

				public String getMotif_vac () {
					return this.motif_vac;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
					this.DP = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.Groupe = readString(dis);
					
					this.DTF_CTRAT = readDate(dis);
					
					this.Plafond = readString(dis);
					
					this.type_acquisition = readString(dis);
					
					this.programmes = readString(dis);
					
					this.type = readString(dis);
					
					this.loyer_charge = readString(dis);
					
					this.surface_habitable = readString(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.Annee_DTD_PAT_G = readDate(dis);
					
					this.DTD_CTRAT = readDate(dis);
					
					this.jamais_loue = readString(dis);
					
					this.motif_vac = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// java.util.Date
				
						writeDate(this.DTF_CTRAT,dos);
					
					// String
				
						writeString(this.Plafond,dos);
					
					// String
				
						writeString(this.type_acquisition,dos);
					
					// String
				
						writeString(this.programmes,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.loyer_charge,dos);
					
					// String
				
						writeString(this.surface_habitable,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.Annee_DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_CTRAT,dos);
					
					// String
				
						writeString(this.jamais_loue,dos);
					
					// String
				
						writeString(this.motif_vac,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",DP="+DP);
		sb.append(",VILLE="+VILLE);
		sb.append(",Groupe="+Groupe);
		sb.append(",DTF_CTRAT="+String.valueOf(DTF_CTRAT));
		sb.append(",Plafond="+Plafond);
		sb.append(",type_acquisition="+type_acquisition);
		sb.append(",programmes="+programmes);
		sb.append(",type="+type);
		sb.append(",loyer_charge="+loyer_charge);
		sb.append(",surface_habitable="+surface_habitable);
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",Annee_DTD_PAT_G="+String.valueOf(Annee_DTD_PAT_G));
		sb.append(",DTD_CTRAT="+String.valueOf(DTD_CTRAT));
		sb.append(",jamais_loue="+jamais_loue);
		sb.append(",motif_vac="+motif_vac);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Plafond;

				public String getPlafond () {
					return this.Plafond;
				}
				
			    public String type_acquisition;

				public String getType_acquisition () {
					return this.type_acquisition;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String programmes;

				public String getProgrammes () {
					return this.programmes;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String loyer_charge;

				public String getLoyer_charge () {
					return this.loyer_charge;
				}
				
			    public String surface_habitable;

				public String getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date Annee_DTD_PAT_G;

				public java.util.Date getAnnee_DTD_PAT_G () {
					return this.Annee_DTD_PAT_G;
				}
				
			    public java.util.Date DTD_CTRAT;

				public java.util.Date getDTD_CTRAT () {
					return this.DTD_CTRAT;
				}
				
			    public java.util.Date DTF_CTRAT;

				public java.util.Date getDTF_CTRAT () {
					return this.DTF_CTRAT;
				}
				
			    public String jamais_loue;

				public String getJamais_loue () {
					return this.jamais_loue;
				}
				
			    public String motif_vac;

				public String getMotif_vac () {
					return this.motif_vac;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.Groupe = readString(dis);
					
					this.Plafond = readString(dis);
					
					this.type_acquisition = readString(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
					this.programmes = readString(dis);
					
					this.type = readString(dis);
					
					this.loyer_charge = readString(dis);
					
					this.surface_habitable = readString(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.Annee_DTD_PAT_G = readDate(dis);
					
					this.DTD_CTRAT = readDate(dis);
					
					this.DTF_CTRAT = readDate(dis);
					
					this.jamais_loue = readString(dis);
					
					this.motif_vac = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Plafond,dos);
					
					// String
				
						writeString(this.type_acquisition,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.programmes,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.loyer_charge,dos);
					
					// String
				
						writeString(this.surface_habitable,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.Annee_DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_CTRAT,dos);
					
					// java.util.Date
				
						writeDate(this.DTF_CTRAT,dos);
					
					// String
				
						writeString(this.jamais_loue,dos);
					
					// String
				
						writeString(this.motif_vac,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Groupe="+Groupe);
		sb.append(",Plafond="+Plafond);
		sb.append(",type_acquisition="+type_acquisition);
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",programmes="+programmes);
		sb.append(",type="+type);
		sb.append(",loyer_charge="+loyer_charge);
		sb.append(",surface_habitable="+surface_habitable);
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",Annee_DTD_PAT_G="+String.valueOf(Annee_DTD_PAT_G));
		sb.append(",DTD_CTRAT="+String.valueOf(DTD_CTRAT));
		sb.append(",DTF_CTRAT="+String.valueOf(DTF_CTRAT));
		sb.append(",jamais_loue="+jamais_loue);
		sb.append(",motif_vac="+motif_vac);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Plafond;

				public String getPlafond () {
					return this.Plafond;
				}
				
			    public String type_acquisition;

				public String getType_acquisition () {
					return this.type_acquisition;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String programmes;

				public String getProgrammes () {
					return this.programmes;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String loyer_charge;

				public String getLoyer_charge () {
					return this.loyer_charge;
				}
				
			    public String surface_habitable;

				public String getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date Annee_DTD_PAT_G;

				public java.util.Date getAnnee_DTD_PAT_G () {
					return this.Annee_DTD_PAT_G;
				}
				
			    public java.util.Date DTD_CTRAT;

				public java.util.Date getDTD_CTRAT () {
					return this.DTD_CTRAT;
				}
				
			    public java.util.Date DTF_CTRAT;

				public java.util.Date getDTF_CTRAT () {
					return this.DTF_CTRAT;
				}
				
			    public String jamais_loue;

				public String getJamais_loue () {
					return this.jamais_loue;
				}
				
			    public String motif_vac;

				public String getMotif_vac () {
					return this.motif_vac;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.Groupe = readString(dis);
					
					this.Plafond = readString(dis);
					
					this.type_acquisition = readString(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
					this.programmes = readString(dis);
					
					this.type = readString(dis);
					
					this.loyer_charge = readString(dis);
					
					this.surface_habitable = readString(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.Annee_DTD_PAT_G = readDate(dis);
					
					this.DTD_CTRAT = readDate(dis);
					
					this.DTF_CTRAT = readDate(dis);
					
					this.jamais_loue = readString(dis);
					
					this.motif_vac = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Plafond,dos);
					
					// String
				
						writeString(this.type_acquisition,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.programmes,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.loyer_charge,dos);
					
					// String
				
						writeString(this.surface_habitable,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.Annee_DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_CTRAT,dos);
					
					// java.util.Date
				
						writeDate(this.DTF_CTRAT,dos);
					
					// String
				
						writeString(this.jamais_loue,dos);
					
					// String
				
						writeString(this.motif_vac,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Groupe="+Groupe);
		sb.append(",Plafond="+Plafond);
		sb.append(",type_acquisition="+type_acquisition);
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",programmes="+programmes);
		sb.append(",type="+type);
		sb.append(",loyer_charge="+loyer_charge);
		sb.append(",surface_habitable="+surface_habitable);
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",Annee_DTD_PAT_G="+String.valueOf(Annee_DTD_PAT_G));
		sb.append(",DTD_CTRAT="+String.valueOf(DTD_CTRAT));
		sb.append(",DTF_CTRAT="+String.valueOf(DTF_CTRAT));
		sb.append(",jamais_loue="+jamais_loue);
		sb.append(",motif_vac="+motif_vac);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Referentiel/TDB_livraison.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"UTF-8"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("CD_PATRIM");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VILLE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Groupe");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DTF_CTRAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Plafond");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type_acquisition");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("programmes");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("loyer_charge");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("surface_habitable");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DTD_PAT_G");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Annee_DTD_PAT_G");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DTD_CTRAT");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("jamais_loue");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("motif_vac");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
        resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String VILLE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "select distinct x.CD_PATRIM, x.CD_PATRIM1,  Groupe,\nCASE \n		WHEN x.LB_CATFP ='PLA' THEN 'PLUS'\n		WHEN x.LB_CATFP = '"
+"PLUS120' THEN 'PLUS'\n		WHEN x.LB_CATFP = 'SANS' THEN 'LIBRE'\n		ELSE x.LB_CATFP \nEND AS Plafond,\nx.LB_TYDEBPAT, x.CD_"
+"LOCALI1, programmes, CD_TYPLOC as TYPE, MT_TRUBREL as loyer_charge, SURF_HAB as surface_habitable, x.DTD_PAT_G, x.DTD_PA"
+"T_G as Annee_DTD_PAT_G,\ny.DTD_CTRAT, y.DTF_CTRAT, \nCASE \n		WHEN exists (select 1 from PAT_CONTRA pt where ON_PSEUCLI="
+"'N' and pt.CD_PATRIM = x.CD_PATRIM ) THEN 'NON'\n		ELSE 'OUI'\nEND as jamais_loué,\nCASE \n		WHEN y.ON_PSEUCLI='O' then "
+"UPPER(RTRIM(LTRIM(NOM_CLIENT)))\n		WHEN y.ON_PSEUCLI='N' then 'NON VACANT'\n		ELSE 'VACANT'\nEND as MOTIF_VAC\nfrom\n(SE"
+"LECT a.CD_PATRIM, a.CD_PATRIM1,\n 	CAST((LEFT(a.CD_PATRIM, 5)  + ' - ' + b.LB_PATRIM1) AS VARCHAR(100)) AS Groupe,\nb.CD"
+"_TYPLOC, b.MT_TRUBREL, b.SURF_HAB, b.LB_CATFP, b.LB_TYDEBPAT, a.CD_LOCALI1,\nLTRIM(RTRIM(left(a.CD_PATRIM,5))) + ' ' + L"
+"TRIM(RTRIM(b.ADRPA_LOC)) + ' ' + LTRIM(RTRIM(b.ADRPA_NORU)) + ' ' + LTRIM(RTRIM(b.ADRPA_RUE1)) as programmes, b.DTD_PAT_"
+"G, MOTIF_VAC\nfrom SID_PATRIMOINE_GIM a left join PATRIMOINE_GIM b on a.CD_PATRIM = b.CD_PATRIM and a.CD_SOCIETE = b.CD_"
+"SOCIETE\n		WHERE a.SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\n		and a.C"
+"D_SOCPROP in(1,6) -- uniquement les biens gérés par HDSH ?\n		and format(a.DTD_PAT_G,'yyyy') >= year(getdate()) -2\n		AN"
+"D a.CD_ETAT = 'MS'\n) x\nleft join -- récupère le type actuel de vacance\n		(SELECT NOM_CLIENT, CD_PATRIM, b. ON_PSEUCLI"
+", b.DTD_CTRAT, b.DTF_CTRAT\n		 FROM PAT_CONTRA b inner join DOSS_CLIEN c on b.ID_DOSCLIE = c.ID_DOSCLIE and b.CD_SOCIETE"
+" = c.CD_SOCIETE\n		 where 1 = 1\n		 and b.CD_PATRIM4 <> 0 -- AND b.ON_PSEUCLI='O'\n		 and b.LB_ET_DTF = 'Présent'\n		 ) "
+"y on x.CD_PATRIM = y.CD_PATRIM";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.CD_PATRIM = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_PATRIM = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_PATRIM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.CD_PATRIM1 = null;
							} else {
		                          
            row1.CD_PATRIM1 = rs_tDBInput_1.getInt(2);
            if(rs_tDBInput_1.wasNull()){
                    row1.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.Groupe = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Groupe = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.Groupe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.Plafond = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Plafond = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.Plafond = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.Plafond = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.type_acquisition = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.type_acquisition = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.type_acquisition = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.type_acquisition = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_LOCALI1 = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.programmes = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.programmes = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.programmes = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.programmes = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.type = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.type = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.type = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.type = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.loyer_charge = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.loyer_charge = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.loyer_charge = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.loyer_charge = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.surface_habitable = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.surface_habitable = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.surface_habitable = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.surface_habitable = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.DTD_PAT_G = null;
							} else {
										
			row1.DTD_PAT_G = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 11);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.Annee_DTD_PAT_G = null;
							} else {
										
			row1.Annee_DTD_PAT_G = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 12);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.DTD_CTRAT = null;
							} else {
										
			row1.DTD_CTRAT = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 13);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.DTF_CTRAT = null;
							} else {
										
			row1.DTF_CTRAT = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 14);
			
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.jamais_loue = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(15);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(15).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.jamais_loue = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.jamais_loue = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.jamais_loue = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.motif_vac = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(16);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(16).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.motif_vac = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.motif_vac = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.motif_vac = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.CD_LOCALI1 = row1.CD_LOCALI1 ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CD_LOCALI1 = '" + row2HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.VILLE = row2.VILLE != null ?
	(row2.VILLE.equals("SURESNES") ?
		(row1.CD_PATRIM1 == 3023 
		|| row1.CD_PATRIM1 == 3800
		|| row1.CD_PATRIM1 == 3804
		|| row1.CD_PATRIM1 == 3801
		|| row1.CD_PATRIM1 == 3802
		|| row1.CD_PATRIM1 == 3806
		|| row1.CD_PATRIM1 == 3024
		|| row1.CD_PATRIM1 == 3025
		|| row1.CD_PATRIM1 == 3701
		|| row1.CD_PATRIM1 == 3027
		|| row1.CD_PATRIM1 == 11013
		|| row1.CD_PATRIM1 == 11022
		|| row1.CD_PATRIM1 == 3803 
		|| row1.CD_PATRIM1 == 3700
		|| row1.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row2.VILLE) : "-" ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.CD_PATRIM = row1.CD_PATRIM ;
out1_tmp.DP = row2.DP ;
out1_tmp.VILLE = Var.VILLE ;
out1_tmp.Groupe = row1.Groupe ;
out1_tmp.DTF_CTRAT = row1.DTF_CTRAT;
out1_tmp.Plafond = row1.Plafond ;
out1_tmp.type_acquisition = row1.type_acquisition ;
out1_tmp.programmes = row1.programmes ;
out1_tmp.type = row1.type ;
out1_tmp.loyer_charge = row1.loyer_charge ;
out1_tmp.surface_habitable = row1.surface_habitable ;
out1_tmp.DTD_PAT_G = row1.DTD_PAT_G ;
out1_tmp.Annee_DTD_PAT_G = row1.Annee_DTD_PAT_G ;
out1_tmp.DTD_CTRAT = row1.DTD_CTRAT ;
out1_tmp.jamais_loue = row1.jamais_loue ;
out1_tmp.motif_vac = row1.motif_vac ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out1.CD_PATRIM != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.CD_PATRIM
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DP != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.DP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.VILLE != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.VILLE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Groupe != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Groupe
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DTF_CTRAT != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.DTF_CTRAT, "MMMM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Plafond != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Plafond
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.type_acquisition != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.type_acquisition
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.programmes != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.programmes
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.loyer_charge != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.loyer_charge
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.surface_habitable != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.surface_habitable
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DTD_PAT_G != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.DTD_PAT_G, "MMMM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Annee_DTD_PAT_G != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.Annee_DTD_PAT_G, "yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DTD_CTRAT != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.DTD_CTRAT, "MMMM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.jamais_loue != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.jamais_loue
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.motif_vac != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.motif_vac
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0){
				
					filetFileOutputDelimited_1.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_1")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Livraison, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Livraison) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_2 - inputs:(after_tDBInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				String driverClass_tDBInput_2 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_2 = java.lang.Class.forName(driverClass_tDBInput_2);
				String dbUser_tDBInput_2 = "";
				
				 
	final String decryptedPassword_tDBInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:aAIx4EMMXDk91gPygSyHpIVfhjptRb0YBQF69A==");
				
				String dbPwd_tDBInput_2 = decryptedPassword_tDBInput_2;
				
		    String port_tDBInput_2 = "1433";
		    String dbname_tDBInput_2 = "HDSHData" ;
			String url_tDBInput_2 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_2)) {
		    	url_tDBInput_2 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_2)) {
				url_tDBInput_2 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_2 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_2 = "";
				
				conn_tDBInput_2 = java.sql.DriverManager.getConnection(url_tDBInput_2,dbUser_tDBInput_2,dbPwd_tDBInput_2);
		        
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT T_DEF_LOCALISATION.CD_LOCALI1,\n		T_DEF_LOCALISATION.VILLE,\n		T_DEF_LOCALISATION.DP\nFROM	T_DEF_LOCALISATION";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row2.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.CD_LOCALI1 = tmpContent_tDBInput_2;
                }
            } else {
                row2.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row2.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.VILLE = tmpContent_tDBInput_2;
                }
            } else {
                row2.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row2.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row2.DP = tmpContent_tDBInput_2;
                }
            } else {
                row2.DP = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.CD_LOCALI1 = row2.CD_LOCALI1;
				
				row2_HashRow.VILLE = row2.VILLE;
				
				row2_HashRow.DP = row2.DP;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
		if(conn_tDBInput_2 != null && !conn_tDBInput_2.isClosed()) {
			
			conn_tDBInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_1", false);
		start_Hash.put("tFTPConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_1";

	
		int tos_count_tFTPConnection_1 = 0;
		

 
int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
    org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_1 = null;



	class MyTrust_tFTPConnection_1 {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
 
				String decryptedKeyStorePassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:W93aqaR9+PGj4J7Ad+JJ5aCum+tjuHkF4QPXO19zwT4=");
			ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"), decryptedKeyStorePassword_tFTPConnection_1.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
    javax.net.ssl.SSLContext sslContext_tFTPConnection_1 = null;
    javax.net.ssl.TrustManager[] trustManager_tFTPConnection_1 = null;
    javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_1 = null;
    MyTrust_tFTPConnection_1 myTrust_tFTPConnection_1 = null;

    try {
        sslContext_tFTPConnection_1 = javax.net.ssl.SSLContext.getInstance("SSL");
        myTrust_tFTPConnection_1 = new MyTrust_tFTPConnection_1();
        trustManager_tFTPConnection_1 = myTrust_tFTPConnection_1.getTrustManagers();
        sslContext_tFTPConnection_1.init(null, trustManager_tFTPConnection_1, new java.security.SecureRandom());
        sslSocketFactory_tFTPConnection_1 = sslContext_tFTPConnection_1.getSocketFactory();

        if(("true").equals(System.getProperty("http.proxySet")) ){
            String httpProxyHost = System.getProperty("http.proxyHost");
            int httpProxyPort = Integer.getInteger("http.proxyPort");
            String httpProxyUser = System.getProperty("http.proxyUser");
            String httpProxyPass = System.getProperty("http.proxyPassword");

            ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = "ftps.toucantoco.com" + ":" + 990;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

                String httpProxyHost = proxyAddress.getAddress().getHostAddress();
                int httpProxyPort = proxyAddress.getPort();
                String httpProxyUser = "";
                String httpProxyPass = ""; //leave it empty if proxy creds weren't specified

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
                if (proxyCreds != null) {
                    httpProxyUser = proxyCreds.getUser();
                    httpProxyPass = proxyCreds.getPass();
                }

                ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

            } else { //no http proxy for ftp host defined
                ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
            }
        } else {
            ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.setControlEncoding("ISO-8859-15");


        if (connectionTimeout_tFTPConnection_1 > 0) {
            ftp_tFTPConnection_1.setDefaultTimeout(connectionTimeout_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.connect("ftps.toucantoco.com",990);
        ftp_tFTPConnection_1.setRemoteVerificationEnabled(true);
 
	final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:bOIQ9ZNt8otiVY3Zm5o34QpV2hyf414txarmoLsgb1ZsqkzlbbBQuVA1Kkc1xXIA29hlagWfvIgW8KuC");

        boolean isLoginSuccessful_tFTPConnection_1 = ftp_tFTPConnection_1.login("hauts-de-seine-habitat", decryptedPassword_tFTPConnection_1);

        if (!isLoginSuccessful_tFTPConnection_1) {
            throw new RuntimeException("Login failed");
        }

        ftp_tFTPConnection_1.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
            ftp_tFTPConnection_1.execPBSZ(0);
            ftp_tFTPConnection_1.execPROT("P");
    } catch (Exception e) {
        throw e;
    }

        ftp_tFTPConnection_1.enterLocalPassiveMode();
    globalMap.put("conn_tFTPConnection_1", ftp_tFTPConnection_1);

 



/**
 * [tFTPConnection_1 begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 


	tos_count_tFTPConnection_1++;

/**
 * [tFTPConnection_1 main ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_1 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 

ok_Hash.put("tFTPConnection_1", true);
end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFTPPut_1Process(globalMap);



/**
 * [tFTPConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPPut_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_1", false);
		start_Hash.put("tFTPPut_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_1";

	
		int tos_count_tFTPPut_1 = 0;
		


int nb_file_tFTPPut_1 = 0;

		org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_1 = null;
		String rootDir_tFTPPut_1 = null;
			ftp_tFTPPut_1 = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("conn_tFTPConnection_1");
			
			
			rootDir_tFTPPut_1 = ftp_tFTPPut_1.printWorkingDirectory();
		String remotedir_tFTPPut_1 = ("./Referentiel").replaceAll("\\\\", "/");

		boolean cwdSuccess_tFTPPut_1 = ftp_tFTPPut_1.changeWorkingDirectory(remotedir_tFTPPut_1);

		if (!cwdSuccess_tFTPPut_1) {
			throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_1.getReplyString());
		}

		java.util.List<java.util.Map<String,String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String,String>>();

			java.util.Map<String,String> maptFTPPut_10 = new java.util.HashMap<String,String>();
			maptFTPPut_10.put("TDB_livraison.csv", "");
			listtFTPPut_1.add(maptFTPPut_10);
		String localdirtFTPPut_1 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Referentiel";
		
		for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

 



/**
 * [tFTPPut_1 begin ] stop
 */
	
	/**
	 * [tFTPPut_1 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

try{
        String currentStatus_tFTPPut_1 = "No file transfered.";
        globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
        boolean needRename_tFTPPut_1 = false;
        for (String keytFTPPut_1 : keySettFTPPut_1){
            if(keytFTPPut_1 == null || "".equals(keytFTPPut_1)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_1 =  localdirtFTPPut_1;
            String filemasktFTPPut_1 = keytFTPPut_1;
            String dirtFTPPut_1 = null;
                String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/") ;
            int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
            if (itFTPPut_1!=-1){
                dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
                masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1+1);
            }
            if (dirtFTPPut_1!=null && !"".equals(dirtFTPPut_1)) tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
                masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
            final String finalMasktFTPPut_1 = masktFTPPut_1;
            java.io.File[] listingstFTPPut_1 = null;
            java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
            if (filetFTPPut_1.isDirectory()) {
                listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_1).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }

            java.util.List<String> remoteExistsFiles_tFTPPut_1 = new java.util.ArrayList<String>();

            String[] ftpFileNames_tFTPPut_1 = ftp_tFTPPut_1.listNames();
            for (String ftpFileName : ftpFileNames_tFTPPut_1) {
                if("".equals(maptFTPPut_1.get(keytFTPPut_1))){
                    if (ftpFileName.matches(masktFTPPut_1)) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }else{
                    if (ftpFileName.matches(maptFTPPut_1.get(keytFTPPut_1))) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }
            }

            if(listingstFTPPut_1 != null && listingstFTPPut_1.length > 0){
                for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++){
                    if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)){
                        java.io.File file_in_localDir_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1];
                        java.io.FileInputStream file_stream_tFTPPut_1 = new java.io.FileInputStream(file_in_localDir_tFTPPut_1);
                        globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(file_in_localDir_tFTPPut_1.getName()));
                        String newName_tFTPPut_1 = ("".equals(maptFTPPut_1.get(keytFTPPut_1)))?file_in_localDir_tFTPPut_1.getName():maptFTPPut_1.get(keytFTPPut_1);
                            needRename_tFTPPut_1 = true;
                            if ((remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1))){
                                ftp_tFTPPut_1.deleteFile(newName_tFTPPut_1);
                            }
                            ftp_tFTPPut_1.storeFile(file_in_localDir_tFTPPut_1.getName(), file_stream_tFTPPut_1);

                            globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1));

                        file_stream_tFTPPut_1.close();
                        nb_file_tFTPPut_1++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if (!((maptFTPPut_1.get(keytFTPPut_1) == null) || maptFTPPut_1.get(keytFTPPut_1).isEmpty() || keytFTPPut_1.equals(maptFTPPut_1.get(keytFTPPut_1)))){
                try{
                    if(needRename_tFTPPut_1){
                        ftp_tFTPPut_1.rename(keytFTPPut_1, maptFTPPut_1.get(keytFTPPut_1));
                    }
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
                }catch(IOException e_tFTPPut_1){
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_1;
                }
            }
            needRename_tFTPPut_1 = false;
        }
    }catch(java.lang.Exception e_tFTPPut_1){
            System.err.print(e_tFTPPut_1.getMessage());
    }

 


	tos_count_tFTPPut_1++;

/**
 * [tFTPPut_1 main ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPPut_1 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

	}
	  		ftp_tFTPPut_1.changeWorkingDirectory(rootDir_tFTPPut_1);
	
	
globalMap.put("tFTPPut_1_NB_FILE",nb_file_tFTPPut_1);


 

ok_Hash.put("tFTPPut_1", true);
end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFTPClose_1Process(globalMap);



/**
 * [tFTPPut_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_1", false);
		start_Hash.put("tFTPClose_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_1";

	
		int tos_count_tFTPClose_1 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {
      try {
			
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_1 begin ] stop
 */
	
	/**
	 * [tFTPClose_1 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 


	tos_count_tFTPClose_1++;

/**
 * [tFTPClose_1 main ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_1 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 

ok_Hash.put("tFTPClose_1", true);
end_Hash.put("tFTPClose_1", System.currentTimeMillis());




/**
 * [tFTPClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {   
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
     
  }
 



/**
 * [tFTPClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HAPPI_Donnees_clefs_Livraison HAPPI_Donnees_clefs_LivraisonClass = new HAPPI_Donnees_clefs_Livraison();

        int exitCode = HAPPI_Donnees_clefs_LivraisonClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HAPPI_Donnees_clefs_Livraison.class.getClassLoader().getResourceAsStream("happi/happi_donnees_clefs_livraison_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HAPPI_Donnees_clefs_Livraison.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HAPPI_Donnees_clefs_Livraison");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();
    closeFtpConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }



    private void closeFtpConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tFTPConnection_1");
            if (obj_conn != null) {
                ((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
            }
        } catch (java.lang.Exception e) {
        }
    }








    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));


            connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     138391 characters generated by Talend Open Studio for Data Integration 
 *     on the 22 septembre 2022 14:36:17 CEST
 ************************************************************************************************/