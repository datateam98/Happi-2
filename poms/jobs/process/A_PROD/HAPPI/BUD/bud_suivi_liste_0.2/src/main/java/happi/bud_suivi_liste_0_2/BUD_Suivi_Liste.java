// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package happi.bud_suivi_liste_0_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: BUD_Suivi_Liste Purpose: <br>
 * Description: <br>
 * 
 * @author
 * @version 7.3.1.20200219_1130
 * @status
 */
public class BUD_Suivi_Liste implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "BUD_Suivi_Liste";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					BUD_Suivi_Liste.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(BUD_Suivi_Liste.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tPostjob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPPut_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFTPClose_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row16_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_7_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPostjob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_7_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPostjob_1 begin ] start
				 */

				ok_Hash.put("tPostjob_1", false);
				start_Hash.put("tPostjob_1", System.currentTimeMillis());

				currentComponent = "tPostjob_1";

				int tos_count_tPostjob_1 = 0;

				/**
				 * [tPostjob_1 begin ] stop
				 */

				/**
				 * [tPostjob_1 main ] start
				 */

				currentComponent = "tPostjob_1";

				tos_count_tPostjob_1++;

				/**
				 * [tPostjob_1 main ] stop
				 */

				/**
				 * [tPostjob_1 process_data_begin ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_begin ] stop
				 */

				/**
				 * [tPostjob_1 process_data_end ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 process_data_end ] stop
				 */

				/**
				 * [tPostjob_1 end ] start
				 */

				currentComponent = "tPostjob_1";

				ok_Hash.put("tPostjob_1", true);
				end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);

				/**
				 * [tPostjob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPostjob_1 finally ] start
				 */

				currentComponent = "tPostjob_1";

				/**
				 * [tPostjob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPConnection_1 begin ] start
				 */

				ok_Hash.put("tFTPConnection_1", false);
				start_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				currentComponent = "tFTPConnection_1";

				int tos_count_tFTPConnection_1 = 0;

				int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
				org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_1 = null;

				class MyTrust_tFTPConnection_1 {

					private javax.net.ssl.TrustManager[] getTrustManagers() throws java.security.KeyStoreException,
							java.security.NoSuchAlgorithmException, java.security.cert.CertificateException,
							java.security.UnrecoverableKeyException, java.io.IOException {
						java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");

						String decryptedKeyStorePassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil
								.decryptPassword(
										"enc:routine.encryption.key.v1:+0ZOq5UeUzFdIH0lWhWL1lsCZeOmpB/FM57z8ABlfzg=");
						ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"),
								decryptedKeyStorePassword_tFTPConnection_1.toCharArray());
						javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory
								.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
						tmf.init(ks);
						return tmf.getTrustManagers();
					}
				}
				javax.net.ssl.SSLContext sslContext_tFTPConnection_1 = null;
				javax.net.ssl.TrustManager[] trustManager_tFTPConnection_1 = null;
				javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_1 = null;
				MyTrust_tFTPConnection_1 myTrust_tFTPConnection_1 = null;

				try {
					sslContext_tFTPConnection_1 = javax.net.ssl.SSLContext.getInstance("SSL");
					myTrust_tFTPConnection_1 = new MyTrust_tFTPConnection_1();
					trustManager_tFTPConnection_1 = myTrust_tFTPConnection_1.getTrustManagers();
					sslContext_tFTPConnection_1.init(null, trustManager_tFTPConnection_1,
							new java.security.SecureRandom());
					sslSocketFactory_tFTPConnection_1 = sslContext_tFTPConnection_1.getSocketFactory();

					if (("true").equals(System.getProperty("http.proxySet"))) {
						String httpProxyHost = System.getProperty("http.proxyHost");
						int httpProxyPort = Integer.getInteger("http.proxyPort");
						String httpProxyUser = System.getProperty("http.proxyUser");
						String httpProxyPass = System.getProperty("http.proxyPassword");

						ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1,
								httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

					} else if ("local".equals(System.getProperty("http.proxySet"))) {
						String uriString = "ftps.toucantoco.com" + ":" + 990;
						java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance()
								.getProxyForUriString(uriString);

						if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
							java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

							String httpProxyHost = proxyAddress.getAddress().getHostAddress();
							int httpProxyPort = proxyAddress.getPort();
							String httpProxyUser = "";
							String httpProxyPass = ""; // leave it empty if proxy creds weren't specified

							org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator
									.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
							if (proxyCreds != null) {
								httpProxyUser = proxyCreds.getUser();
								httpProxyPass = proxyCreds.getPass();
							}

							ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true,
									sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser,
									httpProxyPass);

						} else { // no http proxy for ftp host defined
							ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true,
									sslContext_tFTPConnection_1);
						}
					} else {
						ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true,
								sslContext_tFTPConnection_1);
					}

					ftp_tFTPConnection_1.setControlEncoding("ISO-8859-15");

					if (connectionTimeout_tFTPConnection_1 > 0) {
						ftp_tFTPConnection_1.setDefaultTimeout(connectionTimeout_tFTPConnection_1);
					}

					ftp_tFTPConnection_1.connect("ftps.toucantoco.com", 990);
					ftp_tFTPConnection_1.setRemoteVerificationEnabled(true);

					final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil
							.decryptPassword(
									"enc:routine.encryption.key.v1:Fo4K0Av7asGlqcJ8bGx2jfSb6v/7m4maAc7HRLi3ZTfo14WTy+MLA96HHBhT5+o6uHt3XkStDKC1CBYY");

					boolean isLoginSuccessful_tFTPConnection_1 = ftp_tFTPConnection_1.login("hauts-de-seine-habitat",
							decryptedPassword_tFTPConnection_1);

					if (!isLoginSuccessful_tFTPConnection_1) {
						throw new RuntimeException("Login failed");
					}

					ftp_tFTPConnection_1.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
					ftp_tFTPConnection_1.execPBSZ(0);
					ftp_tFTPConnection_1.execPROT("P");
				} catch (Exception e) {
					throw e;
				}

				ftp_tFTPConnection_1.enterLocalPassiveMode();
				globalMap.put("conn_tFTPConnection_1", ftp_tFTPConnection_1);

				/**
				 * [tFTPConnection_1 begin ] stop
				 */

				/**
				 * [tFTPConnection_1 main ] start
				 */

				currentComponent = "tFTPConnection_1";

				tos_count_tFTPConnection_1++;

				/**
				 * [tFTPConnection_1 main ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_begin ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPConnection_1 process_data_end ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 process_data_end ] stop
				 */

				/**
				 * [tFTPConnection_1 end ] start
				 */

				currentComponent = "tFTPConnection_1";

				ok_Hash.put("tFTPConnection_1", true);
				end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFTPPut_1Process(globalMap);

				/**
				 * [tFTPConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPConnection_1 finally ] start
				 */

				currentComponent = "tFTPConnection_1";

				/**
				 * [tFTPConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPPut_1 begin ] start
				 */

				ok_Hash.put("tFTPPut_1", false);
				start_Hash.put("tFTPPut_1", System.currentTimeMillis());

				currentComponent = "tFTPPut_1";

				int tos_count_tFTPPut_1 = 0;

				int nb_file_tFTPPut_1 = 0;

				org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_1 = null;
				String rootDir_tFTPPut_1 = null;
				ftp_tFTPPut_1 = (org.apache.commons.net.ftp.FTPSClient) globalMap.get("conn_tFTPConnection_1");

				rootDir_tFTPPut_1 = ftp_tFTPPut_1.printWorkingDirectory();
				String remotedir_tFTPPut_1 = ("./Budget").replaceAll("\\\\", "/");

				String[] dirsTree_tFTPPut_1 = remotedir_tFTPPut_1.split("/");
				for (String dir : dirsTree_tFTPPut_1) {
					ftp_tFTPPut_1.makeDirectory(dir);
					ftp_tFTPPut_1.changeWorkingDirectory(dir);
				}

				ftp_tFTPPut_1.changeWorkingDirectory(rootDir_tFTPPut_1);
				boolean cwdSuccess_tFTPPut_1 = ftp_tFTPPut_1.changeWorkingDirectory(remotedir_tFTPPut_1);

				if (!cwdSuccess_tFTPPut_1) {
					throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_1.getReplyString());
				}

				java.util.List<java.util.Map<String, String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String, String>>();

				java.util.Map<String, String> maptFTPPut_10 = new java.util.HashMap<String, String>();
				maptFTPPut_10.put("Liste.csv", "");
				listtFTPPut_1.add(maptFTPPut_10);
				String localdirtFTPPut_1 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Budget";

				for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

					/**
					 * [tFTPPut_1 begin ] stop
					 */

					/**
					 * [tFTPPut_1 main ] start
					 */

					currentComponent = "tFTPPut_1";

					try {
						String currentStatus_tFTPPut_1 = "No file transfered.";
						globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
						java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
						boolean needRename_tFTPPut_1 = false;
						for (String keytFTPPut_1 : keySettFTPPut_1) {
							if (keytFTPPut_1 == null || "".equals(keytFTPPut_1)) {
								System.err.println("file name invalid!");
								continue;
							}
							String tempdirtFTPPut_1 = localdirtFTPPut_1;
							String filemasktFTPPut_1 = keytFTPPut_1;
							String dirtFTPPut_1 = null;
							String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/");
							int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
							if (itFTPPut_1 != -1) {
								dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
								masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1 + 1);
							}
							if (dirtFTPPut_1 != null && !"".equals(dirtFTPPut_1))
								tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
							masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
							final String finalMasktFTPPut_1 = masktFTPPut_1;
							java.io.File[] listingstFTPPut_1 = null;
							java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
							if (filetFTPPut_1.isDirectory()) {
								listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
									public boolean accept(java.io.File pathname) {
										boolean result = false;
										if (pathname != null && pathname.isFile()) {
											result = java.util.regex.Pattern.compile(finalMasktFTPPut_1)
													.matcher(pathname.getName()).find();
										}
										return result;
									}
								});
							}

							java.util.List<String> remoteExistsFiles_tFTPPut_1 = new java.util.ArrayList<String>();

							String[] ftpFileNames_tFTPPut_1 = ftp_tFTPPut_1.listNames();
							for (String ftpFileName : ftpFileNames_tFTPPut_1) {
								if ("".equals(maptFTPPut_1.get(keytFTPPut_1))) {
									if (ftpFileName.matches(masktFTPPut_1)) {
										remoteExistsFiles_tFTPPut_1.add(ftpFileName);
									}
								} else {
									if (ftpFileName.matches(maptFTPPut_1.get(keytFTPPut_1))) {
										remoteExistsFiles_tFTPPut_1.add(ftpFileName);
									}
								}
							}

							if (listingstFTPPut_1 != null && listingstFTPPut_1.length > 0) {
								for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++) {
									if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)) {
										java.io.File file_in_localDir_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1];
										java.io.FileInputStream file_stream_tFTPPut_1 = new java.io.FileInputStream(
												file_in_localDir_tFTPPut_1);
										globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1
												.contains(file_in_localDir_tFTPPut_1.getName()));
										String newName_tFTPPut_1 = ("".equals(maptFTPPut_1.get(keytFTPPut_1)))
												? file_in_localDir_tFTPPut_1.getName()
												: maptFTPPut_1.get(keytFTPPut_1);
										needRename_tFTPPut_1 = true;
										if ((remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1))) {
											ftp_tFTPPut_1.deleteFile(newName_tFTPPut_1);
										}
										ftp_tFTPPut_1.storeFile(file_in_localDir_tFTPPut_1.getName(),
												file_stream_tFTPPut_1);

										globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS",
												remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1));

										file_stream_tFTPPut_1.close();
										nb_file_tFTPPut_1++;
									}
								}
							} else {
								System.err.println("No match file exist!");
							}

							// do rename
							if (!((maptFTPPut_1.get(keytFTPPut_1) == null) || maptFTPPut_1.get(keytFTPPut_1).isEmpty()
									|| keytFTPPut_1.equals(maptFTPPut_1.get(keytFTPPut_1)))) {
								try {
									if (needRename_tFTPPut_1) {
										ftp_tFTPPut_1.rename(keytFTPPut_1, maptFTPPut_1.get(keytFTPPut_1));
									}
									globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
								} catch (IOException e_tFTPPut_1) {
									globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
									throw e_tFTPPut_1;
								}
							}
							needRename_tFTPPut_1 = false;
						}
					} catch (java.lang.Exception e_tFTPPut_1) {
						System.err.print(e_tFTPPut_1.getMessage());
					}

					tos_count_tFTPPut_1++;

					/**
					 * [tFTPPut_1 main ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_begin ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_begin ] stop
					 */

					/**
					 * [tFTPPut_1 process_data_end ] start
					 */

					currentComponent = "tFTPPut_1";

					/**
					 * [tFTPPut_1 process_data_end ] stop
					 */

					/**
					 * [tFTPPut_1 end ] start
					 */

					currentComponent = "tFTPPut_1";

				}
				ftp_tFTPPut_1.changeWorkingDirectory(rootDir_tFTPPut_1);

				globalMap.put("tFTPPut_1_NB_FILE", nb_file_tFTPPut_1);

				ok_Hash.put("tFTPPut_1", true);
				end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFTPClose_1Process(globalMap);

				/**
				 * [tFTPPut_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPPut_1 finally ] start
				 */

				currentComponent = "tFTPPut_1";

				/**
				 * [tFTPPut_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}

	public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tFTPClose_1 begin ] start
				 */

				ok_Hash.put("tFTPClose_1", false);
				start_Hash.put("tFTPClose_1", System.currentTimeMillis());

				currentComponent = "tFTPClose_1";

				int tos_count_tFTPClose_1 = 0;

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					try {

						org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
						conn.disconnect();

					} catch (Exception e) {
						globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage());
						throw e;
					}
				}

				/**
				 * [tFTPClose_1 begin ] stop
				 */

				/**
				 * [tFTPClose_1 main ] start
				 */

				currentComponent = "tFTPClose_1";

				tos_count_tFTPClose_1++;

				/**
				 * [tFTPClose_1 main ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_begin ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_begin ] stop
				 */

				/**
				 * [tFTPClose_1 process_data_end ] start
				 */

				currentComponent = "tFTPClose_1";

				/**
				 * [tFTPClose_1 process_data_end ] stop
				 */

				/**
				 * [tFTPClose_1 end ] start
				 */

				currentComponent = "tFTPClose_1";

				ok_Hash.put("tFTPClose_1", true);
				end_Hash.put("tFTPClose_1", System.currentTimeMillis());

				/**
				 * [tFTPClose_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFTPClose_1 finally ] start
				 */

				currentComponent = "tFTPClose_1";

				Object connObj = globalMap.get("conn_tFTPConnection_1");
				if (connObj != null) {
					org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
					conn.disconnect();

				}

				/**
				 * [tFTPClose_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "ACGINFO1";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "ACGINFO1";
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbUser_tDBConnection_1 = "";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:hRqhhLYGG+/NxNSJHiZ8AZgOB5TZG8IZp7I7Vg==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", "");

				globalMap.put("db_tDBConnection_1", "ACGINFO1");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
			}

			tDBConnection_2Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public void tDBConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_2 begin ] start
				 */

				ok_Hash.put("tDBConnection_2", false);
				start_Hash.put("tDBConnection_2", System.currentTimeMillis());

				currentComponent = "tDBConnection_2";

				int tos_count_tDBConnection_2 = 0;

				String url_tDBConnection_2 = "jdbc:as400://" + "S4410625" + "/" + "ACGPROD" + ";" + "prompt=false";
				String dbUser_tDBConnection_2 = "dkhuon";

				final String decryptedPassword_tDBConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword(
						"enc:routine.encryption.key.v1:MjJxQYlfHg8MskrdaRj8pnLs1vFjdSfVdTa+SQ/MXnN6mwRhWQ==");
				String dbPwd_tDBConnection_2 = decryptedPassword_tDBConnection_2;

				java.sql.Connection conn_tDBConnection_2 = null;

				String driverClass_tDBConnection_2 = "com.ibm.as400.access.AS400JDBCDriver";
				java.lang.Class jdbcclazz_tDBConnection_2 = java.lang.Class.forName(driverClass_tDBConnection_2);
				globalMap.put("driverClass_tDBConnection_2", driverClass_tDBConnection_2);

				conn_tDBConnection_2 = java.sql.DriverManager.getConnection(url_tDBConnection_2, dbUser_tDBConnection_2,
						dbPwd_tDBConnection_2);

				globalMap.put("conn_tDBConnection_2", conn_tDBConnection_2);
				if (null != conn_tDBConnection_2) {

					conn_tDBConnection_2.setAutoCommit(false);
				}

				globalMap.put("conn_" + "tDBConnection_2", conn_tDBConnection_2);

				/**
				 * [tDBConnection_2 begin ] stop
				 */

				/**
				 * [tDBConnection_2 main ] start
				 */

				currentComponent = "tDBConnection_2";

				tos_count_tDBConnection_2++;

				/**
				 * [tDBConnection_2 main ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_2 process_data_end ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_2 end ] start
				 */

				currentComponent = "tDBConnection_2";

				ok_Hash.put("tDBConnection_2", true);
				end_Hash.put("tDBConnection_2", System.currentTimeMillis());

				/**
				 * [tDBConnection_2 end ] stop
				 */
			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBConnection_2:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
			}

			tDBInput_7Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_2 finally ] start
				 */

				currentComponent = "tDBConnection_2";

				/**
				 * [tDBConnection_2 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_2_SUBPROCESS_STATE", 1);
	}

	public static class copyOfout3Struct implements routines.system.IPersistableRow<copyOfout3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_BUD_Suivi_Liste = new byte[0];
		static byte[] commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[0];

		public Integer CD_EXEC;

		public Integer getCD_EXEC() {
			return this.CD_EXEC;
		}

		public String Periode;

		public String getPeriode() {
			return this.Periode;
		}

		public String HDSH;

		public String getHDSH() {
			return this.HDSH;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String ServiceGFC;

		public String getServiceGFC() {
			return this.ServiceGFC;
		}

		public String Compte;

		public String getCompte() {
			return this.Compte;
		}

		public String Type;

		public String getType() {
			return this.Type;
		}

		public String SousType;

		public String getSousType() {
			return this.SousType;
		}

		public Integer GROUPE;

		public Integer getGROUPE() {
			return this.GROUPE;
		}

		public String CD_PATRIM;

		public String getCD_PATRIM() {
			return this.CD_PATRIM;
		}

		public String TYPE_PIECE;

		public String getTYPE_PIECE() {
			return this.TYPE_PIECE;
		}

		public BigDecimal NO_PIECE;

		public BigDecimal getNO_PIECE() {
			return this.NO_PIECE;
		}

		public String LB_PIECE;

		public String getLB_PIECE() {
			return this.LB_PIECE;
		}

		public String DT_PIECE;

		public String getDT_PIECE() {
			return this.DT_PIECE;
		}

		public BigDecimal NO_MARCHE;

		public BigDecimal getNO_MARCHE() {
			return this.NO_MARCHE;
		}

		public String LB_MARCHE;

		public String getLB_MARCHE() {
			return this.LB_MARCHE;
		}

		public String LB_TIERS;

		public String getLB_TIERS() {
			return this.LB_TIERS;
		}

		public Float MT_CMD;

		public Float getMT_CMD() {
			return this.MT_CMD;
		}

		public Float MT_FACTURE;

		public Float getMT_FACTURE() {
			return this.MT_FACTURE;
		}

		public Float MT_DEGAGE;

		public Float getMT_DEGAGE() {
			return this.MT_DEGAGE;
		}

		public Float MT_QUI_CONSOMME;

		public Float getMT_QUI_CONSOMME() {
			return this.MT_QUI_CONSOMME;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_BUD_Suivi_Liste.length) {
					if (length < 1024 && commonByteArray_HAPPI_BUD_Suivi_Liste.length == 0) {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[1024];
					} else {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length);
				strReturn = new String(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_BUD_Suivi_Liste) {

				try {

					int length = 0;

					this.CD_EXEC = readInteger(dis);

					this.Periode = readString(dis);

					this.HDSH = readString(dis);

					this.DT = readString(dis);

					this.DP = readString(dis);

					this.VILLE = readString(dis);

					this.ServiceGFC = readString(dis);

					this.Compte = readString(dis);

					this.Type = readString(dis);

					this.SousType = readString(dis);

					this.GROUPE = readInteger(dis);

					this.CD_PATRIM = readString(dis);

					this.TYPE_PIECE = readString(dis);

					this.NO_PIECE = (BigDecimal) dis.readObject();

					this.LB_PIECE = readString(dis);

					this.DT_PIECE = readString(dis);

					this.NO_MARCHE = (BigDecimal) dis.readObject();

					this.LB_MARCHE = readString(dis);

					this.LB_TIERS = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MT_CMD = null;
					} else {
						this.MT_CMD = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_FACTURE = null;
					} else {
						this.MT_FACTURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_DEGAGE = null;
					} else {
						this.MT_DEGAGE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_QUI_CONSOMME = null;
					} else {
						this.MT_QUI_CONSOMME = dis.readFloat();
					}

					this.DT_ALIM = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_EXEC, dos);

				// String

				writeString(this.Periode, dos);

				// String

				writeString(this.HDSH, dos);

				// String

				writeString(this.DT, dos);

				// String

				writeString(this.DP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.ServiceGFC, dos);

				// String

				writeString(this.Compte, dos);

				// String

				writeString(this.Type, dos);

				// String

				writeString(this.SousType, dos);

				// Integer

				writeInteger(this.GROUPE, dos);

				// String

				writeString(this.CD_PATRIM, dos);

				// String

				writeString(this.TYPE_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_PIECE);

				// String

				writeString(this.LB_PIECE, dos);

				// String

				writeString(this.DT_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_MARCHE);

				// String

				writeString(this.LB_MARCHE, dos);

				// String

				writeString(this.LB_TIERS, dos);

				// Float

				if (this.MT_CMD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_CMD);
				}

				// Float

				if (this.MT_FACTURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_FACTURE);
				}

				// Float

				if (this.MT_DEGAGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_DEGAGE);
				}

				// Float

				if (this.MT_QUI_CONSOMME == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_QUI_CONSOMME);
				}

				// java.util.Date

				writeDate(this.DT_ALIM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_EXEC=" + String.valueOf(CD_EXEC));
			sb.append(",Periode=" + Periode);
			sb.append(",HDSH=" + HDSH);
			sb.append(",DT=" + DT);
			sb.append(",DP=" + DP);
			sb.append(",VILLE=" + VILLE);
			sb.append(",ServiceGFC=" + ServiceGFC);
			sb.append(",Compte=" + Compte);
			sb.append(",Type=" + Type);
			sb.append(",SousType=" + SousType);
			sb.append(",GROUPE=" + String.valueOf(GROUPE));
			sb.append(",CD_PATRIM=" + CD_PATRIM);
			sb.append(",TYPE_PIECE=" + TYPE_PIECE);
			sb.append(",NO_PIECE=" + String.valueOf(NO_PIECE));
			sb.append(",LB_PIECE=" + LB_PIECE);
			sb.append(",DT_PIECE=" + DT_PIECE);
			sb.append(",NO_MARCHE=" + String.valueOf(NO_MARCHE));
			sb.append(",LB_MARCHE=" + LB_MARCHE);
			sb.append(",LB_TIERS=" + LB_TIERS);
			sb.append(",MT_CMD=" + String.valueOf(MT_CMD));
			sb.append(",MT_FACTURE=" + String.valueOf(MT_FACTURE));
			sb.append(",MT_DEGAGE=" + String.valueOf(MT_DEGAGE));
			sb.append(",MT_QUI_CONSOMME=" + String.valueOf(MT_QUI_CONSOMME));
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_HAPPI_BUD_Suivi_Liste = new byte[0];
		static byte[] commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[0];

		public Integer CD_EXEC;

		public Integer getCD_EXEC() {
			return this.CD_EXEC;
		}

		public String DT_CONSO;

		public String getDT_CONSO() {
			return this.DT_CONSO;
		}

		public String COMPTE;

		public String getCOMPTE() {
			return this.COMPTE;
		}

		public Integer GROUPE;

		public Integer getGROUPE() {
			return this.GROUPE;
		}

		public String CD_PATRIM;

		public String getCD_PATRIM() {
			return this.CD_PATRIM;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String TYPE_PIECE;

		public String getTYPE_PIECE() {
			return this.TYPE_PIECE;
		}

		public BigDecimal NO_PIECE;

		public BigDecimal getNO_PIECE() {
			return this.NO_PIECE;
		}

		public String LB_PIECE;

		public String getLB_PIECE() {
			return this.LB_PIECE;
		}

		public String DT_PIECE;

		public String getDT_PIECE() {
			return this.DT_PIECE;
		}

		public BigDecimal NO_MARCHE;

		public BigDecimal getNO_MARCHE() {
			return this.NO_MARCHE;
		}

		public String LB_MARCHE;

		public String getLB_MARCHE() {
			return this.LB_MARCHE;
		}

		public String LB_TIERS;

		public String getLB_TIERS() {
			return this.LB_TIERS;
		}

		public String LB_SERVICE;

		public String getLB_SERVICE() {
			return this.LB_SERVICE;
		}

		public Float MT_CMD;

		public Float getMT_CMD() {
			return this.MT_CMD;
		}

		public Float MT_FACTURE;

		public Float getMT_FACTURE() {
			return this.MT_FACTURE;
		}

		public Float MT_DEGAGE;

		public Float getMT_DEGAGE() {
			return this.MT_DEGAGE;
		}

		public Float MT_QUI_CONSOMME;

		public Float getMT_QUI_CONSOMME() {
			return this.MT_QUI_CONSOMME;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_BUD_Suivi_Liste.length) {
					if (length < 1024 && commonByteArray_HAPPI_BUD_Suivi_Liste.length == 0) {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[1024];
					} else {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length);
				strReturn = new String(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_BUD_Suivi_Liste) {

				try {

					int length = 0;

					this.CD_EXEC = readInteger(dis);

					this.DT_CONSO = readString(dis);

					this.COMPTE = readString(dis);

					this.GROUPE = readInteger(dis);

					this.CD_PATRIM = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.TYPE_PIECE = readString(dis);

					this.NO_PIECE = (BigDecimal) dis.readObject();

					this.LB_PIECE = readString(dis);

					this.DT_PIECE = readString(dis);

					this.NO_MARCHE = (BigDecimal) dis.readObject();

					this.LB_MARCHE = readString(dis);

					this.LB_TIERS = readString(dis);

					this.LB_SERVICE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MT_CMD = null;
					} else {
						this.MT_CMD = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_FACTURE = null;
					} else {
						this.MT_FACTURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_DEGAGE = null;
					} else {
						this.MT_DEGAGE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_QUI_CONSOMME = null;
					} else {
						this.MT_QUI_CONSOMME = dis.readFloat();
					}

					this.DT_ALIM = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_EXEC, dos);

				// String

				writeString(this.DT_CONSO, dos);

				// String

				writeString(this.COMPTE, dos);

				// Integer

				writeInteger(this.GROUPE, dos);

				// String

				writeString(this.CD_PATRIM, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.TYPE_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_PIECE);

				// String

				writeString(this.LB_PIECE, dos);

				// String

				writeString(this.DT_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_MARCHE);

				// String

				writeString(this.LB_MARCHE, dos);

				// String

				writeString(this.LB_TIERS, dos);

				// String

				writeString(this.LB_SERVICE, dos);

				// Float

				if (this.MT_CMD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_CMD);
				}

				// Float

				if (this.MT_FACTURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_FACTURE);
				}

				// Float

				if (this.MT_DEGAGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_DEGAGE);
				}

				// Float

				if (this.MT_QUI_CONSOMME == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_QUI_CONSOMME);
				}

				// java.util.Date

				writeDate(this.DT_ALIM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_EXEC=" + String.valueOf(CD_EXEC));
			sb.append(",DT_CONSO=" + DT_CONSO);
			sb.append(",COMPTE=" + COMPTE);
			sb.append(",GROUPE=" + String.valueOf(GROUPE));
			sb.append(",CD_PATRIM=" + CD_PATRIM);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",TYPE_PIECE=" + TYPE_PIECE);
			sb.append(",NO_PIECE=" + String.valueOf(NO_PIECE));
			sb.append(",LB_PIECE=" + LB_PIECE);
			sb.append(",DT_PIECE=" + DT_PIECE);
			sb.append(",NO_MARCHE=" + String.valueOf(NO_MARCHE));
			sb.append(",LB_MARCHE=" + LB_MARCHE);
			sb.append(",LB_TIERS=" + LB_TIERS);
			sb.append(",LB_SERVICE=" + LB_SERVICE);
			sb.append(",MT_CMD=" + String.valueOf(MT_CMD));
			sb.append(",MT_FACTURE=" + String.valueOf(MT_FACTURE));
			sb.append(",MT_DEGAGE=" + String.valueOf(MT_DEGAGE));
			sb.append(",MT_QUI_CONSOMME=" + String.valueOf(MT_QUI_CONSOMME));
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_7Struct implements routines.system.IPersistableRow<after_tDBInput_7Struct> {
		final static byte[] commonByteArrayLock_HAPPI_BUD_Suivi_Liste = new byte[0];
		static byte[] commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[0];

		public Integer CD_EXEC;

		public Integer getCD_EXEC() {
			return this.CD_EXEC;
		}

		public String DT_CONSO;

		public String getDT_CONSO() {
			return this.DT_CONSO;
		}

		public String COMPTE;

		public String getCOMPTE() {
			return this.COMPTE;
		}

		public Integer GROUPE;

		public Integer getGROUPE() {
			return this.GROUPE;
		}

		public String CD_PATRIM;

		public String getCD_PATRIM() {
			return this.CD_PATRIM;
		}

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String TYPE_PIECE;

		public String getTYPE_PIECE() {
			return this.TYPE_PIECE;
		}

		public BigDecimal NO_PIECE;

		public BigDecimal getNO_PIECE() {
			return this.NO_PIECE;
		}

		public String LB_PIECE;

		public String getLB_PIECE() {
			return this.LB_PIECE;
		}

		public String DT_PIECE;

		public String getDT_PIECE() {
			return this.DT_PIECE;
		}

		public BigDecimal NO_MARCHE;

		public BigDecimal getNO_MARCHE() {
			return this.NO_MARCHE;
		}

		public String LB_MARCHE;

		public String getLB_MARCHE() {
			return this.LB_MARCHE;
		}

		public String LB_TIERS;

		public String getLB_TIERS() {
			return this.LB_TIERS;
		}

		public String LB_SERVICE;

		public String getLB_SERVICE() {
			return this.LB_SERVICE;
		}

		public Float MT_CMD;

		public Float getMT_CMD() {
			return this.MT_CMD;
		}

		public Float MT_FACTURE;

		public Float getMT_FACTURE() {
			return this.MT_FACTURE;
		}

		public Float MT_DEGAGE;

		public Float getMT_DEGAGE() {
			return this.MT_DEGAGE;
		}

		public Float MT_QUI_CONSOMME;

		public Float getMT_QUI_CONSOMME() {
			return this.MT_QUI_CONSOMME;
		}

		public java.util.Date DT_ALIM;

		public java.util.Date getDT_ALIM() {
			return this.DT_ALIM;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_BUD_Suivi_Liste.length) {
					if (length < 1024 && commonByteArray_HAPPI_BUD_Suivi_Liste.length == 0) {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[1024];
					} else {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length);
				strReturn = new String(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_BUD_Suivi_Liste) {

				try {

					int length = 0;

					this.CD_EXEC = readInteger(dis);

					this.DT_CONSO = readString(dis);

					this.COMPTE = readString(dis);

					this.GROUPE = readInteger(dis);

					this.CD_PATRIM = readString(dis);

					this.CD_LOCALI1 = readString(dis);

					this.TYPE_PIECE = readString(dis);

					this.NO_PIECE = (BigDecimal) dis.readObject();

					this.LB_PIECE = readString(dis);

					this.DT_PIECE = readString(dis);

					this.NO_MARCHE = (BigDecimal) dis.readObject();

					this.LB_MARCHE = readString(dis);

					this.LB_TIERS = readString(dis);

					this.LB_SERVICE = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.MT_CMD = null;
					} else {
						this.MT_CMD = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_FACTURE = null;
					} else {
						this.MT_FACTURE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_DEGAGE = null;
					} else {
						this.MT_DEGAGE = dis.readFloat();
					}

					length = dis.readByte();
					if (length == -1) {
						this.MT_QUI_CONSOMME = null;
					} else {
						this.MT_QUI_CONSOMME = dis.readFloat();
					}

					this.DT_ALIM = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				} catch (ClassNotFoundException eCNFE) {
					throw new RuntimeException(eCNFE);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_EXEC, dos);

				// String

				writeString(this.DT_CONSO, dos);

				// String

				writeString(this.COMPTE, dos);

				// Integer

				writeInteger(this.GROUPE, dos);

				// String

				writeString(this.CD_PATRIM, dos);

				// String

				writeString(this.CD_LOCALI1, dos);

				// String

				writeString(this.TYPE_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_PIECE);

				// String

				writeString(this.LB_PIECE, dos);

				// String

				writeString(this.DT_PIECE, dos);

				// BigDecimal

				dos.writeObject(this.NO_MARCHE);

				// String

				writeString(this.LB_MARCHE, dos);

				// String

				writeString(this.LB_TIERS, dos);

				// String

				writeString(this.LB_SERVICE, dos);

				// Float

				if (this.MT_CMD == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_CMD);
				}

				// Float

				if (this.MT_FACTURE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_FACTURE);
				}

				// Float

				if (this.MT_DEGAGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_DEGAGE);
				}

				// Float

				if (this.MT_QUI_CONSOMME == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.MT_QUI_CONSOMME);
				}

				// java.util.Date

				writeDate(this.DT_ALIM, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_EXEC=" + String.valueOf(CD_EXEC));
			sb.append(",DT_CONSO=" + DT_CONSO);
			sb.append(",COMPTE=" + COMPTE);
			sb.append(",GROUPE=" + String.valueOf(GROUPE));
			sb.append(",CD_PATRIM=" + CD_PATRIM);
			sb.append(",CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",TYPE_PIECE=" + TYPE_PIECE);
			sb.append(",NO_PIECE=" + String.valueOf(NO_PIECE));
			sb.append(",LB_PIECE=" + LB_PIECE);
			sb.append(",DT_PIECE=" + DT_PIECE);
			sb.append(",NO_MARCHE=" + String.valueOf(NO_MARCHE));
			sb.append(",LB_MARCHE=" + LB_MARCHE);
			sb.append(",LB_TIERS=" + LB_TIERS);
			sb.append(",LB_SERVICE=" + LB_SERVICE);
			sb.append(",MT_CMD=" + String.valueOf(MT_CMD));
			sb.append(",MT_FACTURE=" + String.valueOf(MT_FACTURE));
			sb.append(",MT_DEGAGE=" + String.valueOf(MT_DEGAGE));
			sb.append(",MT_QUI_CONSOMME=" + String.valueOf(MT_QUI_CONSOMME));
			sb.append(",DT_ALIM=" + String.valueOf(DT_ALIM));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_13Process(globalMap);

				row8Struct row8 = new row8Struct();
				copyOfout3Struct copyOfout3 = new copyOfout3Struct();

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfout3");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Budget/Liste.csv")).getAbsolutePath().replace("\\",
								"/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("CD_EXEC");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Periode");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("HDSH");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DT");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DP");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("VILLE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("ServiceGFC");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Compte");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Type");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("SousType");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("GROUPE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("CD_PATRIM");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("TYPE_PIECE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("NO_PIECE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("LB_PIECE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DT_PIECE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("NO_MARCHE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("LB_MARCHE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("LB_TIERS");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("MT_CMD");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("MT_FACTURE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("MT_DEGAGE");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("MT_QUI_CONSOMME");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DT_ALIM");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) globalMap
						.get("tHash_Lookup_row16"));

				row16Struct row16HashKey = new row16Struct();
				row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
					String Type;
					String SousType;
					String ServiceGFC;
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfout3Struct copyOfout3_tmp = new copyOfout3Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				conn_tDBInput_7 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_7 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "\nselect \ndb.CD_EXEC,\nFORMAT(DT_CONSO, 'yyyy-MM') as DT_CONSO,\ncompte ,\nlp.CD_PATRIM1 ,\npg.CD_PATRIM,\npg.CD_LOCAL"
						+ "I1 ,\nCASE \n	WHEN ep.CD_ORIPIEC = 'C' THEN 'Commande'\n	WHEN ep.CD_ORIPIEC = 'F' THEN 'Facture'\n	WHEN ep.CD_ORIPIEC = "
						+ "'A' THEN 'Avoir'\n	else ep.CD_ORIPIEC\nEND as 'Origine piece',\nep.NO_PIECE ,\nREPLACE(ep.LB_PIECE , ';', ' ') as LB_PIE"
						+ "CE,\nep.DT_PIECE ,\nep.NO_REGLE ,\nep.LB_REGLE ,\nep.LB_TIERS ,\nog.LB_CODE1 ,\n/*lp.LB_L_PIECE ,\nlp.LB_DESTINA ,\nlp.L"
						+ "B_METIER ,\nlp.LB_NATURE ,\nlp.LB_PRESTA ,*/\nsum(MT_ENGAG) as MT_ENGAG,\nsum(MT_FACTURE) as MT_FACTURE,\nsum(MT_DEGAG) "
						+ "as MT_DEGAG,\nsum(MT_QUICONS) as MT_QUICONS,\nmax(db.DT_ALIM) as DT_ALIM\nfrom DET_BUD db \nleft join ENT_PIECE ep on ep"
						+ ".ID_ENTPIEC = db.ID_ENTPIEC \nleft join LGN_PIECE lp on db.ID_ENTPIEC = lp.ID_ENTPIEC and db.ID_LIGPIEC = lp.ID_LIGPIEC "
						+ "\nleft join PATRIMOINE_GIM pg  on lp.CD_PATRIM1 = pg.CD_PATRIM1 \n							and lp.CD_PATRIM2 = pg.CD_PATRIM2\n							and l"
						+ "p.CD_PATRIM3 = pg.CD_PATRIM3 \n							and lp.CD_PATRIM4 = pg.CD_PATRIM4 \nleft join ORGANISAT_GIM og on lp.CD_HORG_ENT ="
						+ " og.CD_HIERORG \n														and og.CD_ENT_HIER = 1\nwhere db.CD_EXEC >= year(getdate())-1\nand SUBSTRING(compte ,1 , "
						+ "1 ) in ('6', '7')\nand db.CD_COMPTA = 'A'\ngroup by \ndb.CD_EXEC,\nFORMAT(DT_CONSO, 'yyyy-MM'),\ncompte ,\nlp.CD_PATRIM1"
						+ " ,\npg.CD_PATRIM,\npg.CD_LOCALI1 ,\nCASE \n	WHEN ep.CD_ORIPIEC = 'C' THEN 'Commande'\n	WHEN ep.CD_ORIPIEC = 'F' THEN 'Fa"
						+ "cture'\n	WHEN ep.CD_ORIPIEC = 'A' THEN 'Avoir'\n	else ep.CD_ORIPIEC\nEND,\nep.NO_PIECE ,\nREPLACE(ep.LB_PIECE , ';', ' '"
						+ "),\nep.DT_PIECE ,\nep.NO_REGLE ,\nep.LB_REGLE ,\nep.LB_TIERS,\nog.LB_CODE1 \norder by 2, 11, 6\n";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row8.CD_EXEC = null;
						} else {

							row8.CD_EXEC = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								row8.CD_EXEC = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row8.DT_CONSO = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(2);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DT_CONSO = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.DT_CONSO = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.DT_CONSO = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row8.COMPTE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(3);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.COMPTE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.COMPTE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.COMPTE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row8.GROUPE = null;
						} else {

							row8.GROUPE = rs_tDBInput_7.getInt(4);
							if (rs_tDBInput_7.wasNull()) {
								row8.GROUPE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row8.CD_PATRIM = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(5);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.CD_PATRIM = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.CD_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 6) {
							row8.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(6);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.CD_LOCALI1 = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 7) {
							row8.TYPE_PIECE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(7);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.TYPE_PIECE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.TYPE_PIECE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.TYPE_PIECE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 8) {
							row8.NO_PIECE = null;
						} else {

							row8.NO_PIECE = rs_tDBInput_7.getBigDecimal(8);
							if (rs_tDBInput_7.wasNull()) {
								row8.NO_PIECE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 9) {
							row8.LB_PIECE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(9);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.LB_PIECE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.LB_PIECE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.LB_PIECE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 10) {
							row8.DT_PIECE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(10);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.DT_PIECE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.DT_PIECE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.DT_PIECE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 11) {
							row8.NO_MARCHE = null;
						} else {

							row8.NO_MARCHE = rs_tDBInput_7.getBigDecimal(11);
							if (rs_tDBInput_7.wasNull()) {
								row8.NO_MARCHE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 12) {
							row8.LB_MARCHE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(12);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.LB_MARCHE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.LB_MARCHE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.LB_MARCHE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 13) {
							row8.LB_TIERS = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(13);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.LB_TIERS = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.LB_TIERS = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.LB_TIERS = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 14) {
							row8.LB_SERVICE = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(14);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
									row8.LB_SERVICE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row8.LB_SERVICE = tmpContent_tDBInput_7.trim();
								}
							} else {
								row8.LB_SERVICE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 15) {
							row8.MT_CMD = null;
						} else {

							row8.MT_CMD = rs_tDBInput_7.getFloat(15);
							if (rs_tDBInput_7.wasNull()) {
								row8.MT_CMD = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 16) {
							row8.MT_FACTURE = null;
						} else {

							row8.MT_FACTURE = rs_tDBInput_7.getFloat(16);
							if (rs_tDBInput_7.wasNull()) {
								row8.MT_FACTURE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 17) {
							row8.MT_DEGAGE = null;
						} else {

							row8.MT_DEGAGE = rs_tDBInput_7.getFloat(17);
							if (rs_tDBInput_7.wasNull()) {
								row8.MT_DEGAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 18) {
							row8.MT_QUI_CONSOMME = null;
						} else {

							row8.MT_QUI_CONSOMME = rs_tDBInput_7.getFloat(18);
							if (rs_tDBInput_7.wasNull()) {
								row8.MT_QUI_CONSOMME = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 19) {
							row8.DT_ALIM = null;
						} else {

							row8.DT_ALIM = mssqlGTU_tDBInput_7.getDate(rsmd_tDBInput_7, rs_tDBInput_7, 19);

						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row16"
						///////////////////////////////////////////////

						boolean forceLooprow16 = false;

						row16Struct row16ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row16HashKey.CD_LOCALI1 = row8.CD_LOCALI1;

							row16HashKey.hashCodeDirty = true;

							tHash_Lookup_row16.lookup(row16HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row16' and it contains more one result from keys : row16.CD_LOCALI1 = '" +
							// row16HashKey.CD_LOCALI1 + "'");
						} // G 071

						row16Struct row16 = null;

						row16Struct fromLookup_row16 = null;
						row16 = row16Default;

						if (tHash_Lookup_row16 != null && tHash_Lookup_row16.hasNext()) { // G 099

							fromLookup_row16 = tHash_Lookup_row16.next();

						} // G 099

						if (fromLookup_row16 != null) {
							row16 = fromLookup_row16;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;
							Var.Type = row8.COMPTE.startsWith("677888") ? "Charges exceptionnelles"
									: row8.COMPTE.startsWith("615212") ? "Entretien du patrimoine"
											: row8.COMPTE.startsWith("606161") ? "Achats non stockés"
													: row8.COMPTE.startsWith("606151") ? "Achats non stockés"
															: row8.COMPTE.startsWith("606142") ? "Charges récupérables"
																	: row8.COMPTE.startsWith("606141")
																			? "Achats non stockés"
																			: row8.COMPTE.startsWith("606132")
																					? "Charges récupérables"
																					: row8.COMPTE.startsWith("606131")
																							? "Achats non stockés"
																							: row8.COMPTE.startsWith(
																									"606122")
																											? "Charges récupérables"
																											: row8.COMPTE
																													.startsWith(
																															"606121")
																																	? "Achats non stockés"
																																	: row8.COMPTE
																																			.startsWith(
																																					"606112")
																																							? "Charges récupérables"
																																							: row8.COMPTE
																																									.startsWith(
																																											"606111")
																																													? "Achats non stockés"
																																													: row8.COMPTE
																																															.startsWith(
																																																	"70948") ? "Loyers"
																																																			: row8.COMPTE
																																																					.startsWith(
																																																							"70943") ? "Loyers"
																																																									: row8.COMPTE
																																																											.startsWith(
																																																													"67862") ? "Charges exceptionnelles"
																																																															: row8.COMPTE
																																																																	.startsWith(
																																																																			"61581") ? "Entretien du patrimoine"
																																																																					: row8.COMPTE
																																																																							.startsWith(
																																																																									"61522") ? "Charges récupérables"
																																																																											: row8.COMPTE
																																																																													.startsWith(
																																																																															"61512") ? "Charges récupérables"
																																																																																	: row8.COMPTE
																																																																																			.startsWith(
																																																																																					"61511") ? "Entretien du patrimoine"
																																																																																							: row8.COMPTE
																																																																																									.startsWith(
																																																																																											"61352") ? "Charges récupérables"
																																																																																													: row8.COMPTE
																																																																																															.startsWith(
																																																																																																	"61182") ? "Charges récupérables"
																																																																																																			: row8.COMPTE
																																																																																																					.startsWith(
																																																																																																							"61181") ? "Sous-traitance"
																																																																																																									: row8.COMPTE
																																																																																																											.startsWith(
																																																																																																													"61161") ? "Sous-traitance"
																																																																																																															: row8.COMPTE
																																																																																																																	.startsWith(
																																																																																																																			"61142") ? "Charges récupérables"
																																																																																																																					: row8.COMPTE
																																																																																																																							.startsWith(
																																																																																																																									"61141") ? "Sous-traitance"
																																																																																																																											: row8.COMPTE
																																																																																																																													.startsWith(
																																																																																																																															"61132") ? "Charges récupérables"
																																																																																																																																	: row8.COMPTE
																																																																																																																																			.startsWith(
																																																																																																																																					"61131") ? "Sous-traitance"
																																																																																																																																							: row8.COMPTE
																																																																																																																																									.startsWith(
																																																																																																																																											"61122") ? "Charges récupérables"
																																																																																																																																													: row8.COMPTE
																																																																																																																																															.startsWith(
																																																																																																																																																	"61121") ? "Sous-traitance"
																																																																																																																																																			: row8.COMPTE
																																																																																																																																																					.startsWith(
																																																																																																																																																							"61112") ? "Charges récupérables"
																																																																																																																																																									: row8.COMPTE
																																																																																																																																																											.startsWith(
																																																																																																																																																													"61111") ? "Sous-traitance"
																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																	.startsWith(
																																																																																																																																																																			"60682") ? "Charges récupérables"
																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																							.startsWith(
																																																																																																																																																																									"60681") ? "Achats non stockés"
																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																													.startsWith(
																																																																																																																																																																															"60632") ? "Charges récupérables"
																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																					"60631") ? "Achats non stockés"
																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																											"7784") ? "Produits exceptionnels"
																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																	"7048") ? "Loyers"
																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																							"7046") ? "Loyers"
																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																													"7045") ? "Loyers"
																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																			"7044") ? "Loyers"
																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																									"7043") ? "Loyers"
																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																															"7042") ? "Loyers"
																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																					"7041") ? "Loyers"
																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																											"6786") ? "Charges exceptionnelles"
																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																	"6732") ? "Charges récupérables"
																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																							"6722") ? "Charges récupérables"
																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																													"6227") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																			"6226") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																									"6224") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																																																																															"6223") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																																																																					"6156") ? "Entretien du patrimoine"
																																																																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																																																																											"6152") ? "Entretien du patrimoine"
																																																																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																																																																	"6142") ? "Charges récupérables"
																																																																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																																																																							"6115") ? "Sous-traitance"
																																																																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																																																																													"6064") ? "Achats non stockés"
																																																																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																																																																			"772") ? "Produits exceptionnels"
																																																																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																																																																									"771") ? "Produits exceptionnels"
																																																																																																																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																																																																																																																															"743") ? "Autres produits d exploitation"
																																																																																																																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																																																																																																																					"672") ? "Charges exceptionnelles"
																																																																																																																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																																																																																																																											"671") ? "Charges exceptionnelles"
																																																																																																																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																																																																																																																	"654") ? "Autres charges de gestion courante"
																																																																																																																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																																																																																																																							"77") ? "Produits exceptionnels"
																																																																																																																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																																																																																																																													"75") ? "Autres produits d exploitation"
																																																																																																																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																																																																																																																			"65") ? "Autres charges de gestion courante"
																																																																																																																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																																																																																																																									"62") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																																																																																																																																																																															"61") ? "Autres services extérieurs"
																																																																																																																																																																																																																																																																																																																																																																																	: "-";
							Var.SousType = row8.COMPTE.startsWith("677888") ? "Autres charges exceptionnelles"
									: row8.COMPTE.startsWith("606161") ? "Carburant"
											: row8.COMPTE.startsWith("606151") ? "Carburant"
													: row8.COMPTE.startsWith("606142") ? "Chauffage et énergie R"
															: row8.COMPTE.startsWith("606141") ? "Fluides"
																	: row8.COMPTE.startsWith("606132")
																			? "Chauffage et énergie R"
																			: row8.COMPTE.startsWith("606131")
																					? "Fluides"
																					: row8.COMPTE.startsWith("606122")
																							? "Eau R"
																							: row8.COMPTE.startsWith(
																									"606121")
																											? "Fluides"
																											: row8.COMPTE
																													.startsWith(
																															"606112")
																																	? "Chauffage et énergie R"
																																	: row8.COMPTE
																																			.startsWith(
																																					"606111")
																																							? "Fluides"
																																							: row8.COMPTE
																																									.startsWith(
																																											"70948") ? "RLS"
																																													: row8.COMPTE
																																															.startsWith(
																																																	"70943") ? "RLS"
																																																			: row8.COMPTE
																																																					.startsWith(
																																																							"67862") ? "Sinistres"
																																																									: row8.COMPTE
																																																											.startsWith(
																																																													"61581") ? "Maintenance autre"
																																																															: row8.COMPTE
																																																																	.startsWith(
																																																																			"61521") ? "Gros entretien"
																																																																					: row8.COMPTE
																																																																							.startsWith(
																																																																									"61522") ? "Entretien et maintenance R"
																																																																											: row8.COMPTE
																																																																													.startsWith(
																																																																															"61512") ? "Entretien et maintenance R"
																																																																																	: row8.COMPTE
																																																																																			.startsWith(
																																																																																					"61511") ? "Petit Entretien"
																																																																																							: row8.COMPTE
																																																																																									.startsWith(
																																																																																											"61352") ? "Locations et charges locatives R"
																																																																																													: row8.COMPTE
																																																																																															.startsWith(
																																																																																																	"61182") ? "Sous-traitance R"
																																																																																																			: row8.COMPTE
																																																																																																					.startsWith(
																																																																																																							"61181") ? "Divers"
																																																																																																									: row8.COMPTE
																																																																																																											.startsWith(
																																																																																																													"61161") ? "Ascenseurs"
																																																																																																															: row8.COMPTE
																																																																																																																	.startsWith(
																																																																																																																			"61142") ? "Sous-traitance R"
																																																																																																																					: row8.COMPTE
																																																																																																																							.startsWith(
																																																																																																																									"61141") ? "Nettoyage"
																																																																																																																											: row8.COMPTE
																																																																																																																													.startsWith(
																																																																																																																															"61132") ? "Sous-traitance R"
																																																																																																																																	: row8.COMPTE
																																																																																																																																			.startsWith(
																																																																																																																																					"61131") ? "Chauffage"
																																																																																																																																							: row8.COMPTE
																																																																																																																																									.startsWith(
																																																																																																																																											"61122") ? "Sous-traitance R"
																																																																																																																																													: row8.COMPTE
																																																																																																																																															.startsWith(
																																																																																																																																																	"61121") ? "Espaces verts"
																																																																																																																																																			: row8.COMPTE
																																																																																																																																																					.startsWith(
																																																																																																																																																							"61112") ? "Sous-traitance R"
																																																																																																																																																									: row8.COMPTE
																																																																																																																																																											.startsWith(
																																																																																																																																																													"61111") ? "Hygiène et sécurité"
																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																	.startsWith(
																																																																																																																																																																			"60682") ? "Fournitures R"
																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																							.startsWith(
																																																																																																																																																																									"60681") ? "Fournitures"
																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																													.startsWith(
																																																																																																																																																																															"60632") ? "Fournitures R"
																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																					"60631") ? "Fournitures"
																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																											"7784") ? "Indemnités assurance"
																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																	"7048") ? "logements (hors RLS / SLS)"
																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																							"7046") ? "foyers"
																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																													"7045") ? "parking"
																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																			"7044") ? "locaux commerciaux"
																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																									"7043") ? "logements (hors RLS / SLS)"
																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																															"7042") ? "SLS"
																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																					"7041") ? "logements (hors RLS / SLS)"
																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																											"6786") ? "Sinistres"
																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																	"6732") ? "Charges exceptionnelles R"
																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																							"6722") ? "Charges exceptionnelles R"
																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																													"6227") ? "Frais d'actes et de contentieux"
																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																			"6226") ? "Honoraires"
																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																									"6224") ? "Honoraires"
																																																																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																																																																															"6223") ? "Honoraires"
																																																																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																																																																					"6156") ? "Maintenance autre"
																																																																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																																																																											"6142") ? "Locations et charges locatives R"
																																																																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																																																																	"6115") ? "Frais de gestion d'immeubles"
																																																																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																																																																							"6064") ? "Fournitures"
																																																																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																																																																													"772") ? "Produits exc. sur ex. antérieurs"
																																																																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																																																																			"771") ? "Dégrèvements impôts"
																																																																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																																																																									"743") ? "Subventions d'exploitation"
																																																																																																																																																																																																																																																																																																																											: row8.COMPTE
																																																																																																																																																																																																																																																																																																																													.startsWith(
																																																																																																																																																																																																																																																																																																																															"672") ? "Charges sur exercices antérieurs"
																																																																																																																																																																																																																																																																																																																																	: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																			.startsWith(
																																																																																																																																																																																																																																																																																																																																					"671") ? "Autres charges exceptionnelles"
																																																																																																																																																																																																																																																																																																																																							: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																									.startsWith(
																																																																																																																																																																																																																																																																																																																																											"654") ? "Pertes sur créances locataires"
																																																																																																																																																																																																																																																																																																																																													: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																															.startsWith(
																																																																																																																																																																																																																																																																																																																																																	"77") ? "Autres"
																																																																																																																																																																																																																																																																																																																																																			: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																					.startsWith(
																																																																																																																																																																																																																																																																																																																																																							"75") ? "Autres produits de gestion courante"
																																																																																																																																																																																																																																																																																																																																																									: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																											.startsWith(
																																																																																																																																																																																																																																																																																																																																																													"65") ? "Autres"
																																																																																																																																																																																																																																																																																																																																																															: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																																	.startsWith(
																																																																																																																																																																																																																																																																																																																																																																			"62") ? "Autres"
																																																																																																																																																																																																																																																																																																																																																																					: row8.COMPTE
																																																																																																																																																																																																																																																																																																																																																																							.startsWith(
																																																																																																																																																																																																																																																																																																																																																																									"61") ? "Autres"
																																																																																																																																																																																																																																																																																																																																																																											: "-";
							Var.ServiceGFC = row8.LB_SERVICE != null
									? row8.LB_SERVICE.equals("GFC BAGNEUX") ? "DP BAGNEUX" :

											row8.LB_SERVICE.equals("GFC BOIS-COLOMBES") ? "DP BOIS-COLOMBES" :

													row8.LB_SERVICE.equals("GFC Boulogne Billancourt")
															? "DP BOULOGNE BILLANCOURT"
															:

															row8.LB_SERVICE.equals("GFC CHATENAY") ? "DP CHATENAY" :

																	row8.LB_SERVICE.equals("GFC CLICHY") ? "DP CLICHY" :

																			row8.LB_SERVICE.equals("GFC NANTERRE")
																					? "DP NANTERRE"
																					:

																					row8.LB_SERVICE
																							.equals("GFC PLESSIS")
																									? "DP PLESSIS"
																									:

																									row8.LB_SERVICE
																											.equals("GFC Rueil Malmaison")
																													? "DP RUEIL MALMAISON"
																													:

																													row8.LB_SERVICE
																															.equals("GFC SURESNES")
																																	? "DP SURESNES"
																																	: row8.LB_SERVICE
																																			.replace(
																																					"GFC / GIM ",
																																					"")
																																			.replace(
																																					"GFC ",
																																					"")
									: "-";// ###############################
							// ###############################
							// # Output tables

							copyOfout3 = null;

// # Output table : 'copyOfout3'
// # Filter conditions 
							if (

							Var.Type != "-"

							) {
								copyOfout3_tmp.CD_EXEC = row8.CD_EXEC;
								copyOfout3_tmp.Periode = row8.DT_CONSO;
								copyOfout3_tmp.HDSH = "HAUTS-DE-SEINE HABITAT";
								copyOfout3_tmp.DT = row16.DT;
								copyOfout3_tmp.DP = "DP " + row16.DP;
								copyOfout3_tmp.VILLE = row16.VILLE;
								copyOfout3_tmp.ServiceGFC = Var.ServiceGFC;
								copyOfout3_tmp.Compte = row8.COMPTE;
								copyOfout3_tmp.Type = Var.Type;
								copyOfout3_tmp.SousType = Var.SousType;
								copyOfout3_tmp.GROUPE = row8.GROUPE;
								copyOfout3_tmp.CD_PATRIM = row8.CD_PATRIM;
								copyOfout3_tmp.TYPE_PIECE = row8.TYPE_PIECE;
								copyOfout3_tmp.NO_PIECE = row8.NO_PIECE;
								copyOfout3_tmp.LB_PIECE = row8.LB_PIECE;
								copyOfout3_tmp.DT_PIECE = row8.DT_PIECE;
								copyOfout3_tmp.NO_MARCHE = row8.NO_MARCHE;
								copyOfout3_tmp.LB_MARCHE = row8.LB_MARCHE;
								copyOfout3_tmp.LB_TIERS = row8.LB_TIERS;
								copyOfout3_tmp.MT_CMD = row8.MT_CMD;
								copyOfout3_tmp.MT_FACTURE = row8.MT_FACTURE;
								copyOfout3_tmp.MT_DEGAGE = row8.MT_DEGAGE;
								copyOfout3_tmp.MT_QUI_CONSOMME = row8.MT_QUI_CONSOMME;
								copyOfout3_tmp.DT_ALIM = row8.DT_ALIM;
								copyOfout3 = copyOfout3_tmp;
							} // closing filter/reject
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "copyOfout3"
						if (copyOfout3 != null) {

							/**
							 * [tFileOutputDelimited_4 main ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfout3");
							}

							StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
							if (copyOfout3.CD_EXEC != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.CD_EXEC);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.Periode != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.Periode);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.HDSH != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.HDSH);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.DT != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.DT);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.DP != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.DP);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.VILLE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.VILLE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.ServiceGFC != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.ServiceGFC);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.Compte != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.Compte);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.Type != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.Type);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.SousType != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.SousType);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.GROUPE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.GROUPE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.CD_PATRIM != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.CD_PATRIM);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.TYPE_PIECE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.TYPE_PIECE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.NO_PIECE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.NO_PIECE.toPlainString());
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.LB_PIECE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.LB_PIECE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.DT_PIECE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.DT_PIECE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.NO_MARCHE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.NO_MARCHE.toPlainString());
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.LB_MARCHE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.LB_MARCHE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.LB_TIERS != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.LB_TIERS);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.MT_CMD != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.MT_CMD);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.MT_FACTURE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.MT_FACTURE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.MT_DEGAGE != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.MT_DEGAGE);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.MT_QUI_CONSOMME != null) {
								sb_tFileOutputDelimited_4.append(copyOfout3.MT_QUI_CONSOMME);
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
							if (copyOfout3.DT_ALIM != null) {
								sb_tFileOutputDelimited_4
										.append(FormatterUtils.format_Date(copyOfout3.DT_ALIM, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

							nb_line_tFileOutputDelimited_4++;
							resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

							outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

							tos_count_tFileOutputDelimited_4++;

							/**
							 * [tFileOutputDelimited_4 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_4 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_4";

							/**
							 * [tFileOutputDelimited_4 process_data_end ] stop
							 */

						} // End of branch "copyOfout3"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row16 != null) {
					tHash_Lookup_row16.endGet();
				}
				globalMap.remove("tHash_Lookup_row16");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfout3");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row16");

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
		final static byte[] commonByteArrayLock_HAPPI_BUD_Suivi_Liste = new byte[0];
		static byte[] commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String CD_LOCALI1;

		public String getCD_LOCALI1() {
			return this.CD_LOCALI1;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String DP;

		public String getDP() {
			return this.DP;
		}

		public String DT;

		public String getDT() {
			return this.DT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row16Struct other = (row16Struct) obj;

			if (this.CD_LOCALI1 == null) {
				if (other.CD_LOCALI1 != null)
					return false;

			} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))

				return false;

			return true;
		}

		public void copyDataTo(row16Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;
			other.VILLE = this.VILLE;
			other.DP = this.DP;
			other.DT = this.DT;

		}

		public void copyKeysDataTo(row16Struct other) {

			other.CD_LOCALI1 = this.CD_LOCALI1;

		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_BUD_Suivi_Liste.length) {
					if (length < 1024 && commonByteArray_HAPPI_BUD_Suivi_Liste.length == 0) {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[1024];
					} else {
						commonByteArray_HAPPI_BUD_Suivi_Liste = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length);
				strReturn = new String(commonByteArray_HAPPI_BUD_Suivi_Liste, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_BUD_Suivi_Liste) {

				try {

					int length = 0;

					this.CD_LOCALI1 = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.CD_LOCALI1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.VILLE = readString(dis, ois);

				this.DP = readString(dis, ois);

				this.DT = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.VILLE, dos, oos);

				writeString(this.DP, dos, oos);

				writeString(this.DT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_LOCALI1=" + CD_LOCALI1);
			sb.append(",VILLE=" + VILLE);
			sb.append(",DP=" + DP);
			sb.append(",DT=" + DT);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row16Struct row16 = new row16Struct();

				/**
				 * [tAdvancedHash_row16 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row16", false);
				start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row16";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row16");
				}

				int tos_count_tAdvancedHash_row16 = 0;

				// connection name:row16
				// source node:tDBInput_13 - inputs:(after_tDBInput_7) outputs:(row16,row16) |
				// target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
				// linked node: tMap_2 - inputs:(row8,row16) outputs:(copyOfout3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row16Struct>getLookup(matchingModeEnum_row16);

				globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);

				/**
				 * [tAdvancedHash_row16 begin ] stop
				 */

				/**
				 * [tDBInput_13 begin ] start
				 */

				ok_Hash.put("tDBInput_13", false);
				start_Hash.put("tDBInput_13", System.currentTimeMillis());

				currentComponent = "tDBInput_13";

				int tos_count_tDBInput_13 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_13 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_13 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_13 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_13, talendToDBArray_tDBInput_13);
				int nb_line_tDBInput_13 = 0;
				java.sql.Connection conn_tDBInput_13 = null;
				String driverClass_tDBInput_13 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_13 = java.lang.Class.forName(driverClass_tDBInput_13);
				String dbUser_tDBInput_13 = "";

				final String decryptedPassword_tDBInput_13 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:cPxEF7St3am47iMv82C//qJUfVo52pCfwvFIpA==");

				String dbPwd_tDBInput_13 = decryptedPassword_tDBInput_13;

				String port_tDBInput_13 = "1433";
				String dbname_tDBInput_13 = "HDSHData";
				String url_tDBInput_13 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_13)) {
					url_tDBInput_13 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_13)) {
					url_tDBInput_13 += "//" + "HDSHData";
				}
				url_tDBInput_13 += ";appName=" + projectName + ";" + "";
				String dbschema_tDBInput_13 = "";

				conn_tDBInput_13 = java.sql.DriverManager.getConnection(url_tDBInput_13, dbUser_tDBInput_13,
						dbPwd_tDBInput_13);

				java.sql.Statement stmt_tDBInput_13 = conn_tDBInput_13.createStatement();

				String dbquery_tDBInput_13 = "select *\nfrom T_DEF_LOCALISATION\n";

				globalMap.put("tDBInput_13_QUERY", dbquery_tDBInput_13);
				java.sql.ResultSet rs_tDBInput_13 = null;

				try {
					rs_tDBInput_13 = stmt_tDBInput_13.executeQuery(dbquery_tDBInput_13);
					java.sql.ResultSetMetaData rsmd_tDBInput_13 = rs_tDBInput_13.getMetaData();
					int colQtyInRs_tDBInput_13 = rsmd_tDBInput_13.getColumnCount();

					String tmpContent_tDBInput_13 = null;

					while (rs_tDBInput_13.next()) {
						nb_line_tDBInput_13++;

						if (colQtyInRs_tDBInput_13 < 1) {
							row16.CD_LOCALI1 = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(1);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row16.CD_LOCALI1 = tmpContent_tDBInput_13;
								}
							} else {
								row16.CD_LOCALI1 = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 2) {
							row16.VILLE = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(2);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row16.VILLE = tmpContent_tDBInput_13;
								}
							} else {
								row16.VILLE = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 3) {
							row16.DP = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(3);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row16.DP = tmpContent_tDBInput_13;
								}
							} else {
								row16.DP = null;
							}
						}
						if (colQtyInRs_tDBInput_13 < 4) {
							row16.DT = null;
						} else {

							tmpContent_tDBInput_13 = rs_tDBInput_13.getString(4);
							if (tmpContent_tDBInput_13 != null) {
								if (talendToDBList_tDBInput_13.contains(
										rsmd_tDBInput_13.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row16.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_13);
								} else {
									row16.DT = tmpContent_tDBInput_13;
								}
							} else {
								row16.DT = null;
							}
						}

						/**
						 * [tDBInput_13 begin ] stop
						 */

						/**
						 * [tDBInput_13 main ] start
						 */

						currentComponent = "tDBInput_13";

						tos_count_tDBInput_13++;

						/**
						 * [tDBInput_13 main ] stop
						 */

						/**
						 * [tDBInput_13 process_data_begin ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 main ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
						}

						row16Struct row16_HashRow = new row16Struct();

						row16_HashRow.CD_LOCALI1 = row16.CD_LOCALI1;

						row16_HashRow.VILLE = row16.VILLE;

						row16_HashRow.DP = row16.DP;

						row16_HashRow.DT = row16.DT;

						tHash_Lookup_row16.put(row16_HashRow);

						tos_count_tAdvancedHash_row16++;

						/**
						 * [tAdvancedHash_row16 main ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row16 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row16";

						/**
						 * [tAdvancedHash_row16 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 process_data_end ] start
						 */

						currentComponent = "tDBInput_13";

						/**
						 * [tDBInput_13 process_data_end ] stop
						 */

						/**
						 * [tDBInput_13 end ] start
						 */

						currentComponent = "tDBInput_13";

					}
				} finally {
					if (rs_tDBInput_13 != null) {
						rs_tDBInput_13.close();
					}
					if (stmt_tDBInput_13 != null) {
						stmt_tDBInput_13.close();
					}
					if (conn_tDBInput_13 != null && !conn_tDBInput_13.isClosed()) {

						conn_tDBInput_13.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_13_NB_LINE", nb_line_tDBInput_13);

				ok_Hash.put("tDBInput_13", true);
				end_Hash.put("tDBInput_13", System.currentTimeMillis());

				/**
				 * [tDBInput_13 end ] stop
				 */

				/**
				 * [tAdvancedHash_row16 end ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				tHash_Lookup_row16.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row16");
				}

				ok_Hash.put("tAdvancedHash_row16", true);
				end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row16 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_13 finally ] start
				 */

				currentComponent = "tDBInput_13";

				/**
				 * [tDBInput_13 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row16 finally ] start
				 */

				currentComponent = "tAdvancedHash_row16";

				/**
				 * [tAdvancedHash_row16 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_13_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final BUD_Suivi_Liste BUD_Suivi_ListeClass = new BUD_Suivi_Liste();

		int exitCode = BUD_Suivi_ListeClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = BUD_Suivi_Liste.class.getClassLoader()
					.getResourceAsStream("happi/bud_suivi_liste_0_2/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = BUD_Suivi_Liste.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		try {
			errorCode = null;
			tPostjob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPostjob_1) {
			globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

			e_tPostjob_1.printStackTrace();

		}

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : BUD_Suivi_Liste");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();
		closeFtpConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_2");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private void closeFtpConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tFTPConnection_1");
			if (obj_conn != null) {
				((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_2", globalMap.get("conn_tDBConnection_2"));
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 164778 characters generated by Talend Open Studio for Data Integration on the
 * 11 septembre 2023 15:08:38 CEST
 ************************************************************************************************/