// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package happi.copy_of_relogement_v_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")

/**
 * Job: Copy_of_Relogement_V Purpose: Suivre activité du relogement - DASSOL<br>
 * Description: Croiser les données d'ARAVIS avec les opérations en cours de
 * relogement pour afficher les KPI de l'activité et permettre de prioriser plus
 * efficacement les dossiers sensibles. <br>
 * 
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status
 */
public class Copy_of_Relogement_V implements TalendJob {

	protected static void logIgnoredError(String message, Throwable cause) {
		System.err.println(message);
		if (cause != null) {
			cause.printStackTrace();
		}

	}

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String, String> propertyTypes = new java.util.HashMap<>();

		public PropertiesWithType(java.util.Properties properties) {
			super(properties);
		}

		public PropertiesWithType() {
			super();
		}

		public void setContextType(String key, String type) {
			propertyTypes.put(key, type);
		}

		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

		}

	}

	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.1";
	private final String jobName = "Copy_of_Relogement_V";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
	private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private Exception exception;

	public Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null && currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE", getExceptionCauseMessage(e));
				System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					Copy_of_Relogement_V.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(Copy_of_Relogement_V.this, new Object[] { e, currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
					}
				} catch (Exception e) {
					this.e.printStackTrace();
				}
			}
		}
	}

	public void tDBConnection_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tUnite_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBOutput_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_9_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplace_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_8_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_6_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBInput_7_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileInputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tReplicate_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_3_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_2_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFilterRow_5_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tFileOutputDelimited_4_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tPrejob_1_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row26_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row24_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_3_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row21_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row13_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row14_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tAdvancedHash_row15_error(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tFileInputDelimited_2_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBInput_4_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_3_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tFileInputDelimited_2_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tPrejob_1_onSubJobError(Exception exception, String errorComponent,
			final java.util.Map<String, Object> globalMap) throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tDBConnection_1 begin ] start
				 */

				ok_Hash.put("tDBConnection_1", false);
				start_Hash.put("tDBConnection_1", System.currentTimeMillis());

				currentComponent = "tDBConnection_1";

				int tos_count_tDBConnection_1 = 0;

				String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01";
				String port_tDBConnection_1 = "1433";
				String dbname_tDBConnection_1 = "ACGINFO1";
				if (!"".equals(port_tDBConnection_1)) {
					url_tDBConnection_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBConnection_1)) {

					url_tDBConnection_1 += "//" + "ACGINFO1";
				}
				url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";
				String dbUser_tDBConnection_1 = "";

				final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:WtIaJI9lLjFVUeq6TkeCfCiXiGlWe0tfc0LPnw==");
				String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;

				java.sql.Connection conn_tDBConnection_1 = null;

				String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
				globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);

				conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1, dbUser_tDBConnection_1,
						dbPwd_tDBConnection_1);

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
				if (null != conn_tDBConnection_1) {

					conn_tDBConnection_1.setAutoCommit(false);
				}

				globalMap.put("dbschema_tDBConnection_1", "");

				globalMap.put("db_tDBConnection_1", "ACGINFO1");

				globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);

				globalMap.put("shareIdentitySetting_tDBConnection_1", false);

				/**
				 * [tDBConnection_1 begin ] stop
				 */

				/**
				 * [tDBConnection_1 main ] start
				 */

				currentComponent = "tDBConnection_1";

				tos_count_tDBConnection_1++;

				/**
				 * [tDBConnection_1 main ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_begin ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_begin ] stop
				 */

				/**
				 * [tDBConnection_1 process_data_end ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 process_data_end ] stop
				 */

				/**
				 * [tDBConnection_1 end ] start
				 */

				currentComponent = "tDBConnection_1";

				ok_Hash.put("tDBConnection_1", true);
				end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_1Process(globalMap);

				/**
				 * [tDBConnection_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBConnection_1 finally ] start
				 */

				currentComponent = "tDBConnection_1";

				/**
				 * [tDBConnection_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}

	public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row19Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row16Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row17Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class copyOfout1Struct implements routines.system.IPersistableRow<copyOfout1Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(copyOfout1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row18Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row12Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_2Process(globalMap);
				tFileInputDelimited_2Process(globalMap);

				row1Struct row1 = new row1Struct();
				out1Struct out1 = new out1Struct();
				out1Struct row16 = out1;

				row2Struct row2 = new row2Struct();
				copyOfout1Struct copyOfout1 = new copyOfout1Struct();
				copyOfout1Struct row17 = copyOfout1;

				row12Struct row12 = new row12Struct();
				out3Struct out3 = new out3Struct();
				out3Struct row18 = out3;

				row19Struct row19 = new row19Struct();

				/**
				 * [tFileOutputDelimited_7 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_7", false);
				start_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_7";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row19");
				}

				int tos_count_tFileOutputDelimited_7 = 0;

				String fileName_tFileOutputDelimited_7 = "";
				fileName_tFileOutputDelimited_7 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_merge.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_7 = null;
				String extension_tFileOutputDelimited_7 = null;
				String directory_tFileOutputDelimited_7 = null;
				if ((fileName_tFileOutputDelimited_7.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") < fileName_tFileOutputDelimited_7
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
							fileName_tFileOutputDelimited_7.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_7.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7.substring(0,
								fileName_tFileOutputDelimited_7.lastIndexOf("."));
						extension_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7
								.substring(fileName_tFileOutputDelimited_7.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_7 = fileName_tFileOutputDelimited_7;
						extension_tFileOutputDelimited_7 = "";
					}
					directory_tFileOutputDelimited_7 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_7 = true;
				java.io.File filetFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);
				int nb_line_tFileOutputDelimited_7 = 0;
				int splitedFileNo_tFileOutputDelimited_7 = 0;
				int currentRow_tFileOutputDelimited_7 = 0;

				final String OUT_DELIM_tFileOutputDelimited_7 = /** Start field tFileOutputDelimited_7:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_7:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_7 = /**
																		 * Start field
																		 * tFileOutputDelimited_7:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_7:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_7 != null && directory_tFileOutputDelimited_7.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_7 = new java.io.File(directory_tFileOutputDelimited_7);
					if (!dir_tFileOutputDelimited_7.exists()) {
						dir_tFileOutputDelimited_7.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_7 = null;

				java.io.File fileToDelete_tFileOutputDelimited_7 = new java.io.File(fileName_tFileOutputDelimited_7);
				if (fileToDelete_tFileOutputDelimited_7.exists()) {
					fileToDelete_tFileOutputDelimited_7.delete();
				}
				outtFileOutputDelimited_7 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_7, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_7.length() == 0) {
					outtFileOutputDelimited_7.write("Nom_operation");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Date_lancement");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("NO_DOSFACT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ID_DOSCLIE");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CIVILITE");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("NOM_CLIENT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("PRENOM_CLIENT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ON_PSEUCLI");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("LOYER_CHARGE");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("DECOHABITANT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("NO_SITUATION");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("LIB_SITUATION");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("DATE_SITUATION");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("REF_PATRIM");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CD_PATRIM1");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CD_PATRIM2");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CD_PATRIM3");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CD_PATRIM4");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Groupe");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Batiment");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ETAGE");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Nature");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("DEMENAGEMENT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("Sous_Nature");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("ADRESSE");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("CP");
					outtFileOutputDelimited_7.write(OUT_DELIM_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.write("VILLE");
					outtFileOutputDelimited_7.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);
					outtFileOutputDelimited_7.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_7", outtFileOutputDelimited_7);
				resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_7", isFileGenerated_tFileOutputDelimited_7);
				resourceMap.put("filetFileOutputDelimited_7", filetFileOutputDelimited_7);

				/**
				 * [tFileOutputDelimited_7 begin ] stop
				 */

				/**
				 * [tUnite_1 begin ] start
				 */

				ok_Hash.put("tUnite_1", false);
				start_Hash.put("tUnite_1", System.currentTimeMillis());

				currentComponent = "tUnite_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row17", "row16", "row18");
				}

				int tos_count_tUnite_1 = 0;

				int nb_line_tUnite_1 = 0;

				/**
				 * [tUnite_1 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_1", false);
				start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out1");
				}

				int tos_count_tFileOutputDelimited_1 = 0;

				String fileName_tFileOutputDelimited_1 = "";
				fileName_tFileOutputDelimited_1 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_RR1.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_1 = null;
				String extension_tFileOutputDelimited_1 = null;
				String directory_tFileOutputDelimited_1 = null;
				if ((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
							fileName_tFileOutputDelimited_1.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0,
								fileName_tFileOutputDelimited_1.lastIndexOf("."));
						extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1
								.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
						extension_tFileOutputDelimited_1 = "";
					}
					directory_tFileOutputDelimited_1 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_1 = true;
				java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);
				int nb_line_tFileOutputDelimited_1 = 0;
				int splitedFileNo_tFileOutputDelimited_1 = 0;
				int currentRow_tFileOutputDelimited_1 = 0;

				final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /**
																		 * Start field
																		 * tFileOutputDelimited_1:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
					if (!dir_tFileOutputDelimited_1.exists()) {
						dir_tFileOutputDelimited_1.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_1 = null;

				java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
				if (fileToDelete_tFileOutputDelimited_1.exists()) {
					fileToDelete_tFileOutputDelimited_1.delete();
				}
				outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_1.length() == 0) {
					outtFileOutputDelimited_1.write("Nom_operation");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Date_lancement");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NO_DOSFACT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ID_DOSCLIE");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CIVILITE");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NOM_CLIENT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("PRENOM_CLIENT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ON_PSEUCLI");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("LOYER_CHARGE");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DECOHABITANT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("NO_SITUATION");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("LIB_SITUATION");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DATE_SITUATION");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("REF_PATRIM");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_PATRIM1");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_PATRIM2");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_PATRIM3");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CD_PATRIM4");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Groupe");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Batiment");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ETAGE");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Nature");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("DEMENAGEMENT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("Sous_Nature");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("ADRESSE");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("CP");
					outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.write("VILLE");
					outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
					outtFileOutputDelimited_1.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
				resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
				resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

				/**
				 * [tFileOutputDelimited_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row1");
				}

				int tos_count_tMap_1 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) globalMap
						.get("tHash_Lookup_row14"));

				row14Struct row14HashKey = new row14Struct();
				row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out1Struct out1_tmp = new out1Struct();
// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tDBInput_1 begin ] start
				 */

				ok_Hash.put("tDBInput_1", false);
				start_Hash.put("tDBInput_1", System.currentTimeMillis());

				currentComponent = "tDBInput_1";

				int tos_count_tDBInput_1 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_1 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1);
				int nb_line_tDBInput_1 = 0;
				java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_1 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

				String dbquery_tDBInput_1 = "\nSELECT distinct\n	df.NO_DOSFACT,\n	df.ID_DOSCLIE,\n	replace(d.LB_POLITES,';','')as CIVILITE,\n	replace(upper(d.NOM_CL"
						+ "IENT),';','') as NOM_CLIENT,\n	replace(d.PRE_CLIENT,';','') as PRENOM_CLIENT,\n	d.ON_PSEUCLI,\n	pg.MT_TOTRUB as LOYER_CH"
						+ "ARGE,\n    1 AS Cpt_nbre_patrim,\n	act.NO_SIT as NO_SITUATION,\n	act.LB_SITREP as LIB_SITUATION,\n	act.DT_CREASIT as DAT"
						+ "E_SITUATION,\n	pg.CD_PATRIM as REF_PATRIM,\n	pg.CD_PATRIM1 as CD_PATRIM1,\n	pg.CD_PATRIM2 as CD_PATRIM2,\n	pg.CD_PATRIM3"
						+ " as CD_PATRIM3,\n	pg.CD_PATRIM4 as CD_PATRIM4,\n	LB_PATRIM1 as Groupe,\n	LB_PATRIM2 as  Batiment,\n	NIV_ETAGE as ETAGE,	"
						+ "\nCASE \n		WHEN LB_NATLOC = 'PARKING' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'PARKING LIBRE' 	THEN 'STATIONNEMENT'"
						+ "\n		WHEN LB_NATLOC = 'GARAGE' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'COMMERCE' 		THEN 'COMMERCE'\n		WHEN LB_NATLOC "
						+ "in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') THEN 'LOGEMENT'\n		ELSE LB_NATLOC\n	END  AS"
						+ " Nature,\nCASE \n		WHEN d.ON_PSEUCLI ='N' and (act.NO_SIT in('69000','69001','69002','69005') or act.NO_SIT is null) and"
						+ " c2.NO_SIT is null	THEN 'A REALISER'\n		WHEN d.ON_PSEUCLI ='N' and act.NO_SIT in('69010','69012','69013','69015','69017'"
						+ ")	THEN 'EN COURS'\n		WHEN d.ON_PSEUCLI ='O' THEN 'REALISE'\n		ELSE 'A VERIFIER'\n	END AS Statut_enquete,\nCASE \n		WHEN "
						+ "c2.NO_SIT is null	THEN 'NON'\n		WHEN c2.NO_SIT is not null	THEN 'OUI'\n		ELSE 'A VERIFIER'\nEND as DEMENAGEMENT,\n	1 as "
						+ "COUT_DEMENAGEMENT,\n    LB_NATLOC  as Sous_Nature,\n	pg.LB_PATRIM3 as ADRESSE,\n	pg.ADRPA_CP as CP,\n    pg.ADRPA_LOC as"
						+ " VILLE\n	from \n	DOSS_FACT df\n	left join DOSS_CLIEN d on df.ID_DOSCLIE = d.ID_DOSCLIE\n	left join PATRIMOINE_GIM pg on "
						+ "df.CD_PATRIM1 = pg.CD_PATRIM1 \n							and df.CD_PATRIM2 = pg.CD_PATRIM2\n							and df.CD_PATRIM3 = pg.CD_PATRIM3\n				"
						+ "			and df.CD_PATRIM4 = pg.CD_PATRIM4\n	left join (select * from CONTENTIEUX c\n			   where NO_SIT like '69%' \n			   and"
						+ " CD_ETAT_CTX = 'O' \n			   and LB_PROC <> 'A NE PLUS UTILISER'\n			   and c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE"
						+ "\n			  					from CONTENTIEUX cc\n			   					where NO_SIT like '69%' \n			   					and CD_ETAT_CTX = 'O' \n			  					and L"
						+ "B_PROC <> 'A NE PLUS UTILISER'\n			   					and c.ID_DOSCLIE = cc.ID_DOSCLIE)) act on act.NO_DOSFACT = df.NO_DOSFACT \n	l"
						+ "eft join PAT_CONTRA pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n							and pc.CD_PATRIM2 =df.CD_PATRIM2 \n							and pc.CD_PAT"
						+ "RIM3 =df.CD_PATRIM3 \n							and pc.CD_PATRIM4 =df.CD_PATRIM4  \n							and df.NO_DOSFACT = pc.NO_DOSFACT							\n						"
						+ "	and pc.LB_ET_DTD in('Présent','Affectation validée')\n							and pc.LB_ET_DTF = 'Présent'\n	left join (select * from CO"
						+ "NTENTIEUX c where NO_SIT in ('69045','69050') and CD_ETAT_CTX = 'O' and LB_PROC <> 'A NE PLUS UTILISER') c2\n								on "
						+ "c2.CD_PATRIM1 =df.CD_PATRIM1 \n								and c2.CD_PATRIM2 =df.CD_PATRIM2 \n								and c2.CD_PATRIM3 =df.CD_PATRIM3 \n			"
						+ "					and c2.CD_PATRIM4 =df.CD_PATRIM4 \nWHERE pg.CD_SOCPROP IN (1,6)\nAND pg.CD_PATRIM4 <> 0\nAND LB_NATLOC In ('COMMERC"
						+ "E','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\nAND CD_ETAT = 'MS'\nAND CD_ETAT_DF ='E'\nAN"
						+ "D pc.LB_ET_DTF = 'Présent'\n";

				globalMap.put("tDBInput_1_QUERY", dbquery_tDBInput_1);
				java.sql.ResultSet rs_tDBInput_1 = null;

				try {
					rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
					java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
					int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

					String tmpContent_tDBInput_1 = null;

					while (rs_tDBInput_1.next()) {
						nb_line_tDBInput_1++;

						if (colQtyInRs_tDBInput_1 < 1) {
							row1.NO_DOSFACT = null;
						} else {

							row1.NO_DOSFACT = rs_tDBInput_1.getInt(1);
							if (rs_tDBInput_1.wasNull()) {
								row1.NO_DOSFACT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 2) {
							row1.ID_DOSCLIE = null;
						} else {

							row1.ID_DOSCLIE = rs_tDBInput_1.getInt(2);
							if (rs_tDBInput_1.wasNull()) {
								row1.ID_DOSCLIE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 3) {
							row1.CIVILITE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.CIVILITE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.CIVILITE = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.CIVILITE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 4) {
							row1.NOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.NOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.NOM_CLIENT = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.NOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 5) {
							row1.PRENOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.PRENOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.PRENOM_CLIENT = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.PRENOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 6) {
							row1.ON_PSEUCLI = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ON_PSEUCLI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ON_PSEUCLI = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.ON_PSEUCLI = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 7) {
							row1.LOYER_CHARGE = null;
						} else {

							row1.LOYER_CHARGE = rs_tDBInput_1.getFloat(7);
							if (rs_tDBInput_1.wasNull()) {
								row1.LOYER_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 8) {
							row1.Cpt_nbre_patrim = null;
						} else {

							row1.Cpt_nbre_patrim = rs_tDBInput_1.getInt(8);
							if (rs_tDBInput_1.wasNull()) {
								row1.Cpt_nbre_patrim = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 9) {
							row1.NO_SITUATION = null;
						} else {

							row1.NO_SITUATION = rs_tDBInput_1.getInt(9);
							if (rs_tDBInput_1.wasNull()) {
								row1.NO_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 10) {
							row1.LIB_SITUATION = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.LIB_SITUATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.LIB_SITUATION = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.LIB_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 11) {
							row1.DATE_SITUATION = null;
						} else {

							row1.DATE_SITUATION = mssqlGTU_tDBInput_1.getDate(rsmd_tDBInput_1, rs_tDBInput_1, 11);

						}
						if (colQtyInRs_tDBInput_1 < 12) {
							row1.REF_PATRIM = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.REF_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.REF_PATRIM = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.REF_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 13) {
							row1.CD_PATRIM1 = null;
						} else {

							row1.CD_PATRIM1 = rs_tDBInput_1.getInt(13);
							if (rs_tDBInput_1.wasNull()) {
								row1.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 14) {
							row1.CD_PATRIM2 = null;
						} else {

							row1.CD_PATRIM2 = rs_tDBInput_1.getInt(14);
							if (rs_tDBInput_1.wasNull()) {
								row1.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 15) {
							row1.CD_PATRIM3 = null;
						} else {

							row1.CD_PATRIM3 = rs_tDBInput_1.getInt(15);
							if (rs_tDBInput_1.wasNull()) {
								row1.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 16) {
							row1.CD_PATRIM4 = null;
						} else {

							row1.CD_PATRIM4 = rs_tDBInput_1.getInt(16);
							if (rs_tDBInput_1.wasNull()) {
								row1.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 17) {
							row1.Groupe = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(17);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Groupe = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.Groupe = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 18) {
							row1.Batiment = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(18);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Batiment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Batiment = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.Batiment = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 19) {
							row1.ETAGE = null;
						} else {

							row1.ETAGE = rs_tDBInput_1.getInt(19);
							if (rs_tDBInput_1.wasNull()) {
								row1.ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 20) {
							row1.Nature = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(20);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Nature = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 21) {
							row1.statut_enquete = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(21);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.statut_enquete = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.statut_enquete = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.statut_enquete = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 22) {
							row1.DEMENAGEMENT = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(22);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.DEMENAGEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.DEMENAGEMENT = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 23) {
							row1.COUT_DEMENAGEMENT = null;
						} else {

							row1.COUT_DEMENAGEMENT = rs_tDBInput_1.getFloat(23);
							if (rs_tDBInput_1.wasNull()) {
								row1.COUT_DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 24) {
							row1.Sous_Nature = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(24);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.Sous_Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.Sous_Nature = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.Sous_Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 25) {
							row1.ADRESSE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(25);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.ADRESSE = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.ADRESSE = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 26) {
							row1.CP = null;
						} else {

							row1.CP = rs_tDBInput_1.getInt(26);
							if (rs_tDBInput_1.wasNull()) {
								row1.CP = null;
							}
						}
						if (colQtyInRs_tDBInput_1 < 27) {
							row1.VILLE = null;
						} else {

							tmpContent_tDBInput_1 = rs_tDBInput_1.getString(27);
							if (tmpContent_tDBInput_1 != null) {
								if (talendToDBList_tDBInput_1.contains(
										rsmd_tDBInput_1.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row1.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
								} else {
									row1.VILLE = tmpContent_tDBInput_1.trim();
								}
							} else {
								row1.VILLE = null;
							}
						}

						/**
						 * [tDBInput_1 begin ] stop
						 */

						/**
						 * [tDBInput_1 main ] start
						 */

						currentComponent = "tDBInput_1";

						tos_count_tDBInput_1++;

						/**
						 * [tDBInput_1 main ] stop
						 */

						/**
						 * [tDBInput_1 process_data_begin ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_begin ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row1");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row14"
						///////////////////////////////////////////////

						boolean forceLooprow14 = false;

						row14Struct row14ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_1) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_1 = false;

							row14HashKey.PATRIM1 = row1.CD_PATRIM1;

							row14HashKey.PATRIM2 = row1.CD_PATRIM2;

							row14HashKey.PATRIM3 = row1.CD_PATRIM3;

							row14HashKey.hashCodeDirty = true;

							tHash_Lookup_row14.lookup(row14HashKey);

							if (!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_1 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row14' and it contains more one result from keys : row14.PATRIM1 = '" +
							// row14HashKey.PATRIM1 + "', row14.PATRIM2 = '" + row14HashKey.PATRIM2 + "',
							// row14.PATRIM3 = '" + row14HashKey.PATRIM3 + "'");
						} // G 071

						row14Struct row14 = null;

						row14Struct fromLookup_row14 = null;
						row14 = row14Default;

						if (tHash_Lookup_row14 != null && tHash_Lookup_row14.hasNext()) { // G 099

							fromLookup_row14 = tHash_Lookup_row14.next();

						} // G 099

						if (fromLookup_row14 != null) {
							row14 = fromLookup_row14;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							out1 = null;

							if (!rejectedInnerJoin_tMap_1) {

// # Output table : 'out1'
								out1_tmp.Nom_operation = row14.Nom_operation;
								out1_tmp.Date_lancement = row14.Date_lancement;
								out1_tmp.NO_DOSFACT = row1.NO_DOSFACT;
								out1_tmp.ID_DOSCLIE = row1.ID_DOSCLIE;
								out1_tmp.CIVILITE = row1.CIVILITE;
								out1_tmp.NOM_CLIENT = row1.NOM_CLIENT;
								out1_tmp.PRENOM_CLIENT = row1.PRENOM_CLIENT;
								out1_tmp.ON_PSEUCLI = row1.ON_PSEUCLI;
								out1_tmp.LOYER_CHARGE = row1.LOYER_CHARGE;
								out1_tmp.Cpt_nbre_patrim = row1.Cpt_nbre_patrim;
								out1_tmp.DECOHABITANT = row14.DECOHABITANT;
								out1_tmp.NO_SITUATION = row1.NO_SITUATION;
								out1_tmp.LIB_SITUATION = row1.LIB_SITUATION;
								out1_tmp.DATE_SITUATION = row1.DATE_SITUATION;
								out1_tmp.REF_PATRIM = row1.REF_PATRIM;
								out1_tmp.CD_PATRIM1 = row1.CD_PATRIM1;
								out1_tmp.CD_PATRIM2 = row1.CD_PATRIM2;
								out1_tmp.CD_PATRIM3 = row1.CD_PATRIM3;
								out1_tmp.CD_PATRIM4 = row1.CD_PATRIM4;
								out1_tmp.Groupe = row1.Groupe;
								out1_tmp.Batiment = row1.Batiment;
								out1_tmp.ETAGE = row1.ETAGE;
								out1_tmp.Nature = row1.Nature;
								out1_tmp.DEMENAGEMENT = row1.DEMENAGEMENT;
								out1_tmp.COUT_DEMENAGEMENT = row1.COUT_DEMENAGEMENT;
								out1_tmp.Sous_Nature = row1.Sous_Nature;
								out1_tmp.ADRESSE = row1.ADRESSE;
								out1_tmp.CP = row1.CP;
								out1_tmp.VILLE = row1.VILLE;
								out1 = out1_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */

						/**
						 * [tMap_1 process_data_begin ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_begin ] stop
						 */
// Start of branch "out1"
						if (out1 != null) {

							/**
							 * [tFileOutputDelimited_1 main ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out1");
							}

							StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
							if (out1.Nom_operation != null) {
								sb_tFileOutputDelimited_1.append(out1.Nom_operation);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Date_lancement != null) {
								sb_tFileOutputDelimited_1
										.append(FormatterUtils.format_Date(out1.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_1.append(out1.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_1.append(out1.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CIVILITE != null) {
								sb_tFileOutputDelimited_1.append(out1.CIVILITE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_1.append(out1.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_1.append(out1.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_1.append(out1.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_1.append(out1.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_1.append(out1.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.DECOHABITANT != null) {
								sb_tFileOutputDelimited_1.append(out1.DECOHABITANT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.NO_SITUATION != null) {
								sb_tFileOutputDelimited_1.append(out1.NO_SITUATION);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_1.append(out1.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_1
										.append(FormatterUtils.format_Date(out1.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.REF_PATRIM != null) {
								sb_tFileOutputDelimited_1.append(out1.REF_PATRIM);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_1.append(out1.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_1.append(out1.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_1.append(out1.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_1.append(out1.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Groupe != null) {
								sb_tFileOutputDelimited_1.append(out1.Groupe);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Batiment != null) {
								sb_tFileOutputDelimited_1.append(out1.Batiment);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.ETAGE != null) {
								sb_tFileOutputDelimited_1.append(out1.ETAGE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Nature != null) {
								sb_tFileOutputDelimited_1.append(out1.Nature);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_1.append(out1.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_1.append(out1.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.Sous_Nature != null) {
								sb_tFileOutputDelimited_1.append(out1.Sous_Nature);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.ADRESSE != null) {
								sb_tFileOutputDelimited_1.append(out1.ADRESSE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.CP != null) {
								sb_tFileOutputDelimited_1.append(out1.CP);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
							if (out1.VILLE != null) {
								sb_tFileOutputDelimited_1.append(out1.VILLE);
							}
							sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);

							nb_line_tFileOutputDelimited_1++;
							resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

							outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

							row16 = out1;

							tos_count_tFileOutputDelimited_1++;

							/**
							 * [tFileOutputDelimited_1 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_begin ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row16");
							}

//////////

// for output
							row19 = new row19Struct();

							row19.Nom_operation = row16.Nom_operation;
							row19.Date_lancement = row16.Date_lancement;
							row19.NO_DOSFACT = row16.NO_DOSFACT;
							row19.ID_DOSCLIE = row16.ID_DOSCLIE;
							row19.CIVILITE = row16.CIVILITE;
							row19.NOM_CLIENT = row16.NOM_CLIENT;
							row19.PRENOM_CLIENT = row16.PRENOM_CLIENT;
							row19.ON_PSEUCLI = row16.ON_PSEUCLI;
							row19.LOYER_CHARGE = row16.LOYER_CHARGE;
							row19.Cpt_nbre_patrim = row16.Cpt_nbre_patrim;
							row19.DECOHABITANT = row16.DECOHABITANT;
							row19.NO_SITUATION = row16.NO_SITUATION;
							row19.LIB_SITUATION = row16.LIB_SITUATION;
							row19.DATE_SITUATION = row16.DATE_SITUATION;
							row19.REF_PATRIM = row16.REF_PATRIM;
							row19.CD_PATRIM1 = row16.CD_PATRIM1;
							row19.CD_PATRIM2 = row16.CD_PATRIM2;
							row19.CD_PATRIM3 = row16.CD_PATRIM3;
							row19.CD_PATRIM4 = row16.CD_PATRIM4;
							row19.Groupe = row16.Groupe;
							row19.Batiment = row16.Batiment;
							row19.ETAGE = row16.ETAGE;
							row19.Nature = row16.Nature;
							row19.DEMENAGEMENT = row16.DEMENAGEMENT;
							row19.COUT_DEMENAGEMENT = row16.COUT_DEMENAGEMENT;
							row19.Sous_Nature = row16.Sous_Nature;
							row19.ADRESSE = row16.ADRESSE;
							row19.CP = row16.CP;
							row19.VILLE = row16.VILLE;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 main ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
							}

							StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
							if (row19.Nom_operation != null) {
								sb_tFileOutputDelimited_7.append(row19.Nom_operation);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Date_lancement != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_7.append(row19.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CIVILITE != null) {
								sb_tFileOutputDelimited_7.append(row19.CIVILITE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_7.append(row19.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_7.append(row19.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_7.append(row19.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DECOHABITANT != null) {
								sb_tFileOutputDelimited_7.append(row19.DECOHABITANT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.REF_PATRIM != null) {
								sb_tFileOutputDelimited_7.append(row19.REF_PATRIM);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Groupe != null) {
								sb_tFileOutputDelimited_7.append(row19.Groupe);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Batiment != null) {
								sb_tFileOutputDelimited_7.append(row19.Batiment);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ETAGE != null) {
								sb_tFileOutputDelimited_7.append(row19.ETAGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Sous_Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Sous_Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ADRESSE != null) {
								sb_tFileOutputDelimited_7.append(row19.ADRESSE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CP != null) {
								sb_tFileOutputDelimited_7.append(row19.CP);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.VILLE != null) {
								sb_tFileOutputDelimited_7.append(row19.VILLE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

							outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

							tos_count_tFileOutputDelimited_7++;

							/**
							 * [tFileOutputDelimited_7 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_1 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_1";

							/**
							 * [tFileOutputDelimited_1 process_data_end ] stop
							 */

						} // End of branch "out1"

						/**
						 * [tMap_1 process_data_end ] start
						 */

						currentComponent = "tMap_1";

						/**
						 * [tMap_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 process_data_end ] start
						 */

						currentComponent = "tDBInput_1";

						/**
						 * [tDBInput_1 process_data_end ] stop
						 */

						/**
						 * [tDBInput_1 end ] start
						 */

						currentComponent = "tDBInput_1";

					}
				} finally {
					if (rs_tDBInput_1 != null) {
						rs_tDBInput_1.close();
					}
					if (stmt_tDBInput_1 != null) {
						stmt_tDBInput_1.close();
					}
				}
				globalMap.put("tDBInput_1_NB_LINE", nb_line_tDBInput_1);

				ok_Hash.put("tDBInput_1", true);
				end_Hash.put("tDBInput_1", System.currentTimeMillis());

				/**
				 * [tDBInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row14 != null) {
					tHash_Lookup_row14.endGet();
				}
				globalMap.remove("tHash_Lookup_row14");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row1");
				}

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 end ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (outtFileOutputDelimited_1 != null) {
					outtFileOutputDelimited_1.flush();
					outtFileOutputDelimited_1.close();
				}

				globalMap.put("tFileOutputDelimited_1_NB_LINE", nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME", fileName_tFileOutputDelimited_1);

				if (isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0) {

					filetFileOutputDelimited_1.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_1", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out1");
				}

				ok_Hash.put("tFileOutputDelimited_1", true);
				end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_5", false);
				start_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "copyOfout1");
				}

				int tos_count_tFileOutputDelimited_5 = 0;

				String fileName_tFileOutputDelimited_5 = "";
				fileName_tFileOutputDelimited_5 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_RR2.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_5 = null;
				String extension_tFileOutputDelimited_5 = null;
				String directory_tFileOutputDelimited_5 = null;
				if ((fileName_tFileOutputDelimited_5.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") < fileName_tFileOutputDelimited_5
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
							fileName_tFileOutputDelimited_5.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_5.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5.substring(0,
								fileName_tFileOutputDelimited_5.lastIndexOf("."));
						extension_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5
								.substring(fileName_tFileOutputDelimited_5.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_5 = fileName_tFileOutputDelimited_5;
						extension_tFileOutputDelimited_5 = "";
					}
					directory_tFileOutputDelimited_5 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_5 = true;
				java.io.File filetFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);
				int nb_line_tFileOutputDelimited_5 = 0;
				int splitedFileNo_tFileOutputDelimited_5 = 0;
				int currentRow_tFileOutputDelimited_5 = 0;

				final String OUT_DELIM_tFileOutputDelimited_5 = /** Start field tFileOutputDelimited_5:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_5:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_5 = /**
																		 * Start field
																		 * tFileOutputDelimited_5:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_5:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_5 != null && directory_tFileOutputDelimited_5.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_5 = new java.io.File(directory_tFileOutputDelimited_5);
					if (!dir_tFileOutputDelimited_5.exists()) {
						dir_tFileOutputDelimited_5.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_5 = null;

				java.io.File fileToDelete_tFileOutputDelimited_5 = new java.io.File(fileName_tFileOutputDelimited_5);
				if (fileToDelete_tFileOutputDelimited_5.exists()) {
					fileToDelete_tFileOutputDelimited_5.delete();
				}
				outtFileOutputDelimited_5 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_5, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_5.length() == 0) {
					outtFileOutputDelimited_5.write("Nom_operation");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Date_lancement");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("NO_DOSFACT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("ID_DOSCLIE");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CIVILITE");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("NOM_CLIENT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("PRENOM_CLIENT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("ON_PSEUCLI");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("LOYER_CHARGE");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("DECOHABITANT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("NO_SITUATION");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("LIB_SITUATION");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("DATE_SITUATION");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("REF_PATRIM");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CD_PATRIM1");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CD_PATRIM2");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CD_PATRIM3");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CD_PATRIM4");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Groupe");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Batiment");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("ETAGE");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Nature");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("DEMENAGEMENT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("Sous_Nature");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("ADRESSE");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("CP");
					outtFileOutputDelimited_5.write(OUT_DELIM_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.write("VILLE");
					outtFileOutputDelimited_5.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);
					outtFileOutputDelimited_5.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_5", outtFileOutputDelimited_5);
				resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_5", isFileGenerated_tFileOutputDelimited_5);
				resourceMap.put("filetFileOutputDelimited_5", filetFileOutputDelimited_5);

				/**
				 * [tFileOutputDelimited_5 begin ] stop
				 */

				/**
				 * [tMap_2 begin ] start
				 */

				ok_Hash.put("tMap_2", false);
				start_Hash.put("tMap_2", System.currentTimeMillis());

				currentComponent = "tMap_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row2");
				}

				int tos_count_tMap_2 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) globalMap
						.get("tHash_Lookup_row13"));

				row13Struct row13HashKey = new row13Struct();
				row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_2__Struct {
				}
				Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
				copyOfout1Struct copyOfout1_tmp = new copyOfout1Struct();
// ###############################

				/**
				 * [tMap_2 begin ] stop
				 */

				/**
				 * [tDBInput_2 begin ] start
				 */

				ok_Hash.put("tDBInput_2", false);
				start_Hash.put("tDBInput_2", System.currentTimeMillis());

				currentComponent = "tDBInput_2";

				int tos_count_tDBInput_2 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_2 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2);
				int nb_line_tDBInput_2 = 0;
				java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_2 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

				String dbquery_tDBInput_2 = "\nSELECT distinct\n	df.NO_DOSFACT,\n	df.ID_DOSCLIE,\n	replace(d.LB_POLITES,';','')as CIVILITE,\n	replace(upper(d.NOM_CL"
						+ "IENT),';','') as NOM_CLIENT,\n	replace(d.PRE_CLIENT,';','') as PRENOM_CLIENT,\n	d.ON_PSEUCLI,\n	pg.MT_TOTRUB as LOYER_CH"
						+ "ARGE,\n    1 AS Cpt_nbre_patrim,\n	act.NO_SIT as NO_SITUATION,\n	act.LB_SITREP as LIB_SITUATION,\n	act.DT_CREASIT as DAT"
						+ "E_SITUATION,\n	pg.CD_PATRIM as REF_PATRIM,\n	pg.CD_PATRIM1 as CD_PATRIM1,\n	pg.CD_PATRIM2 as CD_PATRIM2,\n	pg.CD_PATRIM3"
						+ " as CD_PATRIM3,\n	pg.CD_PATRIM4 as CD_PATRIM4,\n	LB_PATRIM1 as Groupe,\n	LB_PATRIM2 as  Batiment,\n	NIV_ETAGE as ETAGE,	"
						+ "\nCASE \n		WHEN LB_NATLOC = 'PARKING' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'PARKING LIBRE' 	THEN 'STATIONNEMENT'"
						+ "\n		WHEN LB_NATLOC = 'GARAGE' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'COMMERCE' 		THEN 'COMMERCE'\n		WHEN LB_NATLOC "
						+ "in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') THEN 'LOGEMENT'\n		ELSE LB_NATLOC\n	END  AS"
						+ " Nature,\nCASE \n		WHEN d.ON_PSEUCLI ='N' and (act.NO_SIT in('69000','69001','69002','69005') or act.NO_SIT is null) and"
						+ " c2.NO_SIT is null	THEN 'A REALISER'\n		WHEN d.ON_PSEUCLI ='N' and act.NO_SIT in('69010','69012','69013','69015','69017'"
						+ ")	THEN 'EN COURS'\n		WHEN d.ON_PSEUCLI ='O' THEN 'REALISE'\n		ELSE 'A VERIFIER'\n	END AS Statut_enquete,\nCASE \n		WHEN "
						+ "c2.NO_SIT is null	THEN 'NON'\n		WHEN c2.NO_SIT is not null	THEN 'OUI'\n		ELSE 'A VERIFIER'\nEND as DEMENAGEMENT,\n	1 as "
						+ "COUT_DEMENAGEMENT,\n    LB_NATLOC  as Sous_Nature,\n	pg.LB_PATRIM3 as ADRESSE,\n	pg.ADRPA_CP as CP,\n    pg.ADRPA_LOC as"
						+ " VILLE\n	from \n	DOSS_FACT df\n	left join DOSS_CLIEN d on df.ID_DOSCLIE = d.ID_DOSCLIE\n	left join PATRIMOINE_GIM pg on "
						+ "df.CD_PATRIM1 = pg.CD_PATRIM1 \n							and df.CD_PATRIM2 = pg.CD_PATRIM2\n							and df.CD_PATRIM3 = pg.CD_PATRIM3\n				"
						+ "			and df.CD_PATRIM4 = pg.CD_PATRIM4\n	left join (select * from CONTENTIEUX c\n			   where NO_SIT like '69%' \n			   and"
						+ " CD_ETAT_CTX = 'O' \n			   and LB_PROC <> 'A NE PLUS UTILISER'\n			   and c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE"
						+ "\n			  					from CONTENTIEUX cc\n			   					where NO_SIT like '69%' \n			   					and CD_ETAT_CTX = 'O' \n			  					and L"
						+ "B_PROC <> 'A NE PLUS UTILISER'\n			   					and c.ID_DOSCLIE = cc.ID_DOSCLIE)) act on act.NO_DOSFACT = df.NO_DOSFACT \n	l"
						+ "eft join PAT_CONTRA pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n							and pc.CD_PATRIM2 =df.CD_PATRIM2 \n							and pc.CD_PAT"
						+ "RIM3 =df.CD_PATRIM3 \n							and pc.CD_PATRIM4 =df.CD_PATRIM4  \n							and df.NO_DOSFACT = pc.NO_DOSFACT							\n						"
						+ "	and pc.LB_ET_DTD in('Présent','Affectation validée')\n							and pc.LB_ET_DTF = 'Présent'\n	left join (select * from CO"
						+ "NTENTIEUX c where NO_SIT in ('69045','69050') and CD_ETAT_CTX = 'O' and LB_PROC <> 'A NE PLUS UTILISER') c2\n								on "
						+ "c2.CD_PATRIM1 =df.CD_PATRIM1 \n								and c2.CD_PATRIM2 =df.CD_PATRIM2 \n								and c2.CD_PATRIM3 =df.CD_PATRIM3 \n			"
						+ "					and c2.CD_PATRIM4 =df.CD_PATRIM4 \nWHERE pg.CD_SOCPROP IN (1,6)\nAND pg.CD_PATRIM4 <> 0\nAND LB_NATLOC In ('COMMERC"
						+ "E','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\nAND CD_ETAT = 'MS'\nAND CD_ETAT_DF ='E'\nAN"
						+ "D pc.LB_ET_DTF = 'Présent'\n";

				globalMap.put("tDBInput_2_QUERY", dbquery_tDBInput_2);
				java.sql.ResultSet rs_tDBInput_2 = null;

				try {
					rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
					java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
					int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

					String tmpContent_tDBInput_2 = null;

					while (rs_tDBInput_2.next()) {
						nb_line_tDBInput_2++;

						if (colQtyInRs_tDBInput_2 < 1) {
							row2.NO_DOSFACT = null;
						} else {

							row2.NO_DOSFACT = rs_tDBInput_2.getInt(1);
							if (rs_tDBInput_2.wasNull()) {
								row2.NO_DOSFACT = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 2) {
							row2.ID_DOSCLIE = null;
						} else {

							row2.ID_DOSCLIE = rs_tDBInput_2.getInt(2);
							if (rs_tDBInput_2.wasNull()) {
								row2.ID_DOSCLIE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 3) {
							row2.CIVILITE = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(3);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.CIVILITE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.CIVILITE = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.CIVILITE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 4) {
							row2.NOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.NOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.NOM_CLIENT = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.NOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 5) {
							row2.PRENOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.PRENOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.PRENOM_CLIENT = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.PRENOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 6) {
							row2.ON_PSEUCLI = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ON_PSEUCLI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ON_PSEUCLI = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.ON_PSEUCLI = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 7) {
							row2.LOYER_CHARGE = null;
						} else {

							row2.LOYER_CHARGE = rs_tDBInput_2.getFloat(7);
							if (rs_tDBInput_2.wasNull()) {
								row2.LOYER_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 8) {
							row2.Cpt_nbre_patrim = null;
						} else {

							row2.Cpt_nbre_patrim = rs_tDBInput_2.getInt(8);
							if (rs_tDBInput_2.wasNull()) {
								row2.Cpt_nbre_patrim = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 9) {
							row2.NO_SITUATION = null;
						} else {

							row2.NO_SITUATION = rs_tDBInput_2.getInt(9);
							if (rs_tDBInput_2.wasNull()) {
								row2.NO_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 10) {
							row2.LIB_SITUATION = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.LIB_SITUATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.LIB_SITUATION = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.LIB_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 11) {
							row2.DATE_SITUATION = null;
						} else {

							row2.DATE_SITUATION = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 11);

						}
						if (colQtyInRs_tDBInput_2 < 12) {
							row2.REF_PATRIM = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.REF_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.REF_PATRIM = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.REF_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 13) {
							row2.CD_PATRIM1 = null;
						} else {

							row2.CD_PATRIM1 = rs_tDBInput_2.getInt(13);
							if (rs_tDBInput_2.wasNull()) {
								row2.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 14) {
							row2.CD_PATRIM2 = null;
						} else {

							row2.CD_PATRIM2 = rs_tDBInput_2.getInt(14);
							if (rs_tDBInput_2.wasNull()) {
								row2.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 15) {
							row2.CD_PATRIM3 = null;
						} else {

							row2.CD_PATRIM3 = rs_tDBInput_2.getInt(15);
							if (rs_tDBInput_2.wasNull()) {
								row2.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 16) {
							row2.CD_PATRIM4 = null;
						} else {

							row2.CD_PATRIM4 = rs_tDBInput_2.getInt(16);
							if (rs_tDBInput_2.wasNull()) {
								row2.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 17) {
							row2.Groupe = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(17);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Groupe = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.Groupe = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 18) {
							row2.Batiment = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(18);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.Batiment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Batiment = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.Batiment = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 19) {
							row2.ETAGE = null;
						} else {

							row2.ETAGE = rs_tDBInput_2.getInt(19);
							if (rs_tDBInput_2.wasNull()) {
								row2.ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 20) {
							row2.Nature = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(20);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Nature = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 21) {
							row2.statut_enquete = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(21);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.statut_enquete = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.statut_enquete = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.statut_enquete = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 22) {
							row2.DEMENAGEMENT = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(22);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.DEMENAGEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.DEMENAGEMENT = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 23) {
							row2.COUT_DEMENAGEMENT = null;
						} else {

							row2.COUT_DEMENAGEMENT = rs_tDBInput_2.getFloat(23);
							if (rs_tDBInput_2.wasNull()) {
								row2.COUT_DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 24) {
							row2.Sous_Nature = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(24);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.Sous_Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.Sous_Nature = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.Sous_Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 25) {
							row2.ADRESSE = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(25);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.ADRESSE = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.ADRESSE = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 26) {
							row2.CP = null;
						} else {

							row2.CP = rs_tDBInput_2.getInt(26);
							if (rs_tDBInput_2.wasNull()) {
								row2.CP = null;
							}
						}
						if (colQtyInRs_tDBInput_2 < 27) {
							row2.VILLE = null;
						} else {

							tmpContent_tDBInput_2 = rs_tDBInput_2.getString(27);
							if (tmpContent_tDBInput_2 != null) {
								if (talendToDBList_tDBInput_2.contains(
										rsmd_tDBInput_2.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row2.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
								} else {
									row2.VILLE = tmpContent_tDBInput_2.trim();
								}
							} else {
								row2.VILLE = null;
							}
						}

						/**
						 * [tDBInput_2 begin ] stop
						 */

						/**
						 * [tDBInput_2 main ] start
						 */

						currentComponent = "tDBInput_2";

						tos_count_tDBInput_2++;

						/**
						 * [tDBInput_2 main ] stop
						 */

						/**
						 * [tDBInput_2 process_data_begin ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_begin ] stop
						 */

						/**
						 * [tMap_2 main ] start
						 */

						currentComponent = "tMap_2";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row2");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_2 = false;
						boolean mainRowRejected_tMap_2 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row13"
						///////////////////////////////////////////////

						boolean forceLooprow13 = false;

						row13Struct row13ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_2) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_2 = false;

							row13HashKey.PATRIM1 = row2.CD_PATRIM1;

							row13HashKey.PATRIM2 = row2.CD_PATRIM2;

							row13HashKey.hashCodeDirty = true;

							tHash_Lookup_row13.lookup(row13HashKey);

							if (!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_2 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row13' and it contains more one result from keys : row13.PATRIM1 = '" +
							// row13HashKey.PATRIM1 + "', row13.PATRIM2 = '" + row13HashKey.PATRIM2 + "'");
						} // G 071

						row13Struct row13 = null;

						row13Struct fromLookup_row13 = null;
						row13 = row13Default;

						if (tHash_Lookup_row13 != null && tHash_Lookup_row13.hasNext()) { // G 099

							fromLookup_row13 = tHash_Lookup_row13.next();

						} // G 099

						if (fromLookup_row13 != null) {
							row13 = fromLookup_row13;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
							// ###############################
							// # Output tables

							copyOfout1 = null;

							if (!rejectedInnerJoin_tMap_2) {

// # Output table : 'copyOfout1'
								copyOfout1_tmp.Nom_operation = row13.Nom_operation;
								copyOfout1_tmp.Date_lancement = row13.Date_lancement;
								copyOfout1_tmp.NO_DOSFACT = row2.NO_DOSFACT;
								copyOfout1_tmp.ID_DOSCLIE = row2.ID_DOSCLIE;
								copyOfout1_tmp.CIVILITE = row2.CIVILITE;
								copyOfout1_tmp.NOM_CLIENT = row2.NOM_CLIENT;
								copyOfout1_tmp.PRENOM_CLIENT = row2.PRENOM_CLIENT;
								copyOfout1_tmp.ON_PSEUCLI = row2.ON_PSEUCLI;
								copyOfout1_tmp.LOYER_CHARGE = row2.LOYER_CHARGE;
								copyOfout1_tmp.Cpt_nbre_patrim = row2.Cpt_nbre_patrim;
								copyOfout1_tmp.DECOHABITANT = row13.DECOHABITANT;
								copyOfout1_tmp.NO_SITUATION = row2.NO_SITUATION;
								copyOfout1_tmp.LIB_SITUATION = row2.LIB_SITUATION;
								copyOfout1_tmp.DATE_SITUATION = row2.DATE_SITUATION;
								copyOfout1_tmp.REF_PATRIM = row2.REF_PATRIM;
								copyOfout1_tmp.CD_PATRIM1 = row2.CD_PATRIM1;
								copyOfout1_tmp.CD_PATRIM2 = row2.CD_PATRIM2;
								copyOfout1_tmp.CD_PATRIM3 = row2.CD_PATRIM3;
								copyOfout1_tmp.CD_PATRIM4 = row2.CD_PATRIM4;
								copyOfout1_tmp.Groupe = row2.Groupe;
								copyOfout1_tmp.Batiment = row2.Batiment;
								copyOfout1_tmp.ETAGE = row2.ETAGE;
								copyOfout1_tmp.Nature = row2.Nature;
								copyOfout1_tmp.DEMENAGEMENT = row2.DEMENAGEMENT;
								copyOfout1_tmp.COUT_DEMENAGEMENT = row2.COUT_DEMENAGEMENT;
								copyOfout1_tmp.Sous_Nature = row2.Sous_Nature;
								copyOfout1_tmp.ADRESSE = row2.ADRESSE;
								copyOfout1_tmp.CP = row2.CP;
								copyOfout1_tmp.VILLE = row2.VILLE;
								copyOfout1 = copyOfout1_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_2 = false;

						tos_count_tMap_2++;

						/**
						 * [tMap_2 main ] stop
						 */

						/**
						 * [tMap_2 process_data_begin ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_begin ] stop
						 */
// Start of branch "copyOfout1"
						if (copyOfout1 != null) {

							/**
							 * [tFileOutputDelimited_5 main ] start
							 */

							currentComponent = "tFileOutputDelimited_5";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "copyOfout1");
							}

							StringBuilder sb_tFileOutputDelimited_5 = new StringBuilder();
							if (copyOfout1.Nom_operation != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Nom_operation);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Date_lancement != null) {
								sb_tFileOutputDelimited_5
										.append(FormatterUtils.format_Date(copyOfout1.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CIVILITE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CIVILITE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.DECOHABITANT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.DECOHABITANT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.NO_SITUATION != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.NO_SITUATION);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_5
										.append(FormatterUtils.format_Date(copyOfout1.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.REF_PATRIM != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.REF_PATRIM);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Groupe != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Groupe);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Batiment != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Batiment);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.ETAGE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.ETAGE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Nature != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Nature);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.Sous_Nature != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.Sous_Nature);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.ADRESSE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.ADRESSE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.CP != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.CP);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_tFileOutputDelimited_5);
							if (copyOfout1.VILLE != null) {
								sb_tFileOutputDelimited_5.append(copyOfout1.VILLE);
							}
							sb_tFileOutputDelimited_5.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_5);

							nb_line_tFileOutputDelimited_5++;
							resourceMap.put("nb_line_tFileOutputDelimited_5", nb_line_tFileOutputDelimited_5);

							outtFileOutputDelimited_5.write(sb_tFileOutputDelimited_5.toString());

							row17 = copyOfout1;

							tos_count_tFileOutputDelimited_5++;

							/**
							 * [tFileOutputDelimited_5 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_5 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_5";

							/**
							 * [tFileOutputDelimited_5 process_data_begin ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row17");
							}

//////////

// for output
							row19 = new row19Struct();

							row19.Nom_operation = row17.Nom_operation;
							row19.Date_lancement = row17.Date_lancement;
							row19.NO_DOSFACT = row17.NO_DOSFACT;
							row19.ID_DOSCLIE = row17.ID_DOSCLIE;
							row19.CIVILITE = row17.CIVILITE;
							row19.NOM_CLIENT = row17.NOM_CLIENT;
							row19.PRENOM_CLIENT = row17.PRENOM_CLIENT;
							row19.ON_PSEUCLI = row17.ON_PSEUCLI;
							row19.LOYER_CHARGE = row17.LOYER_CHARGE;
							row19.Cpt_nbre_patrim = row17.Cpt_nbre_patrim;
							row19.DECOHABITANT = row17.DECOHABITANT;
							row19.NO_SITUATION = row17.NO_SITUATION;
							row19.LIB_SITUATION = row17.LIB_SITUATION;
							row19.DATE_SITUATION = row17.DATE_SITUATION;
							row19.REF_PATRIM = row17.REF_PATRIM;
							row19.CD_PATRIM1 = row17.CD_PATRIM1;
							row19.CD_PATRIM2 = row17.CD_PATRIM2;
							row19.CD_PATRIM3 = row17.CD_PATRIM3;
							row19.CD_PATRIM4 = row17.CD_PATRIM4;
							row19.Groupe = row17.Groupe;
							row19.Batiment = row17.Batiment;
							row19.ETAGE = row17.ETAGE;
							row19.Nature = row17.Nature;
							row19.DEMENAGEMENT = row17.DEMENAGEMENT;
							row19.COUT_DEMENAGEMENT = row17.COUT_DEMENAGEMENT;
							row19.Sous_Nature = row17.Sous_Nature;
							row19.ADRESSE = row17.ADRESSE;
							row19.CP = row17.CP;
							row19.VILLE = row17.VILLE;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 main ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
							}

							StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
							if (row19.Nom_operation != null) {
								sb_tFileOutputDelimited_7.append(row19.Nom_operation);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Date_lancement != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_7.append(row19.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CIVILITE != null) {
								sb_tFileOutputDelimited_7.append(row19.CIVILITE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_7.append(row19.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_7.append(row19.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_7.append(row19.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DECOHABITANT != null) {
								sb_tFileOutputDelimited_7.append(row19.DECOHABITANT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.REF_PATRIM != null) {
								sb_tFileOutputDelimited_7.append(row19.REF_PATRIM);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Groupe != null) {
								sb_tFileOutputDelimited_7.append(row19.Groupe);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Batiment != null) {
								sb_tFileOutputDelimited_7.append(row19.Batiment);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ETAGE != null) {
								sb_tFileOutputDelimited_7.append(row19.ETAGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Sous_Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Sous_Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ADRESSE != null) {
								sb_tFileOutputDelimited_7.append(row19.ADRESSE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CP != null) {
								sb_tFileOutputDelimited_7.append(row19.CP);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.VILLE != null) {
								sb_tFileOutputDelimited_7.append(row19.VILLE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

							outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

							tos_count_tFileOutputDelimited_7++;

							/**
							 * [tFileOutputDelimited_7 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_5 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_5";

							/**
							 * [tFileOutputDelimited_5 process_data_end ] stop
							 */

						} // End of branch "copyOfout1"

						/**
						 * [tMap_2 process_data_end ] start
						 */

						currentComponent = "tMap_2";

						/**
						 * [tMap_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 process_data_end ] start
						 */

						currentComponent = "tDBInput_2";

						/**
						 * [tDBInput_2 process_data_end ] stop
						 */

						/**
						 * [tDBInput_2 end ] start
						 */

						currentComponent = "tDBInput_2";

					}
				} finally {
					if (rs_tDBInput_2 != null) {
						rs_tDBInput_2.close();
					}
					if (stmt_tDBInput_2 != null) {
						stmt_tDBInput_2.close();
					}
				}
				globalMap.put("tDBInput_2_NB_LINE", nb_line_tDBInput_2);

				ok_Hash.put("tDBInput_2", true);
				end_Hash.put("tDBInput_2", System.currentTimeMillis());

				/**
				 * [tDBInput_2 end ] stop
				 */

				/**
				 * [tMap_2 end ] start
				 */

				currentComponent = "tMap_2";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row13 != null) {
					tHash_Lookup_row13.endGet();
				}
				globalMap.remove("tHash_Lookup_row13");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row2");
				}

				ok_Hash.put("tMap_2", true);
				end_Hash.put("tMap_2", System.currentTimeMillis());

				/**
				 * [tMap_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 end ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (outtFileOutputDelimited_5 != null) {
					outtFileOutputDelimited_5.flush();
					outtFileOutputDelimited_5.close();
				}

				globalMap.put("tFileOutputDelimited_5_NB_LINE", nb_line_tFileOutputDelimited_5);
				globalMap.put("tFileOutputDelimited_5_FILE_NAME", fileName_tFileOutputDelimited_5);

				if (isFileGenerated_tFileOutputDelimited_5 && nb_line_tFileOutputDelimited_5 == 0) {

					filetFileOutputDelimited_5.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_5", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "copyOfout1");
				}

				ok_Hash.put("tFileOutputDelimited_5", true);
				end_Hash.put("tFileOutputDelimited_5", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_6", false);
				start_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out3");
				}

				int tos_count_tFileOutputDelimited_6 = 0;

				String fileName_tFileOutputDelimited_6 = "";
				fileName_tFileOutputDelimited_6 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_6 = null;
				String extension_tFileOutputDelimited_6 = null;
				String directory_tFileOutputDelimited_6 = null;
				if ((fileName_tFileOutputDelimited_6.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") < fileName_tFileOutputDelimited_6
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
							fileName_tFileOutputDelimited_6.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_6.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6.substring(0,
								fileName_tFileOutputDelimited_6.lastIndexOf("."));
						extension_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6
								.substring(fileName_tFileOutputDelimited_6.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_6 = fileName_tFileOutputDelimited_6;
						extension_tFileOutputDelimited_6 = "";
					}
					directory_tFileOutputDelimited_6 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_6 = true;
				java.io.File filetFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);
				int nb_line_tFileOutputDelimited_6 = 0;
				int splitedFileNo_tFileOutputDelimited_6 = 0;
				int currentRow_tFileOutputDelimited_6 = 0;

				final String OUT_DELIM_tFileOutputDelimited_6 = /** Start field tFileOutputDelimited_6:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_6:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_6 = /**
																		 * Start field
																		 * tFileOutputDelimited_6:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_6:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_6 != null && directory_tFileOutputDelimited_6.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_6 = new java.io.File(directory_tFileOutputDelimited_6);
					if (!dir_tFileOutputDelimited_6.exists()) {
						dir_tFileOutputDelimited_6.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_6 = null;

				java.io.File fileToDelete_tFileOutputDelimited_6 = new java.io.File(fileName_tFileOutputDelimited_6);
				if (fileToDelete_tFileOutputDelimited_6.exists()) {
					fileToDelete_tFileOutputDelimited_6.delete();
				}
				outtFileOutputDelimited_6 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_6, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_6.length() == 0) {
					outtFileOutputDelimited_6.write("Nom_operation");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Date_lancement");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("NO_DOSFACT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("ID_DOSCLIE");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CIVILITE");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("NOM_CLIENT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("PRENOM_CLIENT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("ON_PSEUCLI");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("LOYER_CHARGE");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("DECOHABITANT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("NO_SITUATION");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("LIB_SITUATION");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("DATE_SITUATION");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("REF_PATRIM");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CD_PATRIM1");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CD_PATRIM2");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CD_PATRIM3");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CD_PATRIM4");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Groupe");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Batiment");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("ETAGE");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Nature");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("DEMENAGEMENT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("Sous_Nature");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("ADRESSE");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("CP");
					outtFileOutputDelimited_6.write(OUT_DELIM_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.write("VILLE");
					outtFileOutputDelimited_6.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);
					outtFileOutputDelimited_6.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_6", outtFileOutputDelimited_6);
				resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_6", isFileGenerated_tFileOutputDelimited_6);
				resourceMap.put("filetFileOutputDelimited_6", filetFileOutputDelimited_6);

				/**
				 * [tFileOutputDelimited_6 begin ] stop
				 */

				/**
				 * [tMap_3 begin ] start
				 */

				ok_Hash.put("tMap_3", false);
				start_Hash.put("tMap_3", System.currentTimeMillis());

				currentComponent = "tMap_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row12");
				}

				int tos_count_tMap_3 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) globalMap
						.get("tHash_Lookup_row15"));

				row15Struct row15HashKey = new row15Struct();
				row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_3__Struct {
				}
				Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out3Struct out3_tmp = new out3Struct();
// ###############################

				/**
				 * [tMap_3 begin ] stop
				 */

				/**
				 * [tDBInput_3 begin ] start
				 */

				ok_Hash.put("tDBInput_3", false);
				start_Hash.put("tDBInput_3", System.currentTimeMillis());

				currentComponent = "tDBInput_3";

				int tos_count_tDBInput_3 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_3 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3);
				int nb_line_tDBInput_3 = 0;
				java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_3 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

				String dbquery_tDBInput_3 = "\nSELECT distinct\n	df.NO_DOSFACT,\n	df.ID_DOSCLIE,\n	replace(d.LB_POLITES,';','')as CIVILITE,\n	replace(upper(d.NOM_CL"
						+ "IENT),';','') as NOM_CLIENT,\n	replace(d.PRE_CLIENT,';','') as PRENOM_CLIENT,\n	d.ON_PSEUCLI,\n	pg.MT_TOTRUB as LOYER_CH"
						+ "ARGE,\n    1 AS Cpt_nbre_patrim,\n	act.NO_SIT as NO_SITUATION,\n	act.LB_SITREP as LIB_SITUATION,\n	act.DT_CREASIT as DAT"
						+ "E_SITUATION,\n	pg.CD_PATRIM as REF_PATRIM,\n	pg.CD_PATRIM1 as CD_PATRIM1,\n	pg.CD_PATRIM2 as CD_PATRIM2,\n	pg.CD_PATRIM3"
						+ " as CD_PATRIM3,\n	pg.CD_PATRIM4 as CD_PATRIM4,\n	LB_PATRIM1 as Groupe,\n	LB_PATRIM2 as  Batiment,\n	NIV_ETAGE as ETAGE,	"
						+ "\nCASE \n		WHEN LB_NATLOC = 'PARKING' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'PARKING LIBRE' 	THEN 'STATIONNEMENT'"
						+ "\n		WHEN LB_NATLOC = 'GARAGE' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'COMMERCE' 		THEN 'COMMERCE'\n		WHEN LB_NATLOC "
						+ "in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') THEN 'LOGEMENT'\n		ELSE LB_NATLOC\n	END  AS"
						+ " Nature,\nCASE \n		WHEN d.ON_PSEUCLI ='N' and (act.NO_SIT in('69000','69001','69002','69005') or act.NO_SIT is null) and"
						+ " c2.NO_SIT is null	THEN 'A REALISER'\n		WHEN d.ON_PSEUCLI ='N' and act.NO_SIT in('69010','69012','69013','69015','69017'"
						+ ")	THEN 'EN COURS'\n		WHEN d.ON_PSEUCLI ='O' THEN 'REALISE'\n		ELSE 'A VERIFIER'\n	END AS Statut_enquete,\nCASE \n		WHEN "
						+ "c2.NO_SIT is null	THEN 'NON'\n		WHEN c2.NO_SIT is not null	THEN 'OUI'\n		ELSE 'A VERIFIER'\nEND as DEMENAGEMENT,\n	1 as "
						+ "COUT_DEMENAGEMENT,\n    LB_NATLOC  as Sous_Nature,\n	pg.LB_PATRIM3 as ADRESSE,\n	pg.ADRPA_CP as CP,\n    pg.ADRPA_LOC as"
						+ " VILLE\n	from \n	DOSS_FACT df\n	left join DOSS_CLIEN d on df.ID_DOSCLIE = d.ID_DOSCLIE\n	left join PATRIMOINE_GIM pg on "
						+ "df.CD_PATRIM1 = pg.CD_PATRIM1 \n							and df.CD_PATRIM2 = pg.CD_PATRIM2\n							and df.CD_PATRIM3 = pg.CD_PATRIM3\n				"
						+ "			and df.CD_PATRIM4 = pg.CD_PATRIM4\n	left join (select * from CONTENTIEUX c\n			   where NO_SIT like '69%' \n			   and"
						+ " CD_ETAT_CTX = 'O' \n			   and LB_PROC <> 'A NE PLUS UTILISER'\n			   and c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE"
						+ "\n			  					from CONTENTIEUX cc\n			   					where NO_SIT like '69%' \n			   					and CD_ETAT_CTX = 'O' \n			  					and L"
						+ "B_PROC <> 'A NE PLUS UTILISER'\n			   					and c.ID_DOSCLIE = cc.ID_DOSCLIE)) act on act.NO_DOSFACT = df.NO_DOSFACT \n	l"
						+ "eft join PAT_CONTRA pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n							and pc.CD_PATRIM2 =df.CD_PATRIM2 \n							and pc.CD_PAT"
						+ "RIM3 =df.CD_PATRIM3 \n							and pc.CD_PATRIM4 =df.CD_PATRIM4  \n							and df.NO_DOSFACT = pc.NO_DOSFACT							\n						"
						+ "	and pc.LB_ET_DTD in('Présent','Affectation validée')\n							and pc.LB_ET_DTF = 'Présent'\n	left join (select * from CO"
						+ "NTENTIEUX c where NO_SIT in ('69045','69050') and CD_ETAT_CTX = 'O' and LB_PROC <> 'A NE PLUS UTILISER') c2\n								on "
						+ "c2.CD_PATRIM1 =df.CD_PATRIM1 \n								and c2.CD_PATRIM2 =df.CD_PATRIM2 \n								and c2.CD_PATRIM3 =df.CD_PATRIM3 \n			"
						+ "					and c2.CD_PATRIM4 =df.CD_PATRIM4 \nWHERE pg.CD_SOCPROP IN (1,6)\nAND pg.CD_PATRIM4 <> 0\nAND LB_NATLOC In ('COMMERC"
						+ "E','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\nAND CD_ETAT = 'MS'\nAND CD_ETAT_DF ='E'\nAN"
						+ "D pc.LB_ET_DTF = 'Présent'\n";

				globalMap.put("tDBInput_3_QUERY", dbquery_tDBInput_3);
				java.sql.ResultSet rs_tDBInput_3 = null;

				try {
					rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
					java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
					int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

					String tmpContent_tDBInput_3 = null;

					while (rs_tDBInput_3.next()) {
						nb_line_tDBInput_3++;

						if (colQtyInRs_tDBInput_3 < 1) {
							row12.NO_DOSFACT = null;
						} else {

							row12.NO_DOSFACT = rs_tDBInput_3.getInt(1);
							if (rs_tDBInput_3.wasNull()) {
								row12.NO_DOSFACT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 2) {
							row12.ID_DOSCLIE = null;
						} else {

							row12.ID_DOSCLIE = rs_tDBInput_3.getInt(2);
							if (rs_tDBInput_3.wasNull()) {
								row12.ID_DOSCLIE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 3) {
							row12.CIVILITE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.CIVILITE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.CIVILITE = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.CIVILITE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 4) {
							row12.NOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.NOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.NOM_CLIENT = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.NOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 5) {
							row12.PRENOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(5);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.PRENOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.PRENOM_CLIENT = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.PRENOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 6) {
							row12.ON_PSEUCLI = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(6);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.ON_PSEUCLI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.ON_PSEUCLI = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.ON_PSEUCLI = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 7) {
							row12.LOYER_CHARGE = null;
						} else {

							row12.LOYER_CHARGE = rs_tDBInput_3.getFloat(7);
							if (rs_tDBInput_3.wasNull()) {
								row12.LOYER_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 8) {
							row12.Cpt_nbre_patrim = null;
						} else {

							row12.Cpt_nbre_patrim = rs_tDBInput_3.getInt(8);
							if (rs_tDBInput_3.wasNull()) {
								row12.Cpt_nbre_patrim = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 9) {
							row12.NO_SITUATION = null;
						} else {

							row12.NO_SITUATION = rs_tDBInput_3.getInt(9);
							if (rs_tDBInput_3.wasNull()) {
								row12.NO_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 10) {
							row12.LIB_SITUATION = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(10);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.LIB_SITUATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.LIB_SITUATION = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.LIB_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 11) {
							row12.DATE_SITUATION = null;
						} else {

							row12.DATE_SITUATION = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 11);

						}
						if (colQtyInRs_tDBInput_3 < 12) {
							row12.REF_PATRIM = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(12);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.REF_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.REF_PATRIM = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.REF_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 13) {
							row12.CD_PATRIM1 = null;
						} else {

							row12.CD_PATRIM1 = rs_tDBInput_3.getInt(13);
							if (rs_tDBInput_3.wasNull()) {
								row12.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 14) {
							row12.CD_PATRIM2 = null;
						} else {

							row12.CD_PATRIM2 = rs_tDBInput_3.getInt(14);
							if (rs_tDBInput_3.wasNull()) {
								row12.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 15) {
							row12.CD_PATRIM3 = null;
						} else {

							row12.CD_PATRIM3 = rs_tDBInput_3.getInt(15);
							if (rs_tDBInput_3.wasNull()) {
								row12.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 16) {
							row12.CD_PATRIM4 = null;
						} else {

							row12.CD_PATRIM4 = rs_tDBInput_3.getInt(16);
							if (rs_tDBInput_3.wasNull()) {
								row12.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 17) {
							row12.Groupe = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(17);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.Groupe = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.Groupe = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 18) {
							row12.Batiment = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(18);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Batiment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.Batiment = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.Batiment = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 19) {
							row12.ETAGE = null;
						} else {

							row12.ETAGE = rs_tDBInput_3.getInt(19);
							if (rs_tDBInput_3.wasNull()) {
								row12.ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 20) {
							row12.Nature = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(20);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.Nature = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 21) {
							row12.statut_enquete = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(21);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.statut_enquete = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.statut_enquete = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.statut_enquete = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 22) {
							row12.DEMENAGEMENT = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(22);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.DEMENAGEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.DEMENAGEMENT = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 23) {
							row12.COUT_DEMENAGEMENT = null;
						} else {

							row12.COUT_DEMENAGEMENT = rs_tDBInput_3.getFloat(23);
							if (rs_tDBInput_3.wasNull()) {
								row12.COUT_DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 24) {
							row12.Sous_Nature = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(24);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.Sous_Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.Sous_Nature = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.Sous_Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 25) {
							row12.ADRESSE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(25);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.ADRESSE = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.ADRESSE = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 26) {
							row12.CP = null;
						} else {

							row12.CP = rs_tDBInput_3.getInt(26);
							if (rs_tDBInput_3.wasNull()) {
								row12.CP = null;
							}
						}
						if (colQtyInRs_tDBInput_3 < 27) {
							row12.VILLE = null;
						} else {

							tmpContent_tDBInput_3 = rs_tDBInput_3.getString(27);
							if (tmpContent_tDBInput_3 != null) {
								if (talendToDBList_tDBInput_3.contains(
										rsmd_tDBInput_3.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row12.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
								} else {
									row12.VILLE = tmpContent_tDBInput_3.trim();
								}
							} else {
								row12.VILLE = null;
							}
						}

						/**
						 * [tDBInput_3 begin ] stop
						 */

						/**
						 * [tDBInput_3 main ] start
						 */

						currentComponent = "tDBInput_3";

						tos_count_tDBInput_3++;

						/**
						 * [tDBInput_3 main ] stop
						 */

						/**
						 * [tDBInput_3 process_data_begin ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_begin ] stop
						 */

						/**
						 * [tMap_3 main ] start
						 */

						currentComponent = "tMap_3";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row12");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_3 = false;
						boolean mainRowRejected_tMap_3 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row15"
						///////////////////////////////////////////////

						boolean forceLooprow15 = false;

						row15Struct row15ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_3) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_3 = false;

							row15HashKey.PATRIM1 = row12.CD_PATRIM1;

							row15HashKey.hashCodeDirty = true;

							tHash_Lookup_row15.lookup(row15HashKey);

							if (!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

								rejectedInnerJoin_tMap_3 = true;

							} // G_TM_M_090

						} // G_TM_M_020

						if (tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row15' and it contains more one result from keys : row15.PATRIM1 = '" +
							// row15HashKey.PATRIM1 + "'");
						} // G 071

						row15Struct row15 = null;

						row15Struct fromLookup_row15 = null;
						row15 = row15Default;

						if (tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) { // G 099

							fromLookup_row15 = tHash_Lookup_row15.next();

						} // G 099

						if (fromLookup_row15 != null) {
							row15 = fromLookup_row15;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
							// ###############################
							// # Output tables

							out3 = null;

							if (!rejectedInnerJoin_tMap_3) {

// # Output table : 'out3'
								out3_tmp.Nom_operation = row15.Nom_operation;
								out3_tmp.Date_lancement = row15.Date_lancement;
								out3_tmp.NO_DOSFACT = row12.NO_DOSFACT;
								out3_tmp.ID_DOSCLIE = row12.ID_DOSCLIE;
								out3_tmp.CIVILITE = row12.CIVILITE;
								out3_tmp.NOM_CLIENT = row12.NOM_CLIENT;
								out3_tmp.PRENOM_CLIENT = row12.PRENOM_CLIENT;
								out3_tmp.ON_PSEUCLI = row12.ON_PSEUCLI;
								out3_tmp.LOYER_CHARGE = row12.LOYER_CHARGE;
								out3_tmp.Cpt_nbre_patrim = row12.Cpt_nbre_patrim;
								out3_tmp.DECOHABITANT = row15.DECOHABITANT;
								out3_tmp.NO_SITUATION = row12.NO_SITUATION;
								out3_tmp.LIB_SITUATION = row12.LIB_SITUATION;
								out3_tmp.DATE_SITUATION = row12.DATE_SITUATION;
								out3_tmp.REF_PATRIM = row12.REF_PATRIM;
								out3_tmp.CD_PATRIM1 = row12.CD_PATRIM1;
								out3_tmp.CD_PATRIM2 = row12.CD_PATRIM2;
								out3_tmp.CD_PATRIM3 = row12.CD_PATRIM3;
								out3_tmp.CD_PATRIM4 = row12.CD_PATRIM4;
								out3_tmp.Groupe = row12.Groupe;
								out3_tmp.Batiment = row12.Batiment;
								out3_tmp.ETAGE = row12.ETAGE;
								out3_tmp.Nature = row12.Nature;
								out3_tmp.DEMENAGEMENT = row12.DEMENAGEMENT;
								out3_tmp.COUT_DEMENAGEMENT = row12.COUT_DEMENAGEMENT;
								out3_tmp.Sous_Nature = row12.Sous_Nature;
								out3_tmp.ADRESSE = row12.ADRESSE;
								out3_tmp.CP = row12.CP;
								out3_tmp.VILLE = row12.VILLE;
								out3 = out3_tmp;
							} // closing inner join bracket (2)
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_3 = false;

						tos_count_tMap_3++;

						/**
						 * [tMap_3 main ] stop
						 */

						/**
						 * [tMap_3 process_data_begin ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_begin ] stop
						 */
// Start of branch "out3"
						if (out3 != null) {

							/**
							 * [tFileOutputDelimited_6 main ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out3");
							}

							StringBuilder sb_tFileOutputDelimited_6 = new StringBuilder();
							if (out3.Nom_operation != null) {
								sb_tFileOutputDelimited_6.append(out3.Nom_operation);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Date_lancement != null) {
								sb_tFileOutputDelimited_6
										.append(FormatterUtils.format_Date(out3.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_6.append(out3.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_6.append(out3.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CIVILITE != null) {
								sb_tFileOutputDelimited_6.append(out3.CIVILITE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_6.append(out3.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_6.append(out3.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_6.append(out3.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_6.append(out3.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_6.append(out3.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.DECOHABITANT != null) {
								sb_tFileOutputDelimited_6.append(out3.DECOHABITANT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.NO_SITUATION != null) {
								sb_tFileOutputDelimited_6.append(out3.NO_SITUATION);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_6.append(out3.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_6
										.append(FormatterUtils.format_Date(out3.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.REF_PATRIM != null) {
								sb_tFileOutputDelimited_6.append(out3.REF_PATRIM);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_6.append(out3.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_6.append(out3.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_6.append(out3.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_6.append(out3.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Groupe != null) {
								sb_tFileOutputDelimited_6.append(out3.Groupe);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Batiment != null) {
								sb_tFileOutputDelimited_6.append(out3.Batiment);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.ETAGE != null) {
								sb_tFileOutputDelimited_6.append(out3.ETAGE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Nature != null) {
								sb_tFileOutputDelimited_6.append(out3.Nature);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_6.append(out3.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_6.append(out3.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.Sous_Nature != null) {
								sb_tFileOutputDelimited_6.append(out3.Sous_Nature);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.ADRESSE != null) {
								sb_tFileOutputDelimited_6.append(out3.ADRESSE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.CP != null) {
								sb_tFileOutputDelimited_6.append(out3.CP);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_tFileOutputDelimited_6);
							if (out3.VILLE != null) {
								sb_tFileOutputDelimited_6.append(out3.VILLE);
							}
							sb_tFileOutputDelimited_6.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_6);

							nb_line_tFileOutputDelimited_6++;
							resourceMap.put("nb_line_tFileOutputDelimited_6", nb_line_tFileOutputDelimited_6);

							outtFileOutputDelimited_6.write(sb_tFileOutputDelimited_6.toString());

							row18 = out3;

							tos_count_tFileOutputDelimited_6++;

							/**
							 * [tFileOutputDelimited_6 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							/**
							 * [tFileOutputDelimited_6 process_data_begin ] stop
							 */

							/**
							 * [tUnite_1 main ] start
							 */

							currentComponent = "tUnite_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row18");
							}

//////////

// for output
							row19 = new row19Struct();

							row19.Nom_operation = row18.Nom_operation;
							row19.Date_lancement = row18.Date_lancement;
							row19.NO_DOSFACT = row18.NO_DOSFACT;
							row19.ID_DOSCLIE = row18.ID_DOSCLIE;
							row19.CIVILITE = row18.CIVILITE;
							row19.NOM_CLIENT = row18.NOM_CLIENT;
							row19.PRENOM_CLIENT = row18.PRENOM_CLIENT;
							row19.ON_PSEUCLI = row18.ON_PSEUCLI;
							row19.LOYER_CHARGE = row18.LOYER_CHARGE;
							row19.Cpt_nbre_patrim = row18.Cpt_nbre_patrim;
							row19.DECOHABITANT = row18.DECOHABITANT;
							row19.NO_SITUATION = row18.NO_SITUATION;
							row19.LIB_SITUATION = row18.LIB_SITUATION;
							row19.DATE_SITUATION = row18.DATE_SITUATION;
							row19.REF_PATRIM = row18.REF_PATRIM;
							row19.CD_PATRIM1 = row18.CD_PATRIM1;
							row19.CD_PATRIM2 = row18.CD_PATRIM2;
							row19.CD_PATRIM3 = row18.CD_PATRIM3;
							row19.CD_PATRIM4 = row18.CD_PATRIM4;
							row19.Groupe = row18.Groupe;
							row19.Batiment = row18.Batiment;
							row19.ETAGE = row18.ETAGE;
							row19.Nature = row18.Nature;
							row19.DEMENAGEMENT = row18.DEMENAGEMENT;
							row19.COUT_DEMENAGEMENT = row18.COUT_DEMENAGEMENT;
							row19.Sous_Nature = row18.Sous_Nature;
							row19.ADRESSE = row18.ADRESSE;
							row19.CP = row18.CP;
							row19.VILLE = row18.VILLE;

							nb_line_tUnite_1++;

//////////

							tos_count_tUnite_1++;

							/**
							 * [tUnite_1 main ] stop
							 */

							/**
							 * [tUnite_1 process_data_begin ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 main ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row19");
							}

							StringBuilder sb_tFileOutputDelimited_7 = new StringBuilder();
							if (row19.Nom_operation != null) {
								sb_tFileOutputDelimited_7.append(row19.Nom_operation);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Date_lancement != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_7.append(row19.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CIVILITE != null) {
								sb_tFileOutputDelimited_7.append(row19.CIVILITE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_7.append(row19.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_7.append(row19.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_7.append(row19.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_7.append(row19.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DECOHABITANT != null) {
								sb_tFileOutputDelimited_7.append(row19.DECOHABITANT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.NO_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.NO_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_7.append(row19.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_7
										.append(FormatterUtils.format_Date(row19.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.REF_PATRIM != null) {
								sb_tFileOutputDelimited_7.append(row19.REF_PATRIM);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_7.append(row19.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Groupe != null) {
								sb_tFileOutputDelimited_7.append(row19.Groupe);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Batiment != null) {
								sb_tFileOutputDelimited_7.append(row19.Batiment);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ETAGE != null) {
								sb_tFileOutputDelimited_7.append(row19.ETAGE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_7.append(row19.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.Sous_Nature != null) {
								sb_tFileOutputDelimited_7.append(row19.Sous_Nature);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.ADRESSE != null) {
								sb_tFileOutputDelimited_7.append(row19.ADRESSE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.CP != null) {
								sb_tFileOutputDelimited_7.append(row19.CP);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_tFileOutputDelimited_7);
							if (row19.VILLE != null) {
								sb_tFileOutputDelimited_7.append(row19.VILLE);
							}
							sb_tFileOutputDelimited_7.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_7);

							nb_line_tFileOutputDelimited_7++;
							resourceMap.put("nb_line_tFileOutputDelimited_7", nb_line_tFileOutputDelimited_7);

							outtFileOutputDelimited_7.write(sb_tFileOutputDelimited_7.toString());

							tos_count_tFileOutputDelimited_7++;

							/**
							 * [tFileOutputDelimited_7 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_7 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_7";

							/**
							 * [tFileOutputDelimited_7 process_data_end ] stop
							 */

							/**
							 * [tUnite_1 process_data_end ] start
							 */

							currentComponent = "tUnite_1";

							/**
							 * [tUnite_1 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_6 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_6";

							/**
							 * [tFileOutputDelimited_6 process_data_end ] stop
							 */

						} // End of branch "out3"

						/**
						 * [tMap_3 process_data_end ] start
						 */

						currentComponent = "tMap_3";

						/**
						 * [tMap_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 process_data_end ] start
						 */

						currentComponent = "tDBInput_3";

						/**
						 * [tDBInput_3 process_data_end ] stop
						 */

						/**
						 * [tDBInput_3 end ] start
						 */

						currentComponent = "tDBInput_3";

					}
				} finally {
					if (rs_tDBInput_3 != null) {
						rs_tDBInput_3.close();
					}
					if (stmt_tDBInput_3 != null) {
						stmt_tDBInput_3.close();
					}
				}
				globalMap.put("tDBInput_3_NB_LINE", nb_line_tDBInput_3);

				ok_Hash.put("tDBInput_3", true);
				end_Hash.put("tDBInput_3", System.currentTimeMillis());

				/**
				 * [tDBInput_3 end ] stop
				 */

				/**
				 * [tMap_3 end ] start
				 */

				currentComponent = "tMap_3";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row15 != null) {
					tHash_Lookup_row15.endGet();
				}
				globalMap.remove("tHash_Lookup_row15");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row12");
				}

				ok_Hash.put("tMap_3", true);
				end_Hash.put("tMap_3", System.currentTimeMillis());

				/**
				 * [tMap_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 end ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (outtFileOutputDelimited_6 != null) {
					outtFileOutputDelimited_6.flush();
					outtFileOutputDelimited_6.close();
				}

				globalMap.put("tFileOutputDelimited_6_NB_LINE", nb_line_tFileOutputDelimited_6);
				globalMap.put("tFileOutputDelimited_6_FILE_NAME", fileName_tFileOutputDelimited_6);

				if (isFileGenerated_tFileOutputDelimited_6 && nb_line_tFileOutputDelimited_6 == 0) {

					filetFileOutputDelimited_6.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_6", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out3");
				}

				ok_Hash.put("tFileOutputDelimited_6", true);
				end_Hash.put("tFileOutputDelimited_6", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_6 end ] stop
				 */

				/**
				 * [tUnite_1 end ] start
				 */

				currentComponent = "tUnite_1";

				globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row17", "row16", "row18");
				}

				ok_Hash.put("tUnite_1", true);
				end_Hash.put("tUnite_1", System.currentTimeMillis());

				/**
				 * [tUnite_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 end ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (outtFileOutputDelimited_7 != null) {
					outtFileOutputDelimited_7.flush();
					outtFileOutputDelimited_7.close();
				}

				globalMap.put("tFileOutputDelimited_7_NB_LINE", nb_line_tFileOutputDelimited_7);
				globalMap.put("tFileOutputDelimited_7_FILE_NAME", fileName_tFileOutputDelimited_7);

				if (isFileGenerated_tFileOutputDelimited_7 && nb_line_tFileOutputDelimited_7 == 0) {

					filetFileOutputDelimited_7.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_7", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row19");
				}

				ok_Hash.put("tFileOutputDelimited_7", true);
				end_Hash.put("tFileOutputDelimited_7", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_7 end ] stop
				 */

			} // end the resume

			if (resumeEntryMethodName == null || globalResumeTicket) {
				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tDBInput_1:OnSubjobOk", "",
						Thread.currentThread().getId() + "", "", "", "", "", "");
			}

			if (execStat) {
				runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
			}

			tDBInput_4Process(globalMap);

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_1"
			globalMap.remove("tHash_Lookup_row14");

			// free memory for "tMap_2"
			globalMap.remove("tHash_Lookup_row13");

			// free memory for "tMap_3"
			globalMap.remove("tHash_Lookup_row15");

			try {

				/**
				 * [tDBInput_1 finally ] start
				 */

				currentComponent = "tDBInput_1";

				/**
				 * [tDBInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_1 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_1";

				if (resourceMap.get("finish_tFileOutputDelimited_1") == null) {

					java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_1");
					if (outtFileOutputDelimited_1 != null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_1")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_1 finally ] stop
				 */

				/**
				 * [tDBInput_2 finally ] start
				 */

				currentComponent = "tDBInput_2";

				/**
				 * [tDBInput_2 finally ] stop
				 */

				/**
				 * [tMap_2 finally ] start
				 */

				currentComponent = "tMap_2";

				/**
				 * [tMap_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_5 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_5";

				if (resourceMap.get("finish_tFileOutputDelimited_5") == null) {

					java.io.Writer outtFileOutputDelimited_5 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_5");
					if (outtFileOutputDelimited_5 != null) {
						outtFileOutputDelimited_5.flush();
						outtFileOutputDelimited_5.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_5")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_5"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_5")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_5 finally ] stop
				 */

				/**
				 * [tDBInput_3 finally ] start
				 */

				currentComponent = "tDBInput_3";

				/**
				 * [tDBInput_3 finally ] stop
				 */

				/**
				 * [tMap_3 finally ] start
				 */

				currentComponent = "tMap_3";

				/**
				 * [tMap_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_6 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_6";

				if (resourceMap.get("finish_tFileOutputDelimited_6") == null) {

					java.io.Writer outtFileOutputDelimited_6 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_6");
					if (outtFileOutputDelimited_6 != null) {
						outtFileOutputDelimited_6.flush();
						outtFileOutputDelimited_6.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_6")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_6"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_6")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_6 finally ] stop
				 */

				/**
				 * [tUnite_1 finally ] start
				 */

				currentComponent = "tUnite_1";

				/**
				 * [tUnite_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_7 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_7";

				if (resourceMap.get("finish_tFileOutputDelimited_7") == null) {

					java.io.Writer outtFileOutputDelimited_7 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_7");
					if (outtFileOutputDelimited_7 != null) {
						outtFileOutputDelimited_7.flush();
						outtFileOutputDelimited_7.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_7")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_7"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_7")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_7 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}

	public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public Float Montant;

		public Float getMontant() {
			return this.Montant;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public java.util.Date date_solde;

		public java.util.Date getDate_solde() {
			return this.date_solde;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.Montant = null;
					} else {
						this.Montant = dis.readFloat();
					}

					this.Date_lancement = readDate(dis);

					this.date_solde = readDate(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// Float

				if (this.Montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Montant);
				}

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// java.util.Date

				writeDate(this.date_solde, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Montant=" + String.valueOf(Montant));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",date_solde=" + String.valueOf(date_solde));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row22Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row23Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row20Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tDBInput_4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_5Process(globalMap);
				tFileInputDelimited_1Process(globalMap);

				row20Struct row20 = new row20Struct();
				out10Struct out10 = new out10Struct();
				row22Struct row22 = new row22Struct();
				out4Struct out4 = new out4Struct();
				row23Struct row23 = new row23Struct();

				/**
				 * [tDBOutput_1 begin ] start
				 */

				ok_Hash.put("tDBOutput_1", false);
				start_Hash.put("tDBOutput_1", System.currentTimeMillis());

				currentComponent = "tDBOutput_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out4");
				}

				int tos_count_tDBOutput_1 = 0;

				int nb_line_tDBOutput_1 = 0;
				int nb_line_update_tDBOutput_1 = 0;
				int nb_line_inserted_tDBOutput_1 = 0;
				int nb_line_deleted_tDBOutput_1 = 0;
				int nb_line_rejected_tDBOutput_1 = 0;

				int deletedCount_tDBOutput_1 = 0;
				int updatedCount_tDBOutput_1 = 0;
				int insertedCount_tDBOutput_1 = 0;
				int rejectedCount_tDBOutput_1 = 0;
				String dbschema_tDBOutput_1 = null;
				String tableName_tDBOutput_1 = null;
				boolean whetherReject_tDBOutput_1 = false;

				java.util.Calendar calendar_tDBOutput_1 = java.util.Calendar.getInstance();
				long year1_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "0001-01-01").getTime();
				long year2_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd", "1753-01-01").getTime();
				long year10000_tDBOutput_1 = TalendDate.parseDate("yyyy-MM-dd HH:mm:ss", "9999-12-31 24:00:00")
						.getTime();
				long date_tDBOutput_1;

				java.util.Calendar calendar_datetimeoffset_tDBOutput_1 = java.util.Calendar
						.getInstance(java.util.TimeZone.getTimeZone("UTC"));

				java.sql.Connection conn_tDBOutput_1 = null;
				String dbUser_tDBOutput_1 = null;
				dbschema_tDBOutput_1 = "";
				String driverClass_tDBOutput_1 = "net.sourceforge.jtds.jdbc.Driver";

				java.lang.Class.forName(driverClass_tDBOutput_1);
				String port_tDBOutput_1 = "1433";
				String dbname_tDBOutput_1 = "HDSHData";
				String url_tDBOutput_1 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBOutput_1)) {
					url_tDBOutput_1 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBOutput_1)) {
					url_tDBOutput_1 += "//" + "HDSHData";

				}
				url_tDBOutput_1 += ";appName=" + projectName + ";" + "";
				dbUser_tDBOutput_1 = "";

				final String decryptedPassword_tDBOutput_1 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:Q04GMEY8Qo+UvMldk1fxFgB/DlgJy4mYdtSoMg==");

				String dbPwd_tDBOutput_1 = decryptedPassword_tDBOutput_1;
				conn_tDBOutput_1 = java.sql.DriverManager.getConnection(url_tDBOutput_1, dbUser_tDBOutput_1,
						dbPwd_tDBOutput_1);

				resourceMap.put("conn_tDBOutput_1", conn_tDBOutput_1);

				conn_tDBOutput_1.setAutoCommit(false);
				int commitEvery_tDBOutput_1 = 10000;
				int commitCounter_tDBOutput_1 = 0;

				int batchSize_tDBOutput_1 = 10000;
				int batchSizeCounter_tDBOutput_1 = 0;

				if (dbschema_tDBOutput_1 == null || dbschema_tDBOutput_1.trim().length() == 0) {
					tableName_tDBOutput_1 = "T_RELOGEMENT_TMP1";
				} else {
					tableName_tDBOutput_1 = dbschema_tDBOutput_1 + "].[" + "T_RELOGEMENT_TMP1";
				}
				int count_tDBOutput_1 = 0;

				boolean whetherExist_tDBOutput_1 = false;
				try (java.sql.Statement isExistStmt_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					try {
						isExistStmt_tDBOutput_1.execute("SELECT TOP 1 1 FROM [" + tableName_tDBOutput_1 + "]");
						whetherExist_tDBOutput_1 = true;
					} catch (java.lang.Exception e) {
						whetherExist_tDBOutput_1 = false;
					}
				}
				if (whetherExist_tDBOutput_1) {
					try (java.sql.Statement stmtDrop_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
						stmtDrop_tDBOutput_1.execute("DROP TABLE [" + tableName_tDBOutput_1 + "]");
					}
				}
				try (java.sql.Statement stmtCreate_tDBOutput_1 = conn_tDBOutput_1.createStatement()) {
					stmtCreate_tDBOutput_1.execute("CREATE TABLE [" + tableName_tDBOutput_1
							+ "]([CD_PATRIM1] INT ,[CD_PATRIM2] INT ,[CD_PATRIM3] INT ,[CD_PATRIM4] INT ,[Montant] REAL ,[Date_lancement] DATETIME ,[date_solde] DATETIME )");
				}
				String insert_tDBOutput_1 = "INSERT INTO [" + tableName_tDBOutput_1
						+ "] ([CD_PATRIM1],[CD_PATRIM2],[CD_PATRIM3],[CD_PATRIM4],[Montant],[Date_lancement],[date_solde]) VALUES (?,?,?,?,?,?,?)";
				java.sql.PreparedStatement pstmt_tDBOutput_1 = conn_tDBOutput_1.prepareStatement(insert_tDBOutput_1);
				resourceMap.put("pstmt_tDBOutput_1", pstmt_tDBOutput_1);

				/**
				 * [tDBOutput_1 begin ] stop
				 */

				/**
				 * [tMap_4 begin ] start
				 */

				ok_Hash.put("tMap_4", false);
				start_Hash.put("tMap_4", System.currentTimeMillis());

				currentComponent = "tMap_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row22");
				}

				int tos_count_tMap_4 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct>) globalMap
						.get("tHash_Lookup_row26"));

				row26Struct row26HashKey = new row26Struct();
				row26Struct row26Default = new row26Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_4__Struct {
				}
				Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out4Struct out4_tmp = new out4Struct();
// ###############################

				/**
				 * [tMap_4 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_9", false);
				start_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_9";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row23");
				}

				int tos_count_tFileOutputDelimited_9 = 0;

				String fileName_tFileOutputDelimited_9 = "";
				fileName_tFileOutputDelimited_9 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Brut_relogement_tmp.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_9 = null;
				String extension_tFileOutputDelimited_9 = null;
				String directory_tFileOutputDelimited_9 = null;
				if ((fileName_tFileOutputDelimited_9.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") < fileName_tFileOutputDelimited_9
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
							fileName_tFileOutputDelimited_9.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_9.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9.substring(0,
								fileName_tFileOutputDelimited_9.lastIndexOf("."));
						extension_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9
								.substring(fileName_tFileOutputDelimited_9.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_9 = fileName_tFileOutputDelimited_9;
						extension_tFileOutputDelimited_9 = "";
					}
					directory_tFileOutputDelimited_9 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_9 = true;
				java.io.File filetFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);
				int nb_line_tFileOutputDelimited_9 = 0;
				int splitedFileNo_tFileOutputDelimited_9 = 0;
				int currentRow_tFileOutputDelimited_9 = 0;

				final String OUT_DELIM_tFileOutputDelimited_9 = /** Start field tFileOutputDelimited_9:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_9:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_9 = /**
																		 * Start field
																		 * tFileOutputDelimited_9:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_9:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_9 != null && directory_tFileOutputDelimited_9.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_9 = new java.io.File(directory_tFileOutputDelimited_9);
					if (!dir_tFileOutputDelimited_9.exists()) {
						dir_tFileOutputDelimited_9.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_9 = null;

				java.io.File fileToDelete_tFileOutputDelimited_9 = new java.io.File(fileName_tFileOutputDelimited_9);
				if (fileToDelete_tFileOutputDelimited_9.exists()) {
					fileToDelete_tFileOutputDelimited_9.delete();
				}
				outtFileOutputDelimited_9 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_9, false), "UTF-8"));
				if (filetFileOutputDelimited_9.length() == 0) {
					outtFileOutputDelimited_9.write("Nom_operation");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("inclus_operation");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Date_lancement");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("NO_DOSFACT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ID_DOSCLIE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CIVILITE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("NOM_CLIENT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("PRENOM_CLIENT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ON_PSEUCLI");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("LOYER_CHARGE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("DECOHABITANT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("NO_SITUATION");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("LIB_SITUATION");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("DATE_SITUATION");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("REF_PATRIM");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CD_PATRIM1");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CD_PATRIM2");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CD_PATRIM3");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CD_PATRIM4");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Groupe");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Batiment");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ETAGE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Nature");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("statut_enquete");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("DEMENAGEMENT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("Sous_Nature");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("ADRESSE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("CP");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("VILLE");
					outtFileOutputDelimited_9.write(OUT_DELIM_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.write("cpt_total");
					outtFileOutputDelimited_9.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);
					outtFileOutputDelimited_9.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_9", outtFileOutputDelimited_9);
				resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_9", isFileGenerated_tFileOutputDelimited_9);
				resourceMap.put("filetFileOutputDelimited_9", filetFileOutputDelimited_9);

				/**
				 * [tFileOutputDelimited_9 begin ] stop
				 */

				/**
				 * [tReplicate_2 begin ] start
				 */

				ok_Hash.put("tReplicate_2", false);
				start_Hash.put("tReplicate_2", System.currentTimeMillis());

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out10");
				}

				int tos_count_tReplicate_2 = 0;

				/**
				 * [tReplicate_2 begin ] stop
				 */

				/**
				 * [tMap_5 begin ] start
				 */

				ok_Hash.put("tMap_5", false);
				start_Hash.put("tMap_5", System.currentTimeMillis());

				currentComponent = "tMap_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row20");
				}

				int tos_count_tMap_5 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) globalMap
						.get("tHash_Lookup_row21"));

				row21Struct row21HashKey = new row21Struct();
				row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_5__Struct {
				}
				Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out10Struct out10_tmp = new out10Struct();
// ###############################

				/**
				 * [tMap_5 begin ] stop
				 */

				/**
				 * [tDBInput_4 begin ] start
				 */

				ok_Hash.put("tDBInput_4", false);
				start_Hash.put("tDBInput_4", System.currentTimeMillis());

				currentComponent = "tDBInput_4";

				int tos_count_tDBInput_4 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_4 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4);
				int nb_line_tDBInput_4 = 0;
				java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_4 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

				String dbquery_tDBInput_4 = "\nSELECT distinct\n	replace(df.NO_DOSFACT,';','') as NO_DOSFACT ,\n	df.ID_DOSCLIE,\n	replace(d.LB_POLITES,';','')as CIV"
						+ "ILITE,\n	replace(upper(d.NOM_CLIENT),';','') as NOM_CLIENT,\n	replace(d.PRE_CLIENT,';','') as PRENOM_CLIENT,\n	d.ON_PSEU"
						+ "CLI,\n	pg.MT_TOTRUB as LOYER_CHARGE,\n    1 AS Cpt_nbre_patrim,\n	act.NO_SIT as NO_SITUATION,\n	act.LB_SITREP as LIB_SIT"
						+ "UATION,\n	act.DT_CREASIT as DATE_SITUATION,\n	pg.CD_PATRIM as REF_PATRIM,\n	pg.CD_PATRIM1 as CD_PATRIM1,\n	pg.CD_PATRIM2"
						+ " as CD_PATRIM2,\n	pg.CD_PATRIM3 as CD_PATRIM3,\n	pg.CD_PATRIM4 as CD_PATRIM4,\n	LB_PATRIM1 as Groupe,\n	LB_PATRIM2 as  B"
						+ "atiment,\n	NIV_ETAGE as ETAGE,	\nCASE \n		WHEN LB_NATLOC = 'PARKING' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'PARKIN"
						+ "G LIBRE' 	THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'GARAGE' 			THEN 'STATIONNEMENT'\n		WHEN LB_NATLOC = 'COMMERCE' 		THE"
						+ "N 'COMMERCE'\n		WHEN LB_NATLOC in ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON') THEN 'LOGEME"
						+ "NT'\n		ELSE LB_NATLOC\n	END  AS Nature,\nCASE \n		WHEN d.ON_PSEUCLI ='N' and (act.NO_SIT in('69000','69001','69002','690"
						+ "05') or act.NO_SIT is null) and c2.NO_SIT is null	THEN 'A REALISER'\n		WHEN d.ON_PSEUCLI ='N' and act.NO_SIT in('69010',"
						+ "'69012','69013','69015','69017')	THEN 'EN COURS'\n		WHEN d.ON_PSEUCLI ='O' THEN 'REALISE'\n		ELSE 'A VERIFIER'\n	END AS "
						+ "Statut_enquete,\nCASE \n		WHEN c2.NO_SIT is null	THEN 'NON'\n		WHEN c2.NO_SIT is not null	THEN 'OUI'\n		ELSE 'A VERIFIER"
						+ "'\nEND as DEMENAGEMENT,\n	1 as COUT_DEMENAGEMENT,\n    LB_NATLOC  as Sous_Nature,\n	pg.LB_PATRIM3 as ADRESSE,\n	pg.ADRPA"
						+ "_CP as CP,\n    pg.ADRPA_LOC as VILLE,\n	(select count(*) from \n					(select distinct pg.CD_PATRIM from \n												D"
						+ "OSS_FACT df\n												left join DOSS_CLIEN d on df.ID_DOSCLIE = d.ID_DOSCLIE\n												left join PATRIMOINE_GIM pg"
						+ " on df.CD_PATRIM1 = pg.CD_PATRIM1 \n																		and df.CD_PATRIM2 = pg.CD_PATRIM2\n																		and df.CD_PAT"
						+ "RIM3 = pg.CD_PATRIM3\n																		and df.CD_PATRIM4 = pg.CD_PATRIM4\n												left join (select * from CONTENTI"
						+ "EUX c\n														   where NO_SIT like '69%' \n														   and CD_ETAT_CTX = 'O' \n														   and LB_PROC "
						+ "<> 'A NE PLUS UTILISER'\n														   and c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE\n														  					from "
						+ "CONTENTIEUX cc\n														   					where NO_SIT like '69%' \n														   					and CD_ETAT_CTX = 'O' \n										"
						+ "				  					and LB_PROC <> 'A NE PLUS UTILISER'\n														   					and c.ID_DOSCLIE = cc.ID_DOSCLIE)) act on act.NO_D"
						+ "OSFACT = df.NO_DOSFACT \n												left join PAT_CONTRA pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n																		and pc"
						+ ".CD_PATRIM2 =df.CD_PATRIM2 \n																		and pc.CD_PATRIM3 =df.CD_PATRIM3 \n																		and pc.CD_PATRIM4 =d"
						+ "f.CD_PATRIM4  \n																		and df.NO_DOSFACT = pc.NO_DOSFACT							\n																		and pc.LB_ET_DTD in('Prése"
						+ "nt','Affectation validée')\n																		and pc.LB_ET_DTF = 'Présent'\n												WHERE pg.CD_SOCPROP IN (1,6)\n		"
						+ "										AND pg.CD_PATRIM4 <> 0\n												AND LB_NATLOC In ('COMMERCE','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','"
						+ "LOGEMENT CIAL.','PAVILLON')\n												AND CD_ETAT = 'MS'\n												AND CD_ETAT_DF ='E'\n												AND pc.LB_ET_D"
						+ "TF = 'Présent'\n																	 ) a\n	) as cpt_total\n	from \n	DOSS_FACT df\n	left join DOSS_CLIEN d on df.ID_DOSCLIE "
						+ "= d.ID_DOSCLIE\n	left join PATRIMOINE_GIM pg on df.CD_PATRIM1 = pg.CD_PATRIM1 \n							and df.CD_PATRIM2 = pg.CD_PATRIM2"
						+ "\n							and df.CD_PATRIM3 = pg.CD_PATRIM3\n							and df.CD_PATRIM4 = pg.CD_PATRIM4\n	left join (select * from CONTENTI"
						+ "EUX c\n			   where NO_SIT like '69%' \n			   and CD_ETAT_CTX = 'O' \n			   and LB_PROC <> 'A NE PLUS UTILISER'\n			   an"
						+ "d c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE\n			  					from CONTENTIEUX cc\n			   					where NO_SIT like '69%' \n		"
						+ "	   					and CD_ETAT_CTX = 'O' \n			  					and LB_PROC <> 'A NE PLUS UTILISER'\n			   					and c.ID_DOSCLIE = cc.ID_DOSC"
						+ "LIE)) act on act.NO_DOSFACT = df.NO_DOSFACT \n	left join PAT_CONTRA pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n							and pc."
						+ "CD_PATRIM2 =df.CD_PATRIM2 \n							and pc.CD_PATRIM3 =df.CD_PATRIM3 \n							and pc.CD_PATRIM4 =df.CD_PATRIM4  \n							"
						+ "and df.NO_DOSFACT = pc.NO_DOSFACT							\n							and pc.LB_ET_DTD in('Présent','Affectation validée')\n							and pc.LB_"
						+ "ET_DTF = 'Présent'\n	left join (select * from CONTENTIEUX c where NO_SIT in ('69045','69050') and CD_ETAT_CTX = 'O' and "
						+ "LB_PROC <> 'A NE PLUS UTILISER') c2\n								on c2.CD_PATRIM1 =df.CD_PATRIM1 \n								and c2.CD_PATRIM2 =df.CD_PATRIM2 "
						+ "\n								and c2.CD_PATRIM3 =df.CD_PATRIM3 \n								and c2.CD_PATRIM4 =df.CD_PATRIM4 \nWHERE pg.CD_SOCPROP IN (1,6)\nAN"
						+ "D pg.CD_PATRIM4 <> 0\nAND LB_NATLOC In ('COMMERCE','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLO"
						+ "N')\nAND CD_ETAT = 'MS'\nAND CD_ETAT_DF ='E'\nAND pc.LB_ET_DTF = 'Présent'\n";

				globalMap.put("tDBInput_4_QUERY", dbquery_tDBInput_4);
				java.sql.ResultSet rs_tDBInput_4 = null;

				try {
					rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
					java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
					int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

					String tmpContent_tDBInput_4 = null;

					while (rs_tDBInput_4.next()) {
						nb_line_tDBInput_4++;

						if (colQtyInRs_tDBInput_4 < 1) {
							row20.NO_DOSFACT = null;
						} else {

							row20.NO_DOSFACT = rs_tDBInput_4.getInt(1);
							if (rs_tDBInput_4.wasNull()) {
								row20.NO_DOSFACT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 2) {
							row20.ID_DOSCLIE = null;
						} else {

							row20.ID_DOSCLIE = rs_tDBInput_4.getInt(2);
							if (rs_tDBInput_4.wasNull()) {
								row20.ID_DOSCLIE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 3) {
							row20.CIVILITE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.CIVILITE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.CIVILITE = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.CIVILITE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 4) {
							row20.NOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(4);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.NOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.NOM_CLIENT = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.NOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 5) {
							row20.PRENOM_CLIENT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(5);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.PRENOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.PRENOM_CLIENT = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.PRENOM_CLIENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 6) {
							row20.ON_PSEUCLI = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(6);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ON_PSEUCLI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.ON_PSEUCLI = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.ON_PSEUCLI = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 7) {
							row20.LOYER_CHARGE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(7);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LOYER_CHARGE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.LOYER_CHARGE = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.LOYER_CHARGE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 8) {
							row20.Cpt_nbre_patrim = null;
						} else {

							row20.Cpt_nbre_patrim = rs_tDBInput_4.getInt(8);
							if (rs_tDBInput_4.wasNull()) {
								row20.Cpt_nbre_patrim = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 9) {
							row20.NO_SITUATION = null;
						} else {

							row20.NO_SITUATION = rs_tDBInput_4.getInt(9);
							if (rs_tDBInput_4.wasNull()) {
								row20.NO_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 10) {
							row20.LIB_SITUATION = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(10);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.LIB_SITUATION = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.LIB_SITUATION = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.LIB_SITUATION = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 11) {
							row20.DATE_SITUATION = null;
						} else {

							row20.DATE_SITUATION = mssqlGTU_tDBInput_4.getDate(rsmd_tDBInput_4, rs_tDBInput_4, 11);

						}
						if (colQtyInRs_tDBInput_4 < 12) {
							row20.REF_PATRIM = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(12);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.REF_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.REF_PATRIM = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.REF_PATRIM = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 13) {
							row20.CD_PATRIM1 = null;
						} else {

							row20.CD_PATRIM1 = rs_tDBInput_4.getInt(13);
							if (rs_tDBInput_4.wasNull()) {
								row20.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 14) {
							row20.CD_PATRIM2 = null;
						} else {

							row20.CD_PATRIM2 = rs_tDBInput_4.getInt(14);
							if (rs_tDBInput_4.wasNull()) {
								row20.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 15) {
							row20.CD_PATRIM3 = null;
						} else {

							row20.CD_PATRIM3 = rs_tDBInput_4.getInt(15);
							if (rs_tDBInput_4.wasNull()) {
								row20.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 16) {
							row20.CD_PATRIM4 = null;
						} else {

							row20.CD_PATRIM4 = rs_tDBInput_4.getInt(16);
							if (rs_tDBInput_4.wasNull()) {
								row20.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 17) {
							row20.Groupe = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(17);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(17).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.Groupe = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.Groupe = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 18) {
							row20.Batiment = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(18);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(18).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.Batiment = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.Batiment = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.Batiment = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 19) {
							row20.ETAGE = null;
						} else {

							row20.ETAGE = rs_tDBInput_4.getInt(19);
							if (rs_tDBInput_4.wasNull()) {
								row20.ETAGE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 20) {
							row20.Nature = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(20);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(20).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.Nature = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 21) {
							row20.statut_enquete = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(21);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(21).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.statut_enquete = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.statut_enquete = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.statut_enquete = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 22) {
							row20.DEMENAGEMENT = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(22);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(22).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.DEMENAGEMENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.DEMENAGEMENT = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 23) {
							row20.COUT_DEMENAGEMENT = null;
						} else {

							row20.COUT_DEMENAGEMENT = rs_tDBInput_4.getFloat(23);
							if (rs_tDBInput_4.wasNull()) {
								row20.COUT_DEMENAGEMENT = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 24) {
							row20.Sous_Nature = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(24);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(24).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.Sous_Nature = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.Sous_Nature = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.Sous_Nature = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 25) {
							row20.ADRESSE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(25);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(25).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.ADRESSE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.ADRESSE = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.ADRESSE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 26) {
							row20.CP = null;
						} else {

							row20.CP = rs_tDBInput_4.getInt(26);
							if (rs_tDBInput_4.wasNull()) {
								row20.CP = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 27) {
							row20.VILLE = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(27);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(27).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.VILLE = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.VILLE = null;
							}
						}
						if (colQtyInRs_tDBInput_4 < 28) {
							row20.cpt_total = null;
						} else {

							tmpContent_tDBInput_4 = rs_tDBInput_4.getString(28);
							if (tmpContent_tDBInput_4 != null) {
								if (talendToDBList_tDBInput_4.contains(
										rsmd_tDBInput_4.getColumnTypeName(28).toUpperCase(java.util.Locale.ENGLISH))) {
									row20.cpt_total = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
								} else {
									row20.cpt_total = tmpContent_tDBInput_4.trim();
								}
							} else {
								row20.cpt_total = null;
							}
						}

						/**
						 * [tDBInput_4 begin ] stop
						 */

						/**
						 * [tDBInput_4 main ] start
						 */

						currentComponent = "tDBInput_4";

						tos_count_tDBInput_4++;

						/**
						 * [tDBInput_4 main ] stop
						 */

						/**
						 * [tDBInput_4 process_data_begin ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_begin ] stop
						 */

						/**
						 * [tMap_5 main ] start
						 */

						currentComponent = "tMap_5";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row20");
						}

						boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_5 = false;
						boolean mainRowRejected_tMap_5 = false;

						///////////////////////////////////////////////
						// Starting Lookup Table "row21"
						///////////////////////////////////////////////

						boolean forceLooprow21 = false;

						row21Struct row21ObjectFromLookup = null;

						if (!rejectedInnerJoin_tMap_5) { // G_TM_M_020

							hasCasePrimitiveKeyWithNull_tMap_5 = false;

							row21HashKey.NO_DOSFACT = row20.NO_DOSFACT;

							row21HashKey.ID_DOSCLIE = row20.ID_DOSCLIE;

							row21HashKey.hashCodeDirty = true;

							tHash_Lookup_row21.lookup(row21HashKey);

						} // G_TM_M_020

						if (tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071

							// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
							// 'row21' and it contains more one result from keys : row21.NO_DOSFACT = '" +
							// row21HashKey.NO_DOSFACT + "', row21.ID_DOSCLIE = '" + row21HashKey.ID_DOSCLIE
							// + "'");
						} // G 071

						row21Struct row21 = null;

						row21Struct fromLookup_row21 = null;
						row21 = row21Default;

						if (tHash_Lookup_row21 != null && tHash_Lookup_row21.hasNext()) { // G 099

							fromLookup_row21 = tHash_Lookup_row21.next();

						} // G 099

						if (fromLookup_row21 != null) {
							row21 = fromLookup_row21;
						}

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
							// ###############################
							// # Output tables

							out10 = null;

// # Output table : 'out10'
							out10_tmp.Nom_operation = row21.Nom_operation;
							out10_tmp.inclus_operation = row21.inclus_operation;
							out10_tmp.Date_lancement = row21.Date_lancement;
							out10_tmp.NO_DOSFACT = row20.NO_DOSFACT;
							out10_tmp.ID_DOSCLIE = row20.ID_DOSCLIE;
							out10_tmp.CIVILITE = row20.CIVILITE;
							out10_tmp.NOM_CLIENT = row20.NOM_CLIENT;
							out10_tmp.PRENOM_CLIENT = row20.PRENOM_CLIENT;
							out10_tmp.ON_PSEUCLI = row20.ON_PSEUCLI;
							out10_tmp.LOYER_CHARGE = row20.LOYER_CHARGE;
							out10_tmp.Cpt_nbre_patrim = row20.Cpt_nbre_patrim;
							out10_tmp.DECOHABITANT = row21.DECOHABITANT;
							out10_tmp.NO_SITUATION = row20.NO_SITUATION;
							out10_tmp.LIB_SITUATION = row20.LIB_SITUATION;
							out10_tmp.DATE_SITUATION = row20.DATE_SITUATION;
							out10_tmp.REF_PATRIM = row20.REF_PATRIM;
							out10_tmp.CD_PATRIM1 = row20.CD_PATRIM1;
							out10_tmp.CD_PATRIM2 = row20.CD_PATRIM2;
							out10_tmp.CD_PATRIM3 = row20.CD_PATRIM3;
							out10_tmp.CD_PATRIM4 = row20.CD_PATRIM4;
							out10_tmp.Groupe = row20.Groupe;
							out10_tmp.Batiment = row20.Batiment;
							out10_tmp.ETAGE = row20.ETAGE;
							out10_tmp.Nature = row20.Nature;
							out10_tmp.statut_enquete = row20.statut_enquete;
							out10_tmp.DEMENAGEMENT = row20.DEMENAGEMENT;
							out10_tmp.COUT_DEMENAGEMENT = row20.COUT_DEMENAGEMENT;
							out10_tmp.Sous_Nature = row20.Sous_Nature;
							out10_tmp.ADRESSE = row20.ADRESSE;
							out10_tmp.CP = row20.CP;
							out10_tmp.VILLE = row20.VILLE;
							out10_tmp.cpt_total = row20.cpt_total;
							out10 = out10_tmp;
// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_5 = false;

						tos_count_tMap_5++;

						/**
						 * [tMap_5 main ] stop
						 */

						/**
						 * [tMap_5 process_data_begin ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_begin ] stop
						 */
// Start of branch "out10"
						if (out10 != null) {

							/**
							 * [tReplicate_2 main ] start
							 */

							currentComponent = "tReplicate_2";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "out10");
							}

							row22 = new row22Struct();

							row22.Nom_operation = out10.Nom_operation;
							row22.inclus_operation = out10.inclus_operation;
							row22.Date_lancement = out10.Date_lancement;
							row22.NO_DOSFACT = out10.NO_DOSFACT;
							row22.ID_DOSCLIE = out10.ID_DOSCLIE;
							row22.CIVILITE = out10.CIVILITE;
							row22.NOM_CLIENT = out10.NOM_CLIENT;
							row22.PRENOM_CLIENT = out10.PRENOM_CLIENT;
							row22.ON_PSEUCLI = out10.ON_PSEUCLI;
							row22.LOYER_CHARGE = out10.LOYER_CHARGE;
							row22.Cpt_nbre_patrim = out10.Cpt_nbre_patrim;
							row22.DECOHABITANT = out10.DECOHABITANT;
							row22.NO_SITUATION = out10.NO_SITUATION;
							row22.LIB_SITUATION = out10.LIB_SITUATION;
							row22.DATE_SITUATION = out10.DATE_SITUATION;
							row22.REF_PATRIM = out10.REF_PATRIM;
							row22.CD_PATRIM1 = out10.CD_PATRIM1;
							row22.CD_PATRIM2 = out10.CD_PATRIM2;
							row22.CD_PATRIM3 = out10.CD_PATRIM3;
							row22.CD_PATRIM4 = out10.CD_PATRIM4;
							row22.Groupe = out10.Groupe;
							row22.Batiment = out10.Batiment;
							row22.ETAGE = out10.ETAGE;
							row22.Nature = out10.Nature;
							row22.statut_enquete = out10.statut_enquete;
							row22.DEMENAGEMENT = out10.DEMENAGEMENT;
							row22.COUT_DEMENAGEMENT = out10.COUT_DEMENAGEMENT;
							row22.Sous_Nature = out10.Sous_Nature;
							row22.ADRESSE = out10.ADRESSE;
							row22.CP = out10.CP;
							row22.VILLE = out10.VILLE;
							row22.cpt_total = out10.cpt_total;
							row23 = new row23Struct();

							row23.Nom_operation = out10.Nom_operation;
							row23.inclus_operation = out10.inclus_operation;
							row23.Date_lancement = out10.Date_lancement;
							row23.NO_DOSFACT = out10.NO_DOSFACT;
							row23.ID_DOSCLIE = out10.ID_DOSCLIE;
							row23.CIVILITE = out10.CIVILITE;
							row23.NOM_CLIENT = out10.NOM_CLIENT;
							row23.PRENOM_CLIENT = out10.PRENOM_CLIENT;
							row23.ON_PSEUCLI = out10.ON_PSEUCLI;
							row23.LOYER_CHARGE = out10.LOYER_CHARGE;
							row23.Cpt_nbre_patrim = out10.Cpt_nbre_patrim;
							row23.DECOHABITANT = out10.DECOHABITANT;
							row23.NO_SITUATION = out10.NO_SITUATION;
							row23.LIB_SITUATION = out10.LIB_SITUATION;
							row23.DATE_SITUATION = out10.DATE_SITUATION;
							row23.REF_PATRIM = out10.REF_PATRIM;
							row23.CD_PATRIM1 = out10.CD_PATRIM1;
							row23.CD_PATRIM2 = out10.CD_PATRIM2;
							row23.CD_PATRIM3 = out10.CD_PATRIM3;
							row23.CD_PATRIM4 = out10.CD_PATRIM4;
							row23.Groupe = out10.Groupe;
							row23.Batiment = out10.Batiment;
							row23.ETAGE = out10.ETAGE;
							row23.Nature = out10.Nature;
							row23.statut_enquete = out10.statut_enquete;
							row23.DEMENAGEMENT = out10.DEMENAGEMENT;
							row23.COUT_DEMENAGEMENT = out10.COUT_DEMENAGEMENT;
							row23.Sous_Nature = out10.Sous_Nature;
							row23.ADRESSE = out10.ADRESSE;
							row23.CP = out10.CP;
							row23.VILLE = out10.VILLE;
							row23.cpt_total = out10.cpt_total;

							tos_count_tReplicate_2++;

							/**
							 * [tReplicate_2 main ] stop
							 */

							/**
							 * [tReplicate_2 process_data_begin ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_begin ] stop
							 */

							/**
							 * [tMap_4 main ] start
							 */

							currentComponent = "tMap_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row22");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_4 = false;
							boolean mainRowRejected_tMap_4 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row26"
							///////////////////////////////////////////////

							boolean forceLooprow26 = false;

							row26Struct row26ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_4 = false;

								row26HashKey.CD_PATRIM1 = row22.CD_PATRIM1;

								row26HashKey.CD_PATRIM2 = row22.CD_PATRIM2;

								row26HashKey.CD_PATRIM3 = row22.CD_PATRIM3;

								row26HashKey.CD_PATRIM4 = row22.CD_PATRIM4;

								row26HashKey.hashCodeDirty = true;

								tHash_Lookup_row26.lookup(row26HashKey);

								if (!tHash_Lookup_row26.hasNext()) { // G_TM_M_090

									rejectedInnerJoin_tMap_4 = true;

									forceLooprow26 = true;

								} // G_TM_M_090

							} // G_TM_M_020

							else { // G 20 - G 21
								forceLooprow26 = true;
							} // G 21

							row26Struct row26 = null;

							while ((tHash_Lookup_row26 != null && tHash_Lookup_row26.hasNext()) || forceLooprow26) { // G_TM_M_043

								// CALL close loop of lookup 'row26'

								row26Struct fromLookup_row26 = null;
								row26 = row26Default;

								if (!forceLooprow26) { // G 46

									fromLookup_row26 = tHash_Lookup_row26.next();

									if (fromLookup_row26 != null) {
										row26 = fromLookup_row26;
									}

								} // G 46

								forceLooprow26 = false;

								// ###############################
								{ // start of Var scope

									// ###############################
									// # Vars tables

									Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
									// ###############################
									// # Output tables

									out4 = null;

									if (!rejectedInnerJoin_tMap_4) {

// # Output table : 'out4'
										out4_tmp.CD_PATRIM1 = row22.CD_PATRIM1;
										out4_tmp.CD_PATRIM2 = row22.CD_PATRIM2;
										out4_tmp.CD_PATRIM3 = row22.CD_PATRIM3;
										out4_tmp.CD_PATRIM4 = row22.CD_PATRIM4;
										out4_tmp.Montant = row26.Montant;
										out4_tmp.Date_lancement = row22.Date_lancement;
										out4_tmp.date_solde = row26.date_solde;
										out4 = out4_tmp;
									} // closing inner join bracket (2)
// ###############################

								} // end of Var scope

								rejectedInnerJoin_tMap_4 = false;

								tos_count_tMap_4++;

								/**
								 * [tMap_4 main ] stop
								 */

								/**
								 * [tMap_4 process_data_begin ] start
								 */

								currentComponent = "tMap_4";

								/**
								 * [tMap_4 process_data_begin ] stop
								 */
// Start of branch "out4"
								if (out4 != null) {

									/**
									 * [tDBOutput_1 main ] start
									 */

									currentComponent = "tDBOutput_1";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "out4");
									}

									whetherReject_tDBOutput_1 = false;
									if (out4.CD_PATRIM1 == null) {
										pstmt_tDBOutput_1.setNull(1, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(1, out4.CD_PATRIM1);
									}

									if (out4.CD_PATRIM2 == null) {
										pstmt_tDBOutput_1.setNull(2, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(2, out4.CD_PATRIM2);
									}

									if (out4.CD_PATRIM3 == null) {
										pstmt_tDBOutput_1.setNull(3, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(3, out4.CD_PATRIM3);
									}

									if (out4.CD_PATRIM4 == null) {
										pstmt_tDBOutput_1.setNull(4, java.sql.Types.INTEGER);
									} else {
										pstmt_tDBOutput_1.setInt(4, out4.CD_PATRIM4);
									}

									if (out4.Montant == null) {
										pstmt_tDBOutput_1.setNull(5, java.sql.Types.FLOAT);
									} else {
										pstmt_tDBOutput_1.setFloat(5, out4.Montant);
									}

									if (out4.Date_lancement != null) {
										pstmt_tDBOutput_1.setTimestamp(6,
												new java.sql.Timestamp(out4.Date_lancement.getTime()));
									} else {
										pstmt_tDBOutput_1.setNull(6, java.sql.Types.DATE);
									}

									if (out4.date_solde != null) {
										pstmt_tDBOutput_1.setTimestamp(7,
												new java.sql.Timestamp(out4.date_solde.getTime()));
									} else {
										pstmt_tDBOutput_1.setNull(7, java.sql.Types.DATE);
									}

									pstmt_tDBOutput_1.addBatch();
									nb_line_tDBOutput_1++;

									batchSizeCounter_tDBOutput_1++;

									////////// batch execute by batch size///////
									class LimitBytesHelper_tDBOutput_1 {
										public int limitBytePart1(int counter,
												java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
											try {

												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
														break;
													}
													counter += countEach_tDBOutput_1;
												}

											} catch (java.sql.BatchUpdateException e) {

												int countSum_tDBOutput_1 = 0;
												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
												}

												System.err.println(e.getMessage());

											}
											return counter;
										}

										public int limitBytePart2(int counter,
												java.sql.PreparedStatement pstmt_tDBOutput_1) throws Exception {
											try {

												for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
													if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
														break;
													}
													counter += countEach_tDBOutput_1;
												}

											} catch (java.sql.BatchUpdateException e) {

												for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
													counter += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
												}

												System.err.println(e.getMessage());

											}
											return counter;
										}
									}
									if ((batchSize_tDBOutput_1 > 0)
											&& (batchSize_tDBOutput_1 <= batchSizeCounter_tDBOutput_1)) {

										insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1()
												.limitBytePart1(insertedCount_tDBOutput_1, pstmt_tDBOutput_1);

										batchSizeCounter_tDBOutput_1 = 0;
									}

									//////////// commit every////////////

									commitCounter_tDBOutput_1++;
									if (commitEvery_tDBOutput_1 <= commitCounter_tDBOutput_1) {
										if ((batchSize_tDBOutput_1 > 0) && (batchSizeCounter_tDBOutput_1 > 0)) {

											insertedCount_tDBOutput_1 = new LimitBytesHelper_tDBOutput_1()
													.limitBytePart1(insertedCount_tDBOutput_1, pstmt_tDBOutput_1);

											batchSizeCounter_tDBOutput_1 = 0;
										}

										conn_tDBOutput_1.commit();

										commitCounter_tDBOutput_1 = 0;
									}

									tos_count_tDBOutput_1++;

									/**
									 * [tDBOutput_1 main ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_begin ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_begin ] stop
									 */

									/**
									 * [tDBOutput_1 process_data_end ] start
									 */

									currentComponent = "tDBOutput_1";

									/**
									 * [tDBOutput_1 process_data_end ] stop
									 */

								} // End of branch "out4"

							} // close loop of lookup 'row26' // G_TM_M_043

							/**
							 * [tMap_4 process_data_end ] start
							 */

							currentComponent = "tMap_4";

							/**
							 * [tMap_4 process_data_end ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 main ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row23");
							}

							StringBuilder sb_tFileOutputDelimited_9 = new StringBuilder();
							if (row23.Nom_operation != null) {
								sb_tFileOutputDelimited_9.append(row23.Nom_operation);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.inclus_operation != null) {
								sb_tFileOutputDelimited_9.append(row23.inclus_operation);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Date_lancement != null) {
								sb_tFileOutputDelimited_9
										.append(FormatterUtils.format_Date(row23.Date_lancement, "dd/MM/yyyy"));
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.NO_DOSFACT != null) {
								sb_tFileOutputDelimited_9.append(row23.NO_DOSFACT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.ID_DOSCLIE != null) {
								sb_tFileOutputDelimited_9.append(row23.ID_DOSCLIE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CIVILITE != null) {
								sb_tFileOutputDelimited_9.append(row23.CIVILITE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.NOM_CLIENT != null) {
								sb_tFileOutputDelimited_9.append(row23.NOM_CLIENT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.PRENOM_CLIENT != null) {
								sb_tFileOutputDelimited_9.append(row23.PRENOM_CLIENT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.ON_PSEUCLI != null) {
								sb_tFileOutputDelimited_9.append(row23.ON_PSEUCLI);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.LOYER_CHARGE != null) {
								sb_tFileOutputDelimited_9.append(row23.LOYER_CHARGE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Cpt_nbre_patrim != null) {
								sb_tFileOutputDelimited_9.append(row23.Cpt_nbre_patrim);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.DECOHABITANT != null) {
								sb_tFileOutputDelimited_9.append(row23.DECOHABITANT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.NO_SITUATION != null) {
								sb_tFileOutputDelimited_9.append(row23.NO_SITUATION);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.LIB_SITUATION != null) {
								sb_tFileOutputDelimited_9.append(row23.LIB_SITUATION);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.DATE_SITUATION != null) {
								sb_tFileOutputDelimited_9
										.append(FormatterUtils.format_Date(row23.DATE_SITUATION, "dd-MM-yyyy"));
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.REF_PATRIM != null) {
								sb_tFileOutputDelimited_9.append(row23.REF_PATRIM);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CD_PATRIM1 != null) {
								sb_tFileOutputDelimited_9.append(row23.CD_PATRIM1);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CD_PATRIM2 != null) {
								sb_tFileOutputDelimited_9.append(row23.CD_PATRIM2);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CD_PATRIM3 != null) {
								sb_tFileOutputDelimited_9.append(row23.CD_PATRIM3);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CD_PATRIM4 != null) {
								sb_tFileOutputDelimited_9.append(row23.CD_PATRIM4);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Groupe != null) {
								sb_tFileOutputDelimited_9.append(row23.Groupe);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Batiment != null) {
								sb_tFileOutputDelimited_9.append(row23.Batiment);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.ETAGE != null) {
								sb_tFileOutputDelimited_9.append(row23.ETAGE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Nature != null) {
								sb_tFileOutputDelimited_9.append(row23.Nature);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.statut_enquete != null) {
								sb_tFileOutputDelimited_9.append(row23.statut_enquete);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_9.append(row23.DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.COUT_DEMENAGEMENT != null) {
								sb_tFileOutputDelimited_9.append(row23.COUT_DEMENAGEMENT);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.Sous_Nature != null) {
								sb_tFileOutputDelimited_9.append(row23.Sous_Nature);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.ADRESSE != null) {
								sb_tFileOutputDelimited_9.append(row23.ADRESSE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.CP != null) {
								sb_tFileOutputDelimited_9.append(row23.CP);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.VILLE != null) {
								sb_tFileOutputDelimited_9.append(row23.VILLE);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_tFileOutputDelimited_9);
							if (row23.cpt_total != null) {
								sb_tFileOutputDelimited_9.append(row23.cpt_total);
							}
							sb_tFileOutputDelimited_9.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_9);

							nb_line_tFileOutputDelimited_9++;
							resourceMap.put("nb_line_tFileOutputDelimited_9", nb_line_tFileOutputDelimited_9);

							outtFileOutputDelimited_9.write(sb_tFileOutputDelimited_9.toString());

							tos_count_tFileOutputDelimited_9++;

							/**
							 * [tFileOutputDelimited_9 main ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 process_data_begin ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							/**
							 * [tFileOutputDelimited_9 process_data_begin ] stop
							 */

							/**
							 * [tFileOutputDelimited_9 process_data_end ] start
							 */

							currentComponent = "tFileOutputDelimited_9";

							/**
							 * [tFileOutputDelimited_9 process_data_end ] stop
							 */

							/**
							 * [tReplicate_2 process_data_end ] start
							 */

							currentComponent = "tReplicate_2";

							/**
							 * [tReplicate_2 process_data_end ] stop
							 */

						} // End of branch "out10"

						/**
						 * [tMap_5 process_data_end ] start
						 */

						currentComponent = "tMap_5";

						/**
						 * [tMap_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 process_data_end ] start
						 */

						currentComponent = "tDBInput_4";

						/**
						 * [tDBInput_4 process_data_end ] stop
						 */

						/**
						 * [tDBInput_4 end ] start
						 */

						currentComponent = "tDBInput_4";

					}
				} finally {
					if (rs_tDBInput_4 != null) {
						rs_tDBInput_4.close();
					}
					if (stmt_tDBInput_4 != null) {
						stmt_tDBInput_4.close();
					}
				}
				globalMap.put("tDBInput_4_NB_LINE", nb_line_tDBInput_4);

				ok_Hash.put("tDBInput_4", true);
				end_Hash.put("tDBInput_4", System.currentTimeMillis());

				/**
				 * [tDBInput_4 end ] stop
				 */

				/**
				 * [tMap_5 end ] start
				 */

				currentComponent = "tMap_5";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row21 != null) {
					tHash_Lookup_row21.endGet();
				}
				globalMap.remove("tHash_Lookup_row21");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row20");
				}

				ok_Hash.put("tMap_5", true);
				end_Hash.put("tMap_5", System.currentTimeMillis());

				/**
				 * [tMap_5 end ] stop
				 */

				/**
				 * [tReplicate_2 end ] start
				 */

				currentComponent = "tReplicate_2";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out10");
				}

				ok_Hash.put("tReplicate_2", true);
				end_Hash.put("tReplicate_2", System.currentTimeMillis());

				/**
				 * [tReplicate_2 end ] stop
				 */

				/**
				 * [tMap_4 end ] start
				 */

				currentComponent = "tMap_4";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row26 != null) {
					tHash_Lookup_row26.endGet();
				}
				globalMap.remove("tHash_Lookup_row26");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row22");
				}

				ok_Hash.put("tMap_4", true);
				end_Hash.put("tMap_4", System.currentTimeMillis());

				/**
				 * [tMap_4 end ] stop
				 */

				/**
				 * [tDBOutput_1 end ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					int countSum_tDBOutput_1 = 0;
					if (pstmt_tDBOutput_1 != null && batchSizeCounter_tDBOutput_1 > 0) {

						for (int countEach_tDBOutput_1 : pstmt_tDBOutput_1.executeBatch()) {
							if (countEach_tDBOutput_1 == -2 || countEach_tDBOutput_1 == -3) {
								break;
							}
							countSum_tDBOutput_1 += countEach_tDBOutput_1;
						}

					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

				} catch (java.sql.BatchUpdateException e) {

					int countSum_tDBOutput_1 = 0;
					for (int countEach_tDBOutput_1 : e.getUpdateCounts()) {
						countSum_tDBOutput_1 += (countEach_tDBOutput_1 < 0 ? 0 : countEach_tDBOutput_1);
					}

					insertedCount_tDBOutput_1 += countSum_tDBOutput_1;

					System.err.println(e.getMessage());

				}
				if (pstmt_tDBOutput_1 != null) {

					pstmt_tDBOutput_1.close();
					resourceMap.remove("pstmt_tDBOutput_1");

				}
				resourceMap.put("statementClosed_tDBOutput_1", true);
				conn_tDBOutput_1.commit();

				conn_tDBOutput_1.close();
				resourceMap.put("finish_tDBOutput_1", true);

				nb_line_deleted_tDBOutput_1 = nb_line_deleted_tDBOutput_1 + deletedCount_tDBOutput_1;
				nb_line_update_tDBOutput_1 = nb_line_update_tDBOutput_1 + updatedCount_tDBOutput_1;
				nb_line_inserted_tDBOutput_1 = nb_line_inserted_tDBOutput_1 + insertedCount_tDBOutput_1;
				nb_line_rejected_tDBOutput_1 = nb_line_rejected_tDBOutput_1 + rejectedCount_tDBOutput_1;

				globalMap.put("tDBOutput_1_NB_LINE", nb_line_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_UPDATED", nb_line_update_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_INSERTED", nb_line_inserted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_DELETED", nb_line_deleted_tDBOutput_1);
				globalMap.put("tDBOutput_1_NB_LINE_REJECTED", nb_line_rejected_tDBOutput_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out4");
				}

				ok_Hash.put("tDBOutput_1", true);
				end_Hash.put("tDBOutput_1", System.currentTimeMillis());

				/**
				 * [tDBOutput_1 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 end ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (outtFileOutputDelimited_9 != null) {
					outtFileOutputDelimited_9.flush();
					outtFileOutputDelimited_9.close();
				}

				globalMap.put("tFileOutputDelimited_9_NB_LINE", nb_line_tFileOutputDelimited_9);
				globalMap.put("tFileOutputDelimited_9_FILE_NAME", fileName_tFileOutputDelimited_9);

				if (isFileGenerated_tFileOutputDelimited_9 && nb_line_tFileOutputDelimited_9 == 0) {

					filetFileOutputDelimited_9.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_9", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row23");
				}

				ok_Hash.put("tFileOutputDelimited_9", true);
				end_Hash.put("tFileOutputDelimited_9", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFileInputDelimited_3Process(globalMap);

				/**
				 * [tFileOutputDelimited_9 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_4"
			globalMap.remove("tHash_Lookup_row26");

			// free memory for "tMap_5"
			globalMap.remove("tHash_Lookup_row21");

			try {

				/**
				 * [tDBInput_4 finally ] start
				 */

				currentComponent = "tDBInput_4";

				/**
				 * [tDBInput_4 finally ] stop
				 */

				/**
				 * [tMap_5 finally ] start
				 */

				currentComponent = "tMap_5";

				/**
				 * [tMap_5 finally ] stop
				 */

				/**
				 * [tReplicate_2 finally ] start
				 */

				currentComponent = "tReplicate_2";

				/**
				 * [tReplicate_2 finally ] stop
				 */

				/**
				 * [tMap_4 finally ] start
				 */

				currentComponent = "tMap_4";

				/**
				 * [tMap_4 finally ] stop
				 */

				/**
				 * [tDBOutput_1 finally ] start
				 */

				currentComponent = "tDBOutput_1";

				try {
					if (resourceMap.get("statementClosed_tDBOutput_1") == null) {
						java.sql.PreparedStatement pstmtToClose_tDBOutput_1 = null;
						if ((pstmtToClose_tDBOutput_1 = (java.sql.PreparedStatement) resourceMap
								.remove("pstmt_tDBOutput_1")) != null) {
							pstmtToClose_tDBOutput_1.close();
						}
					}
				} finally {
					if (resourceMap.get("finish_tDBOutput_1") == null) {
						java.sql.Connection ctn_tDBOutput_1 = null;
						if ((ctn_tDBOutput_1 = (java.sql.Connection) resourceMap.get("conn_tDBOutput_1")) != null) {
							try {
								ctn_tDBOutput_1.close();
							} catch (java.sql.SQLException sqlEx_tDBOutput_1) {
								String errorMessage_tDBOutput_1 = "failed to close the connection in tDBOutput_1 :"
										+ sqlEx_tDBOutput_1.getMessage();
								System.err.println(errorMessage_tDBOutput_1);
							}
						}
					}
				}

				/**
				 * [tDBOutput_1 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_9 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_9";

				if (resourceMap.get("finish_tFileOutputDelimited_9") == null) {

					java.io.Writer outtFileOutputDelimited_9 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_9");
					if (outtFileOutputDelimited_9 != null) {
						outtFileOutputDelimited_9.flush();
						outtFileOutputDelimited_9.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_9")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_9"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_9")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_9 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}

	public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row25Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public String LOYER_CHARGE;

		public String getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					this.LOYER_CHARGE = readString(dis);

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// String

				writeString(this.LOYER_CHARGE, dos);

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + LOYER_CHARGE);
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(out5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row231Struct implements routines.system.IPersistableRow<row231Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row231Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class after_tFileInputDelimited_3Struct
			implements routines.system.IPersistableRow<after_tFileInputDelimited_3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String statut_enquete;

		public String getStatut_enquete() {
			return this.statut_enquete;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public Float COUT_DEMENAGEMENT;

		public Float getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public String cpt_total;

		public String getCpt_total() {
			return this.cpt_total;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.inclus_operation = readInteger(dis);

					this.Date_lancement = readDate(dis);

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

					this.CIVILITE = readString(dis);

					this.NOM_CLIENT = readString(dis);

					this.PRENOM_CLIENT = readString(dis);

					this.ON_PSEUCLI = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.LOYER_CHARGE = null;
					} else {
						this.LOYER_CHARGE = dis.readFloat();
					}

					this.Cpt_nbre_patrim = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

					this.NO_SITUATION = readInteger(dis);

					this.LIB_SITUATION = readString(dis);

					this.DATE_SITUATION = readDate(dis);

					this.REF_PATRIM = readString(dis);

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

					this.Groupe = readString(dis);

					this.Batiment = readString(dis);

					this.ETAGE = readInteger(dis);

					this.Nature = readString(dis);

					this.statut_enquete = readString(dis);

					this.DEMENAGEMENT = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.COUT_DEMENAGEMENT = null;
					} else {
						this.COUT_DEMENAGEMENT = dis.readFloat();
					}

					this.Sous_Nature = readString(dis);

					this.ADRESSE = readString(dis);

					this.CP = readInteger(dis);

					this.VILLE = readString(dis);

					this.cpt_total = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// Integer

				writeInteger(this.inclus_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

				// String

				writeString(this.CIVILITE, dos);

				// String

				writeString(this.NOM_CLIENT, dos);

				// String

				writeString(this.PRENOM_CLIENT, dos);

				// String

				writeString(this.ON_PSEUCLI, dos);

				// Float

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				// Integer

				writeInteger(this.Cpt_nbre_patrim, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

				// Integer

				writeInteger(this.NO_SITUATION, dos);

				// String

				writeString(this.LIB_SITUATION, dos);

				// java.util.Date

				writeDate(this.DATE_SITUATION, dos);

				// String

				writeString(this.REF_PATRIM, dos);

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

				// String

				writeString(this.Groupe, dos);

				// String

				writeString(this.Batiment, dos);

				// Integer

				writeInteger(this.ETAGE, dos);

				// String

				writeString(this.Nature, dos);

				// String

				writeString(this.statut_enquete, dos);

				// String

				writeString(this.DEMENAGEMENT, dos);

				// Float

				if (this.COUT_DEMENAGEMENT == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.COUT_DEMENAGEMENT);
				}

				// String

				writeString(this.Sous_Nature, dos);

				// String

				writeString(this.ADRESSE, dos);

				// Integer

				writeInteger(this.CP, dos);

				// String

				writeString(this.VILLE, dos);

				// String

				writeString(this.cpt_total, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",statut_enquete=" + statut_enquete);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + String.valueOf(COUT_DEMENAGEMENT));
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",cpt_total=" + cpt_total);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(after_tFileInputDelimited_3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				tDBInput_7Process(globalMap);

				row231Struct row231 = new row231Struct();
				out5Struct out5 = new out5Struct();
				row25Struct row25 = new row25Struct();

				/**
				 * [tFileOutputDelimited_8 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_8", false);
				start_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_8";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row25");
				}

				int tos_count_tFileOutputDelimited_8 = 0;

				String fileName_tFileOutputDelimited_8 = "";
				fileName_tFileOutputDelimited_8 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Brut_relogement.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_8 = null;
				String extension_tFileOutputDelimited_8 = null;
				String directory_tFileOutputDelimited_8 = null;
				if ((fileName_tFileOutputDelimited_8.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") < fileName_tFileOutputDelimited_8
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
							fileName_tFileOutputDelimited_8.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_8.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8.substring(0,
								fileName_tFileOutputDelimited_8.lastIndexOf("."));
						extension_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8
								.substring(fileName_tFileOutputDelimited_8.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_8 = fileName_tFileOutputDelimited_8;
						extension_tFileOutputDelimited_8 = "";
					}
					directory_tFileOutputDelimited_8 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_8 = true;
				java.io.File filetFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);
				int nb_line_tFileOutputDelimited_8 = 0;
				int splitedFileNo_tFileOutputDelimited_8 = 0;
				int currentRow_tFileOutputDelimited_8 = 0;

				final String OUT_DELIM_tFileOutputDelimited_8 = /** Start field tFileOutputDelimited_8:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_8:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_8 = /**
																		 * Start field
																		 * tFileOutputDelimited_8:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_8:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_8 != null && directory_tFileOutputDelimited_8.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_8 = new java.io.File(directory_tFileOutputDelimited_8);
					if (!dir_tFileOutputDelimited_8.exists()) {
						dir_tFileOutputDelimited_8.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_8 = null;

				java.io.File fileToDelete_tFileOutputDelimited_8 = new java.io.File(fileName_tFileOutputDelimited_8);
				if (fileToDelete_tFileOutputDelimited_8.exists()) {
					fileToDelete_tFileOutputDelimited_8.delete();
				}
				outtFileOutputDelimited_8 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_8, false), "UTF-8"));
				if (filetFileOutputDelimited_8.length() == 0) {
					outtFileOutputDelimited_8.write("Nom_operation");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("inclus_operation");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Date_lancement");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("NO_DOSFACT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("ID_DOSCLIE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CIVILITE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("NOM_CLIENT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("PRENOM_CLIENT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("ON_PSEUCLI");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("LOYER_CHARGE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Cpt_nbre_patrim");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("DECOHABITANT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("NO_SITUATION");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("LIB_SITUATION");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("DATE_SITUATION");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("REF_PATRIM");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CD_PATRIM1");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CD_PATRIM2");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CD_PATRIM3");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CD_PATRIM4");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Groupe");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Batiment");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("ETAGE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Nature");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("statut_enquete");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("DEMENAGEMENT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("COUT_DEMENAGEMENT");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("Sous_Nature");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("ADRESSE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("CP");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("VILLE");
					outtFileOutputDelimited_8.write(OUT_DELIM_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.write("cpt_total");
					outtFileOutputDelimited_8.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);
					outtFileOutputDelimited_8.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_8", outtFileOutputDelimited_8);
				resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_8", isFileGenerated_tFileOutputDelimited_8);
				resourceMap.put("filetFileOutputDelimited_8", filetFileOutputDelimited_8);

				/**
				 * [tFileOutputDelimited_8 begin ] stop
				 */

				/**
				 * [tReplace_2 begin ] start
				 */

				ok_Hash.put("tReplace_2", false);
				start_Hash.put("tReplace_2", System.currentTimeMillis());

				currentComponent = "tReplace_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "out5");
				}

				int tos_count_tReplace_2 = 0;

				int nb_line_tReplace_2 = 0;

				/**
				 * [tReplace_2 begin ] stop
				 */

				/**
				 * [tMap_6 begin ] start
				 */

				ok_Hash.put("tMap_6", false);
				start_Hash.put("tMap_6", System.currentTimeMillis());

				currentComponent = "tMap_6";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row231");
				}

				int tos_count_tMap_6 = 0;

// ###############################
// # Lookup's keys initialization

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) ((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct>) globalMap
						.get("tHash_Lookup_row24"));

				row24Struct row24HashKey = new row24Struct();
				row24Struct row24Default = new row24Struct();
// ###############################        

// ###############################
// # Vars initialization
				class Var__tMap_6__Struct {
				}
				Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
				out5Struct out5_tmp = new out5Struct();
// ###############################

				/**
				 * [tMap_6 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_3", false);
				start_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_3";

				int tos_count_tFileInputDelimited_3 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_3 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_3 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_3 = null;
				int limit_tFileInputDelimited_3 = -1;
				try {

					Object filename_tFileInputDelimited_3 = "S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Brut_relogement_tmp.csv";
					if (filename_tFileInputDelimited_3 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_3 = 0, random_value_tFileInputDelimited_3 = -1;
						if (footer_value_tFileInputDelimited_3 > 0 || random_value_tFileInputDelimited_3 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_3 = new org.talend.fileprocess.FileInputDelimited(
								"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Brut_relogement_tmp.csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_3, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_3 != null && fid_tFileInputDelimited_3.nextRecord()) {
						rowstate_tFileInputDelimited_3.reset();

						row231 = null;

						boolean whetherReject_tFileInputDelimited_3 = false;
						row231 = new row231Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_3 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_3 = 0;

							row231.Nom_operation = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 1;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.inclus_operation = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"inclus_operation", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.inclus_operation = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 2;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.Date_lancement = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Date_lancement", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.Date_lancement = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 3;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.NO_DOSFACT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NO_DOSFACT", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.NO_DOSFACT = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 4;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.ID_DOSCLIE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_DOSCLIE", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.ID_DOSCLIE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 5;

							row231.CIVILITE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 6;

							row231.NOM_CLIENT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 7;

							row231.PRENOM_CLIENT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 8;

							row231.ON_PSEUCLI = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 9;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.LOYER_CHARGE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"LOYER_CHARGE", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.LOYER_CHARGE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 10;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.Cpt_nbre_patrim = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cpt_nbre_patrim", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.Cpt_nbre_patrim = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 11;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.DECOHABITANT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DECOHABITANT", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.DECOHABITANT = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 12;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.NO_SITUATION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NO_SITUATION", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.NO_SITUATION = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 13;

							row231.LIB_SITUATION = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 14;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.DATE_SITUATION = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DATE_SITUATION", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.DATE_SITUATION = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 15;

							row231.REF_PATRIM = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 16;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.CD_PATRIM1 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM1", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.CD_PATRIM1 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 17;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.CD_PATRIM2 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM2", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.CD_PATRIM2 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 18;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.CD_PATRIM3 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM3", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.CD_PATRIM3 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 19;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.CD_PATRIM4 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM4", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.CD_PATRIM4 = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 20;

							row231.Groupe = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 21;

							row231.Batiment = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 22;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.ETAGE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ETAGE", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.ETAGE = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 23;

							row231.Nature = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 24;

							row231.statut_enquete = fid_tFileInputDelimited_3
									.get(columnIndexWithD_tFileInputDelimited_3).trim();

							columnIndexWithD_tFileInputDelimited_3 = 25;

							row231.DEMENAGEMENT = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 26;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.COUT_DEMENAGEMENT = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"COUT_DEMENAGEMENT", "row231", temp, ex_tFileInputDelimited_3),
											ex_tFileInputDelimited_3));
								}

							} else {

								row231.COUT_DEMENAGEMENT = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 27;

							row231.Sous_Nature = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 28;

							row231.ADRESSE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							columnIndexWithD_tFileInputDelimited_3 = 29;

							temp = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();
							if (temp.length() > 0) {

								try {

									row231.CP = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_3) {
									rowstate_tFileInputDelimited_3.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CP", "row231", temp, ex_tFileInputDelimited_3), ex_tFileInputDelimited_3));
								}

							} else {

								row231.CP = null;

							}

							columnIndexWithD_tFileInputDelimited_3 = 30;

							row231.VILLE = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3).trim();

							columnIndexWithD_tFileInputDelimited_3 = 31;

							row231.cpt_total = fid_tFileInputDelimited_3.get(columnIndexWithD_tFileInputDelimited_3)
									.trim();

							if (rowstate_tFileInputDelimited_3.getException() != null) {
								throw rowstate_tFileInputDelimited_3.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_3 = true;

							System.err.println(e.getMessage());
							row231 = null;

						}

						/**
						 * [tFileInputDelimited_3 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_3 main ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						tos_count_tFileInputDelimited_3++;

						/**
						 * [tFileInputDelimited_3 main ] stop
						 */

						/**
						 * [tFileInputDelimited_3 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_begin ] stop
						 */
// Start of branch "row231"
						if (row231 != null) {

							/**
							 * [tMap_6 main ] start
							 */

							currentComponent = "tMap_6";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row231");
							}

							boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;

							// ###############################
							// # Input tables (lookups)
							boolean rejectedInnerJoin_tMap_6 = false;
							boolean mainRowRejected_tMap_6 = false;

							///////////////////////////////////////////////
							// Starting Lookup Table "row24"
							///////////////////////////////////////////////

							boolean forceLooprow24 = false;

							row24Struct row24ObjectFromLookup = null;

							if (!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								hasCasePrimitiveKeyWithNull_tMap_6 = false;

								row24HashKey.CD_PATRIM1 = row231.CD_PATRIM1;

								row24HashKey.CD_PATRIM2 = row231.CD_PATRIM2;

								row24HashKey.CD_PATRIM3 = row231.CD_PATRIM3;

								row24HashKey.CD_PATRIM4 = row231.CD_PATRIM4;

								row24HashKey.hashCodeDirty = true;

								tHash_Lookup_row24.lookup(row24HashKey);

							} // G_TM_M_020

							if (tHash_Lookup_row24 != null && tHash_Lookup_row24.getCount(row24HashKey) > 1) { // G 071

								// System.out.println("WARNING: UNIQUE MATCH is configured for the lookup
								// 'row24' and it contains more one result from keys : row24.CD_PATRIM1 = '" +
								// row24HashKey.CD_PATRIM1 + "', row24.CD_PATRIM2 = '" + row24HashKey.CD_PATRIM2
								// + "', row24.CD_PATRIM3 = '" + row24HashKey.CD_PATRIM3 + "', row24.CD_PATRIM4
								// = '" + row24HashKey.CD_PATRIM4 + "'");
							} // G 071

							row24Struct row24 = null;

							row24Struct fromLookup_row24 = null;
							row24 = row24Default;

							if (tHash_Lookup_row24 != null && tHash_Lookup_row24.hasNext()) { // G 099

								fromLookup_row24 = tHash_Lookup_row24.next();

							} // G 099

							if (fromLookup_row24 != null) {
								row24 = fromLookup_row24;
							}

							// ###############################
							{ // start of Var scope

								// ###############################
								// # Vars tables

								Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
								// ###############################
								// # Output tables

								out5 = null;

// # Output table : 'out5'
								out5_tmp.Nom_operation = row231.Nom_operation;
								out5_tmp.inclus_operation = row231.inclus_operation;
								out5_tmp.Date_lancement = row231.Date_lancement;
								out5_tmp.NO_DOSFACT = row231.NO_DOSFACT;
								out5_tmp.ID_DOSCLIE = row231.ID_DOSCLIE;
								out5_tmp.CIVILITE = row231.CIVILITE;
								out5_tmp.NOM_CLIENT = row231.NOM_CLIENT;
								out5_tmp.PRENOM_CLIENT = row231.PRENOM_CLIENT;
								out5_tmp.ON_PSEUCLI = row231.ON_PSEUCLI;
								out5_tmp.LOYER_CHARGE = row24.Montant;
								out5_tmp.Cpt_nbre_patrim = row231.Cpt_nbre_patrim;
								out5_tmp.DECOHABITANT = row231.DECOHABITANT;
								out5_tmp.NO_SITUATION = row231.NO_SITUATION;
								out5_tmp.LIB_SITUATION = row231.LIB_SITUATION;
								out5_tmp.DATE_SITUATION = row231.DATE_SITUATION;
								out5_tmp.REF_PATRIM = row231.REF_PATRIM;
								out5_tmp.CD_PATRIM1 = row231.CD_PATRIM1;
								out5_tmp.CD_PATRIM2 = row231.CD_PATRIM2;
								out5_tmp.CD_PATRIM3 = row231.CD_PATRIM3;
								out5_tmp.CD_PATRIM4 = row231.CD_PATRIM4;
								out5_tmp.Groupe = row231.Groupe;
								out5_tmp.Batiment = row231.Batiment;
								out5_tmp.ETAGE = row231.ETAGE;
								out5_tmp.Nature = row231.Nature;
								out5_tmp.statut_enquete = row231.statut_enquete;
								out5_tmp.DEMENAGEMENT = row231.DEMENAGEMENT;
								out5_tmp.COUT_DEMENAGEMENT = row231.COUT_DEMENAGEMENT;
								out5_tmp.Sous_Nature = row231.Sous_Nature;
								out5_tmp.ADRESSE = row231.ADRESSE;
								out5_tmp.CP = row231.CP;
								out5_tmp.VILLE = row231.VILLE;
								out5_tmp.cpt_total = row231.cpt_total;
								out5 = out5_tmp;
// ###############################

							} // end of Var scope

							rejectedInnerJoin_tMap_6 = false;

							tos_count_tMap_6++;

							/**
							 * [tMap_6 main ] stop
							 */

							/**
							 * [tMap_6 process_data_begin ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_begin ] stop
							 */
// Start of branch "out5"
							if (out5 != null) {

								/**
								 * [tReplace_2 main ] start
								 */

								currentComponent = "tReplace_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "out5");
								}

								String searchStr_tReplace_2_1 = "," + "";
								out5.LOYER_CHARGE = StringUtils.replaceAllStrictly(out5.LOYER_CHARGE,
										searchStr_tReplace_2_1, "." + "", true, false);
								row25.Nom_operation = out5.Nom_operation;

								row25.inclus_operation = out5.inclus_operation;

								row25.Date_lancement = out5.Date_lancement;

								row25.NO_DOSFACT = out5.NO_DOSFACT;

								row25.ID_DOSCLIE = out5.ID_DOSCLIE;

								row25.CIVILITE = out5.CIVILITE;

								row25.NOM_CLIENT = out5.NOM_CLIENT;

								row25.PRENOM_CLIENT = out5.PRENOM_CLIENT;

								row25.ON_PSEUCLI = out5.ON_PSEUCLI;

								row25.LOYER_CHARGE = out5.LOYER_CHARGE;

								row25.Cpt_nbre_patrim = out5.Cpt_nbre_patrim;

								row25.DECOHABITANT = out5.DECOHABITANT;

								row25.NO_SITUATION = out5.NO_SITUATION;

								row25.LIB_SITUATION = out5.LIB_SITUATION;

								row25.DATE_SITUATION = out5.DATE_SITUATION;

								row25.REF_PATRIM = out5.REF_PATRIM;

								row25.CD_PATRIM1 = out5.CD_PATRIM1;

								row25.CD_PATRIM2 = out5.CD_PATRIM2;

								row25.CD_PATRIM3 = out5.CD_PATRIM3;

								row25.CD_PATRIM4 = out5.CD_PATRIM4;

								row25.Groupe = out5.Groupe;

								row25.Batiment = out5.Batiment;

								row25.ETAGE = out5.ETAGE;

								row25.Nature = out5.Nature;

								row25.statut_enquete = out5.statut_enquete;

								row25.DEMENAGEMENT = out5.DEMENAGEMENT;

								row25.COUT_DEMENAGEMENT = out5.COUT_DEMENAGEMENT;

								row25.Sous_Nature = out5.Sous_Nature;

								row25.ADRESSE = out5.ADRESSE;

								row25.CP = out5.CP;

								row25.VILLE = out5.VILLE;

								row25.cpt_total = out5.cpt_total;

								nb_line_tReplace_2++;

								tos_count_tReplace_2++;

								/**
								 * [tReplace_2 main ] stop
								 */

								/**
								 * [tReplace_2 process_data_begin ] start
								 */

								currentComponent = "tReplace_2";

								/**
								 * [tReplace_2 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_8 main ] start
								 */

								currentComponent = "tFileOutputDelimited_8";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row25");
								}

								StringBuilder sb_tFileOutputDelimited_8 = new StringBuilder();
								if (row25.Nom_operation != null) {
									sb_tFileOutputDelimited_8.append(row25.Nom_operation);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.inclus_operation != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.inclus_operation))
													.toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Date_lancement != null) {
									sb_tFileOutputDelimited_8
											.append(FormatterUtils.format_Date(row25.Date_lancement, "dd/MM/yyyy"));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.NO_DOSFACT != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.NO_DOSFACT)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.ID_DOSCLIE != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.ID_DOSCLIE)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CIVILITE != null) {
									sb_tFileOutputDelimited_8.append(row25.CIVILITE);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.NOM_CLIENT != null) {
									sb_tFileOutputDelimited_8.append(row25.NOM_CLIENT);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.PRENOM_CLIENT != null) {
									sb_tFileOutputDelimited_8.append(row25.PRENOM_CLIENT);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.ON_PSEUCLI != null) {
									sb_tFileOutputDelimited_8.append(row25.ON_PSEUCLI);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.LOYER_CHARGE != null) {
									sb_tFileOutputDelimited_8.append(row25.LOYER_CHARGE);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Cpt_nbre_patrim != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.Cpt_nbre_patrim))
													.toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.DECOHABITANT != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils
											.format_Number(new java.math.BigDecimal(String.valueOf(row25.DECOHABITANT))
													.toPlainString(), ' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.NO_SITUATION != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils
											.format_Number(new java.math.BigDecimal(String.valueOf(row25.NO_SITUATION))
													.toPlainString(), ' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.LIB_SITUATION != null) {
									sb_tFileOutputDelimited_8.append(row25.LIB_SITUATION);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.DATE_SITUATION != null) {
									sb_tFileOutputDelimited_8
											.append(FormatterUtils.format_Date(row25.DATE_SITUATION, "dd-MM-yyyy"));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.REF_PATRIM != null) {
									sb_tFileOutputDelimited_8.append(row25.REF_PATRIM);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CD_PATRIM1 != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.CD_PATRIM1)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CD_PATRIM2 != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.CD_PATRIM2)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CD_PATRIM3 != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.CD_PATRIM3)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CD_PATRIM4 != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.CD_PATRIM4)).toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Groupe != null) {
									sb_tFileOutputDelimited_8.append(row25.Groupe);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Batiment != null) {
									sb_tFileOutputDelimited_8.append(row25.Batiment);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.ETAGE != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.ETAGE)).toPlainString(), ' ',
											','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Nature != null) {
									sb_tFileOutputDelimited_8.append(row25.Nature);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.statut_enquete != null) {
									sb_tFileOutputDelimited_8.append(row25.statut_enquete);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.DEMENAGEMENT != null) {
									sb_tFileOutputDelimited_8.append(row25.DEMENAGEMENT);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.COUT_DEMENAGEMENT != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.COUT_DEMENAGEMENT))
													.toPlainString(),
											' ', ','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.Sous_Nature != null) {
									sb_tFileOutputDelimited_8.append(row25.Sous_Nature);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.ADRESSE != null) {
									sb_tFileOutputDelimited_8.append(row25.ADRESSE);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.CP != null) {
									sb_tFileOutputDelimited_8.append(FormatterUtils.format_Number(
											new java.math.BigDecimal(String.valueOf(row25.CP)).toPlainString(), ' ',
											','));
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.VILLE != null) {
									sb_tFileOutputDelimited_8.append(row25.VILLE);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_tFileOutputDelimited_8);
								if (row25.cpt_total != null) {
									sb_tFileOutputDelimited_8.append(row25.cpt_total);
								}
								sb_tFileOutputDelimited_8.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_8);

								nb_line_tFileOutputDelimited_8++;
								resourceMap.put("nb_line_tFileOutputDelimited_8", nb_line_tFileOutputDelimited_8);

								outtFileOutputDelimited_8.write(sb_tFileOutputDelimited_8.toString());

								tos_count_tFileOutputDelimited_8++;

								/**
								 * [tFileOutputDelimited_8 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_8 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_8";

								/**
								 * [tFileOutputDelimited_8 process_data_begin ] stop
								 */

								/**
								 * [tFileOutputDelimited_8 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_8";

								/**
								 * [tFileOutputDelimited_8 process_data_end ] stop
								 */

								/**
								 * [tReplace_2 process_data_end ] start
								 */

								currentComponent = "tReplace_2";

								/**
								 * [tReplace_2 process_data_end ] stop
								 */

							} // End of branch "out5"

							/**
							 * [tMap_6 process_data_end ] start
							 */

							currentComponent = "tMap_6";

							/**
							 * [tMap_6 process_data_end ] stop
							 */

						} // End of branch "row231"

						/**
						 * [tFileInputDelimited_3 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

						/**
						 * [tFileInputDelimited_3 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_3 end ] start
						 */

						currentComponent = "tFileInputDelimited_3";

					}
				} finally {
					if (!((Object) ("S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Brut_relogement_tmp.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_3 != null) {
							fid_tFileInputDelimited_3.close();
						}
					}
					if (fid_tFileInputDelimited_3 != null) {
						globalMap.put("tFileInputDelimited_3_NB_LINE", fid_tFileInputDelimited_3.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_3", true);
				end_Hash.put("tFileInputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_3 end ] stop
				 */

				/**
				 * [tMap_6 end ] start
				 */

				currentComponent = "tMap_6";

// ###############################
// # Lookup hashes releasing
				if (tHash_Lookup_row24 != null) {
					tHash_Lookup_row24.endGet();
				}
				globalMap.remove("tHash_Lookup_row24");

// ###############################      

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row231");
				}

				ok_Hash.put("tMap_6", true);
				end_Hash.put("tMap_6", System.currentTimeMillis());

				/**
				 * [tMap_6 end ] stop
				 */

				/**
				 * [tReplace_2 end ] start
				 */

				currentComponent = "tReplace_2";

				globalMap.put("tReplace_2_NB_LINE", nb_line_tReplace_2);
				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "out5");
				}

				ok_Hash.put("tReplace_2", true);
				end_Hash.put("tReplace_2", System.currentTimeMillis());

				/**
				 * [tReplace_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 end ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (outtFileOutputDelimited_8 != null) {
					outtFileOutputDelimited_8.flush();
					outtFileOutputDelimited_8.close();
				}

				globalMap.put("tFileOutputDelimited_8_NB_LINE", nb_line_tFileOutputDelimited_8);
				globalMap.put("tFileOutputDelimited_8_FILE_NAME", fileName_tFileOutputDelimited_8);

				if (isFileGenerated_tFileOutputDelimited_8 && nb_line_tFileOutputDelimited_8 == 0) {

					filetFileOutputDelimited_8.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_8", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row25");
				}

				ok_Hash.put("tFileOutputDelimited_8", true);
				end_Hash.put("tFileOutputDelimited_8", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_8 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			// free memory for "tMap_6"
			globalMap.remove("tHash_Lookup_row24");

			try {

				/**
				 * [tFileInputDelimited_3 finally ] start
				 */

				currentComponent = "tFileInputDelimited_3";

				/**
				 * [tFileInputDelimited_3 finally ] stop
				 */

				/**
				 * [tMap_6 finally ] start
				 */

				currentComponent = "tMap_6";

				/**
				 * [tMap_6 finally ] stop
				 */

				/**
				 * [tReplace_2 finally ] start
				 */

				currentComponent = "tReplace_2";

				/**
				 * [tReplace_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_8 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_8";

				if (resourceMap.get("finish_tFileOutputDelimited_8") == null) {

					java.io.Writer outtFileOutputDelimited_8 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_8");
					if (outtFileOutputDelimited_8 != null) {
						outtFileOutputDelimited_8.flush();
						outtFileOutputDelimited_8.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_8")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_8"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_8")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_8 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_3_SUBPROCESS_STATE", 1);
	}

	public static class row26Struct implements routines.system.IPersistableComparableLookupRow<row26Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public Float Montant;

		public Float getMontant() {
			return this.Montant;
		}

		public java.util.Date date_solde;

		public java.util.Date getDate_solde() {
			return this.date_solde;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());

				result = prime * result + ((this.CD_PATRIM2 == null) ? 0 : this.CD_PATRIM2.hashCode());

				result = prime * result + ((this.CD_PATRIM3 == null) ? 0 : this.CD_PATRIM3.hashCode());

				result = prime * result + ((this.CD_PATRIM4 == null) ? 0 : this.CD_PATRIM4.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row26Struct other = (row26Struct) obj;

			if (this.CD_PATRIM1 == null) {
				if (other.CD_PATRIM1 != null)
					return false;

			} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))

				return false;

			if (this.CD_PATRIM2 == null) {
				if (other.CD_PATRIM2 != null)
					return false;

			} else if (!this.CD_PATRIM2.equals(other.CD_PATRIM2))

				return false;

			if (this.CD_PATRIM3 == null) {
				if (other.CD_PATRIM3 != null)
					return false;

			} else if (!this.CD_PATRIM3.equals(other.CD_PATRIM3))

				return false;

			if (this.CD_PATRIM4 == null) {
				if (other.CD_PATRIM4 != null)
					return false;

			} else if (!this.CD_PATRIM4.equals(other.CD_PATRIM4))

				return false;

			return true;
		}

		public void copyDataTo(row26Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;
			other.Montant = this.Montant;
			other.date_solde = this.date_solde;

		}

		public void copyKeysDataTo(row26Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				length = dis.readByte();
				if (length == -1) {
					this.Montant = null;
				} else {
					this.Montant = dis.readFloat();
				}

				this.date_solde = readDate(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				if (this.Montant == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.Montant);
				}

				writeDate(this.date_solde, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Montant=" + String.valueOf(Montant));
			sb.append(",date_solde=" + String.valueOf(date_solde));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row26Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM2, other.CD_PATRIM2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM3, other.CD_PATRIM3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM4, other.CD_PATRIM4);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row26Struct row26 = new row26Struct();

				/**
				 * [tAdvancedHash_row26 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row26", false);
				start_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row26";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row26");
				}

				int tos_count_tAdvancedHash_row26 = 0;

				// connection name:row26
				// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row26,row26) |
				// target node:tAdvancedHash_row26 - inputs:(row26) outputs:()
				// linked node: tMap_4 - inputs:(row22,row26) outputs:(out4)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row26 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row26Struct> tHash_Lookup_row26 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row26Struct>getLookup(matchingModeEnum_row26);

				globalMap.put("tHash_Lookup_row26", tHash_Lookup_row26);

				/**
				 * [tAdvancedHash_row26 begin ] stop
				 */

				/**
				 * [tDBInput_5 begin ] start
				 */

				ok_Hash.put("tDBInput_5", false);
				start_Hash.put("tDBInput_5", System.currentTimeMillis());

				currentComponent = "tDBInput_5";

				int tos_count_tDBInput_5 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_5 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5);
				int nb_line_tDBInput_5 = 0;
				java.sql.Connection conn_tDBInput_5 = null;
				conn_tDBInput_5 = (java.sql.Connection) globalMap.get("conn_tDBConnection_1");

				String dbschema_tDBInput_5 = (String) globalMap.get("dbschema_tDBConnection_1");

				java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

				String dbquery_tDBInput_5 = "\nSELECT distinct\n	spfg.CD_PATRIM1 as CD_PATRIM1,\n	spfg.CD_PATRIM2 as CD_PATRIM2,\n	spfg.CD_PATRIM3 as CD_PATRIM3,\n	"
						+ "spfg.CD_PATRIM4 as CD_PATRIM4,\n	spfg.CHIF_VAC_DISPO+ spfg.CHIF_VAC_INDISPO as Montant,\n	DATE as date_solde\n	from \n	D"
						+ "OSS_FACT df\n	left join DOSS_CLIEN d on df.ID_DOSCLIE = d.ID_DOSCLIE\n	left join PATRIMOINE_GIM pg on df.CD_PATRIM1 = pg"
						+ ".CD_PATRIM1 \n							and df.CD_PATRIM2 = pg.CD_PATRIM2\n							and df.CD_PATRIM3 = pg.CD_PATRIM3\n							and df.CD_PATRI"
						+ "M4 = pg.CD_PATRIM4\n	left join (select * from CONTENTIEUX c\n			   where NO_SIT like '69%' \n			   and CD_ETAT_CTX = 'O'"
						+ " \n			   and LB_PROC <> 'A NE PLUS UTILISER'\n			   and c.NO_LIGNE = (select max(NO_LIGNE) as NO_LIGNE\n			  					from C"
						+ "ONTENTIEUX cc\n			   					where NO_SIT like '69%' \n			   					and CD_ETAT_CTX = 'O' \n			  					and LB_PROC <> 'A NE PL"
						+ "US UTILISER'\n			   					and c.ID_DOSCLIE = cc.ID_DOSCLIE)) act on act.NO_DOSFACT = df.NO_DOSFACT \n	left join PAT_CONTR"
						+ "A pc on  pc.CD_PATRIM1 =df.CD_PATRIM1 \n							and pc.CD_PATRIM2 =df.CD_PATRIM2 \n							and pc.CD_PATRIM3 =df.CD_PATRIM"
						+ "3 \n							and pc.CD_PATRIM4 =df.CD_PATRIM4  \n							and df.NO_DOSFACT = pc.NO_DOSFACT							\n							and pc.LB_ET_DTD "
						+ "in('Présent','Affectation validée')\n							and pc.LB_ET_DTF = 'Présent'\n	inner join SID_PERTES_FIN_GIM spfg \n							o"
						+ "n  spfg.CD_PATRIM1 =df.CD_PATRIM1 \n							and spfg.CD_PATRIM2 =df.CD_PATRIM2 \n							and spfg.CD_PATRIM3 =df.CD_PATRIM"
						+ "3 \n							and spfg.CD_PATRIM4 =df.CD_PATRIM4  \nWHERE pg.CD_SOCPROP IN (1,6)\nAND pg.CD_PATRIM4 <> 0\nAND LB_NATLOC In "
						+ "('COMMERCE','ASSOCIATIONS','ATELIER ARTISTE','LOGEMENT','LOGEMENT CIAL.','PAVILLON')\nAND CD_ETAT = 'MS'\nAND CD_ETAT_DF"
						+ " ='E'\nAND pc.LB_ET_DTF = 'Présent'\nAND d.ON_PSEUCLI ='O'\n";

				globalMap.put("tDBInput_5_QUERY", dbquery_tDBInput_5);
				java.sql.ResultSet rs_tDBInput_5 = null;

				try {
					rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
					java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
					int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

					String tmpContent_tDBInput_5 = null;

					while (rs_tDBInput_5.next()) {
						nb_line_tDBInput_5++;

						if (colQtyInRs_tDBInput_5 < 1) {
							row26.CD_PATRIM1 = null;
						} else {

							row26.CD_PATRIM1 = rs_tDBInput_5.getInt(1);
							if (rs_tDBInput_5.wasNull()) {
								row26.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 2) {
							row26.CD_PATRIM2 = null;
						} else {

							row26.CD_PATRIM2 = rs_tDBInput_5.getInt(2);
							if (rs_tDBInput_5.wasNull()) {
								row26.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 3) {
							row26.CD_PATRIM3 = null;
						} else {

							row26.CD_PATRIM3 = rs_tDBInput_5.getInt(3);
							if (rs_tDBInput_5.wasNull()) {
								row26.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 4) {
							row26.CD_PATRIM4 = null;
						} else {

							row26.CD_PATRIM4 = rs_tDBInput_5.getInt(4);
							if (rs_tDBInput_5.wasNull()) {
								row26.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 5) {
							row26.Montant = null;
						} else {

							row26.Montant = rs_tDBInput_5.getFloat(5);
							if (rs_tDBInput_5.wasNull()) {
								row26.Montant = null;
							}
						}
						if (colQtyInRs_tDBInput_5 < 6) {
							row26.date_solde = null;
						} else {

							row26.date_solde = mssqlGTU_tDBInput_5.getDate(rsmd_tDBInput_5, rs_tDBInput_5, 6);

						}

						/**
						 * [tDBInput_5 begin ] stop
						 */

						/**
						 * [tDBInput_5 main ] start
						 */

						currentComponent = "tDBInput_5";

						tos_count_tDBInput_5++;

						/**
						 * [tDBInput_5 main ] stop
						 */

						/**
						 * [tDBInput_5 process_data_begin ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row26 main ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row26");
						}

						row26Struct row26_HashRow = new row26Struct();

						row26_HashRow.CD_PATRIM1 = row26.CD_PATRIM1;

						row26_HashRow.CD_PATRIM2 = row26.CD_PATRIM2;

						row26_HashRow.CD_PATRIM3 = row26.CD_PATRIM3;

						row26_HashRow.CD_PATRIM4 = row26.CD_PATRIM4;

						row26_HashRow.Montant = row26.Montant;

						row26_HashRow.date_solde = row26.date_solde;

						tHash_Lookup_row26.put(row26_HashRow);

						tos_count_tAdvancedHash_row26++;

						/**
						 * [tAdvancedHash_row26 main ] stop
						 */

						/**
						 * [tAdvancedHash_row26 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						/**
						 * [tAdvancedHash_row26 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row26 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row26";

						/**
						 * [tAdvancedHash_row26 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 process_data_end ] start
						 */

						currentComponent = "tDBInput_5";

						/**
						 * [tDBInput_5 process_data_end ] stop
						 */

						/**
						 * [tDBInput_5 end ] start
						 */

						currentComponent = "tDBInput_5";

					}
				} finally {
					if (rs_tDBInput_5 != null) {
						rs_tDBInput_5.close();
					}
					if (stmt_tDBInput_5 != null) {
						stmt_tDBInput_5.close();
					}
				}
				globalMap.put("tDBInput_5_NB_LINE", nb_line_tDBInput_5);

				ok_Hash.put("tDBInput_5", true);
				end_Hash.put("tDBInput_5", System.currentTimeMillis());

				/**
				 * [tDBInput_5 end ] stop
				 */

				/**
				 * [tAdvancedHash_row26 end ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				tHash_Lookup_row26.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row26");
				}

				ok_Hash.put("tAdvancedHash_row26", true);
				end_Hash.put("tAdvancedHash_row26", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row26 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_5 finally ] start
				 */

				currentComponent = "tDBInput_5";

				/**
				 * [tDBInput_5 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row26 finally ] start
				 */

				currentComponent = "tAdvancedHash_row26";

				/**
				 * [tAdvancedHash_row26 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}

	public static class row24Struct implements routines.system.IPersistableComparableLookupRow<row24Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Montant;

		public String getMontant() {
			return this.Montant;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.CD_PATRIM1 == null) ? 0 : this.CD_PATRIM1.hashCode());

				result = prime * result + ((this.CD_PATRIM2 == null) ? 0 : this.CD_PATRIM2.hashCode());

				result = prime * result + ((this.CD_PATRIM3 == null) ? 0 : this.CD_PATRIM3.hashCode());

				result = prime * result + ((this.CD_PATRIM4 == null) ? 0 : this.CD_PATRIM4.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row24Struct other = (row24Struct) obj;

			if (this.CD_PATRIM1 == null) {
				if (other.CD_PATRIM1 != null)
					return false;

			} else if (!this.CD_PATRIM1.equals(other.CD_PATRIM1))

				return false;

			if (this.CD_PATRIM2 == null) {
				if (other.CD_PATRIM2 != null)
					return false;

			} else if (!this.CD_PATRIM2.equals(other.CD_PATRIM2))

				return false;

			if (this.CD_PATRIM3 == null) {
				if (other.CD_PATRIM3 != null)
					return false;

			} else if (!this.CD_PATRIM3.equals(other.CD_PATRIM3))

				return false;

			if (this.CD_PATRIM4 == null) {
				if (other.CD_PATRIM4 != null)
					return false;

			} else if (!this.CD_PATRIM4.equals(other.CD_PATRIM4))

				return false;

			return true;
		}

		public void copyDataTo(row24Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;
			other.Montant = this.Montant;

		}

		public void copyKeysDataTo(row24Struct other) {

			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;

		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.CD_PATRIM1 = readInteger(dis);

					this.CD_PATRIM2 = readInteger(dis);

					this.CD_PATRIM3 = readInteger(dis);

					this.CD_PATRIM4 = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.CD_PATRIM1, dos);

				// Integer

				writeInteger(this.CD_PATRIM2, dos);

				// Integer

				writeInteger(this.CD_PATRIM3, dos);

				// Integer

				writeInteger(this.CD_PATRIM4, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Montant = readString(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Montant, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Montant=" + Montant);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row24Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.CD_PATRIM1, other.CD_PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM2, other.CD_PATRIM2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM3, other.CD_PATRIM3);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.CD_PATRIM4, other.CD_PATRIM4);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tDBInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row24Struct row24 = new row24Struct();

				/**
				 * [tAdvancedHash_row24 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row24", false);
				start_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row24";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row24");
				}

				int tos_count_tAdvancedHash_row24 = 0;

				// connection name:row24
				// source node:tDBInput_7 - inputs:(after_tFileInputDelimited_3)
				// outputs:(row24,row24) | target node:tAdvancedHash_row24 - inputs:(row24)
				// outputs:()
				// linked node: tMap_6 - inputs:(row231,row24) outputs:(out5)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row24 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row24Struct> tHash_Lookup_row24 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row24Struct>getLookup(matchingModeEnum_row24);

				globalMap.put("tHash_Lookup_row24", tHash_Lookup_row24);

				/**
				 * [tAdvancedHash_row24 begin ] stop
				 */

				/**
				 * [tDBInput_7 begin ] start
				 */

				ok_Hash.put("tDBInput_7", false);
				start_Hash.put("tDBInput_7", System.currentTimeMillis());

				currentComponent = "tDBInput_7";

				int tos_count_tDBInput_7 = 0;

				org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_7 = org.talend.designer.components.util.mssql.MSSqlUtilFactory
						.getMSSqlGenerateTimestampUtil();

				java.util.List<String> talendToDBList_tDBInput_7 = new java.util.ArrayList();
				String[] talendToDBArray_tDBInput_7 = new String[] { "FLOAT", "NUMERIC", "NUMERIC IDENTITY", "DECIMAL",
						"DECIMAL IDENTITY", "REAL" };
				java.util.Collections.addAll(talendToDBList_tDBInput_7, talendToDBArray_tDBInput_7);
				int nb_line_tDBInput_7 = 0;
				java.sql.Connection conn_tDBInput_7 = null;
				String driverClass_tDBInput_7 = "net.sourceforge.jtds.jdbc.Driver";
				java.lang.Class jdbcclazz_tDBInput_7 = java.lang.Class.forName(driverClass_tDBInput_7);
				String dbUser_tDBInput_7 = "";

				final String decryptedPassword_tDBInput_7 = routines.system.PasswordEncryptUtil
						.decryptPassword("enc:routine.encryption.key.v1:OJQfwPX9JIVwmhDLMXZk/J1UJMAVHLnVSCRH+Q==");

				String dbPwd_tDBInput_7 = decryptedPassword_tDBInput_7;

				String port_tDBInput_7 = "1433";
				String dbname_tDBInput_7 = "HDSHData";
				String url_tDBInput_7 = "jdbc:jtds:sqlserver://" + "SRVTOU01";
				if (!"".equals(port_tDBInput_7)) {
					url_tDBInput_7 += ":" + "1433";
				}
				if (!"".equals(dbname_tDBInput_7)) {
					url_tDBInput_7 += "//" + "HDSHData";
				}
				url_tDBInput_7 += ";appName=" + projectName + ";" + "noDatetimeStringSync=true";
				String dbschema_tDBInput_7 = "";

				conn_tDBInput_7 = java.sql.DriverManager.getConnection(url_tDBInput_7, dbUser_tDBInput_7,
						dbPwd_tDBInput_7);

				java.sql.Statement stmt_tDBInput_7 = conn_tDBInput_7.createStatement();

				String dbquery_tDBInput_7 = "\nselect\nCD_PATRIM1, CD_PATRIM2, CD_PATRIM3, CD_PATRIM4, sum(montant)\nfrom \n(select * from T_RELOGEMENT_TMP1 trt \nw"
						+ "here date_solde is not null\nand date_lancement is not null\nand date_solde > date_lancement \n) a\ngroup by CD_PATRIM1,"
						+ " CD_PATRIM2, CD_PATRIM3, CD_PATRIM4 \n";

				globalMap.put("tDBInput_7_QUERY", dbquery_tDBInput_7);
				java.sql.ResultSet rs_tDBInput_7 = null;

				try {
					rs_tDBInput_7 = stmt_tDBInput_7.executeQuery(dbquery_tDBInput_7);
					java.sql.ResultSetMetaData rsmd_tDBInput_7 = rs_tDBInput_7.getMetaData();
					int colQtyInRs_tDBInput_7 = rsmd_tDBInput_7.getColumnCount();

					String tmpContent_tDBInput_7 = null;

					while (rs_tDBInput_7.next()) {
						nb_line_tDBInput_7++;

						if (colQtyInRs_tDBInput_7 < 1) {
							row24.CD_PATRIM1 = null;
						} else {

							row24.CD_PATRIM1 = rs_tDBInput_7.getInt(1);
							if (rs_tDBInput_7.wasNull()) {
								row24.CD_PATRIM1 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 2) {
							row24.CD_PATRIM2 = null;
						} else {

							row24.CD_PATRIM2 = rs_tDBInput_7.getInt(2);
							if (rs_tDBInput_7.wasNull()) {
								row24.CD_PATRIM2 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 3) {
							row24.CD_PATRIM3 = null;
						} else {

							row24.CD_PATRIM3 = rs_tDBInput_7.getInt(3);
							if (rs_tDBInput_7.wasNull()) {
								row24.CD_PATRIM3 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 4) {
							row24.CD_PATRIM4 = null;
						} else {

							row24.CD_PATRIM4 = rs_tDBInput_7.getInt(4);
							if (rs_tDBInput_7.wasNull()) {
								row24.CD_PATRIM4 = null;
							}
						}
						if (colQtyInRs_tDBInput_7 < 5) {
							row24.Montant = null;
						} else {

							tmpContent_tDBInput_7 = rs_tDBInput_7.getString(5);
							if (tmpContent_tDBInput_7 != null) {
								if (talendToDBList_tDBInput_7.contains(
										rsmd_tDBInput_7.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
									row24.Montant = FormatterUtils.formatUnwithE(tmpContent_tDBInput_7);
								} else {
									row24.Montant = tmpContent_tDBInput_7;
								}
							} else {
								row24.Montant = null;
							}
						}

						/**
						 * [tDBInput_7 begin ] stop
						 */

						/**
						 * [tDBInput_7 main ] start
						 */

						currentComponent = "tDBInput_7";

						tos_count_tDBInput_7++;

						/**
						 * [tDBInput_7 main ] stop
						 */

						/**
						 * [tDBInput_7 process_data_begin ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 main ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						if (execStat) {
							runStat.updateStatOnConnection(iterateId, 1, 1, "row24");
						}

						row24Struct row24_HashRow = new row24Struct();

						row24_HashRow.CD_PATRIM1 = row24.CD_PATRIM1;

						row24_HashRow.CD_PATRIM2 = row24.CD_PATRIM2;

						row24_HashRow.CD_PATRIM3 = row24.CD_PATRIM3;

						row24_HashRow.CD_PATRIM4 = row24.CD_PATRIM4;

						row24_HashRow.Montant = row24.Montant;

						tHash_Lookup_row24.put(row24_HashRow);

						tos_count_tAdvancedHash_row24++;

						/**
						 * [tAdvancedHash_row24 main ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_begin ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_begin ] stop
						 */

						/**
						 * [tAdvancedHash_row24 process_data_end ] start
						 */

						currentComponent = "tAdvancedHash_row24";

						/**
						 * [tAdvancedHash_row24 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 process_data_end ] start
						 */

						currentComponent = "tDBInput_7";

						/**
						 * [tDBInput_7 process_data_end ] stop
						 */

						/**
						 * [tDBInput_7 end ] start
						 */

						currentComponent = "tDBInput_7";

					}
				} finally {
					if (rs_tDBInput_7 != null) {
						rs_tDBInput_7.close();
					}
					if (stmt_tDBInput_7 != null) {
						stmt_tDBInput_7.close();
					}
					if (conn_tDBInput_7 != null && !conn_tDBInput_7.isClosed()) {

						conn_tDBInput_7.close();

						if ("com.mysql.cj.jdbc.Driver".equals((String) globalMap.get("driverClass_"))
								&& routines.system.BundleUtils.inOSGi()) {
							Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread")
									.getMethod("checkedShutdown").invoke(null, (Object[]) null);
						}

					}
				}
				globalMap.put("tDBInput_7_NB_LINE", nb_line_tDBInput_7);

				ok_Hash.put("tDBInput_7", true);
				end_Hash.put("tDBInput_7", System.currentTimeMillis());

				/**
				 * [tDBInput_7 end ] stop
				 */

				/**
				 * [tAdvancedHash_row24 end ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				tHash_Lookup_row24.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row24");
				}

				ok_Hash.put("tAdvancedHash_row24", true);
				end_Hash.put("tAdvancedHash_row24", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row24 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tDBInput_7 finally ] start
				 */

				currentComponent = "tDBInput_7";

				/**
				 * [tDBInput_7 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row24 finally ] start
				 */

				currentComponent = "tAdvancedHash_row24";

				/**
				 * [tAdvancedHash_row24 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDBInput_7_SUBPROCESS_STATE", 1);
	}

	public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public Integer NO_DOSFACT;

		public Integer getNO_DOSFACT() {
			return this.NO_DOSFACT;
		}

		public Integer ID_DOSCLIE;

		public Integer getID_DOSCLIE() {
			return this.ID_DOSCLIE;
		}

		public String CIVILITE;

		public String getCIVILITE() {
			return this.CIVILITE;
		}

		public String NOM_CLIENT;

		public String getNOM_CLIENT() {
			return this.NOM_CLIENT;
		}

		public String PRENOM_CLIENT;

		public String getPRENOM_CLIENT() {
			return this.PRENOM_CLIENT;
		}

		public String ON_PSEUCLI;

		public String getON_PSEUCLI() {
			return this.ON_PSEUCLI;
		}

		public Float LOYER_CHARGE;

		public Float getLOYER_CHARGE() {
			return this.LOYER_CHARGE;
		}

		public Integer Cpt_nbre_patrim;

		public Integer getCpt_nbre_patrim() {
			return this.Cpt_nbre_patrim;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		public Integer NO_SITUATION;

		public Integer getNO_SITUATION() {
			return this.NO_SITUATION;
		}

		public String LIB_SITUATION;

		public String getLIB_SITUATION() {
			return this.LIB_SITUATION;
		}

		public java.util.Date DATE_SITUATION;

		public java.util.Date getDATE_SITUATION() {
			return this.DATE_SITUATION;
		}

		public String REF_PATRIM;

		public String getREF_PATRIM() {
			return this.REF_PATRIM;
		}

		public Integer CD_PATRIM1;

		public Integer getCD_PATRIM1() {
			return this.CD_PATRIM1;
		}

		public Integer CD_PATRIM2;

		public Integer getCD_PATRIM2() {
			return this.CD_PATRIM2;
		}

		public Integer CD_PATRIM3;

		public Integer getCD_PATRIM3() {
			return this.CD_PATRIM3;
		}

		public Integer CD_PATRIM4;

		public Integer getCD_PATRIM4() {
			return this.CD_PATRIM4;
		}

		public String Groupe;

		public String getGroupe() {
			return this.Groupe;
		}

		public String Batiment;

		public String getBatiment() {
			return this.Batiment;
		}

		public Integer ETAGE;

		public Integer getETAGE() {
			return this.ETAGE;
		}

		public String Nature;

		public String getNature() {
			return this.Nature;
		}

		public String DEMENAGEMENT;

		public String getDEMENAGEMENT() {
			return this.DEMENAGEMENT;
		}

		public String COUT_DEMENAGEMENT;

		public String getCOUT_DEMENAGEMENT() {
			return this.COUT_DEMENAGEMENT;
		}

		public String Sous_Nature;

		public String getSous_Nature() {
			return this.Sous_Nature;
		}

		public String ADRESSE;

		public String getADRESSE() {
			return this.ADRESSE;
		}

		public Integer CP;

		public Integer getCP() {
			return this.CP;
		}

		public String VILLE;

		public String getVILLE() {
			return this.VILLE;
		}

		public Integer inclus_operation;

		public Integer getInclus_operation() {
			return this.inclus_operation;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.NO_DOSFACT == null) ? 0 : this.NO_DOSFACT.hashCode());

				result = prime * result + ((this.ID_DOSCLIE == null) ? 0 : this.ID_DOSCLIE.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row21Struct other = (row21Struct) obj;

			if (this.NO_DOSFACT == null) {
				if (other.NO_DOSFACT != null)
					return false;

			} else if (!this.NO_DOSFACT.equals(other.NO_DOSFACT))

				return false;

			if (this.ID_DOSCLIE == null) {
				if (other.ID_DOSCLIE != null)
					return false;

			} else if (!this.ID_DOSCLIE.equals(other.ID_DOSCLIE))

				return false;

			return true;
		}

		public void copyDataTo(row21Struct other) {

			other.Nom_operation = this.Nom_operation;
			other.Date_lancement = this.Date_lancement;
			other.NO_DOSFACT = this.NO_DOSFACT;
			other.ID_DOSCLIE = this.ID_DOSCLIE;
			other.CIVILITE = this.CIVILITE;
			other.NOM_CLIENT = this.NOM_CLIENT;
			other.PRENOM_CLIENT = this.PRENOM_CLIENT;
			other.ON_PSEUCLI = this.ON_PSEUCLI;
			other.LOYER_CHARGE = this.LOYER_CHARGE;
			other.Cpt_nbre_patrim = this.Cpt_nbre_patrim;
			other.DECOHABITANT = this.DECOHABITANT;
			other.NO_SITUATION = this.NO_SITUATION;
			other.LIB_SITUATION = this.LIB_SITUATION;
			other.DATE_SITUATION = this.DATE_SITUATION;
			other.REF_PATRIM = this.REF_PATRIM;
			other.CD_PATRIM1 = this.CD_PATRIM1;
			other.CD_PATRIM2 = this.CD_PATRIM2;
			other.CD_PATRIM3 = this.CD_PATRIM3;
			other.CD_PATRIM4 = this.CD_PATRIM4;
			other.Groupe = this.Groupe;
			other.Batiment = this.Batiment;
			other.ETAGE = this.ETAGE;
			other.Nature = this.Nature;
			other.DEMENAGEMENT = this.DEMENAGEMENT;
			other.COUT_DEMENAGEMENT = this.COUT_DEMENAGEMENT;
			other.Sous_Nature = this.Sous_Nature;
			other.ADRESSE = this.ADRESSE;
			other.CP = this.CP;
			other.VILLE = this.VILLE;
			other.inclus_operation = this.inclus_operation;

		}

		public void copyKeysDataTo(row21Struct other) {

			other.NO_DOSFACT = this.NO_DOSFACT;
			other.ID_DOSCLIE = this.ID_DOSCLIE;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.NO_DOSFACT = readInteger(dis);

					this.ID_DOSCLIE = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.NO_DOSFACT, dos);

				// Integer

				writeInteger(this.ID_DOSCLIE, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Nom_operation = readString(dis, ois);

				this.Date_lancement = readDate(dis, ois);

				this.CIVILITE = readString(dis, ois);

				this.NOM_CLIENT = readString(dis, ois);

				this.PRENOM_CLIENT = readString(dis, ois);

				this.ON_PSEUCLI = readString(dis, ois);

				length = dis.readByte();
				if (length == -1) {
					this.LOYER_CHARGE = null;
				} else {
					this.LOYER_CHARGE = dis.readFloat();
				}

				this.Cpt_nbre_patrim = readInteger(dis, ois);

				this.DECOHABITANT = readInteger(dis, ois);

				this.NO_SITUATION = readInteger(dis, ois);

				this.LIB_SITUATION = readString(dis, ois);

				this.DATE_SITUATION = readDate(dis, ois);

				this.REF_PATRIM = readString(dis, ois);

				this.CD_PATRIM1 = readInteger(dis, ois);

				this.CD_PATRIM2 = readInteger(dis, ois);

				this.CD_PATRIM3 = readInteger(dis, ois);

				this.CD_PATRIM4 = readInteger(dis, ois);

				this.Groupe = readString(dis, ois);

				this.Batiment = readString(dis, ois);

				this.ETAGE = readInteger(dis, ois);

				this.Nature = readString(dis, ois);

				this.DEMENAGEMENT = readString(dis, ois);

				this.COUT_DEMENAGEMENT = readString(dis, ois);

				this.Sous_Nature = readString(dis, ois);

				this.ADRESSE = readString(dis, ois);

				this.CP = readInteger(dis, ois);

				this.VILLE = readString(dis, ois);

				this.inclus_operation = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Nom_operation, dos, oos);

				writeDate(this.Date_lancement, dos, oos);

				writeString(this.CIVILITE, dos, oos);

				writeString(this.NOM_CLIENT, dos, oos);

				writeString(this.PRENOM_CLIENT, dos, oos);

				writeString(this.ON_PSEUCLI, dos, oos);

				if (this.LOYER_CHARGE == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeFloat(this.LOYER_CHARGE);
				}

				writeInteger(this.Cpt_nbre_patrim, dos, oos);

				writeInteger(this.DECOHABITANT, dos, oos);

				writeInteger(this.NO_SITUATION, dos, oos);

				writeString(this.LIB_SITUATION, dos, oos);

				writeDate(this.DATE_SITUATION, dos, oos);

				writeString(this.REF_PATRIM, dos, oos);

				writeInteger(this.CD_PATRIM1, dos, oos);

				writeInteger(this.CD_PATRIM2, dos, oos);

				writeInteger(this.CD_PATRIM3, dos, oos);

				writeInteger(this.CD_PATRIM4, dos, oos);

				writeString(this.Groupe, dos, oos);

				writeString(this.Batiment, dos, oos);

				writeInteger(this.ETAGE, dos, oos);

				writeString(this.Nature, dos, oos);

				writeString(this.DEMENAGEMENT, dos, oos);

				writeString(this.COUT_DEMENAGEMENT, dos, oos);

				writeString(this.Sous_Nature, dos, oos);

				writeString(this.ADRESSE, dos, oos);

				writeInteger(this.CP, dos, oos);

				writeString(this.VILLE, dos, oos);

				writeInteger(this.inclus_operation, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",NO_DOSFACT=" + String.valueOf(NO_DOSFACT));
			sb.append(",ID_DOSCLIE=" + String.valueOf(ID_DOSCLIE));
			sb.append(",CIVILITE=" + CIVILITE);
			sb.append(",NOM_CLIENT=" + NOM_CLIENT);
			sb.append(",PRENOM_CLIENT=" + PRENOM_CLIENT);
			sb.append(",ON_PSEUCLI=" + ON_PSEUCLI);
			sb.append(",LOYER_CHARGE=" + String.valueOf(LOYER_CHARGE));
			sb.append(",Cpt_nbre_patrim=" + String.valueOf(Cpt_nbre_patrim));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append(",NO_SITUATION=" + String.valueOf(NO_SITUATION));
			sb.append(",LIB_SITUATION=" + LIB_SITUATION);
			sb.append(",DATE_SITUATION=" + String.valueOf(DATE_SITUATION));
			sb.append(",REF_PATRIM=" + REF_PATRIM);
			sb.append(",CD_PATRIM1=" + String.valueOf(CD_PATRIM1));
			sb.append(",CD_PATRIM2=" + String.valueOf(CD_PATRIM2));
			sb.append(",CD_PATRIM3=" + String.valueOf(CD_PATRIM3));
			sb.append(",CD_PATRIM4=" + String.valueOf(CD_PATRIM4));
			sb.append(",Groupe=" + Groupe);
			sb.append(",Batiment=" + Batiment);
			sb.append(",ETAGE=" + String.valueOf(ETAGE));
			sb.append(",Nature=" + Nature);
			sb.append(",DEMENAGEMENT=" + DEMENAGEMENT);
			sb.append(",COUT_DEMENAGEMENT=" + COUT_DEMENAGEMENT);
			sb.append(",Sous_Nature=" + Sous_Nature);
			sb.append(",ADRESSE=" + ADRESSE);
			sb.append(",CP=" + String.valueOf(CP));
			sb.append(",VILLE=" + VILLE);
			sb.append(",inclus_operation=" + String.valueOf(inclus_operation));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row21Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.NO_DOSFACT, other.NO_DOSFACT);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.ID_DOSCLIE, other.ID_DOSCLIE);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row21Struct row21 = new row21Struct();

				/**
				 * [tAdvancedHash_row21 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row21", false);
				start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row21";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row21");
				}

				int tos_count_tAdvancedHash_row21 = 0;

				// connection name:row21
				// source node:tFileInputDelimited_1 - inputs:(after_tDBInput_4)
				// outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21)
				// outputs:()
				// linked node: tMap_5 - inputs:(row20,row21) outputs:(out10)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row21Struct>getLookup(matchingModeEnum_row21);

				globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);

				/**
				 * [tAdvancedHash_row21 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_1 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_1", false);
				start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_1";

				int tos_count_tFileInputDelimited_1 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try {

					Object filename_tFileInputDelimited_1 = "S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_merge.csv";
					if (filename_tFileInputDelimited_1 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
						if (footer_value_tFileInputDelimited_1 > 0 || random_value_tFileInputDelimited_1 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(
								"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_merge.csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_1, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_1 != null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();

						row21 = null;

						row21 = null;

						boolean whetherReject_tFileInputDelimited_1 = false;
						row21 = new row21Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_1 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_1 = 0;

							row21.Nom_operation = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 1;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.Date_lancement = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Date_lancement", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.Date_lancement = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 2;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.NO_DOSFACT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NO_DOSFACT", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.NO_DOSFACT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 3;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.ID_DOSCLIE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ID_DOSCLIE", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.ID_DOSCLIE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 4;

							row21.CIVILITE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 5;

							row21.NOM_CLIENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 6;

							row21.PRENOM_CLIENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 7;

							row21.ON_PSEUCLI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 8;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.LOYER_CHARGE = ParserUtils.parseTo_Float(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"LOYER_CHARGE", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.LOYER_CHARGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 9;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.Cpt_nbre_patrim = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Cpt_nbre_patrim", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.Cpt_nbre_patrim = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 10;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.DECOHABITANT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DECOHABITANT", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.DECOHABITANT = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 11;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.NO_SITUATION = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"NO_SITUATION", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.NO_SITUATION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 12;

							row21.LIB_SITUATION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 13;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.DATE_SITUATION = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DATE_SITUATION", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.DATE_SITUATION = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 14;

							row21.REF_PATRIM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 15;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.CD_PATRIM1 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM1", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.CD_PATRIM1 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 16;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.CD_PATRIM2 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM2", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.CD_PATRIM2 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 17;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.CD_PATRIM3 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM3", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.CD_PATRIM3 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 18;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.CD_PATRIM4 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CD_PATRIM4", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.CD_PATRIM4 = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 19;

							row21.Groupe = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 20;

							row21.Batiment = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 21;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.ETAGE = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"ETAGE", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								row21.ETAGE = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 22;

							row21.Nature = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 23;

							row21.DEMENAGEMENT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 24;

							row21.COUT_DEMENAGEMENT = fid_tFileInputDelimited_1
									.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 25;

							row21.Sous_Nature = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 26;

							row21.ADRESSE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 27;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.CP = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"CP", "row21", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}

							} else {

								row21.CP = null;

							}

							columnIndexWithD_tFileInputDelimited_1 = 28;

							row21.VILLE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);

							columnIndexWithD_tFileInputDelimited_1 = 29;

							temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
							if (temp.length() > 0) {

								try {

									row21.inclus_operation = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"inclus_operation", "row21", temp, ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							} else {

								try {
									row21.inclus_operation = 1;
								} catch (java.lang.Exception ex_tFileInputDelimited_1) {
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(
											String.format(
													"Couldn't set default value for column '%s' in '%s'. Details: %s",
													"inclus_operation", "row21", ex_tFileInputDelimited_1),
											ex_tFileInputDelimited_1));
								}

							}

							if (rowstate_tFileInputDelimited_1.getException() != null) {
								throw rowstate_tFileInputDelimited_1.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_1 = true;

							System.err.println(e.getMessage());
							row21 = null;

						}

						/**
						 * [tFileInputDelimited_1 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_1 main ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						tos_count_tFileInputDelimited_1++;

						/**
						 * [tFileInputDelimited_1 main ] stop
						 */

						/**
						 * [tFileInputDelimited_1 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_begin ] stop
						 */
// Start of branch "row21"
						if (row21 != null) {

							/**
							 * [tAdvancedHash_row21 main ] start
							 */

							currentComponent = "tAdvancedHash_row21";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row21");
							}

							row21Struct row21_HashRow = new row21Struct();

							row21_HashRow.Nom_operation = row21.Nom_operation;

							row21_HashRow.Date_lancement = row21.Date_lancement;

							row21_HashRow.NO_DOSFACT = row21.NO_DOSFACT;

							row21_HashRow.ID_DOSCLIE = row21.ID_DOSCLIE;

							row21_HashRow.CIVILITE = row21.CIVILITE;

							row21_HashRow.NOM_CLIENT = row21.NOM_CLIENT;

							row21_HashRow.PRENOM_CLIENT = row21.PRENOM_CLIENT;

							row21_HashRow.ON_PSEUCLI = row21.ON_PSEUCLI;

							row21_HashRow.LOYER_CHARGE = row21.LOYER_CHARGE;

							row21_HashRow.Cpt_nbre_patrim = row21.Cpt_nbre_patrim;

							row21_HashRow.DECOHABITANT = row21.DECOHABITANT;

							row21_HashRow.NO_SITUATION = row21.NO_SITUATION;

							row21_HashRow.LIB_SITUATION = row21.LIB_SITUATION;

							row21_HashRow.DATE_SITUATION = row21.DATE_SITUATION;

							row21_HashRow.REF_PATRIM = row21.REF_PATRIM;

							row21_HashRow.CD_PATRIM1 = row21.CD_PATRIM1;

							row21_HashRow.CD_PATRIM2 = row21.CD_PATRIM2;

							row21_HashRow.CD_PATRIM3 = row21.CD_PATRIM3;

							row21_HashRow.CD_PATRIM4 = row21.CD_PATRIM4;

							row21_HashRow.Groupe = row21.Groupe;

							row21_HashRow.Batiment = row21.Batiment;

							row21_HashRow.ETAGE = row21.ETAGE;

							row21_HashRow.Nature = row21.Nature;

							row21_HashRow.DEMENAGEMENT = row21.DEMENAGEMENT;

							row21_HashRow.COUT_DEMENAGEMENT = row21.COUT_DEMENAGEMENT;

							row21_HashRow.Sous_Nature = row21.Sous_Nature;

							row21_HashRow.ADRESSE = row21.ADRESSE;

							row21_HashRow.CP = row21.CP;

							row21_HashRow.VILLE = row21.VILLE;

							row21_HashRow.inclus_operation = row21.inclus_operation;

							tHash_Lookup_row21.put(row21_HashRow);

							tos_count_tAdvancedHash_row21++;

							/**
							 * [tAdvancedHash_row21 main ] stop
							 */

							/**
							 * [tAdvancedHash_row21 process_data_begin ] start
							 */

							currentComponent = "tAdvancedHash_row21";

							/**
							 * [tAdvancedHash_row21 process_data_begin ] stop
							 */

							/**
							 * [tAdvancedHash_row21 process_data_end ] start
							 */

							currentComponent = "tAdvancedHash_row21";

							/**
							 * [tAdvancedHash_row21 process_data_end ] stop
							 */

						} // End of branch "row21"

						/**
						 * [tFileInputDelimited_1 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

						/**
						 * [tFileInputDelimited_1 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_1 end ] start
						 */

						currentComponent = "tFileInputDelimited_1";

					}
				} finally {
					if (!((Object) ("S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_merge.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_1 != null) {
							fid_tFileInputDelimited_1.close();
						}
					}
					if (fid_tFileInputDelimited_1 != null) {
						globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_1", true);
				end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_1 end ] stop
				 */

				/**
				 * [tAdvancedHash_row21 end ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				tHash_Lookup_row21.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row21");
				}

				ok_Hash.put("tAdvancedHash_row21", true);
				end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row21 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_1 finally ] start
				 */

				currentComponent = "tFileInputDelimited_1";

				/**
				 * [tFileInputDelimited_1 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row21 finally ] start
				 */

				currentComponent = "tAdvancedHash_row21";

				/**
				 * [tAdvancedHash_row21 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}

	public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.PATRIM1 == null) ? 0 : this.PATRIM1.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row15Struct other = (row15Struct) obj;

			if (this.PATRIM1 == null) {
				if (other.PATRIM1 != null)
					return false;

			} else if (!this.PATRIM1.equals(other.PATRIM1))

				return false;

			return true;
		}

		public void copyDataTo(row15Struct other) {

			other.Nom_operation = this.Nom_operation;
			other.Date_lancement = this.Date_lancement;
			other.Commune = this.Commune;
			other.PATRIM1 = this.PATRIM1;
			other.PATRIM2 = this.PATRIM2;
			other.PATRIM3 = this.PATRIM3;
			other.DECOHABITANT = this.DECOHABITANT;

		}

		public void copyKeysDataTo(row15Struct other) {

			other.PATRIM1 = this.PATRIM1;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.PATRIM1 = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PATRIM1, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Nom_operation = readString(dis, ois);

				this.Date_lancement = readDate(dis, ois);

				this.Commune = readString(dis, ois);

				this.PATRIM2 = readInteger(dis, ois);

				this.PATRIM3 = readInteger(dis, ois);

				this.DECOHABITANT = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Nom_operation, dos, oos);

				writeDate(this.Date_lancement, dos, oos);

				writeString(this.Commune, dos, oos);

				writeInteger(this.PATRIM2, dos, oos);

				writeInteger(this.PATRIM3, dos, oos);

				writeInteger(this.DECOHABITANT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row15Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATRIM1, other.PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row10Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row9Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.PATRIM1 == null) ? 0 : this.PATRIM1.hashCode());

				result = prime * result + ((this.PATRIM2 == null) ? 0 : this.PATRIM2.hashCode());

				result = prime * result + ((this.PATRIM3 == null) ? 0 : this.PATRIM3.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row14Struct other = (row14Struct) obj;

			if (this.PATRIM1 == null) {
				if (other.PATRIM1 != null)
					return false;

			} else if (!this.PATRIM1.equals(other.PATRIM1))

				return false;

			if (this.PATRIM2 == null) {
				if (other.PATRIM2 != null)
					return false;

			} else if (!this.PATRIM2.equals(other.PATRIM2))

				return false;

			if (this.PATRIM3 == null) {
				if (other.PATRIM3 != null)
					return false;

			} else if (!this.PATRIM3.equals(other.PATRIM3))

				return false;

			return true;
		}

		public void copyDataTo(row14Struct other) {

			other.Nom_operation = this.Nom_operation;
			other.Date_lancement = this.Date_lancement;
			other.Commune = this.Commune;
			other.PATRIM1 = this.PATRIM1;
			other.PATRIM2 = this.PATRIM2;
			other.PATRIM3 = this.PATRIM3;
			other.DECOHABITANT = this.DECOHABITANT;

		}

		public void copyKeysDataTo(row14Struct other) {

			other.PATRIM1 = this.PATRIM1;
			other.PATRIM2 = this.PATRIM2;
			other.PATRIM3 = this.PATRIM3;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Nom_operation = readString(dis, ois);

				this.Date_lancement = readDate(dis, ois);

				this.Commune = readString(dis, ois);

				this.DECOHABITANT = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Nom_operation, dos, oos);

				writeDate(this.Date_lancement, dos, oos);

				writeString(this.Commune, dos, oos);

				writeInteger(this.DECOHABITANT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row14Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATRIM1, other.PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATRIM2, other.PATRIM2);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATRIM3, other.PATRIM3);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row8Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];
		protected static final int DEFAULT_HASHCODE = 1;
		protected static final int PRIME = 31;
		protected int hashCode = DEFAULT_HASHCODE;
		public boolean hashCodeDirty = true;

		public String loopKey;

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		@Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;

				result = prime * result + ((this.PATRIM1 == null) ? 0 : this.PATRIM1.hashCode());

				result = prime * result + ((this.PATRIM2 == null) ? 0 : this.PATRIM2.hashCode());

				this.hashCode = result;
				this.hashCodeDirty = false;
			}
			return this.hashCode;
		}

		@Override
		public boolean equals(Object obj) {
			if (this == obj)
				return true;
			if (obj == null)
				return false;
			if (getClass() != obj.getClass())
				return false;
			final row13Struct other = (row13Struct) obj;

			if (this.PATRIM1 == null) {
				if (other.PATRIM1 != null)
					return false;

			} else if (!this.PATRIM1.equals(other.PATRIM1))

				return false;

			if (this.PATRIM2 == null) {
				if (other.PATRIM2 != null)
					return false;

			} else if (!this.PATRIM2.equals(other.PATRIM2))

				return false;

			return true;
		}

		public void copyDataTo(row13Struct other) {

			other.Nom_operation = this.Nom_operation;
			other.Date_lancement = this.Date_lancement;
			other.Commune = this.Commune;
			other.PATRIM1 = this.PATRIM1;
			other.PATRIM2 = this.PATRIM2;
			other.PATRIM3 = this.PATRIM3;
			other.DECOHABITANT = this.DECOHABITANT;

		}

		public void copyKeysDataTo(row13Struct other) {

			other.PATRIM1 = this.PATRIM1;
			other.PATRIM2 = this.PATRIM2;

		}

		private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				byte[] byteArray = new byte[length];
				dis.read(byteArray);
				strReturn = new String(byteArray, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readKeysData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeKeysData(ObjectOutputStream dos) {
			try {

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		/**
		 * Fill Values data by reading ObjectInputStream.
		 */
		public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
			try {

				int length = 0;

				this.Nom_operation = readString(dis, ois);

				this.Date_lancement = readDate(dis, ois);

				this.Commune = readString(dis, ois);

				this.PATRIM3 = readInteger(dis, ois);

				this.DECOHABITANT = readInteger(dis, ois);

			} catch (IOException e) {
				throw new RuntimeException(e);

			}

		}

		/**
		 * Return a byte array which represents Values data.
		 */
		public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
			try {

				writeString(this.Nom_operation, dos, oos);

				writeDate(this.Date_lancement, dos, oos);

				writeString(this.Commune, dos, oos);

				writeInteger(this.PATRIM3, dos, oos);

				writeInteger(this.DECOHABITANT, dos, oos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row13Struct other) {

			int returnValue = -1;

			returnValue = checkNullsAndCompare(this.PATRIM1, other.PATRIM1);
			if (returnValue != 0) {
				return returnValue;
			}

			returnValue = checkNullsAndCompare(this.PATRIM2, other.PATRIM2);
			if (returnValue != 0) {
				return returnValue;
			}

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row7Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row6Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row5Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row4Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row11Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
		final static byte[] commonByteArrayLock_HAPPI_Copy_of_Relogement_V = new byte[0];
		static byte[] commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[0];

		public String Nom_operation;

		public String getNom_operation() {
			return this.Nom_operation;
		}

		public java.util.Date Date_lancement;

		public java.util.Date getDate_lancement() {
			return this.Date_lancement;
		}

		public String Commune;

		public String getCommune() {
			return this.Commune;
		}

		public Integer PATRIM1;

		public Integer getPATRIM1() {
			return this.PATRIM1;
		}

		public Integer PATRIM2;

		public Integer getPATRIM2() {
			return this.PATRIM2;
		}

		public Integer PATRIM3;

		public Integer getPATRIM3() {
			return this.PATRIM3;
		}

		public Integer DECOHABITANT;

		public Integer getDECOHABITANT() {
			return this.DECOHABITANT;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_HAPPI_Copy_of_Relogement_V.length) {
					if (length < 1024 && commonByteArray_HAPPI_Copy_of_Relogement_V.length == 0) {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[1024];
					} else {
						commonByteArray_HAPPI_Copy_of_Relogement_V = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length);
				strReturn = new String(commonByteArray_HAPPI_Copy_of_Relogement_V, 0, length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos) throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis) throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_HAPPI_Copy_of_Relogement_V) {

				try {

					int length = 0;

					this.Nom_operation = readString(dis);

					this.Date_lancement = readDate(dis);

					this.Commune = readString(dis);

					this.PATRIM1 = readInteger(dis);

					this.PATRIM2 = readInteger(dis);

					this.PATRIM3 = readInteger(dis);

					this.DECOHABITANT = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.Nom_operation, dos);

				// java.util.Date

				writeDate(this.Date_lancement, dos);

				// String

				writeString(this.Commune, dos);

				// Integer

				writeInteger(this.PATRIM1, dos);

				// Integer

				writeInteger(this.PATRIM2, dos);

				// Integer

				writeInteger(this.PATRIM3, dos);

				// Integer

				writeInteger(this.DECOHABITANT, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("Nom_operation=" + Nom_operation);
			sb.append(",Date_lancement=" + String.valueOf(Date_lancement));
			sb.append(",Commune=" + Commune);
			sb.append(",PATRIM1=" + String.valueOf(PATRIM1));
			sb.append(",PATRIM2=" + String.valueOf(PATRIM2));
			sb.append(",PATRIM3=" + String.valueOf(PATRIM3));
			sb.append(",DECOHABITANT=" + String.valueOf(DECOHABITANT));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row3Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(), object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tFileInputDelimited_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				row3Struct row3 = new row3Struct();
				row5Struct row5 = new row5Struct();
				row6Struct row6 = new row6Struct();
				row7Struct row7 = new row7Struct();
				row7Struct row13 = row7;
				row4Struct row4 = new row4Struct();
				row8Struct row8 = new row8Struct();
				row8Struct row14 = row8;
				row11Struct row11 = new row11Struct();
				row9Struct row9 = new row9Struct();
				row10Struct row10 = new row10Struct();
				row10Struct row15 = row10;

				/**
				 * [tAdvancedHash_row13 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row13", false);
				start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row13";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row13");
				}

				int tos_count_tAdvancedHash_row13 = 0;

				// connection name:row13
				// source node:tFileOutputDelimited_3 - inputs:(row7) outputs:(row13,row13) |
				// target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
				// linked node: tMap_2 - inputs:(row2,row13) outputs:(copyOfout1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row13Struct>getLookup(matchingModeEnum_row13);

				globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);

				/**
				 * [tAdvancedHash_row13 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_3", false);
				start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row7");
				}

				int tos_count_tFileOutputDelimited_3 = 0;

				String fileName_tFileOutputDelimited_3 = "";
				fileName_tFileOutputDelimited_3 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_R2.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_3 = null;
				String extension_tFileOutputDelimited_3 = null;
				String directory_tFileOutputDelimited_3 = null;
				if ((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
							fileName_tFileOutputDelimited_3.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0,
								fileName_tFileOutputDelimited_3.lastIndexOf("."));
						extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3
								.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
						extension_tFileOutputDelimited_3 = "";
					}
					directory_tFileOutputDelimited_3 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_3 = true;
				java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);
				int nb_line_tFileOutputDelimited_3 = 0;
				int splitedFileNo_tFileOutputDelimited_3 = 0;
				int currentRow_tFileOutputDelimited_3 = 0;

				final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /**
																		 * Start field
																		 * tFileOutputDelimited_3:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
					if (!dir_tFileOutputDelimited_3.exists()) {
						dir_tFileOutputDelimited_3.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_3 = null;

				java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
				if (fileToDelete_tFileOutputDelimited_3.exists()) {
					fileToDelete_tFileOutputDelimited_3.delete();
				}
				outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_3.length() == 0) {
					outtFileOutputDelimited_3.write("Nom_operation");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Date_lancement");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("Commune");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("PATRIM1");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("PATRIM2");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("PATRIM3");
					outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.write("DECOHABITANT");
					outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
					outtFileOutputDelimited_3.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
				resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_3", isFileGenerated_tFileOutputDelimited_3);
				resourceMap.put("filetFileOutputDelimited_3", filetFileOutputDelimited_3);

				/**
				 * [tFileOutputDelimited_3 begin ] stop
				 */

				/**
				 * [tFilterRow_2 begin ] start
				 */

				ok_Hash.put("tFilterRow_2", false);
				start_Hash.put("tFilterRow_2", System.currentTimeMillis());

				currentComponent = "tFilterRow_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row6");
				}

				int tos_count_tFilterRow_2 = 0;

				int nb_line_tFilterRow_2 = 0;
				int nb_line_ok_tFilterRow_2 = 0;
				int nb_line_reject_tFilterRow_2 = 0;

				class Operator_tFilterRow_2 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_2(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_2 begin ] stop
				 */

				/**
				 * [tFilterRow_1 begin ] start
				 */

				ok_Hash.put("tFilterRow_1", false);
				start_Hash.put("tFilterRow_1", System.currentTimeMillis());

				currentComponent = "tFilterRow_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row5");
				}

				int tos_count_tFilterRow_1 = 0;

				int nb_line_tFilterRow_1 = 0;
				int nb_line_ok_tFilterRow_1 = 0;
				int nb_line_reject_tFilterRow_1 = 0;

				class Operator_tFilterRow_1 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_1(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_1 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row14 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row14", false);
				start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row14";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row14");
				}

				int tos_count_tAdvancedHash_row14 = 0;

				// connection name:row14
				// source node:tFileOutputDelimited_2 - inputs:(row8) outputs:(row14,row14) |
				// target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
				// linked node: tMap_1 - inputs:(row1,row14) outputs:(out1)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row14Struct>getLookup(matchingModeEnum_row14);

				globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);

				/**
				 * [tAdvancedHash_row14 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_2", false);
				start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_2";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row8");
				}

				int tos_count_tFileOutputDelimited_2 = 0;

				String fileName_tFileOutputDelimited_2 = "";
				fileName_tFileOutputDelimited_2 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_R1.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_2 = null;
				String extension_tFileOutputDelimited_2 = null;
				String directory_tFileOutputDelimited_2 = null;
				if ((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
							fileName_tFileOutputDelimited_2.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0,
								fileName_tFileOutputDelimited_2.lastIndexOf("."));
						extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2
								.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
						extension_tFileOutputDelimited_2 = "";
					}
					directory_tFileOutputDelimited_2 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_2 = true;
				java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);
				int nb_line_tFileOutputDelimited_2 = 0;
				int splitedFileNo_tFileOutputDelimited_2 = 0;
				int currentRow_tFileOutputDelimited_2 = 0;

				final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /**
																		 * Start field
																		 * tFileOutputDelimited_2:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
					if (!dir_tFileOutputDelimited_2.exists()) {
						dir_tFileOutputDelimited_2.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_2 = null;

				java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
				if (fileToDelete_tFileOutputDelimited_2.exists()) {
					fileToDelete_tFileOutputDelimited_2.delete();
				}
				outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_2.length() == 0) {
					outtFileOutputDelimited_2.write("Nom_operation");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Date_lancement");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("Commune");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("PATRIM1");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("PATRIM2");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("PATRIM3");
					outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.write("DECOHABITANT");
					outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
					outtFileOutputDelimited_2.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
				resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
				resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

				/**
				 * [tFileOutputDelimited_2 begin ] stop
				 */

				/**
				 * [tFilterRow_3 begin ] start
				 */

				ok_Hash.put("tFilterRow_3", false);
				start_Hash.put("tFilterRow_3", System.currentTimeMillis());

				currentComponent = "tFilterRow_3";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row4");
				}

				int tos_count_tFilterRow_3 = 0;

				int nb_line_tFilterRow_3 = 0;
				int nb_line_ok_tFilterRow_3 = 0;
				int nb_line_reject_tFilterRow_3 = 0;

				class Operator_tFilterRow_3 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_3(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_3 begin ] stop
				 */

				/**
				 * [tAdvancedHash_row15 begin ] start
				 */

				ok_Hash.put("tAdvancedHash_row15", false);
				start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				currentComponent = "tAdvancedHash_row15";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row15");
				}

				int tos_count_tAdvancedHash_row15 = 0;

				// connection name:row15
				// source node:tFileOutputDelimited_4 - inputs:(row10) outputs:(row15,row15) |
				// target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
				// linked node: tMap_3 - inputs:(row12,row15) outputs:(out3)

				org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;

				org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = org.talend.designer.components.lookup.memory.AdvancedMemoryLookup
						.<row15Struct>getLookup(matchingModeEnum_row15);

				globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);

				/**
				 * [tAdvancedHash_row15 begin ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 begin ] start
				 */

				ok_Hash.put("tFileOutputDelimited_4", false);
				start_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				currentComponent = "tFileOutputDelimited_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row10");
				}

				int tos_count_tFileOutputDelimited_4 = 0;

				String fileName_tFileOutputDelimited_4 = "";
				fileName_tFileOutputDelimited_4 = (new java.io.File(
						"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/ouput_R3.csv"))
								.getAbsolutePath().replace("\\", "/");
				String fullName_tFileOutputDelimited_4 = null;
				String extension_tFileOutputDelimited_4 = null;
				String directory_tFileOutputDelimited_4 = null;
				if ((fileName_tFileOutputDelimited_4.indexOf("/") != -1)) {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") < fileName_tFileOutputDelimited_4
							.lastIndexOf("/")) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					}
					directory_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
							fileName_tFileOutputDelimited_4.lastIndexOf("/"));
				} else {
					if (fileName_tFileOutputDelimited_4.lastIndexOf(".") != -1) {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4.substring(0,
								fileName_tFileOutputDelimited_4.lastIndexOf("."));
						extension_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4
								.substring(fileName_tFileOutputDelimited_4.lastIndexOf("."));
					} else {
						fullName_tFileOutputDelimited_4 = fileName_tFileOutputDelimited_4;
						extension_tFileOutputDelimited_4 = "";
					}
					directory_tFileOutputDelimited_4 = "";
				}
				boolean isFileGenerated_tFileOutputDelimited_4 = true;
				java.io.File filetFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);
				int nb_line_tFileOutputDelimited_4 = 0;
				int splitedFileNo_tFileOutputDelimited_4 = 0;
				int currentRow_tFileOutputDelimited_4 = 0;

				final String OUT_DELIM_tFileOutputDelimited_4 = /** Start field tFileOutputDelimited_4:FIELDSEPARATOR */
						";"/** End field tFileOutputDelimited_4:FIELDSEPARATOR */
				;

				final String OUT_DELIM_ROWSEP_tFileOutputDelimited_4 = /**
																		 * Start field
																		 * tFileOutputDelimited_4:ROWSEPARATOR
																		 */
						"\n"/** End field tFileOutputDelimited_4:ROWSEPARATOR */
				;

				// create directory only if not exists
				if (directory_tFileOutputDelimited_4 != null && directory_tFileOutputDelimited_4.trim().length() != 0) {
					java.io.File dir_tFileOutputDelimited_4 = new java.io.File(directory_tFileOutputDelimited_4);
					if (!dir_tFileOutputDelimited_4.exists()) {
						dir_tFileOutputDelimited_4.mkdirs();
					}
				}

				// routines.system.Row
				java.io.Writer outtFileOutputDelimited_4 = null;

				java.io.File fileToDelete_tFileOutputDelimited_4 = new java.io.File(fileName_tFileOutputDelimited_4);
				if (fileToDelete_tFileOutputDelimited_4.exists()) {
					fileToDelete_tFileOutputDelimited_4.delete();
				}
				outtFileOutputDelimited_4 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
						new java.io.FileOutputStream(fileName_tFileOutputDelimited_4, false), "ISO-8859-15"));
				if (filetFileOutputDelimited_4.length() == 0) {
					outtFileOutputDelimited_4.write("Nom_operation");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Date_lancement");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("Commune");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("PATRIM1");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("PATRIM2");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("PATRIM3");
					outtFileOutputDelimited_4.write(OUT_DELIM_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.write("DECOHABITANT");
					outtFileOutputDelimited_4.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);
					outtFileOutputDelimited_4.flush();
				}

				resourceMap.put("out_tFileOutputDelimited_4", outtFileOutputDelimited_4);
				resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);
				resourceMap.put("isFileGenerated_tFileOutputDelimited_4", isFileGenerated_tFileOutputDelimited_4);
				resourceMap.put("filetFileOutputDelimited_4", filetFileOutputDelimited_4);

				/**
				 * [tFileOutputDelimited_4 begin ] stop
				 */

				/**
				 * [tFilterRow_5 begin ] start
				 */

				ok_Hash.put("tFilterRow_5", false);
				start_Hash.put("tFilterRow_5", System.currentTimeMillis());

				currentComponent = "tFilterRow_5";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row9");
				}

				int tos_count_tFilterRow_5 = 0;

				int nb_line_tFilterRow_5 = 0;
				int nb_line_ok_tFilterRow_5 = 0;
				int nb_line_reject_tFilterRow_5 = 0;

				class Operator_tFilterRow_5 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_5(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_5 begin ] stop
				 */

				/**
				 * [tFilterRow_4 begin ] start
				 */

				ok_Hash.put("tFilterRow_4", false);
				start_Hash.put("tFilterRow_4", System.currentTimeMillis());

				currentComponent = "tFilterRow_4";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row11");
				}

				int tos_count_tFilterRow_4 = 0;

				int nb_line_tFilterRow_4 = 0;
				int nb_line_ok_tFilterRow_4 = 0;
				int nb_line_reject_tFilterRow_4 = 0;

				class Operator_tFilterRow_4 {
					private String sErrorMsg = "";
					private boolean bMatchFlag = true;
					private String sUnionFlag = "&&";

					public Operator_tFilterRow_4(String unionFlag) {
						sUnionFlag = unionFlag;
						bMatchFlag = "||".equals(unionFlag) ? false : true;
					}

					public String getErrorMsg() {
						if (sErrorMsg != null && sErrorMsg.length() > 1)
							return sErrorMsg.substring(1);
						else
							return null;
					}

					public boolean getMatchFlag() {
						return bMatchFlag;
					}

					public void matches(boolean partMatched, String reason) {
						// no need to care about the next judgement
						if ("||".equals(sUnionFlag) && bMatchFlag) {
							return;
						}

						if (!partMatched) {
							sErrorMsg += "|" + reason;
						}

						if ("||".equals(sUnionFlag))
							bMatchFlag = bMatchFlag || partMatched;
						else
							bMatchFlag = bMatchFlag && partMatched;
					}
				}

				/**
				 * [tFilterRow_4 begin ] stop
				 */

				/**
				 * [tReplicate_1 begin ] start
				 */

				ok_Hash.put("tReplicate_1", false);
				start_Hash.put("tReplicate_1", System.currentTimeMillis());

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStatOnConnection(resourceMap, iterateId, 0, 0, "row3");
				}

				int tos_count_tReplicate_1 = 0;

				/**
				 * [tReplicate_1 begin ] stop
				 */

				/**
				 * [tFileInputDelimited_2 begin ] start
				 */

				ok_Hash.put("tFileInputDelimited_2", false);
				start_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				currentComponent = "tFileInputDelimited_2";

				int tos_count_tFileInputDelimited_2 = 0;

				final routines.system.RowState rowstate_tFileInputDelimited_2 = new routines.system.RowState();

				int nb_line_tFileInputDelimited_2 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_2 = null;
				int limit_tFileInputDelimited_2 = -1;
				try {

					Object filename_tFileInputDelimited_2 = "S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Template_fichier_DASSOL_tests.csv";
					if (filename_tFileInputDelimited_2 instanceof java.io.InputStream) {

						int footer_value_tFileInputDelimited_2 = 0, random_value_tFileInputDelimited_2 = -1;
						if (footer_value_tFileInputDelimited_2 > 0 || random_value_tFileInputDelimited_2 > 0) {
							throw new java.lang.Exception(
									"When the input source is a stream,footer and random shouldn't be bigger than 0.");
						}

					}
					try {
						fid_tFileInputDelimited_2 = new org.talend.fileprocess.FileInputDelimited(
								"S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Template_fichier_DASSOL_tests.csv",
								"ISO-8859-15", ";", "\n", true, 1, 0, limit_tFileInputDelimited_2, -1, false);
					} catch (java.lang.Exception e) {

						System.err.println(e.getMessage());

					}

					while (fid_tFileInputDelimited_2 != null && fid_tFileInputDelimited_2.nextRecord()) {
						rowstate_tFileInputDelimited_2.reset();

						row3 = null;

						boolean whetherReject_tFileInputDelimited_2 = false;
						row3 = new row3Struct();
						try {

							int columnIndexWithD_tFileInputDelimited_2 = 0;

							String temp = "";

							columnIndexWithD_tFileInputDelimited_2 = 0;

							row3.Nom_operation = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 1;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.Date_lancement = ParserUtils.parseTo_Date(temp, "dd/MM/yyyy");

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"Date_lancement", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.Date_lancement = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 2;

							row3.Commune = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);

							columnIndexWithD_tFileInputDelimited_2 = 3;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.PATRIM1 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PATRIM1", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.PATRIM1 = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 4;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.PATRIM2 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PATRIM2", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.PATRIM2 = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 5;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.PATRIM3 = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"PATRIM3", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.PATRIM3 = null;

							}

							columnIndexWithD_tFileInputDelimited_2 = 6;

							temp = fid_tFileInputDelimited_2.get(columnIndexWithD_tFileInputDelimited_2);
							if (temp.length() > 0) {

								try {

									row3.DECOHABITANT = ParserUtils.parseTo_Integer(temp);

								} catch (java.lang.Exception ex_tFileInputDelimited_2) {
									rowstate_tFileInputDelimited_2.setException(new RuntimeException(String.format(
											"Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
											"DECOHABITANT", "row3", temp, ex_tFileInputDelimited_2),
											ex_tFileInputDelimited_2));
								}

							} else {

								row3.DECOHABITANT = null;

							}

							if (rowstate_tFileInputDelimited_2.getException() != null) {
								throw rowstate_tFileInputDelimited_2.getException();
							}

						} catch (java.lang.Exception e) {
							whetherReject_tFileInputDelimited_2 = true;

							System.err.println(e.getMessage());
							row3 = null;

						}

						/**
						 * [tFileInputDelimited_2 begin ] stop
						 */

						/**
						 * [tFileInputDelimited_2 main ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						tos_count_tFileInputDelimited_2++;

						/**
						 * [tFileInputDelimited_2 main ] stop
						 */

						/**
						 * [tFileInputDelimited_2 process_data_begin ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_begin ] stop
						 */
// Start of branch "row3"
						if (row3 != null) {

							/**
							 * [tReplicate_1 main ] start
							 */

							currentComponent = "tReplicate_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row3");
							}

							row5 = new row5Struct();

							row5.Nom_operation = row3.Nom_operation;
							row5.Date_lancement = row3.Date_lancement;
							row5.Commune = row3.Commune;
							row5.PATRIM1 = row3.PATRIM1;
							row5.PATRIM2 = row3.PATRIM2;
							row5.PATRIM3 = row3.PATRIM3;
							row5.DECOHABITANT = row3.DECOHABITANT;
							row4 = new row4Struct();

							row4.Nom_operation = row3.Nom_operation;
							row4.Date_lancement = row3.Date_lancement;
							row4.Commune = row3.Commune;
							row4.PATRIM1 = row3.PATRIM1;
							row4.PATRIM2 = row3.PATRIM2;
							row4.PATRIM3 = row3.PATRIM3;
							row4.DECOHABITANT = row3.DECOHABITANT;
							row11 = new row11Struct();

							row11.Nom_operation = row3.Nom_operation;
							row11.Date_lancement = row3.Date_lancement;
							row11.Commune = row3.Commune;
							row11.PATRIM1 = row3.PATRIM1;
							row11.PATRIM2 = row3.PATRIM2;
							row11.PATRIM3 = row3.PATRIM3;
							row11.DECOHABITANT = row3.DECOHABITANT;

							tos_count_tReplicate_1++;

							/**
							 * [tReplicate_1 main ] stop
							 */

							/**
							 * [tReplicate_1 process_data_begin ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_begin ] stop
							 */

							/**
							 * [tFilterRow_1 main ] start
							 */

							currentComponent = "tFilterRow_1";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row5");
							}

							row6 = null;
							Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
							ope_tFilterRow_1.matches((// code sample : use row5 to define the condition.
// row5.columnName1.equals("foo") ||!(row5.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row5.PATRIM3 == null), "advanced condition failed");

							if (ope_tFilterRow_1.getMatchFlag()) {
								if (row6 == null) {
									row6 = new row6Struct();
								}
								row6.Nom_operation = row5.Nom_operation;
								row6.Date_lancement = row5.Date_lancement;
								row6.Commune = row5.Commune;
								row6.PATRIM1 = row5.PATRIM1;
								row6.PATRIM2 = row5.PATRIM2;
								row6.PATRIM3 = row5.PATRIM3;
								row6.DECOHABITANT = row5.DECOHABITANT;
								nb_line_ok_tFilterRow_1++;
							} else {
								nb_line_reject_tFilterRow_1++;
							}

							nb_line_tFilterRow_1++;

							tos_count_tFilterRow_1++;

							/**
							 * [tFilterRow_1 main ] stop
							 */

							/**
							 * [tFilterRow_1 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_begin ] stop
							 */
// Start of branch "row6"
							if (row6 != null) {

								/**
								 * [tFilterRow_2 main ] start
								 */

								currentComponent = "tFilterRow_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row6");
								}

								row7 = null;
								Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
								ope_tFilterRow_2.matches((// code sample : use row6 to define the condition.
// row6.columnName1.equals("foo") ||!(row6.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								row6.PATRIM2 != null), "advanced condition failed");

								if (ope_tFilterRow_2.getMatchFlag()) {
									if (row7 == null) {
										row7 = new row7Struct();
									}
									row7.Nom_operation = row6.Nom_operation;
									row7.Date_lancement = row6.Date_lancement;
									row7.Commune = row6.Commune;
									row7.PATRIM1 = row6.PATRIM1;
									row7.PATRIM2 = row6.PATRIM2;
									row7.PATRIM3 = row6.PATRIM3;
									row7.DECOHABITANT = row6.DECOHABITANT;
									nb_line_ok_tFilterRow_2++;
								} else {
									nb_line_reject_tFilterRow_2++;
								}

								nb_line_tFilterRow_2++;

								tos_count_tFilterRow_2++;

								/**
								 * [tFilterRow_2 main ] stop
								 */

								/**
								 * [tFilterRow_2 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_2";

								/**
								 * [tFilterRow_2 process_data_begin ] stop
								 */
// Start of branch "row7"
								if (row7 != null) {

									/**
									 * [tFileOutputDelimited_3 main ] start
									 */

									currentComponent = "tFileOutputDelimited_3";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row7");
									}

									StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
									if (row7.Nom_operation != null) {
										sb_tFileOutputDelimited_3.append(row7.Nom_operation);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.Date_lancement != null) {
										sb_tFileOutputDelimited_3
												.append(FormatterUtils.format_Date(row7.Date_lancement, "dd/MM/yyyy"));
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.Commune != null) {
										sb_tFileOutputDelimited_3.append(row7.Commune);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.PATRIM1 != null) {
										sb_tFileOutputDelimited_3.append(row7.PATRIM1);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.PATRIM2 != null) {
										sb_tFileOutputDelimited_3.append(row7.PATRIM2);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.PATRIM3 != null) {
										sb_tFileOutputDelimited_3.append(row7.PATRIM3);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
									if (row7.DECOHABITANT != null) {
										sb_tFileOutputDelimited_3.append(row7.DECOHABITANT);
									}
									sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);

									nb_line_tFileOutputDelimited_3++;
									resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

									outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());

									row13 = row7;

									tos_count_tFileOutputDelimited_3++;

									/**
									 * [tFileOutputDelimited_3 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_3 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_3";

									/**
									 * [tFileOutputDelimited_3 process_data_begin ] stop
									 */

									/**
									 * [tAdvancedHash_row13 main ] start
									 */

									currentComponent = "tAdvancedHash_row13";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row13");
									}

									row13Struct row13_HashRow = new row13Struct();

									row13_HashRow.Nom_operation = row13.Nom_operation;

									row13_HashRow.Date_lancement = row13.Date_lancement;

									row13_HashRow.Commune = row13.Commune;

									row13_HashRow.PATRIM1 = row13.PATRIM1;

									row13_HashRow.PATRIM2 = row13.PATRIM2;

									row13_HashRow.PATRIM3 = row13.PATRIM3;

									row13_HashRow.DECOHABITANT = row13.DECOHABITANT;

									tHash_Lookup_row13.put(row13_HashRow);

									tos_count_tAdvancedHash_row13++;

									/**
									 * [tAdvancedHash_row13 main ] stop
									 */

									/**
									 * [tAdvancedHash_row13 process_data_begin ] start
									 */

									currentComponent = "tAdvancedHash_row13";

									/**
									 * [tAdvancedHash_row13 process_data_begin ] stop
									 */

									/**
									 * [tAdvancedHash_row13 process_data_end ] start
									 */

									currentComponent = "tAdvancedHash_row13";

									/**
									 * [tAdvancedHash_row13 process_data_end ] stop
									 */

									/**
									 * [tFileOutputDelimited_3 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_3";

									/**
									 * [tFileOutputDelimited_3 process_data_end ] stop
									 */

								} // End of branch "row7"

								/**
								 * [tFilterRow_2 process_data_end ] start
								 */

								currentComponent = "tFilterRow_2";

								/**
								 * [tFilterRow_2 process_data_end ] stop
								 */

							} // End of branch "row6"

							/**
							 * [tFilterRow_1 process_data_end ] start
							 */

							currentComponent = "tFilterRow_1";

							/**
							 * [tFilterRow_1 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_3 main ] start
							 */

							currentComponent = "tFilterRow_3";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row4");
							}

							row8 = null;
							Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
							ope_tFilterRow_3.matches((// code sample : use row4 to define the condition.
// row4.columnName1.equals("foo") ||!(row4.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row4.PATRIM3 != null), "advanced condition failed");

							if (ope_tFilterRow_3.getMatchFlag()) {
								if (row8 == null) {
									row8 = new row8Struct();
								}
								row8.Nom_operation = row4.Nom_operation;
								row8.Date_lancement = row4.Date_lancement;
								row8.Commune = row4.Commune;
								row8.PATRIM1 = row4.PATRIM1;
								row8.PATRIM2 = row4.PATRIM2;
								row8.PATRIM3 = row4.PATRIM3;
								row8.DECOHABITANT = row4.DECOHABITANT;
								nb_line_ok_tFilterRow_3++;
							} else {
								nb_line_reject_tFilterRow_3++;
							}

							nb_line_tFilterRow_3++;

							tos_count_tFilterRow_3++;

							/**
							 * [tFilterRow_3 main ] stop
							 */

							/**
							 * [tFilterRow_3 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_begin ] stop
							 */
// Start of branch "row8"
							if (row8 != null) {

								/**
								 * [tFileOutputDelimited_2 main ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row8");
								}

								StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
								if (row8.Nom_operation != null) {
									sb_tFileOutputDelimited_2.append(row8.Nom_operation);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.Date_lancement != null) {
									sb_tFileOutputDelimited_2
											.append(FormatterUtils.format_Date(row8.Date_lancement, "dd/MM/yyyy"));
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.Commune != null) {
									sb_tFileOutputDelimited_2.append(row8.Commune);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.PATRIM1 != null) {
									sb_tFileOutputDelimited_2.append(row8.PATRIM1);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.PATRIM2 != null) {
									sb_tFileOutputDelimited_2.append(row8.PATRIM2);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.PATRIM3 != null) {
									sb_tFileOutputDelimited_2.append(row8.PATRIM3);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
								if (row8.DECOHABITANT != null) {
									sb_tFileOutputDelimited_2.append(row8.DECOHABITANT);
								}
								sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);

								nb_line_tFileOutputDelimited_2++;
								resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

								outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

								row14 = row8;

								tos_count_tFileOutputDelimited_2++;

								/**
								 * [tFileOutputDelimited_2 main ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row14 main ] start
								 */

								currentComponent = "tAdvancedHash_row14";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row14");
								}

								row14Struct row14_HashRow = new row14Struct();

								row14_HashRow.Nom_operation = row14.Nom_operation;

								row14_HashRow.Date_lancement = row14.Date_lancement;

								row14_HashRow.Commune = row14.Commune;

								row14_HashRow.PATRIM1 = row14.PATRIM1;

								row14_HashRow.PATRIM2 = row14.PATRIM2;

								row14_HashRow.PATRIM3 = row14.PATRIM3;

								row14_HashRow.DECOHABITANT = row14.DECOHABITANT;

								tHash_Lookup_row14.put(row14_HashRow);

								tos_count_tAdvancedHash_row14++;

								/**
								 * [tAdvancedHash_row14 main ] stop
								 */

								/**
								 * [tAdvancedHash_row14 process_data_begin ] start
								 */

								currentComponent = "tAdvancedHash_row14";

								/**
								 * [tAdvancedHash_row14 process_data_begin ] stop
								 */

								/**
								 * [tAdvancedHash_row14 process_data_end ] start
								 */

								currentComponent = "tAdvancedHash_row14";

								/**
								 * [tAdvancedHash_row14 process_data_end ] stop
								 */

								/**
								 * [tFileOutputDelimited_2 process_data_end ] start
								 */

								currentComponent = "tFileOutputDelimited_2";

								/**
								 * [tFileOutputDelimited_2 process_data_end ] stop
								 */

							} // End of branch "row8"

							/**
							 * [tFilterRow_3 process_data_end ] start
							 */

							currentComponent = "tFilterRow_3";

							/**
							 * [tFilterRow_3 process_data_end ] stop
							 */

							/**
							 * [tFilterRow_4 main ] start
							 */

							currentComponent = "tFilterRow_4";

							if (execStat) {
								runStat.updateStatOnConnection(iterateId, 1, 1, "row11");
							}

							row9 = null;
							Operator_tFilterRow_4 ope_tFilterRow_4 = new Operator_tFilterRow_4("&&");
							ope_tFilterRow_4.matches((// code sample : use row11 to define the condition.
// row11.columnName1.equals("foo") ||!(row11.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
							row11.PATRIM3 == null), "advanced condition failed");

							if (ope_tFilterRow_4.getMatchFlag()) {
								if (row9 == null) {
									row9 = new row9Struct();
								}
								row9.Nom_operation = row11.Nom_operation;
								row9.Date_lancement = row11.Date_lancement;
								row9.Commune = row11.Commune;
								row9.PATRIM1 = row11.PATRIM1;
								row9.PATRIM2 = row11.PATRIM2;
								row9.PATRIM3 = row11.PATRIM3;
								row9.DECOHABITANT = row11.DECOHABITANT;
								nb_line_ok_tFilterRow_4++;
							} else {
								nb_line_reject_tFilterRow_4++;
							}

							nb_line_tFilterRow_4++;

							tos_count_tFilterRow_4++;

							/**
							 * [tFilterRow_4 main ] stop
							 */

							/**
							 * [tFilterRow_4 process_data_begin ] start
							 */

							currentComponent = "tFilterRow_4";

							/**
							 * [tFilterRow_4 process_data_begin ] stop
							 */
// Start of branch "row9"
							if (row9 != null) {

								/**
								 * [tFilterRow_5 main ] start
								 */

								currentComponent = "tFilterRow_5";

								if (execStat) {
									runStat.updateStatOnConnection(iterateId, 1, 1, "row9");
								}

								row10 = null;
								Operator_tFilterRow_5 ope_tFilterRow_5 = new Operator_tFilterRow_5("&&");
								ope_tFilterRow_5.matches((// code sample : use row9 to define the condition.
// row9.columnName1.equals("foo") ||!(row9.columnName2.equals("bar"))
// replace the following expression by your own filter condition 
								row9.PATRIM2 == null), "advanced condition failed");

								if (ope_tFilterRow_5.getMatchFlag()) {
									if (row10 == null) {
										row10 = new row10Struct();
									}
									row10.Nom_operation = row9.Nom_operation;
									row10.Date_lancement = row9.Date_lancement;
									row10.Commune = row9.Commune;
									row10.PATRIM1 = row9.PATRIM1;
									row10.PATRIM2 = row9.PATRIM2;
									row10.PATRIM3 = row9.PATRIM3;
									row10.DECOHABITANT = row9.DECOHABITANT;
									nb_line_ok_tFilterRow_5++;
								} else {
									nb_line_reject_tFilterRow_5++;
								}

								nb_line_tFilterRow_5++;

								tos_count_tFilterRow_5++;

								/**
								 * [tFilterRow_5 main ] stop
								 */

								/**
								 * [tFilterRow_5 process_data_begin ] start
								 */

								currentComponent = "tFilterRow_5";

								/**
								 * [tFilterRow_5 process_data_begin ] stop
								 */
// Start of branch "row10"
								if (row10 != null) {

									/**
									 * [tFileOutputDelimited_4 main ] start
									 */

									currentComponent = "tFileOutputDelimited_4";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row10");
									}

									StringBuilder sb_tFileOutputDelimited_4 = new StringBuilder();
									if (row10.Nom_operation != null) {
										sb_tFileOutputDelimited_4.append(row10.Nom_operation);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.Date_lancement != null) {
										sb_tFileOutputDelimited_4
												.append(FormatterUtils.format_Date(row10.Date_lancement, "dd/MM/yyyy"));
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.Commune != null) {
										sb_tFileOutputDelimited_4.append(row10.Commune);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.PATRIM1 != null) {
										sb_tFileOutputDelimited_4.append(row10.PATRIM1);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.PATRIM2 != null) {
										sb_tFileOutputDelimited_4.append(row10.PATRIM2);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.PATRIM3 != null) {
										sb_tFileOutputDelimited_4.append(row10.PATRIM3);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_tFileOutputDelimited_4);
									if (row10.DECOHABITANT != null) {
										sb_tFileOutputDelimited_4.append(row10.DECOHABITANT);
									}
									sb_tFileOutputDelimited_4.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_4);

									nb_line_tFileOutputDelimited_4++;
									resourceMap.put("nb_line_tFileOutputDelimited_4", nb_line_tFileOutputDelimited_4);

									outtFileOutputDelimited_4.write(sb_tFileOutputDelimited_4.toString());

									row15 = row10;

									tos_count_tFileOutputDelimited_4++;

									/**
									 * [tFileOutputDelimited_4 main ] stop
									 */

									/**
									 * [tFileOutputDelimited_4 process_data_begin ] start
									 */

									currentComponent = "tFileOutputDelimited_4";

									/**
									 * [tFileOutputDelimited_4 process_data_begin ] stop
									 */

									/**
									 * [tAdvancedHash_row15 main ] start
									 */

									currentComponent = "tAdvancedHash_row15";

									if (execStat) {
										runStat.updateStatOnConnection(iterateId, 1, 1, "row15");
									}

									row15Struct row15_HashRow = new row15Struct();

									row15_HashRow.Nom_operation = row15.Nom_operation;

									row15_HashRow.Date_lancement = row15.Date_lancement;

									row15_HashRow.Commune = row15.Commune;

									row15_HashRow.PATRIM1 = row15.PATRIM1;

									row15_HashRow.PATRIM2 = row15.PATRIM2;

									row15_HashRow.PATRIM3 = row15.PATRIM3;

									row15_HashRow.DECOHABITANT = row15.DECOHABITANT;

									tHash_Lookup_row15.put(row15_HashRow);

									tos_count_tAdvancedHash_row15++;

									/**
									 * [tAdvancedHash_row15 main ] stop
									 */

									/**
									 * [tAdvancedHash_row15 process_data_begin ] start
									 */

									currentComponent = "tAdvancedHash_row15";

									/**
									 * [tAdvancedHash_row15 process_data_begin ] stop
									 */

									/**
									 * [tAdvancedHash_row15 process_data_end ] start
									 */

									currentComponent = "tAdvancedHash_row15";

									/**
									 * [tAdvancedHash_row15 process_data_end ] stop
									 */

									/**
									 * [tFileOutputDelimited_4 process_data_end ] start
									 */

									currentComponent = "tFileOutputDelimited_4";

									/**
									 * [tFileOutputDelimited_4 process_data_end ] stop
									 */

								} // End of branch "row10"

								/**
								 * [tFilterRow_5 process_data_end ] start
								 */

								currentComponent = "tFilterRow_5";

								/**
								 * [tFilterRow_5 process_data_end ] stop
								 */

							} // End of branch "row9"

							/**
							 * [tFilterRow_4 process_data_end ] start
							 */

							currentComponent = "tFilterRow_4";

							/**
							 * [tFilterRow_4 process_data_end ] stop
							 */

							/**
							 * [tReplicate_1 process_data_end ] start
							 */

							currentComponent = "tReplicate_1";

							/**
							 * [tReplicate_1 process_data_end ] stop
							 */

						} // End of branch "row3"

						/**
						 * [tFileInputDelimited_2 process_data_end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

						/**
						 * [tFileInputDelimited_2 process_data_end ] stop
						 */

						/**
						 * [tFileInputDelimited_2 end ] start
						 */

						currentComponent = "tFileInputDelimited_2";

					}
				} finally {
					if (!((Object) ("S:/Direction de la Maîtrise de la Performance/3-DATA ANALYST/01 - Indicateur/Relogement/Template_fichier_DASSOL_tests.csv") instanceof java.io.InputStream)) {
						if (fid_tFileInputDelimited_2 != null) {
							fid_tFileInputDelimited_2.close();
						}
					}
					if (fid_tFileInputDelimited_2 != null) {
						globalMap.put("tFileInputDelimited_2_NB_LINE", fid_tFileInputDelimited_2.getRowNumber());

					}
				}

				ok_Hash.put("tFileInputDelimited_2", true);
				end_Hash.put("tFileInputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileInputDelimited_2 end ] stop
				 */

				/**
				 * [tReplicate_1 end ] start
				 */

				currentComponent = "tReplicate_1";

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row3");
				}

				ok_Hash.put("tReplicate_1", true);
				end_Hash.put("tReplicate_1", System.currentTimeMillis());

				/**
				 * [tReplicate_1 end ] stop
				 */

				/**
				 * [tFilterRow_1 end ] start
				 */

				currentComponent = "tFilterRow_1";

				globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
				globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row5");
				}

				ok_Hash.put("tFilterRow_1", true);
				end_Hash.put("tFilterRow_1", System.currentTimeMillis());

				/**
				 * [tFilterRow_1 end ] stop
				 */

				/**
				 * [tFilterRow_2 end ] start
				 */

				currentComponent = "tFilterRow_2";

				globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
				globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row6");
				}

				ok_Hash.put("tFilterRow_2", true);
				end_Hash.put("tFilterRow_2", System.currentTimeMillis());

				/**
				 * [tFilterRow_2 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 end ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (outtFileOutputDelimited_3 != null) {
					outtFileOutputDelimited_3.flush();
					outtFileOutputDelimited_3.close();
				}

				globalMap.put("tFileOutputDelimited_3_NB_LINE", nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME", fileName_tFileOutputDelimited_3);

				if (isFileGenerated_tFileOutputDelimited_3 && nb_line_tFileOutputDelimited_3 == 0) {

					filetFileOutputDelimited_3.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_3", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row7");
				}

				ok_Hash.put("tFileOutputDelimited_3", true);
				end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_3 end ] stop
				 */

				/**
				 * [tAdvancedHash_row13 end ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				tHash_Lookup_row13.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row13");
				}

				ok_Hash.put("tAdvancedHash_row13", true);
				end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row13 end ] stop
				 */

				/**
				 * [tFilterRow_3 end ] start
				 */

				currentComponent = "tFilterRow_3";

				globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
				globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row4");
				}

				ok_Hash.put("tFilterRow_3", true);
				end_Hash.put("tFilterRow_3", System.currentTimeMillis());

				/**
				 * [tFilterRow_3 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 end ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (outtFileOutputDelimited_2 != null) {
					outtFileOutputDelimited_2.flush();
					outtFileOutputDelimited_2.close();
				}

				globalMap.put("tFileOutputDelimited_2_NB_LINE", nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME", fileName_tFileOutputDelimited_2);

				if (isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0) {

					filetFileOutputDelimited_2.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_2", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row8");
				}

				ok_Hash.put("tFileOutputDelimited_2", true);
				end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_2 end ] stop
				 */

				/**
				 * [tAdvancedHash_row14 end ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				tHash_Lookup_row14.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row14");
				}

				ok_Hash.put("tAdvancedHash_row14", true);
				end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row14 end ] stop
				 */

				/**
				 * [tFilterRow_4 end ] start
				 */

				currentComponent = "tFilterRow_4";

				globalMap.put("tFilterRow_4_NB_LINE", nb_line_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_OK", nb_line_ok_tFilterRow_4);
				globalMap.put("tFilterRow_4_NB_LINE_REJECT", nb_line_reject_tFilterRow_4);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row11");
				}

				ok_Hash.put("tFilterRow_4", true);
				end_Hash.put("tFilterRow_4", System.currentTimeMillis());

				/**
				 * [tFilterRow_4 end ] stop
				 */

				/**
				 * [tFilterRow_5 end ] start
				 */

				currentComponent = "tFilterRow_5";

				globalMap.put("tFilterRow_5_NB_LINE", nb_line_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_OK", nb_line_ok_tFilterRow_5);
				globalMap.put("tFilterRow_5_NB_LINE_REJECT", nb_line_reject_tFilterRow_5);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row9");
				}

				ok_Hash.put("tFilterRow_5", true);
				end_Hash.put("tFilterRow_5", System.currentTimeMillis());

				/**
				 * [tFilterRow_5 end ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 end ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (outtFileOutputDelimited_4 != null) {
					outtFileOutputDelimited_4.flush();
					outtFileOutputDelimited_4.close();
				}

				globalMap.put("tFileOutputDelimited_4_NB_LINE", nb_line_tFileOutputDelimited_4);
				globalMap.put("tFileOutputDelimited_4_FILE_NAME", fileName_tFileOutputDelimited_4);

				if (isFileGenerated_tFileOutputDelimited_4 && nb_line_tFileOutputDelimited_4 == 0) {

					filetFileOutputDelimited_4.delete();

				}

				resourceMap.put("finish_tFileOutputDelimited_4", true);

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row10");
				}

				ok_Hash.put("tFileOutputDelimited_4", true);
				end_Hash.put("tFileOutputDelimited_4", System.currentTimeMillis());

				/**
				 * [tFileOutputDelimited_4 end ] stop
				 */

				/**
				 * [tAdvancedHash_row15 end ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				tHash_Lookup_row15.endPut();

				if (execStat) {
					runStat.updateStat(resourceMap, iterateId, 2, 0, "row15");
				}

				ok_Hash.put("tAdvancedHash_row15", true);
				end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());

				/**
				 * [tAdvancedHash_row15 end ] stop
				 */

			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tFileInputDelimited_2 finally ] start
				 */

				currentComponent = "tFileInputDelimited_2";

				/**
				 * [tFileInputDelimited_2 finally ] stop
				 */

				/**
				 * [tReplicate_1 finally ] start
				 */

				currentComponent = "tReplicate_1";

				/**
				 * [tReplicate_1 finally ] stop
				 */

				/**
				 * [tFilterRow_1 finally ] start
				 */

				currentComponent = "tFilterRow_1";

				/**
				 * [tFilterRow_1 finally ] stop
				 */

				/**
				 * [tFilterRow_2 finally ] start
				 */

				currentComponent = "tFilterRow_2";

				/**
				 * [tFilterRow_2 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_3 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_3";

				if (resourceMap.get("finish_tFileOutputDelimited_3") == null) {

					java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_3");
					if (outtFileOutputDelimited_3 != null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_3")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_3"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_3")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_3 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row13 finally ] start
				 */

				currentComponent = "tAdvancedHash_row13";

				/**
				 * [tAdvancedHash_row13 finally ] stop
				 */

				/**
				 * [tFilterRow_3 finally ] start
				 */

				currentComponent = "tFilterRow_3";

				/**
				 * [tFilterRow_3 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_2 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_2";

				if (resourceMap.get("finish_tFileOutputDelimited_2") == null) {

					java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_2");
					if (outtFileOutputDelimited_2 != null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_2")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_2 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row14 finally ] start
				 */

				currentComponent = "tAdvancedHash_row14";

				/**
				 * [tAdvancedHash_row14 finally ] stop
				 */

				/**
				 * [tFilterRow_4 finally ] start
				 */

				currentComponent = "tFilterRow_4";

				/**
				 * [tFilterRow_4 finally ] stop
				 */

				/**
				 * [tFilterRow_5 finally ] start
				 */

				currentComponent = "tFilterRow_5";

				/**
				 * [tFilterRow_5 finally ] stop
				 */

				/**
				 * [tFileOutputDelimited_4 finally ] start
				 */

				currentComponent = "tFileOutputDelimited_4";

				if (resourceMap.get("finish_tFileOutputDelimited_4") == null) {

					java.io.Writer outtFileOutputDelimited_4 = (java.io.Writer) resourceMap
							.get("out_tFileOutputDelimited_4");
					if (outtFileOutputDelimited_4 != null) {
						outtFileOutputDelimited_4.flush();
						outtFileOutputDelimited_4.close();
					}

					if (Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_4")))
							&& Integer
									.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_4"))) == 0) {

						((java.io.File) resourceMap.get("filetFileOutputDelimited_4")).delete();

					}

				}

				/**
				 * [tFileOutputDelimited_4 finally ] stop
				 */

				/**
				 * [tAdvancedHash_row15 finally ] start
				 */

				currentComponent = "tAdvancedHash_row15";

				/**
				 * [tAdvancedHash_row15 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tFileInputDelimited_2_SUBPROCESS_STATE", 1);
	}

	public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { // start the resume
				globalResumeTicket = true;

				/**
				 * [tPrejob_1 begin ] start
				 */

				ok_Hash.put("tPrejob_1", false);
				start_Hash.put("tPrejob_1", System.currentTimeMillis());

				currentComponent = "tPrejob_1";

				int tos_count_tPrejob_1 = 0;

				/**
				 * [tPrejob_1 begin ] stop
				 */

				/**
				 * [tPrejob_1 main ] start
				 */

				currentComponent = "tPrejob_1";

				tos_count_tPrejob_1++;

				/**
				 * [tPrejob_1 main ] stop
				 */

				/**
				 * [tPrejob_1 process_data_begin ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_begin ] stop
				 */

				/**
				 * [tPrejob_1 process_data_end ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 process_data_end ] stop
				 */

				/**
				 * [tPrejob_1 end ] start
				 */

				currentComponent = "tPrejob_1";

				ok_Hash.put("tPrejob_1", true);
				end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if (execStat) {
					runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);

				/**
				 * [tPrejob_1 end ] stop
				 */
			} // end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent, globalMap);

			throw te;
		} catch (java.lang.Error error) {

			runStat.stopThreadStat();

			throw error;
		} finally {

			try {

				/**
				 * [tPrejob_1 finally ] start
				 */

				currentComponent = "tPrejob_1";

				/**
				 * [tPrejob_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean enableLogStash;

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private PropertiesWithType context_param = new PropertiesWithType();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final Copy_of_Relogement_V Copy_of_Relogement_VClass = new Copy_of_Relogement_V();

		int exitCode = Copy_of_Relogement_VClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}
		enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		if (portStats != null) {
			// portStats = -1; //for testing
			if (portStats < 0 || portStats > 65535) {
				// issue:10869, the portStats is invalid, so this client socket can't open
				System.err.println("The statistics socket port " + portStats + " is invalid.");
				execStat = false;
			}
		} else {
			execStat = false;
		}

		try {
			// call job/subjob with an existing context, like: --context=production. if
			// without this parameter, there will use the default context instead.
			java.io.InputStream inContext = Copy_of_Relogement_V.class.getClassLoader()
					.getResourceAsStream("happi/copy_of_relogement_v_0_1/contexts/" + contextStr + ".properties");
			if (inContext == null) {
				inContext = Copy_of_Relogement_V.class.getClassLoader()
						.getResourceAsStream("config/contexts/" + contextStr + ".properties");
			}
			if (inContext != null) {
				// defaultProps is in order to keep the original context value
				if (context != null && context.isEmpty()) {
					defaultProps.load(inContext);
					context = new ContextProperties(defaultProps);
				}

				inContext.close();
			} else if (!isDefaultContext) {
				// print info and job continue to run, for case: context_param is not empty.
				System.err.println("Could not find the context " + contextStr);
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
				// set types for params from parentJobs
				for (Object key : context_param.keySet()) {
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
			}
			class ContextProcessing {
				private void processContext_0() {
				}

				public void processAllContext() {
					processContext_0();
				}
			}

			new ContextProcessing().processAllContext();
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "",
				"", "", "", "", resumeUtil.convertToJsonText(context, parametersToEncrypt));

		if (execStat) {
			try {
				runStat.openSocket(!isChildJob);
				runStat.setAllPID(rootPid, fatherPid, pid, jobName);
				runStat.startThreadStat(clientHost, portStats);
				runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
			} catch (java.io.IOException ioException) {
				ioException.printStackTrace();
			}
		}

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		try {
			errorCode = null;
			tPrejob_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tPrejob_1) {
			globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

			e_tPrejob_1.printStackTrace();

		}

		this.globalResumeTicket = false;// to run others jobs

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println(
					(endUsedMemory - startUsedMemory) + " bytes memory increase when running : Copy_of_Relogement_V");
		}

		if (execStat) {
			runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
			runStat.stopThreadStat();
		}
		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "",
				"" + returnCode, "", "", "");

		return returnCode;

	}

	// only for OSGi env
	public void destroy() {
		closeSqlDbConnections();

	}

	private void closeSqlDbConnections() {
		try {
			Object obj_conn;
			obj_conn = globalMap.remove("conn_tDBConnection_1");
			if (null != obj_conn) {
				((java.sql.Connection) obj_conn).close();
			}
		} catch (java.lang.Exception e) {
		}
	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));

		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_type")) {
			String keyValue = arg.substring(15);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.setContextType(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1));
				}

			}

		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {// for trunjob call
			final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
	}

	private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" }, { "\\'", "\'" }, { "\\r", "\r" },
			{ "\\f", "\f" }, { "\\b", "\b" }, { "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the
			// result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 914421 characters generated by Talend Open Studio for Data Integration on the
 * 11 avril 2022 18:31:18 CEST
 ************************************************************************************************/