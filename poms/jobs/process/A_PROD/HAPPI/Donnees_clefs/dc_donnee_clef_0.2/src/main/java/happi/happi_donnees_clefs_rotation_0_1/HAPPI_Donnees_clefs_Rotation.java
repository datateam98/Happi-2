// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.happi_donnees_clefs_rotation_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: HAPPI_Donnees_clefs_Rotation Purpose: Précisions sur l'évolution des rotations<br>
 * Description: Remonter les rotations par mois et avec une répartition du volume par DP pour connaître les entrées et les sorties ainsi que le taux de rotation par mois <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class HAPPI_Donnees_clefs_Rotation implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "HAPPI_Donnees_clefs_Rotation";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				HAPPI_Donnees_clefs_Rotation.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(HAPPI_Donnees_clefs_Rotation.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:GTqJ+Hf28Z8W18E2k/JdyokLSI3wmDuBpZcynw==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_3Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Type_location;

				public String getType_location () {
					return this.Type_location;
				}
				
			    public Float Loyer_charge;

				public Float getLoyer_charge () {
					return this.Loyer_charge;
				}
				
			    public Integer surface_habitable;

				public Integer getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date date_fin_precedent;

				public java.util.Date getDate_fin_precedent () {
					return this.date_fin_precedent;
				}
				
			    public java.util.Date date_reference;

				public java.util.Date getDate_reference () {
					return this.date_reference;
				}
				
			    public Integer delai_vacance;

				public Integer getDelai_vacance () {
					return this.delai_vacance;
				}
				
			    public String categorie_delai_vacance;

				public String getCategorie_delai_vacance () {
					return this.categorie_delai_vacance;
				}
				
			    public String type_rotation;

				public String getType_rotation () {
					return this.type_rotation;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
					this.DP = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.Groupe = readString(dis);
					
					this.Type_location = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Loyer_charge = null;
           				} else {
           			    	this.Loyer_charge = dis.readFloat();
           				}
					
						this.surface_habitable = readInteger(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.date_fin_precedent = readDate(dis);
					
					this.date_reference = readDate(dis);
					
						this.delai_vacance = readInteger(dis);
					
					this.categorie_delai_vacance = readString(dis);
					
					this.type_rotation = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Type_location,dos);
					
					// Float
				
						if(this.Loyer_charge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Loyer_charge);
		            	}
					
					// Integer
				
						writeInteger(this.surface_habitable,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.date_fin_precedent,dos);
					
					// java.util.Date
				
						writeDate(this.date_reference,dos);
					
					// Integer
				
						writeInteger(this.delai_vacance,dos);
					
					// String
				
						writeString(this.categorie_delai_vacance,dos);
					
					// String
				
						writeString(this.type_rotation,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",DP="+DP);
		sb.append(",VILLE="+VILLE);
		sb.append(",Groupe="+Groupe);
		sb.append(",Type_location="+Type_location);
		sb.append(",Loyer_charge="+String.valueOf(Loyer_charge));
		sb.append(",surface_habitable="+String.valueOf(surface_habitable));
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",date_fin_precedent="+String.valueOf(date_fin_precedent));
		sb.append(",date_reference="+String.valueOf(date_reference));
		sb.append(",delai_vacance="+String.valueOf(delai_vacance));
		sb.append(",categorie_delai_vacance="+categorie_delai_vacance);
		sb.append(",type_rotation="+type_rotation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Type_location;

				public String getType_location () {
					return this.Type_location;
				}
				
			    public Float Loyer_charge;

				public Float getLoyer_charge () {
					return this.Loyer_charge;
				}
				
			    public Integer surface_habitable;

				public Integer getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public String CD_LOCAL1;

				public String getCD_LOCAL1 () {
					return this.CD_LOCAL1;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date date_fin_precedent;

				public java.util.Date getDate_fin_precedent () {
					return this.date_fin_precedent;
				}
				
			    public java.util.Date date_reference;

				public java.util.Date getDate_reference () {
					return this.date_reference;
				}
				
			    public Integer delai_vacance;

				public Integer getDelai_vacance () {
					return this.delai_vacance;
				}
				
			    public String categorie_delai_vacance;

				public String getCategorie_delai_vacance () {
					return this.categorie_delai_vacance;
				}
				
			    public String type_rotation;

				public String getType_rotation () {
					return this.type_rotation;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.Groupe = readString(dis);
					
					this.Type_location = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Loyer_charge = null;
           				} else {
           			    	this.Loyer_charge = dis.readFloat();
           				}
					
						this.surface_habitable = readInteger(dis);
					
					this.CD_LOCAL1 = readString(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.date_fin_precedent = readDate(dis);
					
					this.date_reference = readDate(dis);
					
						this.delai_vacance = readInteger(dis);
					
					this.categorie_delai_vacance = readString(dis);
					
					this.type_rotation = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Type_location,dos);
					
					// Float
				
						if(this.Loyer_charge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Loyer_charge);
		            	}
					
					// Integer
				
						writeInteger(this.surface_habitable,dos);
					
					// String
				
						writeString(this.CD_LOCAL1,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.date_fin_precedent,dos);
					
					// java.util.Date
				
						writeDate(this.date_reference,dos);
					
					// Integer
				
						writeInteger(this.delai_vacance,dos);
					
					// String
				
						writeString(this.categorie_delai_vacance,dos);
					
					// String
				
						writeString(this.type_rotation,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Groupe="+Groupe);
		sb.append(",Type_location="+Type_location);
		sb.append(",Loyer_charge="+String.valueOf(Loyer_charge));
		sb.append(",surface_habitable="+String.valueOf(surface_habitable));
		sb.append(",CD_LOCAL1="+CD_LOCAL1);
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",date_fin_precedent="+String.valueOf(date_fin_precedent));
		sb.append(",date_reference="+String.valueOf(date_reference));
		sb.append(",delai_vacance="+String.valueOf(delai_vacance));
		sb.append(",categorie_delai_vacance="+categorie_delai_vacance);
		sb.append(",type_rotation="+type_rotation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];

	
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String Groupe;

				public String getGroupe () {
					return this.Groupe;
				}
				
			    public String Type_location;

				public String getType_location () {
					return this.Type_location;
				}
				
			    public Float Loyer_charge;

				public Float getLoyer_charge () {
					return this.Loyer_charge;
				}
				
			    public Integer surface_habitable;

				public Integer getSurface_habitable () {
					return this.surface_habitable;
				}
				
			    public String CD_LOCAL1;

				public String getCD_LOCAL1 () {
					return this.CD_LOCAL1;
				}
				
			    public java.util.Date DTD_PAT_G;

				public java.util.Date getDTD_PAT_G () {
					return this.DTD_PAT_G;
				}
				
			    public java.util.Date date_fin_precedent;

				public java.util.Date getDate_fin_precedent () {
					return this.date_fin_precedent;
				}
				
			    public java.util.Date date_reference;

				public java.util.Date getDate_reference () {
					return this.date_reference;
				}
				
			    public Integer delai_vacance;

				public Integer getDelai_vacance () {
					return this.delai_vacance;
				}
				
			    public String categorie_delai_vacance;

				public String getCategorie_delai_vacance () {
					return this.categorie_delai_vacance;
				}
				
			    public String type_rotation;

				public String getType_rotation () {
					return this.type_rotation;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation) {

        	try {

        		int length = 0;
		
					this.CD_PATRIM = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.Groupe = readString(dis);
					
					this.Type_location = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.Loyer_charge = null;
           				} else {
           			    	this.Loyer_charge = dis.readFloat();
           				}
					
						this.surface_habitable = readInteger(dis);
					
					this.CD_LOCAL1 = readString(dis);
					
					this.DTD_PAT_G = readDate(dis);
					
					this.date_fin_precedent = readDate(dis);
					
					this.date_reference = readDate(dis);
					
						this.delai_vacance = readInteger(dis);
					
					this.categorie_delai_vacance = readString(dis);
					
					this.type_rotation = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.Groupe,dos);
					
					// String
				
						writeString(this.Type_location,dos);
					
					// Float
				
						if(this.Loyer_charge == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeFloat(this.Loyer_charge);
		            	}
					
					// Integer
				
						writeInteger(this.surface_habitable,dos);
					
					// String
				
						writeString(this.CD_LOCAL1,dos);
					
					// java.util.Date
				
						writeDate(this.DTD_PAT_G,dos);
					
					// java.util.Date
				
						writeDate(this.date_fin_precedent,dos);
					
					// java.util.Date
				
						writeDate(this.date_reference,dos);
					
					// Integer
				
						writeInteger(this.delai_vacance,dos);
					
					// String
				
						writeString(this.categorie_delai_vacance,dos);
					
					// String
				
						writeString(this.type_rotation,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_PATRIM="+CD_PATRIM);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",Groupe="+Groupe);
		sb.append(",Type_location="+Type_location);
		sb.append(",Loyer_charge="+String.valueOf(Loyer_charge));
		sb.append(",surface_habitable="+String.valueOf(surface_habitable));
		sb.append(",CD_LOCAL1="+CD_LOCAL1);
		sb.append(",DTD_PAT_G="+String.valueOf(DTD_PAT_G));
		sb.append(",date_fin_precedent="+String.valueOf(date_fin_precedent));
		sb.append(",date_reference="+String.valueOf(date_reference));
		sb.append(",delai_vacance="+String.valueOf(delai_vacance));
		sb.append(",categorie_delai_vacance="+categorie_delai_vacance);
		sb.append(",type_rotation="+type_rotation);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_4Process(globalMap);

		row3Struct row3 = new row3Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Referentiel/TDB_rotation.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"UTF-8"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("CD_PATRIM");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DP");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("VILLE");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Groupe");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Type_location");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Loyer_charge");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("surface_habitable");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DTD_PAT_G");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("date_fin_precedent");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("date_reference");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("delai_vacance");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("categorie_delai_vacance");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type_rotation");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
        resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String VILLE;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				conn_tDBInput_3 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_3 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select a.*,\ndatediff (day,date_fin_precedent,DATE_REF) as delai_vacance,\nCASE \n	WHEN datediff (day,date_fin_preceden"
+"t,DATE_REF) between '0' and '90' THEN 'moins de 3 mois'\n	WHEN datediff (day,date_fin_precedent,DATE_REF) between '91' a"
+"nd '180' THEN 'entre 3 et 6 mois'\n	WHEN datediff (day,date_fin_precedent,DATE_REF) between '180' and '365' THEN 'entre "
+"6 et 12 mois'\n	WHEN datediff (day,date_fin_precedent,DATE_REF) > 365  THEN 'au-delà de 12 mois'\n	ELSE 'loué'\nEND as c"
+"ategorie_delai_vacance,\n	'Entree' as type_rotation\nfrom \n(\nselect x.CD_PATRIM, x.CD_PATRIM1, x.Groupe, x.CD_TYPLOC, "
+"x.MT_TRUBREL, x.SURF_HAB, x.CD_LOCALI1, x.DTD_PAT_G,\n(select max(DTF_CTRAT) from PAT_CONTRA xyz\n where CD_PATRIM4 <> 0"
+" AND ON_PSEUCLI='N' AND LB_ET_DTD in ('Affectation','Affectation validée','Présent')\n AND xyz.CD_PATRIM = x.CD_PATRIM a"
+"nd xyz.DTF_CTRAT < y.DTD_CTRAT and format(xyz.DTF_CTRAT,'yyyy-MM-dd') <> '1900-01-01') as date_fin_precedent, DTD_CTRAT "
+"as DATE_REF\nfrom\n		(SELECT a.CD_PATRIM, a.CD_PATRIM1, CAST((LEFT(a.CD_PATRIM, 5)  + ' - ' + b.LB_PATRIM1) AS VARCHAR(1"
+"00)) AS Groupe, b.CD_TYPLOC, b.MT_TRUBREL, b.SURF_HAB, b.CD_LOCALI1, b.DTD_PAT_G, a.DATE\n		from SID_PATRIMOINE_GIM a le"
+"ft join PATRIMOINE_GIM b on a.CD_PATRIM = b.CD_PATRIM \n		WHERE a.SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LO"
+"GEMENT','LOGEMENT CIAL.','PAVILLON')\n		and a.CD_SOCPROP in(1,6) \n		and a.DT_ANNEE >= year(getdate()) -3\n		AND a.CD_ET"
+"AT = 'MS'\n		and a.CD_SOCIETE = 1 and b.CD_SOCIETE = 1\n		) x\ninner join\n		(SELECT *\n		 FROM PAT_CONTRA b\n		 WHERE 1"
+" = 1\n		 AND b.CD_PATRIM4 <> 0 AND b.ON_PSEUCLI='N'\n		 AND b.LB_ET_DTD in ('Affectation','Affectation validée','Présent"
+"') \n		 AND format(b.DTD_CTRAT, 'yyyy') >= year(getdate()) -3\n		 AND ON_ENT_FIC='N' \n		 ) y on x.CD_PATRIM = y.CD_PATR"
+"IM and format(y.DTD_CTRAT, 'yyyy-MM') = format(x.DATE, 'yyyy-MM')\n) a\nUNION\nselect a.*,\n'0' as delai_vacance,\n'Non "
+"applicable' as categorie_delai_vacance,\n'Sortie' as type_rotation\nfrom \n(\nselect x.CD_PATRIM, x.CD_PATRIM1, x.Groupe"
+", x.CD_TYPLOC, x.MT_TRUBREL, x.SURF_HAB, x.CD_LOCALI1, x.DTD_PAT_G,\n'1900-01-01' as date_fin_precedent, DTF_CTRAT as DA"
+"TE_REF\nfrom\n		(SELECT a.CD_PATRIM, a.CD_PATRIM1, CAST((LEFT(a.CD_PATRIM, 5)  + ' - ' + b.LB_PATRIM1) AS VARCHAR(100)) "
+"AS Groupe, b.CD_TYPLOC, b.MT_TRUBREL, b.SURF_HAB, b.CD_LOCALI1, b.DTD_PAT_G, a.DATE\n		from SID_PATRIMOINE_GIM a left jo"
+"in PATRIMOINE_GIM b on a.CD_PATRIM = b.CD_PATRIM \n		WHERE a.SIO_LB_NATLOC In ('ASSOCIATIONS','ATELIER ARTISTE','LOGEMEN"
+"T','LOGEMENT CIAL.','PAVILLON')\n		and a.CD_SOCPROP in(1,6)\n		and a.DT_ANNEE >= year(getdate()) -3\n		AND a.CD_ETAT = '"
+"MS'\n		and a.CD_SOCIETE = 1 and b.CD_SOCIETE = 1\n		) x\ninner join\n		(SELECT *\n		 FROM PAT_CONTRA b\n		 WHERE 1 = 1\n"
+"		 AND b.CD_PATRIM4 <> 0 AND b.ON_PSEUCLI='N'\n		 AND b.LB_ET_DTD in ('Affectation','Affectation validée','Présent') \n	"
+"	 AND format(b.DTF_CTRAT, 'yyyy') >= year(getdate()) -3\n		 AND format(b.DTF_CTRAT, 'yyyy-MM-dd') <> '1900-01-01'	\n		 a"
+"nd b.CD_SOCIETE = 1\n		 and ON_DEP_FIC='N'\n		 ) y on x.CD_PATRIM = y.CD_PATRIM and format(y.DTF_CTRAT, 'yyyy-MM') = for"
+"mat(x.DATE, 'yyyy-MM')\n) a";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.CD_PATRIM = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.CD_PATRIM = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.CD_PATRIM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.CD_PATRIM1 = null;
							} else {
		                          
            row3.CD_PATRIM1 = rs_tDBInput_3.getInt(2);
            if(rs_tDBInput_3.wasNull()){
                    row3.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.Groupe = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Groupe = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.Groupe = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.Groupe = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.Type_location = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.Type_location = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.Type_location = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.Type_location = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.Loyer_charge = null;
							} else {
		                          
            row3.Loyer_charge = rs_tDBInput_3.getFloat(5);
            if(rs_tDBInput_3.wasNull()){
                    row3.Loyer_charge = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.surface_habitable = null;
							} else {
		                          
            row3.surface_habitable = rs_tDBInput_3.getInt(6);
            if(rs_tDBInput_3.wasNull()){
                    row3.surface_habitable = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.CD_LOCAL1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(7);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.CD_LOCAL1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.CD_LOCAL1 = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.CD_LOCAL1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.DTD_PAT_G = null;
							} else {
										
			row3.DTD_PAT_G = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 8);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.date_fin_precedent = null;
							} else {
										
			row3.date_fin_precedent = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 9);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.date_reference = null;
							} else {
										
			row3.date_reference = mssqlGTU_tDBInput_3.getDate(rsmd_tDBInput_3, rs_tDBInput_3, 10);
			
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.delai_vacance = null;
							} else {
		                          
            row3.delai_vacance = rs_tDBInput_3.getInt(11);
            if(rs_tDBInput_3.wasNull()){
                    row3.delai_vacance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.categorie_delai_vacance = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(12);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.categorie_delai_vacance = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.categorie_delai_vacance = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.categorie_delai_vacance = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.type_rotation = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(13);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row3.type_rotation = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row3.type_rotation = tmpContent_tDBInput_3.trim();
                }
            } else {
                row3.type_rotation = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row4HashKey.CD_LOCALI1 = row3.CD_LOCAL1 ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.CD_LOCALI1 = '" + row4HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.VILLE = row4.VILLE != null ?
	(row4.VILLE.equals("SURESNES") ?
		(row3.CD_PATRIM1 == 3023 
		|| row3.CD_PATRIM1 == 3800
		|| row3.CD_PATRIM1 == 3804
		|| row3.CD_PATRIM1 == 3801
		|| row3.CD_PATRIM1 == 3802
		|| row3.CD_PATRIM1 == 3806
		|| row3.CD_PATRIM1 == 3024
		|| row3.CD_PATRIM1 == 3025
		|| row3.CD_PATRIM1 == 3701
		|| row3.CD_PATRIM1 == 3027
		|| row3.CD_PATRIM1 == 11013
		|| row3.CD_PATRIM1 == 11022
		|| row3.CD_PATRIM1 == 3803 
		|| row3.CD_PATRIM1 == 3700
		|| row3.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row4.VILLE) : "-" ;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.CD_PATRIM = row3.CD_PATRIM ;
out2_tmp.DP = row4.DP ;
out2_tmp.VILLE = Var.VILLE ;
out2_tmp.Groupe = row3.Groupe ;
out2_tmp.Type_location = row3.Type_location ;
out2_tmp.Loyer_charge = row3.Loyer_charge ;
out2_tmp.surface_habitable = row3.surface_habitable ;
out2_tmp.DTD_PAT_G = row3.DTD_PAT_G ;
out2_tmp.date_fin_precedent = row3.date_fin_precedent ;
out2_tmp.date_reference = row3.date_reference ;
out2_tmp.delai_vacance = row3.delai_vacance ;
out2_tmp.categorie_delai_vacance = row3.categorie_delai_vacance ;
out2_tmp.type_rotation = row3.type_rotation ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(out2.CD_PATRIM != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.CD_PATRIM
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.DP != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.DP
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.VILLE != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.VILLE
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.Groupe != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.Groupe
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.Type_location != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.Type_location
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.Loyer_charge != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.Loyer_charge
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.surface_habitable != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.surface_habitable
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.DTD_PAT_G != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out2.DTD_PAT_G, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.date_fin_precedent != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out2.date_fin_precedent, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.date_reference != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(out2.date_reference, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.delai_vacance != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.delai_vacance
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.categorie_delai_vacance != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.categorie_delai_vacance
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(out2.type_rotation != null) {
                        sb_tFileOutputDelimited_2.append(
                            out2.type_rotation
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0){
				
					filetFileOutputDelimited_2.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_2")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];
    static byte[] commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length) {
				if(length < 1024 && commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation.length == 0) {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[1024];
				} else {
   					commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length);
			strReturn = new String(commonByteArray_HAPPI_HAPPI_Donnees_clefs_Rotation, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_HAPPI_Donnees_clefs_Rotation) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tDBInput_4 - inputs:(after_tDBInput_3) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(row3,row4) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:hHTGxnOWrYtCMg5fQ8DXBjgUp05Ie0I7ejcrOQ==");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		    String port_tDBInput_4 = "1433";
		    String dbname_tDBInput_4 = "HDSHData" ;
			String url_tDBInput_4 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_4)) {
		    	url_tDBInput_4 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_4)) {
				url_tDBInput_4 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_4 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_4 = "";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT T_DEF_LOCALISATION.CD_LOCALI1,\n		T_DEF_LOCALISATION.VILLE,\n		T_DEF_LOCALISATION.DP\nFROM	T_DEF_LOCALISATION";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(1);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.CD_LOCALI1 = tmpContent_tDBInput_4;
                }
            } else {
                row4.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.VILLE = tmpContent_tDBInput_4;
                }
            } else {
                row4.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row4.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row4.DP = tmpContent_tDBInput_4;
                }
            } else {
                row4.DP = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.CD_LOCALI1 = row4.CD_LOCALI1;
				
				row4_HashRow.VILLE = row4.VILLE;
				
				row4_HashRow.DP = row4.DP;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_1", false);
		start_Hash.put("tFTPConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_1";

	
		int tos_count_tFTPConnection_1 = 0;
		

 
int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
    org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_1 = null;



	class MyTrust_tFTPConnection_1 {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
 
				String decryptedKeyStorePassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:L3lp27uAuSlpeBaTaVyUVgKEMi2eTZrgAR+MHNFrJsQ=");
			ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"), decryptedKeyStorePassword_tFTPConnection_1.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
    javax.net.ssl.SSLContext sslContext_tFTPConnection_1 = null;
    javax.net.ssl.TrustManager[] trustManager_tFTPConnection_1 = null;
    javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_1 = null;
    MyTrust_tFTPConnection_1 myTrust_tFTPConnection_1 = null;

    try {
        sslContext_tFTPConnection_1 = javax.net.ssl.SSLContext.getInstance("SSL");
        myTrust_tFTPConnection_1 = new MyTrust_tFTPConnection_1();
        trustManager_tFTPConnection_1 = myTrust_tFTPConnection_1.getTrustManagers();
        sslContext_tFTPConnection_1.init(null, trustManager_tFTPConnection_1, new java.security.SecureRandom());
        sslSocketFactory_tFTPConnection_1 = sslContext_tFTPConnection_1.getSocketFactory();

        if(("true").equals(System.getProperty("http.proxySet")) ){
            String httpProxyHost = System.getProperty("http.proxyHost");
            int httpProxyPort = Integer.getInteger("http.proxyPort");
            String httpProxyUser = System.getProperty("http.proxyUser");
            String httpProxyPass = System.getProperty("http.proxyPassword");

            ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = "ftps.toucantoco.com" + ":" + 990;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

                String httpProxyHost = proxyAddress.getAddress().getHostAddress();
                int httpProxyPort = proxyAddress.getPort();
                String httpProxyUser = "";
                String httpProxyPass = ""; //leave it empty if proxy creds weren't specified

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
                if (proxyCreds != null) {
                    httpProxyUser = proxyCreds.getUser();
                    httpProxyPass = proxyCreds.getPass();
                }

                ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

            } else { //no http proxy for ftp host defined
                ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
            }
        } else {
            ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.setControlEncoding("ISO-8859-15");


        if (connectionTimeout_tFTPConnection_1 > 0) {
            ftp_tFTPConnection_1.setDefaultTimeout(connectionTimeout_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.connect("ftps.toucantoco.com",990);
        ftp_tFTPConnection_1.setRemoteVerificationEnabled(true);
 
	final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:jg9y86vwGLY03nbzfJqjdOcF8yyDzWo2+t244Pxk+VA9rr6aDxqMI5sIlwbxnuNsutunE17UyljryfGO");

        boolean isLoginSuccessful_tFTPConnection_1 = ftp_tFTPConnection_1.login("hauts-de-seine-habitat", decryptedPassword_tFTPConnection_1);

        if (!isLoginSuccessful_tFTPConnection_1) {
            throw new RuntimeException("Login failed");
        }

        ftp_tFTPConnection_1.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
            ftp_tFTPConnection_1.execPBSZ(0);
            ftp_tFTPConnection_1.execPROT("P");
    } catch (Exception e) {
        throw e;
    }

        ftp_tFTPConnection_1.enterLocalPassiveMode();
    globalMap.put("conn_tFTPConnection_1", ftp_tFTPConnection_1);

 



/**
 * [tFTPConnection_1 begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 


	tos_count_tFTPConnection_1++;

/**
 * [tFTPConnection_1 main ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_1 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 

ok_Hash.put("tFTPConnection_1", true);
end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFTPPut_1Process(globalMap);



/**
 * [tFTPConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPPut_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_1", false);
		start_Hash.put("tFTPPut_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_1";

	
		int tos_count_tFTPPut_1 = 0;
		


int nb_file_tFTPPut_1 = 0;

		org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_1 = null;
		String rootDir_tFTPPut_1 = null;
			ftp_tFTPPut_1 = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("conn_tFTPConnection_1");
			
			
			rootDir_tFTPPut_1 = ftp_tFTPPut_1.printWorkingDirectory();
		String remotedir_tFTPPut_1 = ("./Referentiel").replaceAll("\\\\", "/");

		boolean cwdSuccess_tFTPPut_1 = ftp_tFTPPut_1.changeWorkingDirectory(remotedir_tFTPPut_1);

		if (!cwdSuccess_tFTPPut_1) {
			throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_1.getReplyString());
		}

		java.util.List<java.util.Map<String,String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String,String>>();

			java.util.Map<String,String> maptFTPPut_10 = new java.util.HashMap<String,String>();
			maptFTPPut_10.put("TDB_rotation.csv", "");
			listtFTPPut_1.add(maptFTPPut_10);
		String localdirtFTPPut_1 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/Referentiel";
		
		for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

 



/**
 * [tFTPPut_1 begin ] stop
 */
	
	/**
	 * [tFTPPut_1 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

try{
        String currentStatus_tFTPPut_1 = "No file transfered.";
        globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
        boolean needRename_tFTPPut_1 = false;
        for (String keytFTPPut_1 : keySettFTPPut_1){
            if(keytFTPPut_1 == null || "".equals(keytFTPPut_1)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_1 =  localdirtFTPPut_1;
            String filemasktFTPPut_1 = keytFTPPut_1;
            String dirtFTPPut_1 = null;
                String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/") ;
            int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
            if (itFTPPut_1!=-1){
                dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
                masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1+1);
            }
            if (dirtFTPPut_1!=null && !"".equals(dirtFTPPut_1)) tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
                masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
            final String finalMasktFTPPut_1 = masktFTPPut_1;
            java.io.File[] listingstFTPPut_1 = null;
            java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
            if (filetFTPPut_1.isDirectory()) {
                listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_1).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }

            java.util.List<String> remoteExistsFiles_tFTPPut_1 = new java.util.ArrayList<String>();

            String[] ftpFileNames_tFTPPut_1 = ftp_tFTPPut_1.listNames();
            for (String ftpFileName : ftpFileNames_tFTPPut_1) {
                if("".equals(maptFTPPut_1.get(keytFTPPut_1))){
                    if (ftpFileName.matches(masktFTPPut_1)) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }else{
                    if (ftpFileName.matches(maptFTPPut_1.get(keytFTPPut_1))) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }
            }

            if(listingstFTPPut_1 != null && listingstFTPPut_1.length > 0){
                for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++){
                    if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)){
                        java.io.File file_in_localDir_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1];
                        java.io.FileInputStream file_stream_tFTPPut_1 = new java.io.FileInputStream(file_in_localDir_tFTPPut_1);
                        globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(file_in_localDir_tFTPPut_1.getName()));
                        String newName_tFTPPut_1 = ("".equals(maptFTPPut_1.get(keytFTPPut_1)))?file_in_localDir_tFTPPut_1.getName():maptFTPPut_1.get(keytFTPPut_1);
                            needRename_tFTPPut_1 = true;
                            if ((remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1))){
                                ftp_tFTPPut_1.deleteFile(newName_tFTPPut_1);
                            }
                            ftp_tFTPPut_1.storeFile(file_in_localDir_tFTPPut_1.getName(), file_stream_tFTPPut_1);

                            globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1));

                        file_stream_tFTPPut_1.close();
                        nb_file_tFTPPut_1++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if (!((maptFTPPut_1.get(keytFTPPut_1) == null) || maptFTPPut_1.get(keytFTPPut_1).isEmpty() || keytFTPPut_1.equals(maptFTPPut_1.get(keytFTPPut_1)))){
                try{
                    if(needRename_tFTPPut_1){
                        ftp_tFTPPut_1.rename(keytFTPPut_1, maptFTPPut_1.get(keytFTPPut_1));
                    }
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
                }catch(IOException e_tFTPPut_1){
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_1;
                }
            }
            needRename_tFTPPut_1 = false;
        }
    }catch(java.lang.Exception e_tFTPPut_1){
            System.err.print(e_tFTPPut_1.getMessage());
    }

 


	tos_count_tFTPPut_1++;

/**
 * [tFTPPut_1 main ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPPut_1 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

	}
	  		ftp_tFTPPut_1.changeWorkingDirectory(rootDir_tFTPPut_1);
	
	
globalMap.put("tFTPPut_1_NB_FILE",nb_file_tFTPPut_1);


 

ok_Hash.put("tFTPPut_1", true);
end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFTPClose_1Process(globalMap);



/**
 * [tFTPPut_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_1", false);
		start_Hash.put("tFTPClose_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_1";

	
		int tos_count_tFTPClose_1 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {
      try {
			
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_1 begin ] stop
 */
	
	/**
	 * [tFTPClose_1 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 


	tos_count_tFTPClose_1++;

/**
 * [tFTPClose_1 main ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_1 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 

ok_Hash.put("tFTPClose_1", true);
end_Hash.put("tFTPClose_1", System.currentTimeMillis());




/**
 * [tFTPClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {   
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
     
  }
 



/**
 * [tFTPClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final HAPPI_Donnees_clefs_Rotation HAPPI_Donnees_clefs_RotationClass = new HAPPI_Donnees_clefs_Rotation();

        int exitCode = HAPPI_Donnees_clefs_RotationClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = HAPPI_Donnees_clefs_Rotation.class.getClassLoader().getResourceAsStream("happi/happi_donnees_clefs_rotation_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = HAPPI_Donnees_clefs_Rotation.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : HAPPI_Donnees_clefs_Rotation");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();
    closeFtpConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }



    private void closeFtpConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tFTPConnection_1");
            if (obj_conn != null) {
                ((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
            }
        } catch (java.lang.Exception e) {
        }
    }








    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));


            connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     135501 characters generated by Talend Open Studio for Data Integration 
 *     on the 22 septembre 2022 14:36:17 CEST
 ************************************************************************************************/