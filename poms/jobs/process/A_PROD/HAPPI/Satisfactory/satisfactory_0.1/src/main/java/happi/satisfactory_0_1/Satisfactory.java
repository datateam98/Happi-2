// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.satisfactory_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Satisfactory Purpose: Générer automatiquement les KPI pour Toucan des données clefs<br>
 * Description: Récupérer de l'infocentre et de datamart les données permettant la génération automatique des KPI dans l'outil Toucan toto sur l'application données clefs <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Satisfactory implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Satisfactory";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Satisfactory.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Satisfactory.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPPut_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPPut_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFTPClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFTPClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPPut_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFTPClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";

	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBConnection_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";

	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	

public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:kjwTjO1Fjs2xTbjLllaPpL3XTC5UvOovnRS0bg==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tDBInput_2Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String Gestionnaire;

				public String getGestionnaire () {
					return this.Gestionnaire;
				}
				
			    public String Proprietaire;

				public String getProprietaire () {
					return this.Proprietaire;
				}
				
			    public Integer num_affaire;

				public Integer getNum_affaire () {
					return this.num_affaire;
				}
				
			    public String service_responsable;

				public String getService_responsable () {
					return this.service_responsable;
				}
				
			    public String Origine_affaire;

				public String getOrigine_affaire () {
					return this.Origine_affaire;
				}
				
			    public String type_affaire;

				public String getType_affaire () {
					return this.type_affaire;
				}
				
			    public String Motif;

				public String getMotif () {
					return this.Motif;
				}
				
			    public String etat_affaire;

				public String getEtat_affaire () {
					return this.etat_affaire;
				}
				
			    public String canal_contact;

				public String getCanal_contact () {
					return this.canal_contact;
				}
				
			    public String clef_patrimoine;

				public String getClef_patrimoine () {
					return this.clef_patrimoine;
				}
				
			    public java.util.Date date_creation_affaire;

				public java.util.Date getDate_creation_affaire () {
					return this.date_creation_affaire;
				}
				
			    public Integer nbr_jour_resol;

				public Integer getNbr_jour_resol () {
					return this.nbr_jour_resol;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.Gestionnaire = readString(dis);
					
					this.Proprietaire = readString(dis);
					
						this.num_affaire = readInteger(dis);
					
					this.service_responsable = readString(dis);
					
					this.Origine_affaire = readString(dis);
					
					this.type_affaire = readString(dis);
					
					this.Motif = readString(dis);
					
					this.etat_affaire = readString(dis);
					
					this.canal_contact = readString(dis);
					
					this.clef_patrimoine = readString(dis);
					
					this.date_creation_affaire = readDate(dis);
					
						this.nbr_jour_resol = readInteger(dis);
					
					this.collaborateur = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.DP = readString(dis);
					
					this.DT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Gestionnaire,dos);
					
					// String
				
						writeString(this.Proprietaire,dos);
					
					// Integer
				
						writeInteger(this.num_affaire,dos);
					
					// String
				
						writeString(this.service_responsable,dos);
					
					// String
				
						writeString(this.Origine_affaire,dos);
					
					// String
				
						writeString(this.type_affaire,dos);
					
					// String
				
						writeString(this.Motif,dos);
					
					// String
				
						writeString(this.etat_affaire,dos);
					
					// String
				
						writeString(this.canal_contact,dos);
					
					// String
				
						writeString(this.clef_patrimoine,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation_affaire,dos);
					
					// Integer
				
						writeInteger(this.nbr_jour_resol,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Gestionnaire="+Gestionnaire);
		sb.append(",Proprietaire="+Proprietaire);
		sb.append(",num_affaire="+String.valueOf(num_affaire));
		sb.append(",service_responsable="+service_responsable);
		sb.append(",Origine_affaire="+Origine_affaire);
		sb.append(",type_affaire="+type_affaire);
		sb.append(",Motif="+Motif);
		sb.append(",etat_affaire="+etat_affaire);
		sb.append(",canal_contact="+canal_contact);
		sb.append(",clef_patrimoine="+clef_patrimoine);
		sb.append(",date_creation_affaire="+String.valueOf(date_creation_affaire));
		sb.append(",nbr_jour_resol="+String.valueOf(nbr_jour_resol));
		sb.append(",collaborateur="+collaborateur);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String Gestionnaire;

				public String getGestionnaire () {
					return this.Gestionnaire;
				}
				
			    public String Proprietaire;

				public String getProprietaire () {
					return this.Proprietaire;
				}
				
			    public Integer num_affaire;

				public Integer getNum_affaire () {
					return this.num_affaire;
				}
				
			    public String service_responsable;

				public String getService_responsable () {
					return this.service_responsable;
				}
				
			    public String Origine_affaire;

				public String getOrigine_affaire () {
					return this.Origine_affaire;
				}
				
			    public String type_affaire;

				public String getType_affaire () {
					return this.type_affaire;
				}
				
			    public String Motif;

				public String getMotif () {
					return this.Motif;
				}
				
			    public String etat_affaire;

				public String getEtat_affaire () {
					return this.etat_affaire;
				}
				
			    public String canal_contact;

				public String getCanal_contact () {
					return this.canal_contact;
				}
				
			    public String clef_patrimoine;

				public String getClef_patrimoine () {
					return this.clef_patrimoine;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String LB_PATRIM1;

				public String getLB_PATRIM1 () {
					return this.LB_PATRIM1;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public java.util.Date date_creation_affaire;

				public java.util.Date getDate_creation_affaire () {
					return this.date_creation_affaire;
				}
				
			    public Integer nbr_jour_resol;

				public Integer getNbr_jour_resol () {
					return this.nbr_jour_resol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.Gestionnaire = readString(dis);
					
					this.Proprietaire = readString(dis);
					
						this.num_affaire = readInteger(dis);
					
					this.service_responsable = readString(dis);
					
					this.Origine_affaire = readString(dis);
					
					this.type_affaire = readString(dis);
					
					this.Motif = readString(dis);
					
					this.etat_affaire = readString(dis);
					
					this.canal_contact = readString(dis);
					
					this.clef_patrimoine = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.LB_PATRIM1 = readString(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
					this.collaborateur = readString(dis);
					
					this.date_creation_affaire = readDate(dis);
					
						this.nbr_jour_resol = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Gestionnaire,dos);
					
					// String
				
						writeString(this.Proprietaire,dos);
					
					// Integer
				
						writeInteger(this.num_affaire,dos);
					
					// String
				
						writeString(this.service_responsable,dos);
					
					// String
				
						writeString(this.Origine_affaire,dos);
					
					// String
				
						writeString(this.type_affaire,dos);
					
					// String
				
						writeString(this.Motif,dos);
					
					// String
				
						writeString(this.etat_affaire,dos);
					
					// String
				
						writeString(this.canal_contact,dos);
					
					// String
				
						writeString(this.clef_patrimoine,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.LB_PATRIM1,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation_affaire,dos);
					
					// Integer
				
						writeInteger(this.nbr_jour_resol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Gestionnaire="+Gestionnaire);
		sb.append(",Proprietaire="+Proprietaire);
		sb.append(",num_affaire="+String.valueOf(num_affaire));
		sb.append(",service_responsable="+service_responsable);
		sb.append(",Origine_affaire="+Origine_affaire);
		sb.append(",type_affaire="+type_affaire);
		sb.append(",Motif="+Motif);
		sb.append(",etat_affaire="+etat_affaire);
		sb.append(",canal_contact="+canal_contact);
		sb.append(",clef_patrimoine="+clef_patrimoine);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",LB_PATRIM1="+LB_PATRIM1);
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",collaborateur="+collaborateur);
		sb.append(",date_creation_affaire="+String.valueOf(date_creation_affaire));
		sb.append(",nbr_jour_resol="+String.valueOf(nbr_jour_resol));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_2Struct implements routines.system.IPersistableRow<after_tDBInput_2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String Gestionnaire;

				public String getGestionnaire () {
					return this.Gestionnaire;
				}
				
			    public String Proprietaire;

				public String getProprietaire () {
					return this.Proprietaire;
				}
				
			    public Integer num_affaire;

				public Integer getNum_affaire () {
					return this.num_affaire;
				}
				
			    public String service_responsable;

				public String getService_responsable () {
					return this.service_responsable;
				}
				
			    public String Origine_affaire;

				public String getOrigine_affaire () {
					return this.Origine_affaire;
				}
				
			    public String type_affaire;

				public String getType_affaire () {
					return this.type_affaire;
				}
				
			    public String Motif;

				public String getMotif () {
					return this.Motif;
				}
				
			    public String etat_affaire;

				public String getEtat_affaire () {
					return this.etat_affaire;
				}
				
			    public String canal_contact;

				public String getCanal_contact () {
					return this.canal_contact;
				}
				
			    public String clef_patrimoine;

				public String getClef_patrimoine () {
					return this.clef_patrimoine;
				}
				
			    public Integer CD_PATRIM1;

				public Integer getCD_PATRIM1 () {
					return this.CD_PATRIM1;
				}
				
			    public String LB_PATRIM1;

				public String getLB_PATRIM1 () {
					return this.LB_PATRIM1;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public java.util.Date date_creation_affaire;

				public java.util.Date getDate_creation_affaire () {
					return this.date_creation_affaire;
				}
				
			    public Integer nbr_jour_resol;

				public Integer getNbr_jour_resol () {
					return this.nbr_jour_resol;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.Gestionnaire = readString(dis);
					
					this.Proprietaire = readString(dis);
					
						this.num_affaire = readInteger(dis);
					
					this.service_responsable = readString(dis);
					
					this.Origine_affaire = readString(dis);
					
					this.type_affaire = readString(dis);
					
					this.Motif = readString(dis);
					
					this.etat_affaire = readString(dis);
					
					this.canal_contact = readString(dis);
					
					this.clef_patrimoine = readString(dis);
					
						this.CD_PATRIM1 = readInteger(dis);
					
					this.LB_PATRIM1 = readString(dis);
					
					this.CD_LOCALI1 = readString(dis);
					
					this.collaborateur = readString(dis);
					
					this.date_creation_affaire = readDate(dis);
					
						this.nbr_jour_resol = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Gestionnaire,dos);
					
					// String
				
						writeString(this.Proprietaire,dos);
					
					// Integer
				
						writeInteger(this.num_affaire,dos);
					
					// String
				
						writeString(this.service_responsable,dos);
					
					// String
				
						writeString(this.Origine_affaire,dos);
					
					// String
				
						writeString(this.type_affaire,dos);
					
					// String
				
						writeString(this.Motif,dos);
					
					// String
				
						writeString(this.etat_affaire,dos);
					
					// String
				
						writeString(this.canal_contact,dos);
					
					// String
				
						writeString(this.clef_patrimoine,dos);
					
					// Integer
				
						writeInteger(this.CD_PATRIM1,dos);
					
					// String
				
						writeString(this.LB_PATRIM1,dos);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// java.util.Date
				
						writeDate(this.date_creation_affaire,dos);
					
					// Integer
				
						writeInteger(this.nbr_jour_resol,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Gestionnaire="+Gestionnaire);
		sb.append(",Proprietaire="+Proprietaire);
		sb.append(",num_affaire="+String.valueOf(num_affaire));
		sb.append(",service_responsable="+service_responsable);
		sb.append(",Origine_affaire="+Origine_affaire);
		sb.append(",type_affaire="+type_affaire);
		sb.append(",Motif="+Motif);
		sb.append(",etat_affaire="+etat_affaire);
		sb.append(",canal_contact="+canal_contact);
		sb.append(",clef_patrimoine="+clef_patrimoine);
		sb.append(",CD_PATRIM1="+String.valueOf(CD_PATRIM1));
		sb.append(",LB_PATRIM1="+LB_PATRIM1);
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
		sb.append(",collaborateur="+collaborateur);
		sb.append(",date_creation_affaire="+String.valueOf(date_creation_affaire));
		sb.append(",nbr_jour_resol="+String.valueOf(nbr_jour_resol));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_1Process(globalMap);

		row1Struct row1 = new row1Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory/Satisfactory_ARAVIS.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("Gestionnaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Proprietaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("num_affaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("service_responsable");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Origine_affaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("type_affaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("Motif");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("etat_affaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("canal_contact");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("clef_patrimoine");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("date_creation_affaire");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("nbr_jour_resol");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("collaborateur");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("VILLE");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DP");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("DT");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_1", isFileGenerated_tFileOutputDelimited_1);
        resourceMap.put("filetFileOutputDelimited_1", filetFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String VILLE;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_2", false);
		start_Hash.put("tDBInput_2", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_2";

	
		int tos_count_tDBInput_2 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_2 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_2 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_2  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_2, talendToDBArray_tDBInput_2); 
		    int nb_line_tDBInput_2 = 0;
		    java.sql.Connection conn_tDBInput_2 = null;
				conn_tDBInput_2 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_2 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_2 = conn_tDBInput_2.createStatement();

		    String dbquery_tDBInput_2 = "SELECT\na.LB_SOCIETE as Gestionnaire, -- récupère le gestionnaire\na.LB_SOCPROP as Propriétaire, -- remonte le propriét"
+"aire du patrimoine\na.NO_AFFAIRE as num_affaire, -- valeur unique du numéro d'affaire\nLB_CODE2 as service_responsable, "
+"-- détermine qui a pris en charge la demande\na.LB_ORIAFF as origine_affaire, -- récupère le type de contact à l'origine"
+" de l'affaire (Autre tiers, Client, Fournisseur, Service...)\na.LB_TYPAFF as type_affaire, -- Récupère le type d'affaire"
+"s (Administratif, Interne, technique, trouble du voisinage)\nCASE						 -- Indique le motif de la demande\n	WHEN CD_QUAL"
+"IF2 ='' then a.LB_QUALIF1\n	WHEN (CD_QUALIF2 is not null and CD_QUALIF2 not in (select CD_QUALAFF from Z_AF_QUALIF zaq))"
+" then ('code technique : ' + CD_QUALIF2)\n	ELSE c.LB_QUALAFF  \nEND as Motif,\na.LB_ETAT_AF as etat_affaire, -- détermin"
+"er si l'affaire et en cours ou résolu\na.LB_CONTACT as canal_contact, -- déterminer comment nous avons été contacté (Cou"
+"rrier, Espace locataire, Interne, etc...)\na.CD_PATRIM as clef_patrimoine, -- déterminer quel patrimoine est en cause\nd"
+".CD_PATRIM1,\nd.LB_PATRIM1,\na.CD_LOCALI1,-- donne des précisions sur la localisation - servira à être croisé avec la TA"
+"BLE : T_DEF_LOCALISATION\na.SC_NOM_PER as collaborateur, -- détermine le collaborateur qui s'occupe de cette demande\na."
+"DT_CREAAFF as date_creation_affaire, --  remonte la date de création de l'affaire\na.NBJJ_TRT_C as nbr_jour_resol_date_c"
+"rea -- Nbre de jours résolution en lien avec date création\nFROM AFFAIRE a \n	left join ORGANISAT_GIM b on a.SC_CLE_HO ="
+" b.CD_HIERORG \n	left join Z_AF_QUALIF c on a.CD_QUALIF2 = c.CD_QUALAFF \n	-- left join @DTDP param ON a.CD_LOCALI1 = pa"
+"ram.CD_LOCALI1\n	left join PATRIMOINE_GIM d on d.CD_PATRIM = a.CD_PATRIM\nwhere DT_CREAAFF >= dateadd(month,-18,getdate("
+")) -- récupère les 2 dernières années d'historique\nand a.CD_SOCPROP in (1,6) -- récupère les affaires liés à haut de se"
+"ine et hat de bièvre habitat";
			

            	globalMap.put("tDBInput_2_QUERY",dbquery_tDBInput_2);
		    java.sql.ResultSet rs_tDBInput_2 = null;

		    try {
		    	rs_tDBInput_2 = stmt_tDBInput_2.executeQuery(dbquery_tDBInput_2);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_2 = rs_tDBInput_2.getMetaData();
		    	int colQtyInRs_tDBInput_2 = rsmd_tDBInput_2.getColumnCount();

		    String tmpContent_tDBInput_2 = null;
		    
		    
		    while (rs_tDBInput_2.next()) {
		        nb_line_tDBInput_2++;
		        
							if(colQtyInRs_tDBInput_2 < 1) {
								row1.Gestionnaire = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(1);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Gestionnaire = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.Gestionnaire = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.Gestionnaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 2) {
								row1.Proprietaire = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(2);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Proprietaire = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.Proprietaire = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.Proprietaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 3) {
								row1.num_affaire = null;
							} else {
		                          
            row1.num_affaire = rs_tDBInput_2.getInt(3);
            if(rs_tDBInput_2.wasNull()){
                    row1.num_affaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 4) {
								row1.service_responsable = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(4);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.service_responsable = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.service_responsable = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.service_responsable = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 5) {
								row1.Origine_affaire = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(5);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Origine_affaire = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.Origine_affaire = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.Origine_affaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 6) {
								row1.type_affaire = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(6);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.type_affaire = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.type_affaire = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.type_affaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 7) {
								row1.Motif = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(7);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.Motif = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.Motif = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.Motif = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 8) {
								row1.etat_affaire = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(8);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.etat_affaire = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.etat_affaire = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.etat_affaire = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 9) {
								row1.canal_contact = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(9);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.canal_contact = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.canal_contact = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.canal_contact = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 10) {
								row1.clef_patrimoine = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(10);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.clef_patrimoine = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.clef_patrimoine = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.clef_patrimoine = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 11) {
								row1.CD_PATRIM1 = null;
							} else {
		                          
            row1.CD_PATRIM1 = rs_tDBInput_2.getInt(11);
            if(rs_tDBInput_2.wasNull()){
                    row1.CD_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 12) {
								row1.LB_PATRIM1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(12);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_PATRIM1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.LB_PATRIM1 = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.LB_PATRIM1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 13) {
								row1.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(13);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(13).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.CD_LOCALI1 = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 14) {
								row1.collaborateur = null;
							} else {
	                         		
           		tmpContent_tDBInput_2 = rs_tDBInput_2.getString(14);
            if(tmpContent_tDBInput_2 != null) {
            	if (talendToDBList_tDBInput_2 .contains(rsmd_tDBInput_2.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.collaborateur = FormatterUtils.formatUnwithE(tmpContent_tDBInput_2);
            	} else {
                	row1.collaborateur = tmpContent_tDBInput_2.trim();
                }
            } else {
                row1.collaborateur = null;
            }
		                    }
							if(colQtyInRs_tDBInput_2 < 15) {
								row1.date_creation_affaire = null;
							} else {
										
			row1.date_creation_affaire = mssqlGTU_tDBInput_2.getDate(rsmd_tDBInput_2, rs_tDBInput_2, 15);
			
		                    }
							if(colQtyInRs_tDBInput_2 < 16) {
								row1.nbr_jour_resol = null;
							} else {
		                          
            row1.nbr_jour_resol = rs_tDBInput_2.getInt(16);
            if(rs_tDBInput_2.wasNull()){
                    row1.nbr_jour_resol = null;
            }
		                    }
					





 



/**
 * [tDBInput_2 begin ] stop
 */
	
	/**
	 * [tDBInput_2 main ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 


	tos_count_tDBInput_2++;

/**
 * [tDBInput_2 main ] stop
 */
	
	/**
	 * [tDBInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row2HashKey.CD_LOCALI1 = row1.CD_LOCALI1 ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.CD_LOCALI1 = '" + row2HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.VILLE = row2.VILLE != null ?
	(row2.VILLE.equals("SURESNES") ?
		(row1.CD_PATRIM1 == 3023 
		|| row1.CD_PATRIM1 == 3800
		|| row1.CD_PATRIM1 == 3804
		|| row1.CD_PATRIM1 == 3801
		|| row1.CD_PATRIM1 == 3802
		|| row1.CD_PATRIM1 == 3806
		|| row1.CD_PATRIM1 == 3024
		|| row1.CD_PATRIM1 == 3025
		|| row1.CD_PATRIM1 == 3701
		|| row1.CD_PATRIM1 == 3027
		|| row1.CD_PATRIM1 == 11013
		|| row1.CD_PATRIM1 == 11022
		|| row1.CD_PATRIM1 == 3803 
		|| row1.CD_PATRIM1 == 3700
		|| row1.CD_PATRIM1 == 3026 
		? "ANTENNE SURESNES" : "SURESNES (HORS ANTENNE)" ) 
	: row2.VILLE) : "-" ;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.Gestionnaire = row1.Gestionnaire ;
out1_tmp.Proprietaire = row1.Proprietaire ;
out1_tmp.num_affaire = row1.num_affaire ;
out1_tmp.service_responsable = row1.service_responsable ;
out1_tmp.Origine_affaire = row1.Origine_affaire ;
out1_tmp.type_affaire = row1.type_affaire ;
out1_tmp.Motif = row1.Motif ;
out1_tmp.etat_affaire = row1.etat_affaire ;
out1_tmp.canal_contact = row1.canal_contact ;
out1_tmp.clef_patrimoine = row1.clef_patrimoine ;
out1_tmp.date_creation_affaire = row1.date_creation_affaire ;
out1_tmp.nbr_jour_resol = row1.nbr_jour_resol ;
out1_tmp.collaborateur = row1.collaborateur ;
out1_tmp.VILLE = Var.VILLE ;
out1_tmp.DP = "DP " + row2.DP ;
out1_tmp.DT = row2.DT ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out1");
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(out1.Gestionnaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Gestionnaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Proprietaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Proprietaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.num_affaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.num_affaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.service_responsable != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.service_responsable
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Origine_affaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Origine_affaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.type_affaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.type_affaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.Motif != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.Motif
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.etat_affaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.etat_affaire
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.canal_contact != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.canal_contact
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.clef_patrimoine != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.clef_patrimoine
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.date_creation_affaire != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(out1.date_creation_affaire, "dd-MM-yyyy")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.nbr_jour_resol != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.nbr_jour_resol
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.collaborateur != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.collaborateur
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.VILLE != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.VILLE
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DP != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.DP
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(out1.DT != null) {
                        sb_tFileOutputDelimited_1.append(
                            out1.DT
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_2 end ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

	}
}finally{
	if (rs_tDBInput_2 != null) {
		rs_tDBInput_2.close();
	}
	if (stmt_tDBInput_2 != null) {
		stmt_tDBInput_2.close();
	}
}
globalMap.put("tDBInput_2_NB_LINE",nb_line_tDBInput_2);

 

ok_Hash.put("tDBInput_2", true);
end_Hash.put("tDBInput_2", System.currentTimeMillis());




/**
 * [tDBInput_2 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_1 && nb_line_tFileOutputDelimited_1 == 0){
				
					filetFileOutputDelimited_1.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tDBInput_3Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tDBInput_4Process(globalMap);



/**
 * [tFileOutputDelimited_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_2 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_2";

	

 



/**
 * [tDBInput_2 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";

	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_1"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_1"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_1")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout2Struct implements routines.system.IPersistableRow<copyOfout2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String callid;

				public String getCallid () {
					return this.callid;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String origdestination;

				public String getOrigdestination () {
					return this.origdestination;
				}
				
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String mydatefiltre;

				public String getMydatefiltre () {
					return this.mydatefiltre;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String type_unique;

				public String getType_unique () {
					return this.type_unique;
				}
				
			    public String Type_contact;

				public String getType_contact () {
					return this.Type_contact;
				}
				
			    public Integer termtype;

				public Integer getTermtype () {
					return this.termtype;
				}
				
			    public String terme_comm;

				public String getTerme_comm () {
					return this.terme_comm;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public String motif_contact;

				public String getMotif_contact () {
					return this.motif_contact;
				}
				
			    public Integer assignedagent;

				public Integer getAssignedagent () {
					return this.assignedagent;
				}
				
			    public String Equipe;

				public String getEquipe () {
					return this.Equipe;
				}
				
			    public Integer duree_appel;

				public Integer getDuree_appel () {
					return this.duree_appel;
				}
				
			    public Integer duree_post_trait;

				public Integer getDuree_post_trait () {
					return this.duree_post_trait;
				}
				
			    public Integer duree_total_traitement;

				public Integer getDuree_total_traitement () {
					return this.duree_total_traitement;
				}
				
			    public String Origine;

				public String getOrigine () {
					return this.Origine;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String TYPE_LIGNE;

				public String getTYPE_LIGNE () {
					return this.TYPE_LIGNE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.callid = readString(dis);
					
					this.origin = readString(dis);
					
					this.origdestination = readString(dis);
					
					this.mydate = readString(dis);
					
					this.mydatefiltre = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type = readString(dis);
					
					this.type_unique = readString(dis);
					
					this.Type_contact = readString(dis);
					
						this.termtype = readInteger(dis);
					
					this.terme_comm = readString(dis);
					
						this.NB = readInteger(dis);
					
					this.collaborateur = readString(dis);
					
					this.motif_contact = readString(dis);
					
						this.assignedagent = readInteger(dis);
					
					this.Equipe = readString(dis);
					
						this.duree_appel = readInteger(dis);
					
						this.duree_post_trait = readInteger(dis);
					
						this.duree_total_traitement = readInteger(dis);
					
					this.Origine = readString(dis);
					
					this.DP = readString(dis);
					
					this.TYPE_LIGNE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.callid,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.origdestination,dos);
					
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.mydatefiltre,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.type_unique,dos);
					
					// String
				
						writeString(this.Type_contact,dos);
					
					// Integer
				
						writeInteger(this.termtype,dos);
					
					// String
				
						writeString(this.terme_comm,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// String
				
						writeString(this.motif_contact,dos);
					
					// Integer
				
						writeInteger(this.assignedagent,dos);
					
					// String
				
						writeString(this.Equipe,dos);
					
					// Integer
				
						writeInteger(this.duree_appel,dos);
					
					// Integer
				
						writeInteger(this.duree_post_trait,dos);
					
					// Integer
				
						writeInteger(this.duree_total_traitement,dos);
					
					// String
				
						writeString(this.Origine,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.TYPE_LIGNE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("callid="+callid);
		sb.append(",origin="+origin);
		sb.append(",origdestination="+origdestination);
		sb.append(",mydate="+mydate);
		sb.append(",mydatefiltre="+mydatefiltre);
		sb.append(",calltypename="+calltypename);
		sb.append(",type="+type);
		sb.append(",type_unique="+type_unique);
		sb.append(",Type_contact="+Type_contact);
		sb.append(",termtype="+String.valueOf(termtype));
		sb.append(",terme_comm="+terme_comm);
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",collaborateur="+collaborateur);
		sb.append(",motif_contact="+motif_contact);
		sb.append(",assignedagent="+String.valueOf(assignedagent));
		sb.append(",Equipe="+Equipe);
		sb.append(",duree_appel="+String.valueOf(duree_appel));
		sb.append(",duree_post_trait="+String.valueOf(duree_post_trait));
		sb.append(",duree_total_traitement="+String.valueOf(duree_total_traitement));
		sb.append(",Origine="+Origine);
		sb.append(",DP="+DP);
		sb.append(",TYPE_LIGNE="+TYPE_LIGNE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String callid;

				public String getCallid () {
					return this.callid;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String origdestination;

				public String getOrigdestination () {
					return this.origdestination;
				}
				
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String mydatefiltre;

				public String getMydatefiltre () {
					return this.mydatefiltre;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String type_unique;

				public String getType_unique () {
					return this.type_unique;
				}
				
			    public String Type_contact;

				public String getType_contact () {
					return this.Type_contact;
				}
				
			    public Integer termtype;

				public Integer getTermtype () {
					return this.termtype;
				}
				
			    public String terme_comm;

				public String getTerme_comm () {
					return this.terme_comm;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public String motif_contact;

				public String getMotif_contact () {
					return this.motif_contact;
				}
				
			    public Integer assignedagent;

				public Integer getAssignedagent () {
					return this.assignedagent;
				}
				
			    public String Equipe;

				public String getEquipe () {
					return this.Equipe;
				}
				
			    public Integer duree_appel;

				public Integer getDuree_appel () {
					return this.duree_appel;
				}
				
			    public Integer duree_post_trait;

				public Integer getDuree_post_trait () {
					return this.duree_post_trait;
				}
				
			    public Integer duree_total_traitement;

				public Integer getDuree_total_traitement () {
					return this.duree_total_traitement;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.callid = readString(dis);
					
					this.origin = readString(dis);
					
					this.origdestination = readString(dis);
					
					this.mydate = readString(dis);
					
					this.mydatefiltre = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type = readString(dis);
					
					this.type_unique = readString(dis);
					
					this.Type_contact = readString(dis);
					
						this.termtype = readInteger(dis);
					
					this.terme_comm = readString(dis);
					
						this.NB = readInteger(dis);
					
					this.collaborateur = readString(dis);
					
					this.motif_contact = readString(dis);
					
						this.assignedagent = readInteger(dis);
					
					this.Equipe = readString(dis);
					
						this.duree_appel = readInteger(dis);
					
						this.duree_post_trait = readInteger(dis);
					
						this.duree_total_traitement = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.callid,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.origdestination,dos);
					
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.mydatefiltre,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.type_unique,dos);
					
					// String
				
						writeString(this.Type_contact,dos);
					
					// Integer
				
						writeInteger(this.termtype,dos);
					
					// String
				
						writeString(this.terme_comm,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// String
				
						writeString(this.motif_contact,dos);
					
					// Integer
				
						writeInteger(this.assignedagent,dos);
					
					// String
				
						writeString(this.Equipe,dos);
					
					// Integer
				
						writeInteger(this.duree_appel,dos);
					
					// Integer
				
						writeInteger(this.duree_post_trait,dos);
					
					// Integer
				
						writeInteger(this.duree_total_traitement,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("callid="+callid);
		sb.append(",origin="+origin);
		sb.append(",origdestination="+origdestination);
		sb.append(",mydate="+mydate);
		sb.append(",mydatefiltre="+mydatefiltre);
		sb.append(",calltypename="+calltypename);
		sb.append(",type="+type);
		sb.append(",type_unique="+type_unique);
		sb.append(",Type_contact="+Type_contact);
		sb.append(",termtype="+String.valueOf(termtype));
		sb.append(",terme_comm="+terme_comm);
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",collaborateur="+collaborateur);
		sb.append(",motif_contact="+motif_contact);
		sb.append(",assignedagent="+String.valueOf(assignedagent));
		sb.append(",Equipe="+Equipe);
		sb.append(",duree_appel="+String.valueOf(duree_appel));
		sb.append(",duree_post_trait="+String.valueOf(duree_post_trait));
		sb.append(",duree_total_traitement="+String.valueOf(duree_total_traitement));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_3Struct implements routines.system.IPersistableRow<after_tDBInput_3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String callid;

				public String getCallid () {
					return this.callid;
				}
				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}
				
			    public String origdestination;

				public String getOrigdestination () {
					return this.origdestination;
				}
				
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String mydatefiltre;

				public String getMydatefiltre () {
					return this.mydatefiltre;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String type_unique;

				public String getType_unique () {
					return this.type_unique;
				}
				
			    public String Type_contact;

				public String getType_contact () {
					return this.Type_contact;
				}
				
			    public Integer termtype;

				public Integer getTermtype () {
					return this.termtype;
				}
				
			    public String terme_comm;

				public String getTerme_comm () {
					return this.terme_comm;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				
			    public String collaborateur;

				public String getCollaborateur () {
					return this.collaborateur;
				}
				
			    public String motif_contact;

				public String getMotif_contact () {
					return this.motif_contact;
				}
				
			    public Integer assignedagent;

				public Integer getAssignedagent () {
					return this.assignedagent;
				}
				
			    public String Equipe;

				public String getEquipe () {
					return this.Equipe;
				}
				
			    public Integer duree_appel;

				public Integer getDuree_appel () {
					return this.duree_appel;
				}
				
			    public Integer duree_post_trait;

				public Integer getDuree_post_trait () {
					return this.duree_post_trait;
				}
				
			    public Integer duree_total_traitement;

				public Integer getDuree_total_traitement () {
					return this.duree_total_traitement;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.callid = readString(dis);
					
					this.origin = readString(dis);
					
					this.origdestination = readString(dis);
					
					this.mydate = readString(dis);
					
					this.mydatefiltre = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type = readString(dis);
					
					this.type_unique = readString(dis);
					
					this.Type_contact = readString(dis);
					
						this.termtype = readInteger(dis);
					
					this.terme_comm = readString(dis);
					
						this.NB = readInteger(dis);
					
					this.collaborateur = readString(dis);
					
					this.motif_contact = readString(dis);
					
						this.assignedagent = readInteger(dis);
					
					this.Equipe = readString(dis);
					
						this.duree_appel = readInteger(dis);
					
						this.duree_post_trait = readInteger(dis);
					
						this.duree_total_traitement = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.callid,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.origdestination,dos);
					
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.mydatefiltre,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.type_unique,dos);
					
					// String
				
						writeString(this.Type_contact,dos);
					
					// Integer
				
						writeInteger(this.termtype,dos);
					
					// String
				
						writeString(this.terme_comm,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
					// String
				
						writeString(this.collaborateur,dos);
					
					// String
				
						writeString(this.motif_contact,dos);
					
					// Integer
				
						writeInteger(this.assignedagent,dos);
					
					// String
				
						writeString(this.Equipe,dos);
					
					// Integer
				
						writeInteger(this.duree_appel,dos);
					
					// Integer
				
						writeInteger(this.duree_post_trait,dos);
					
					// Integer
				
						writeInteger(this.duree_total_traitement,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("callid="+callid);
		sb.append(",origin="+origin);
		sb.append(",origdestination="+origdestination);
		sb.append(",mydate="+mydate);
		sb.append(",mydatefiltre="+mydatefiltre);
		sb.append(",calltypename="+calltypename);
		sb.append(",type="+type);
		sb.append(",type_unique="+type_unique);
		sb.append(",Type_contact="+Type_contact);
		sb.append(",termtype="+String.valueOf(termtype));
		sb.append(",terme_comm="+terme_comm);
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",collaborateur="+collaborateur);
		sb.append(",motif_contact="+motif_contact);
		sb.append(",assignedagent="+String.valueOf(assignedagent));
		sb.append(",Equipe="+Equipe);
		sb.append(",duree_appel="+String.valueOf(duree_appel));
		sb.append(",duree_post_trait="+String.valueOf(duree_post_trait));
		sb.append(",duree_total_traitement="+String.valueOf(duree_total_traitement));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_6Process(globalMap);

		row3Struct row3 = new row3Struct();
copyOfout2Struct copyOfout2 = new copyOfout2Struct();





	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout2");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory/Satisfactory_ACD.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("callid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origdestination");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("mydate");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("mydatefiltre");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("calltypename");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type_unique");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Type_contact");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("termtype");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("terme_comm");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("NB");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("collaborateur");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("motif_contact");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("assignedagent");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Equipe");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("duree_appel");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("duree_post_trait");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("duree_total_traitement");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("Origine");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("DP");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("TYPE_LIGNE");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_2", isFileGenerated_tFileOutputDelimited_2);
        resourceMap.put("filetFileOutputDelimited_2", filetFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout2Struct copyOfout2_tmp = new copyOfout2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "com.informix.jdbc.IfxDriver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "informix";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:JqNQT7TCs5XBJv1SwVKsyTF9EXiZ/8bFhXzPjHkFwM+fKqMxkQJeeA==");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		        String url_tDBInput_3 = "jdbc:informix-sqli://" + "h92acd01" + ":" + "9088" + "/" + "hppcdb" + ":informixserver=" + "";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select distinct\nRTRIM(LTRIM(a.callid)) as callid,\na.origin,\na.origdestination,\nmydate, -- début de l'appel en AA - "
+"MM - DD\ne.ringstart as mydatefiltre,\ncase \n	-- permet de savoir si pour un callid l'appel a été reçu par au moins un "
+"opérateur de la cellule Satisfactory\n	when e.departmentkey = 16 then a.calltypename -- Si le nom de la file est uniquem"
+"ent Satisfactory alors chercher le détail en callrecord\n	when e.departmentkey = 7 then 'Appel-Bois-Colombes'\n	when e.d"
+"epartmentkey = 2 then 'Appel-Suresnes_Carnot'\n	when e.departmentkey = 3 then 'Appel-Suresnes_Antenne'\n	when e.departme"
+"ntkey = 11 then 'Appel-Plessis-Robinson'\n	when e.departmentkey = 4 then 'Appel-Chaville_Antenne'\n	when not exists (sel"
+"ect 1 from agentrecord v where v.callid = a.callid) then a.calltypename -- quand l'appel est abandonné chercher la file "
+"dans callrecord\n	else trim(e.equipe) -- sinon prendre le nom de la file dans la agentrecord\nend as calltypename,\ncase"
+" \n	when (a.waitresolution = 1 and e.termtype not in (1, 2, 3, 4, 30, 35)) then 'Répondu'\n	when (a.waitresolution = 2 o"
+"r e.termtype in (1, 2, 3, 4, 35)) then 'Abandonné par appelant'\n	when (a.waitresolution = 3 or e.termtype in (30)) then"
+" 'Manqué suite indisponibilité'\n	when a.waitresolution = 4 then 'Sortant'\n	when not exists (select 1 from agentrecord "
+"v where v.callid = a.callid) then 'Abandonné par appelant'\n	else 'Autres'\nend as type, --  détermine si l'appel a été "
+"répondu, abandonné, redirigé ou autres...\ncase \n	when exists (select 1 from callrecord x left join callrecord y on x.c"
+"allid = y.callid where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Ré"
+"pondu' -- appel répondu\n	when (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and exists (select 1 from callre"
+"cord x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not"
+" in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répondu' -- callid abandonné mixé avec un appel répondu\n	when ("
+"a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and not exists (select 1 from callrecord x left join callrecord "
+"y on x.callid = y.callid\n																			 	  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) a"
+"nd x.callid = a.callid)\n																  and exists (select 1 from agentrecord v where v.callid = a.callid) then 'Aban"
+"donné par appelant' -- callid abandonné uniquement\n	when (a.waitresolution = 3 or e.termtype in (30))  and exists (sele"
+"ct 1 from callrecord x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 an"
+"d y.termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répondu' -- callid indispo mixé avec un appel ré"
+"pondu\n	when (a.waitresolution = 3 or e.termtype in (30))  and exists (select 1 from callrecord x left join callrecord y"
+" on x.callid = y.callid\n																			  where (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and x.calli"
+"d = a.callid) then 'Abandonné par appelant' -- callid indispo mixé avec un appel abandonné																		  										"
+"									 																			  \n	when (a.waitresolution = 3 or e.termtype in (30))  and not exists (select 1 from callr"
+"ecord x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype no"
+"t in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) -- existe pas en répondu\n													   and not exists (select 1 fr"
+"om callrecord x left join callrecord y on x.callid = y.callid\n																			  where (a.waitresolution = 2 or e.ter"
+"mtype in (1, 2, 3, 4, 35)) and x.callid = a.callid) -- existe pas en abandonné par appelant\n													   and exists "
+"(select 1 from agentrecord v where v.callid = a.callid) then 'Manqué suite indisponibilité' -- callid indispo\n	when a.w"
+"aitresolution = 4 then 'Sortant'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid) then 'Abandon"
+"né par appelant'\n	else 'Autres'\nend as type_unique, --  détermine si l'appel a été répondu, abandonné, redirigé ou aut"
+"res...\ncase  -- détermine si l'appel est acheminé, direct, rappel, email etc... permet notamment de récupérer les appel"
+"s sortants comme spécifié dans la demande\n	when a.contacttype ='0' then 'Aucune ContactType'\n	when a.contacttype ='1' "
+"then 'Appel acheminé'\n	when a.contacttype ='2' then 'Appel direct entrant'\n	when a.contacttype ='3' then 'Appel direct"
+" sortant'\n	when a.contacttype ='4' then 'Appel direct interne'\n	when a.contacttype ='5' then 'Rappel acheminé'\n	when "
+"a.contacttype ='6' then 'Message email acheminé'\n	when a.contacttype ='7' then 'Message email direct sortant'\n	when a."
+"contacttype ='8' then 'Contact collaboration Web acheminé'\n	when a.contacttype ='9' then 'Appel inconnu (direct ou ache"
+"miné)'\n	else 'Autres'\nend as Type_contact,\ne.termtype,\ncase \n	when e.termtype ='0' then 'Pas de terme type'\n	when "
+"e.termtype = '1' then 'Abandonné'\n	when e.termtype = '2' then 'Abandonné'\n	when e.termtype = '3' then 'Abandonné'\n	wh"
+"en e.termtype ='4' then 'Abandonnée'\n	when e.termtype ='5' then 'Déconnecté lors attente de consultation'\n	when e.term"
+"type = '6' then 'déconnecté lors du parque'\n	when e.termtype = '7' then 'Mise en file attente'\n	when e.termtype = '8' "
+"then 'network reached'\n	when e.termtype = '9' then 'Transféré'\n	when e.termtype = '10' then 'time out'\n	when e.termty"
+"pe = '11' then 'déconnecté durant attente'\n	when e.termtype = '12' then 'Transféré'\n	when e.termtype = '13' then 'Tran"
+"sféré'\n	when e.termtype = '14' then 'Transféré'\n	when e.termtype = '15' then 'Rappeler plus tard'\n	when e.termtype = "
+"'16' then 'Transféré'\n	when e.termtype = '17' then 'Transféré'\n	when e.termtype = '18' then 'Déconnecté'\n	when e.term"
+"type = '19' then 'Non géré'\n	when e.termtype = '20' then 'Transféré'\n	when e.termtype = '21' then 'Transféré'\n	when e"
+".termtype = '22' then 'Répondu'\n	when e.termtype = '23' then 'Transféré'\n	when e.termtype = '24' then 'Renvoi vers cal"
+"l type ?'\n	when e.termtype = '25' then 'Transféré'\n	when e.termtype = '26' then 'planifier rappel'\n	when e.termtype ="
+" '27' then 'Résolu'\n	when e.termtype = '28' then 'Reçu mais non résolu'\n	when e.termtype = '29' then 'Indisponible'\n	"
+"when e.termtype = '30' then 'Transféré'\n	when e.termtype = '31' then 'Réponse de du collab'\n	when e.termtype = '32' th"
+"en 'Réponse automatique'\n	when e.termtype = '33' then 'Différé la réponse'\n	when e.termtype = '34' then 'Réponse autom"
+"atique'\n	when e.termtype = '35' then 'Abandonné durant la file attente'\n	when e.termtype = '36' then 'Transféré'\n	whe"
+"n e.termtype = '37' then 'Email externe suite retour'\n	when e.termtype = '38' then 'Expiration du délai attente'\n	when"
+" e.termtype = '39' then 'Non géré'\n	when e.termtype = '40' then 'Manager retiré'\n	when e.termtype = '41' then 'Collab "
+"retiré'\n	when e.termtype = '42' then 'Manager retiré'\n	when e.termtype = '43' then 'Email annulé'\n	when e.termtype = "
+"'44' then 'IVR Deleted'\n	when e.termtype = '45' then 'Redirigié cause mauvais service'\n	when e.termtype = '46' then 'N"
+"on géré'\n	when e.termtype = '47' then 'Time out'\n	when e.termtype = '48' then 'Non transmis'\n	when e.termtype = '-1' "
+"then 'arrêt système'\n	when e.termtype = '-2' then 'arrêt système'	\n	when not exists (select 1 from agentrecord v where"
+" v.callid = a.callid) then 'Abandonné'\n	else 'Autres'\n	end as terme_comm,\n1 as NB, -- effectue un compte (ça mange pa"
+"s de pain :) )\ne.userlastname as collaborateur, -- clef unique concernant l'agent\nwrapupname as motif_contact,-- motif"
+" de contact\nassignedagent,\ncase \n	when e.departmentkey = 16 then 'EQUIPE_SAT'\n	when not exists (select 1 from agentr"
+"ecord v where v.callid = a.callid) and upper(a.calltypename) like'%SATISFACTORY%' then 'EQUIPE_SAT' -- appel émis vers s"
+"atsifactory mais aucun n'agent n'a répondu\n	when not exists (select 1 from agentrecord v where v.callid = a.callid and "
+"departmentkey = 16) and upper(a.calltypename) like'%SATISFACTORY%' then 'Autres' -- appel émis vers satsifactory mais se"
+"ul les agents DP ont répondu\n	else 'Autres'\n	end as equipe,\ne.tothandlingtime as duree_appel,\ne.totpostprocessingtim"
+"e as duree_post_trait,\ne.tothandlingtime + e.totpostprocessingtime as duree_total_traitement\nfrom \n(\nselect  \nTO_CH"
+"AR (a.callstart, '%Y-%m-%d') as mydate,\na.callstart,\nb.calltypename, -- indique la file d'appelle sélectionnée\nwaitre"
+"solution,\na.contacttype, a.callid, assignedagent, a.termtype, a.origin, a.origdestination--, a.callstart\nfrom informix"
+".callrecord a  left join informix.calltypes b on a.calltypekey = b.calltypekey\nwhere a.callstart  > add_months(a.callst"
+"art, -18)  		  -- récupère un historique de 2 ans\nand upper(b.calltypename) like '%SATISFACTORY%'	      -- uniquement s"
+"i cet appel concerne l'équipe Satisfactory\nUNION	\nselect  \nTO_CHAR(a.callstart, '%Y-%m-%d') as mydate,\na.callstart,"
+"\nb.calltypename, -- indique la file d'appelle sélectionnée\n4 as waitresolution,\na.contacttype, a.callid, assignedagent"
+", a.termtype, a.origin, a.origdestination--, a.callstart\nfrom informix.callrecord a  left join informix.calltypes b on "
+"a.calltypekey = b.calltypekey\nwhere a.callstart  > add_months(a.callstart, -18)  		  -- récupère un historique de 2 ans"
+"\n--and upper(b.calltypename) like '%SATISFACTORY%'	      -- uniquement si cet appel concerne l'équipe Satisfactory\nand"
+" a.contacttype ='3'\nand a.callid in (select c.callid  from agentrecord c where departmentkey ='16')\n) a \nleft join\n	"
+"(select distinct callid, ringstart, requeuecount, sequencenumber, contactstarttime, termtype, agentkey, userlastname, te"
+"amname as equipe, tothandlingtime, departmentkey, totpostprocessingtime\n	 from agentrecord e left join users d on d.use"
+"rkey = e.agentkey left join teams x on x.teamkey = e.departmentkey  \n	 ) e on RTRIM(LTRIM(a.callid)) = RTRIM(LTRIM(e.ca"
+"llid)) and a.callstart = e.contactstarttime\nleft join \n	(select distinct callid, wrapupname, agentkey, sequencenumber,"
+" requeuecount\n	from  wrapupreason b left join wrapupreasons c on b.reasonkey = c.wrapupreasonkey\n	) b on RTRIM(LTRIM(a"
+".callid)) = RTRIM(LTRIM(b.callid)) and b.agentkey  = e.agentkey and  e.sequencenumber = b.sequencenumber and e.requeueco"
+"unt = b.requeuecount\ngroup by a.callid, mydate, mydatefiltre,e.departmentkey, calltypename, type, type_unique, Type_con"
+"tact, e.userlastname, wrapupname, assignedagent, equipe, e.termtype, a.origin, a.origdestination, terme_comm, duree_appe"
+"l, duree_post_trait, duree_total_traitement\n";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row3.callid = null;
							} else {
	                         		
        	row3.callid = routines.system.JDBCUtil.getString(rs_tDBInput_3, 1, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row3.origin = null;
							} else {
	                         		
        	row3.origin = routines.system.JDBCUtil.getString(rs_tDBInput_3, 2, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row3.origdestination = null;
							} else {
	                         		
        	row3.origdestination = routines.system.JDBCUtil.getString(rs_tDBInput_3, 3, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row3.mydate = null;
							} else {
	                         		
        	row3.mydate = routines.system.JDBCUtil.getString(rs_tDBInput_3, 4, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 5) {
								row3.mydatefiltre = null;
							} else {
	                         		
        	row3.mydatefiltre = routines.system.JDBCUtil.getString(rs_tDBInput_3, 5, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 6) {
								row3.calltypename = null;
							} else {
	                         		
        	row3.calltypename = routines.system.JDBCUtil.getString(rs_tDBInput_3, 6, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 7) {
								row3.type = null;
							} else {
	                         		
        	row3.type = routines.system.JDBCUtil.getString(rs_tDBInput_3, 7, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 8) {
								row3.type_unique = null;
							} else {
	                         		
        	row3.type_unique = routines.system.JDBCUtil.getString(rs_tDBInput_3, 8, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 9) {
								row3.Type_contact = null;
							} else {
	                         		
        	row3.Type_contact = routines.system.JDBCUtil.getString(rs_tDBInput_3, 9, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 10) {
								row3.termtype = null;
							} else {
		                          
            row3.termtype = rs_tDBInput_3.getInt(10);
            if(rs_tDBInput_3.wasNull()){
                    row3.termtype = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 11) {
								row3.terme_comm = null;
							} else {
	                         		
        	row3.terme_comm = routines.system.JDBCUtil.getString(rs_tDBInput_3, 11, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 12) {
								row3.NB = null;
							} else {
		                          
            row3.NB = rs_tDBInput_3.getInt(12);
            if(rs_tDBInput_3.wasNull()){
                    row3.NB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 13) {
								row3.collaborateur = null;
							} else {
	                         		
        	row3.collaborateur = routines.system.JDBCUtil.getString(rs_tDBInput_3, 13, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 14) {
								row3.motif_contact = null;
							} else {
	                         		
        	row3.motif_contact = routines.system.JDBCUtil.getString(rs_tDBInput_3, 14, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 15) {
								row3.assignedagent = null;
							} else {
		                          
            row3.assignedagent = rs_tDBInput_3.getInt(15);
            if(rs_tDBInput_3.wasNull()){
                    row3.assignedagent = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 16) {
								row3.Equipe = null;
							} else {
	                         		
        	row3.Equipe = routines.system.JDBCUtil.getString(rs_tDBInput_3, 16, true);
		                    }
							if(colQtyInRs_tDBInput_3 < 17) {
								row3.duree_appel = null;
							} else {
		                          
            row3.duree_appel = rs_tDBInput_3.getInt(17);
            if(rs_tDBInput_3.wasNull()){
                    row3.duree_appel = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 18) {
								row3.duree_post_trait = null;
							} else {
		                          
            row3.duree_post_trait = rs_tDBInput_3.getInt(18);
            if(rs_tDBInput_3.wasNull()){
                    row3.duree_post_trait = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 19) {
								row3.duree_total_traitement = null;
							} else {
		                          
            row3.duree_total_traitement = rs_tDBInput_3.getInt(19);
            if(rs_tDBInput_3.wasNull()){
                    row3.duree_total_traitement = null;
            }
		                    }
					

 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_3 = false;
		  boolean mainRowRejected_tMap_3 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row6HashKey.calltypename = row3.calltypename ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.calltypename = '" + row6HashKey.calltypename + "'");
								} // G 071
							

							row6Struct row6 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

copyOfout2 = null;


// # Output table : 'copyOfout2'
copyOfout2_tmp.callid = row3.callid ;
copyOfout2_tmp.origin = row3.origin ;
copyOfout2_tmp.origdestination = row3.origdestination ;
copyOfout2_tmp.mydate = row3.mydate ;
copyOfout2_tmp.mydatefiltre = row3.mydatefiltre ;
copyOfout2_tmp.calltypename = row3.calltypename ;
copyOfout2_tmp.type = row3.type ;
copyOfout2_tmp.type_unique = row3.type_unique ;
copyOfout2_tmp.Type_contact = row3.Type_contact ;
copyOfout2_tmp.termtype = row3.termtype ;
copyOfout2_tmp.terme_comm = row3.terme_comm ;
copyOfout2_tmp.NB = row3.NB ;
copyOfout2_tmp.collaborateur = row3.collaborateur ;
copyOfout2_tmp.motif_contact = row3.motif_contact ;
copyOfout2_tmp.assignedagent = row3.assignedagent ;
copyOfout2_tmp.Equipe = row3.Equipe ;
copyOfout2_tmp.duree_appel = row3.duree_appel ;
copyOfout2_tmp.duree_post_trait = row3.duree_post_trait ;
copyOfout2_tmp.duree_total_traitement = row3.duree_total_traitement ;
copyOfout2_tmp.Origine = row6.Origine ;
copyOfout2_tmp.DP = row6.DP ;
copyOfout2_tmp.TYPE_LIGNE = row6.TYPE_LIGNE ;
copyOfout2 = copyOfout2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "copyOfout2"
if(copyOfout2 != null) { 



	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"copyOfout2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(copyOfout2.callid != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.callid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.origdestination != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.origdestination
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.mydate != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.mydate
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.mydatefiltre != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.mydatefiltre
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.calltypename != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.calltypename
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.type_unique != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.type_unique
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.Type_contact != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.Type_contact
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.termtype != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.termtype
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.terme_comm != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.terme_comm
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.NB != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.NB
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.collaborateur != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.collaborateur
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.motif_contact != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.motif_contact
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.assignedagent != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.assignedagent
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.Equipe != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.Equipe
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.duree_appel != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.duree_appel
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.duree_post_trait != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.duree_post_trait
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.duree_total_traitement != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.duree_total_traitement
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.Origine != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.Origine
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.DP != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.DP
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(copyOfout2.TYPE_LIGNE != null) {
                        sb_tFileOutputDelimited_2.append(
                            copyOfout2.TYPE_LIGNE
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */

} // End of branch "copyOfout2"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_2 && nb_line_tFileOutputDelimited_2 == 0){
				
					filetFileOutputDelimited_2.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFTPConnection_2Process(globalMap);



/**
 * [tFileOutputDelimited_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";

	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";

	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_2"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_2"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_2")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_2", false);
		start_Hash.put("tFTPConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_2";

	
		int tos_count_tFTPConnection_2 = 0;
		

 
int connectionTimeout_tFTPConnection_2 = Integer.valueOf(0);
    org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_2 = null;



	class MyTrust_tFTPConnection_2 {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
 
				String decryptedKeyStorePassword_tFTPConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:S97oE7uP21GUqdCjO1WE/1R2nfcRqf+dwy7QVmiGMhU=");
			ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"), decryptedKeyStorePassword_tFTPConnection_2.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
    javax.net.ssl.SSLContext sslContext_tFTPConnection_2 = null;
    javax.net.ssl.TrustManager[] trustManager_tFTPConnection_2 = null;
    javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_2 = null;
    MyTrust_tFTPConnection_2 myTrust_tFTPConnection_2 = null;

    try {
        sslContext_tFTPConnection_2 = javax.net.ssl.SSLContext.getInstance("SSL");
        myTrust_tFTPConnection_2 = new MyTrust_tFTPConnection_2();
        trustManager_tFTPConnection_2 = myTrust_tFTPConnection_2.getTrustManagers();
        sslContext_tFTPConnection_2.init(null, trustManager_tFTPConnection_2, new java.security.SecureRandom());
        sslSocketFactory_tFTPConnection_2 = sslContext_tFTPConnection_2.getSocketFactory();

        if(("true").equals(System.getProperty("http.proxySet")) ){
            String httpProxyHost = System.getProperty("http.proxyHost");
            int httpProxyPort = Integer.getInteger("http.proxyPort");
            String httpProxyUser = System.getProperty("http.proxyUser");
            String httpProxyPass = System.getProperty("http.proxyPassword");

            ftp_tFTPConnection_2 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_2, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = "ftps.toucantoco.com" + ":" + 990;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

                String httpProxyHost = proxyAddress.getAddress().getHostAddress();
                int httpProxyPort = proxyAddress.getPort();
                String httpProxyUser = "";
                String httpProxyPass = ""; //leave it empty if proxy creds weren't specified

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
                if (proxyCreds != null) {
                    httpProxyUser = proxyCreds.getUser();
                    httpProxyPass = proxyCreds.getPass();
                }

                ftp_tFTPConnection_2 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_2, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

            } else { //no http proxy for ftp host defined
                ftp_tFTPConnection_2 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_2);
            }
        } else {
            ftp_tFTPConnection_2 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_2);
        }

        ftp_tFTPConnection_2.setControlEncoding("ISO-8859-15");


        if (connectionTimeout_tFTPConnection_2 > 0) {
            ftp_tFTPConnection_2.setDefaultTimeout(connectionTimeout_tFTPConnection_2);
        }

        ftp_tFTPConnection_2.connect("ftps.toucantoco.com",990);
        ftp_tFTPConnection_2.setRemoteVerificationEnabled(true);
 
	final String decryptedPassword_tFTPConnection_2 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:PPJUaZqR2mxszfSd8xeAapittFQ/sVi9cI2xbAtRWC60S5J7dNfW+gRBhWgRYeeTT1hWeX7LVjd0Mgf6");

        boolean isLoginSuccessful_tFTPConnection_2 = ftp_tFTPConnection_2.login("hauts-de-seine-habitat", decryptedPassword_tFTPConnection_2);

        if (!isLoginSuccessful_tFTPConnection_2) {
            throw new RuntimeException("Login failed");
        }

        ftp_tFTPConnection_2.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
            ftp_tFTPConnection_2.execPBSZ(0);
            ftp_tFTPConnection_2.execPROT("P");
    } catch (Exception e) {
        throw e;
    }

        ftp_tFTPConnection_2.enterLocalPassiveMode();
    globalMap.put("conn_tFTPConnection_2", ftp_tFTPConnection_2);

 



/**
 * [tFTPConnection_2 begin ] stop
 */
	
	/**
	 * [tFTPConnection_2 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_2";

	

 


	tos_count_tFTPConnection_2++;

/**
 * [tFTPConnection_2 main ] stop
 */
	
	/**
	 * [tFTPConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_2";

	

 



/**
 * [tFTPConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_2";

	

 



/**
 * [tFTPConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_2 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_2";

	

 

ok_Hash.put("tFTPConnection_2", true);
end_Hash.put("tFTPConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFTPPut_2Process(globalMap);



/**
 * [tFTPConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_2";

	

 



/**
 * [tFTPConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_2_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPPut_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_2", false);
		start_Hash.put("tFTPPut_2", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_2";

	
		int tos_count_tFTPPut_2 = 0;
		


int nb_file_tFTPPut_2 = 0;

		org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_2 = null;
		String rootDir_tFTPPut_2 = null;
			ftp_tFTPPut_2 = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("conn_tFTPConnection_2");
			
			
			rootDir_tFTPPut_2 = ftp_tFTPPut_2.printWorkingDirectory();
		String remotedir_tFTPPut_2 = ("./Satisfactory").replaceAll("\\\\", "/");

		boolean cwdSuccess_tFTPPut_2 = ftp_tFTPPut_2.changeWorkingDirectory(remotedir_tFTPPut_2);

		if (!cwdSuccess_tFTPPut_2) {
			throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_2.getReplyString());
		}

		java.util.List<java.util.Map<String,String>> listtFTPPut_2 = new java.util.ArrayList<java.util.Map<String,String>>();

			java.util.Map<String,String> maptFTPPut_20 = new java.util.HashMap<String,String>();
			maptFTPPut_20.put("Satisfactory_ACD.csv", "");
			listtFTPPut_2.add(maptFTPPut_20);
		String localdirtFTPPut_2 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory";
		
		for (java.util.Map<String, String> maptFTPPut_2 : listtFTPPut_2) {

 



/**
 * [tFTPPut_2 begin ] stop
 */
	
	/**
	 * [tFTPPut_2 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_2";

	

try{
        String currentStatus_tFTPPut_2 = "No file transfered.";
        globalMap.put("tFTPPut_2_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_2 = maptFTPPut_2.keySet();
        boolean needRename_tFTPPut_2 = false;
        for (String keytFTPPut_2 : keySettFTPPut_2){
            if(keytFTPPut_2 == null || "".equals(keytFTPPut_2)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_2 =  localdirtFTPPut_2;
            String filemasktFTPPut_2 = keytFTPPut_2;
            String dirtFTPPut_2 = null;
                String masktFTPPut_2 = filemasktFTPPut_2.replaceAll("\\\\", "/") ;
            int itFTPPut_2 = masktFTPPut_2.lastIndexOf('/');
            if (itFTPPut_2!=-1){
                dirtFTPPut_2 = masktFTPPut_2.substring(0, itFTPPut_2);
                masktFTPPut_2 = masktFTPPut_2.substring(itFTPPut_2+1);
            }
            if (dirtFTPPut_2!=null && !"".equals(dirtFTPPut_2)) tempdirtFTPPut_2 = tempdirtFTPPut_2 + "/" + dirtFTPPut_2;
                masktFTPPut_2 = masktFTPPut_2.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
            final String finalMasktFTPPut_2 = masktFTPPut_2;
            java.io.File[] listingstFTPPut_2 = null;
            java.io.File filetFTPPut_2 = new java.io.File(tempdirtFTPPut_2);
            if (filetFTPPut_2.isDirectory()) {
                listingstFTPPut_2 = filetFTPPut_2.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_2).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }

            java.util.List<String> remoteExistsFiles_tFTPPut_2 = new java.util.ArrayList<String>();

            String[] ftpFileNames_tFTPPut_2 = ftp_tFTPPut_2.listNames();
            for (String ftpFileName : ftpFileNames_tFTPPut_2) {
                if("".equals(maptFTPPut_2.get(keytFTPPut_2))){
                    if (ftpFileName.matches(masktFTPPut_2)) {
                        remoteExistsFiles_tFTPPut_2.add(ftpFileName);
                    }
                }else{
                    if (ftpFileName.matches(maptFTPPut_2.get(keytFTPPut_2))) {
                        remoteExistsFiles_tFTPPut_2.add(ftpFileName);
                    }
                }
            }

            if(listingstFTPPut_2 != null && listingstFTPPut_2.length > 0){
                for (int mtFTPPut_2 = 0; mtFTPPut_2 < listingstFTPPut_2.length; mtFTPPut_2++){
                    if (listingstFTPPut_2[mtFTPPut_2].getName().matches(masktFTPPut_2)){
                        java.io.File file_in_localDir_tFTPPut_2 = listingstFTPPut_2[mtFTPPut_2];
                        java.io.FileInputStream file_stream_tFTPPut_2 = new java.io.FileInputStream(file_in_localDir_tFTPPut_2);
                        globalMap.put("tFTPPut_2_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_2.contains(file_in_localDir_tFTPPut_2.getName()));
                        String newName_tFTPPut_2 = ("".equals(maptFTPPut_2.get(keytFTPPut_2)))?file_in_localDir_tFTPPut_2.getName():maptFTPPut_2.get(keytFTPPut_2);
                            needRename_tFTPPut_2 = true;
                            if ((remoteExistsFiles_tFTPPut_2.contains(newName_tFTPPut_2))){
                                ftp_tFTPPut_2.deleteFile(newName_tFTPPut_2);
                            }
                            ftp_tFTPPut_2.storeFile(file_in_localDir_tFTPPut_2.getName(), file_stream_tFTPPut_2);

                            globalMap.put("tFTPPut_2_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_2.contains(newName_tFTPPut_2));

                        file_stream_tFTPPut_2.close();
                        nb_file_tFTPPut_2++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if (!((maptFTPPut_2.get(keytFTPPut_2) == null) || maptFTPPut_2.get(keytFTPPut_2).isEmpty() || keytFTPPut_2.equals(maptFTPPut_2.get(keytFTPPut_2)))){
                try{
                    if(needRename_tFTPPut_2){
                        ftp_tFTPPut_2.rename(keytFTPPut_2, maptFTPPut_2.get(keytFTPPut_2));
                    }
                    globalMap.put("tFTPPut_2_CURRENT_STATUS", "File rename OK.");
                }catch(IOException e_tFTPPut_2){
                    globalMap.put("tFTPPut_2_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_2;
                }
            }
            needRename_tFTPPut_2 = false;
        }
    }catch(java.lang.Exception e_tFTPPut_2){
            throw(e_tFTPPut_2);
    }

 


	tos_count_tFTPPut_2++;

/**
 * [tFTPPut_2 main ] stop
 */
	
	/**
	 * [tFTPPut_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPPut_2";

	

 



/**
 * [tFTPPut_2 process_data_begin ] stop
 */
	
	/**
	 * [tFTPPut_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPPut_2";

	

 



/**
 * [tFTPPut_2 process_data_end ] stop
 */
	
	/**
	 * [tFTPPut_2 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_2";

	

	}
	  		ftp_tFTPPut_2.changeWorkingDirectory(rootDir_tFTPPut_2);
	
	
globalMap.put("tFTPPut_2_NB_FILE",nb_file_tFTPPut_2);


 

ok_Hash.put("tFTPPut_2", true);
end_Hash.put("tFTPPut_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFTPClose_2Process(globalMap);



/**
 * [tFTPPut_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_2 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_2";

	

 



/**
 * [tFTPPut_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_2_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_2", false);
		start_Hash.put("tFTPClose_2", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_2";

	
		int tos_count_tFTPClose_2 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_2");
	 if (connObj != null) {
      try {
			
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_2_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_2 begin ] stop
 */
	
	/**
	 * [tFTPClose_2 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_2";

	

 


	tos_count_tFTPClose_2++;

/**
 * [tFTPClose_2 main ] stop
 */
	
	/**
	 * [tFTPClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_2";

	

 



/**
 * [tFTPClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_2";

	

 



/**
 * [tFTPClose_2 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_2 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_2";

	

 

ok_Hash.put("tFTPClose_2", true);
end_Hash.put("tFTPClose_2", System.currentTimeMillis());




/**
 * [tFTPClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_2 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_2";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_2");
	 if (connObj != null) {   
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
     
  }
 



/**
 * [tFTPClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type;

				public String getType () {
					return this.type;
				}
				
			    public String equipe;

				public String getEquipe () {
					return this.equipe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				
			    public String Origine;

				public String getOrigine () {
					return this.Origine;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String TYPE_LIGNE;

				public String getTYPE_LIGNE () {
					return this.TYPE_LIGNE;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.mydate = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type = readString(dis);
					
					this.equipe = readString(dis);
					
						this.NB = readInteger(dis);
					
					this.Origine = readString(dis);
					
					this.DP = readString(dis);
					
					this.TYPE_LIGNE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.equipe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
					// String
				
						writeString(this.Origine,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.TYPE_LIGNE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mydate="+mydate);
		sb.append(",calltypename="+calltypename);
		sb.append(",type="+type);
		sb.append(",equipe="+equipe);
		sb.append(",NB="+String.valueOf(NB));
		sb.append(",Origine="+Origine);
		sb.append(",DP="+DP);
		sb.append(",TYPE_LIGNE="+TYPE_LIGNE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type_unique;

				public String getType_unique () {
					return this.type_unique;
				}
				
			    public String equipe;

				public String getEquipe () {
					return this.equipe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.mydate = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type_unique = readString(dis);
					
					this.equipe = readString(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type_unique,dos);
					
					// String
				
						writeString(this.equipe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mydate="+mydate);
		sb.append(",calltypename="+calltypename);
		sb.append(",type_unique="+type_unique);
		sb.append(",equipe="+equipe);
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_4Struct implements routines.system.IPersistableRow<after_tDBInput_4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];

	
			    public String mydate;

				public String getMydate () {
					return this.mydate;
				}
				
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String type_unique;

				public String getType_unique () {
					return this.type_unique;
				}
				
			    public String equipe;

				public String getEquipe () {
					return this.equipe;
				}
				
			    public Integer NB;

				public Integer getNB () {
					return this.NB;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.mydate = readString(dis);
					
					this.calltypename = readString(dis);
					
					this.type_unique = readString(dis);
					
					this.equipe = readString(dis);
					
						this.NB = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.mydate,dos);
					
					// String
				
						writeString(this.calltypename,dos);
					
					// String
				
						writeString(this.type_unique,dos);
					
					// String
				
						writeString(this.equipe,dos);
					
					// Integer
				
						writeInteger(this.NB,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("mydate="+mydate);
		sb.append(",calltypename="+calltypename);
		sb.append(",type_unique="+type_unique);
		sb.append(",equipe="+equipe);
		sb.append(",NB="+String.valueOf(NB));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_5Process(globalMap);

		row4Struct row4 = new row4Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tFileOutputDelimited_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_3", false);
		start_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFileOutputDelimited_3 = 0;
		

String fileName_tFileOutputDelimited_3 = "";
    fileName_tFileOutputDelimited_3 = (new java.io.File("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory/Satisfactory_ACD_comptage.csv")).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_3 = null;
    String extension_tFileOutputDelimited_3 = null;
    String directory_tFileOutputDelimited_3 = null;
    if((fileName_tFileOutputDelimited_3.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") < fileName_tFileOutputDelimited_3.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_3.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(0, fileName_tFileOutputDelimited_3.lastIndexOf("."));
            extension_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3.substring(fileName_tFileOutputDelimited_3.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_3 = fileName_tFileOutputDelimited_3;
            extension_tFileOutputDelimited_3 = "";
        }
        directory_tFileOutputDelimited_3 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_3 = true;
    java.io.File filetFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
    globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
            int nb_line_tFileOutputDelimited_3 = 0;
            int splitedFileNo_tFileOutputDelimited_3 = 0;
            int currentRow_tFileOutputDelimited_3 = 0;

            final String OUT_DELIM_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_3:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_3 = /** Start field tFileOutputDelimited_3:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_3:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_3 != null && directory_tFileOutputDelimited_3.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_3 = new java.io.File(directory_tFileOutputDelimited_3);
                        if(!dir_tFileOutputDelimited_3.exists()) {
                            dir_tFileOutputDelimited_3.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_3 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_3 = new java.io.File(fileName_tFileOutputDelimited_3);
                        if(fileToDelete_tFileOutputDelimited_3.exists()) {
                            fileToDelete_tFileOutputDelimited_3.delete();
                        }
                        outtFileOutputDelimited_3 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_3, false),"ISO-8859-15"));
                                    if(filetFileOutputDelimited_3.length()==0){
                                        outtFileOutputDelimited_3.write("mydate");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("calltypename");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("type");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("equipe");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("NB");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("Origine");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("DP");
                                            outtFileOutputDelimited_3.write(OUT_DELIM_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.write("TYPE_LIGNE");
                                        outtFileOutputDelimited_3.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);
                                        outtFileOutputDelimited_3.flush();
                                    }


        resourceMap.put("out_tFileOutputDelimited_3", outtFileOutputDelimited_3);
resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);
    resourceMap.put("isFileGenerated_tFileOutputDelimited_3", isFileGenerated_tFileOutputDelimited_3);
        resourceMap.put("filetFileOutputDelimited_3", filetFileOutputDelimited_3);

 



/**
 * [tFileOutputDelimited_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				String driverClass_tDBInput_4 = "com.informix.jdbc.IfxDriver";
			    java.lang.Class jdbcclazz_tDBInput_4 = java.lang.Class.forName(driverClass_tDBInput_4);
				String dbUser_tDBInput_4 = "informix";
				
				 
	final String decryptedPassword_tDBInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:efckfz2+pI+tRYre0icYY/vsXMB2p9Nbfi2ihMJb9S7gCHL7QCEBPA==");
				
				String dbPwd_tDBInput_4 = decryptedPassword_tDBInput_4;
				
		        String url_tDBInput_4 = "jdbc:informix-sqli://" + "h92acd01" + ":" + "9088" + "/" + "hppcdb" + ":informixserver=" + "";
				
				conn_tDBInput_4 = java.sql.DriverManager.getConnection(url_tDBInput_4,dbUser_tDBInput_4,dbPwd_tDBInput_4);
		        
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "select --a.callid,\nmydate, calltypename,  type_unique, equipe, count(*) as NB \nfrom\n(\nselect distinct\nRTRIM(LTRIM("
+"a.callid)) as callid,\nmydate, -- début de l'appel en AA - MM - DD\na.calltypename,\ncase \n	when (a.waitresolution = 1 "
+"and e.termtype not in (1, 2, 3, 4, 30, 35)) then 'Répondu'\n	when (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35"
+")) then 'Abandonné par appelant'\n	when (a.waitresolution = 3 or e.termtype in (30)) then 'Manqué suite indisponibilité'"
+"\n	when a.waitresolution = 4 then 'Sortant'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid) th"
+"en 'Abandonné par appelant'\n	else 'Autres'\nend type, --  détermine si l'appel a été répondu, abandonné, redirigé ou au"
+"tres...\ncase \n	when exists (select 1 from callrecord x left join callrecord y on x.callid = y.callid where x.waitresol"
+"ution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répondu' -- appel répondu\n	when (a."
+"waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and exists (select 1 from callrecord x left join callrecord y on x"
+".callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.cal"
+"lid = a.callid) then 'Répondu' -- callid abandonné mixé avec un appel répondu\n	when (a.waitresolution = 2 or e.termtype"
+" in (1, 2, 3, 4, 35)) and not exists (select 1 from callrecord x left join callrecord y on x.callid = y.callid\n								"
+"											 	  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid)\n									"
+"							  and exists (select 1 from agentrecord v where v.callid = a.callid) then 'Abandonné par appelant' -- callid aban"
+"donné uniquement\n	when (a.waitresolution = 3 or e.termtype in (30))  and exists (select 1 from callrecord x left join c"
+"allrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 3"
+"0, 35) and x.callid = a.callid) then 'Répondu' -- callid indispo mixé avec un appel répondu\n	when (a.waitresolution = 3"
+" or e.termtype in (30))  and exists (select 1 from callrecord x left join callrecord y on x.callid = y.callid\n									"
+"										  where (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and x.callid = a.callid) then 'Abandonné par "
+"appelant' -- callid indispo mixé avec un appel abandonné																		  																			 																			  \n	"
+"when (a.waitresolution = 3 or e.termtype in (30))  and not exists (select 1 from callrecord x left join callrecord y on "
+"x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.ca"
+"llid = a.callid) -- existe pas en répondu\n													   and not exists (select 1 from callrecord x left join callreco"
+"rd y on x.callid = y.callid\n																			  where (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and x.c"
+"allid = a.callid) -- existe pas en abandonné par appelant\n													   and exists (select 1 from agentrecord v where"
+" v.callid = a.callid) then 'Manqué suite indisponibilité' -- callid indispo\n	when a.waitresolution = 4 then 'Sortant'\n"
+"	when not exists (select 1 from agentrecord v where v.callid = a.callid) then 'Abandonné par appelant'\n	else 'Autres'\n"
+"end as type_unique, \n1 as NB, -- effectue un compte (ça mange pas de pain :) )\ncase \n	when e.departmentkey = 16 then "
+"'EQUIPE_SAT'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid) and upper(a.calltypename) like'%S"
+"ATISFACTORY%' then 'EQUIPE_SAT'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid and departmentk"
+"ey = 16) and upper(a.calltypename) like'%SATISFACTORY%' then 'Autres' -- appel émis vers satsifactory mais seul les agen"
+"ts DP ont répondu\n	else 'EQUIPE_NOT_SAT'\n	end as equipe\nfrom \n(\nselect  \nTO_CHAR (a.callstart, '%Y-%m-%d') as myda"
+"te,\na.callstart,\nb.calltypename, -- indique la file d'appelle sélectionnée\nwaitresolution,\na.contacttype, a.callid, "
+"assignedagent, a.termtype, a.origin, a.origdestination--, a.callstart\nfrom informix.callrecord a  left join informix.ca"
+"lltypes b on a.calltypekey = b.calltypekey\nwhere a.callstart  > add_months(a.callstart, -18)  		  -- récupère un histor"
+"ique de 2 ans\nand upper(b.calltypename) like '%SATISFACTORY%'	      -- uniquement si cet appel concerne l'équipe Satisf"
+"actory\n) a \nleft join\n	(select distinct callid, ringstart, requeuecount, sequencenumber, contactstarttime, termtype, "
+"agentkey, userlastname, teamname as equipe, tothandlingtime, departmentkey, totpostprocessingtime\n	 from agentrecord e "
+"left join users d on d.userkey = e.agentkey left join teams x on x.teamkey = e.departmentkey  \n	 ) e on RTRIM(LTRIM(a.c"
+"allid)) = RTRIM(LTRIM(e.callid)) and a.callstart = e.contactstarttime\nleft join \n	(select distinct callid, wrapupname,"
+" agentkey, sequencenumber, requeuecount\n	from  wrapupreason b left join wrapupreasons c on b.reasonkey = c.wrapupreason"
+"key\n	) b on RTRIM(LTRIM(a.callid)) = RTRIM(LTRIM(b.callid)) and b.agentkey  = e.agentkey and  e.sequencenumber = b.sequ"
+"encenumber and e.requeuecount = b.requeuecount\nwhere exists  (select 1 from agentrecord v where v.callid = a.callid and"
+" v.departmentkey = 16) -- le callid doit être traité par au moins un membre de l'équipe Satisfactory\n      or not exist"
+"s (select 1 from agentrecord v where v.callid = a.callid) -- Remonte les appels qui ont été émis vers la satisfactory et"
+" traité par aucun agent (ni DP ni SAT) ; considéré comme un appel abandonné\ngroup by a.callid, mydate, a.calltypename, "
+"type, type_unique, equipe, a.origin, a.origdestination, e.departmentkey\n) a \ngroup by -- a.callid,\nmydate, calltypena"
+"me, type_unique, equipe\nUNION\nselect --a.callid,\nmydate, calltypename,  type_unique, equipe, count(*) as NB \nfrom\n("
+"\nselect distinct\nRTRIM(LTRIM(a.callid)) as callid,\nmydate, -- début de l'appel en AA - MM - DD\na.calltypename,\ncase"
+" \n	when (a.waitresolution = 1 and e.termtype not in (1, 2, 3, 4, 30, 35)) then 'Répondu'\n	when (a.waitresolution = 2 o"
+"r e.termtype in (1, 2, 3, 4, 35)) then 'Abandonné par appelant'\n	when (a.waitresolution = 3 or e.termtype in (30)) then"
+" 'Manqué suite indisponibilité'\n	when a.waitresolution = 4 then 'Sortant'\n	when not exists (select 1 from agentrecord "
+"v where v.callid = a.callid) then 'Abandonné par appelant'\n	else 'Autres'\nend type, --  détermine si l'appel a été rép"
+"ondu, abandonné, redirigé ou autres...\ncase \n	when exists (select 1 from callrecord x left join callrecord y on x.call"
+"id = y.callid where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répon"
+"du' -- appel répondu\n	when (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and exists (select 1 from callrecor"
+"d x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not in"
+" (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répondu' -- callid abandonné mixé avec un appel répondu\n	when (a.w"
+"aitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and not exists (select 1 from callrecord x left join callrecord y o"
+"n x.callid = y.callid\n																			 	  where x.waitresolution = 1 and y.termtype not in (1, 2, 3, 4, 30, 35) and "
+"x.callid = a.callid)\n																  and exists (select 1 from agentrecord v where v.callid = a.callid) then 'Abandon"
+"né par appelant' -- callid abandonné uniquement\n	when (a.waitresolution = 3 or e.termtype in (30))  and exists (select "
+"1 from callrecord x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y"
+".termtype not in (1, 2, 3, 4, 30, 35) and x.callid = a.callid) then 'Répondu' -- callid indispo mixé avec un appel répon"
+"du\n	when (a.waitresolution = 3 or e.termtype in (30))  and exists (select 1 from callrecord x left join callrecord y on"
+" x.callid = y.callid\n																			  where (a.waitresolution = 2 or e.termtype in (1, 2, 3, 4, 35)) and x.callid ="
+" a.callid) then 'Abandonné par appelant' -- callid indispo mixé avec un appel abandonné																		  													"
+"						 																			  \n	when (a.waitresolution = 3 or e.termtype in (30))  and not exists (select 1 from callreco"
+"rd x left join callrecord y on x.callid = y.callid\n																			  where x.waitresolution = 1 and y.termtype not i"
+"n (1, 2, 3, 4, 30, 35) and x.callid = a.callid) -- existe pas en répondu\n													   and not exists (select 1 from "
+"callrecord x left join callrecord y on x.callid = y.callid\n																			  where (a.waitresolution = 2 or e.termty"
+"pe in (1, 2, 3, 4, 35)) and x.callid = a.callid) -- existe pas en abandonné par appelant\n													   and exists (se"
+"lect 1 from agentrecord v where v.callid = a.callid) then 'Manqué suite indisponibilité' -- callid indispo\n	when a.wait"
+"resolution = 4 then 'Sortant'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid) then 'Abandonné "
+"par appelant'\n	else 'Autres'\nend as type_unique, \n1 as NB, -- effectue un compte (ça mange pas de pain :) )\ncase \n	"
+"when e.departmentkey = 16 then 'EQUIPE_SAT'\n	when not exists (select 1 from agentrecord v where v.callid = a.callid) an"
+"d upper(a.calltypename) like'%SATISFACTORY%' then 'EQUIPE_SAT'\n	when not exists (select 1 from agentrecord v where v.ca"
+"llid = a.callid and departmentkey = 16) and upper(a.calltypename) like'%SATISFACTORY%' then 'Autres' -- appel émis vers "
+"satsifactory mais seul les agents DP ont répondu\n	else 'EQUIPE_NOT_SAT'\n	end as equipe\nfrom \n(\nselect  \nTO_CHAR (a"
+".callstart, '%Y-%m-%d') as mydate,\na.callstart,\nb.calltypename, -- indique la file d'appelle sélectionnée\nwaitresolut"
+"ion,\na.contacttype, a.callid, assignedagent, a.termtype, a.origin, a.origdestination--, a.callstart\nfrom informix.call"
+"record a  left join informix.calltypes b on a.calltypekey = b.calltypekey\nwhere a.callstart  > add_months(a.callstart, "
+"-18)  		  -- récupère un historique de 2 ans\nand upper(b.calltypename) not like '%SATISFACTORY%' -- retire les files sa"
+"tisfactory\nand upper(b.calltypename) not like '%APPEL-DSI%' -- DSI\nand upper(b.calltypename) not like '%45998%' -- ret"
+"ire une file spécifique\nand upper(b.calltypename) not like '%DEFAULT%' -- retire la file defaut\n) a \nleft join\n	(sel"
+"ect distinct callid, ringstart, requeuecount, sequencenumber, contactstarttime, termtype, agentkey, userlastname, teamna"
+"me as equipe, tothandlingtime, departmentkey, totpostprocessingtime\n	 from agentrecord e left join users d on d.userkey"
+" = e.agentkey left join teams x on x.teamkey = e.departmentkey  \n	 ) e on RTRIM(LTRIM(a.callid)) = RTRIM(LTRIM(e.callid"
+")) and a.callstart = e.contactstarttime\nleft join \n	(select distinct callid, wrapupname, agentkey, sequencenumber, req"
+"ueuecount\n	from  wrapupreason b left join wrapupreasons c on b.reasonkey = c.wrapupreasonkey\n	) b on RTRIM(LTRIM(a.cal"
+"lid)) = RTRIM(LTRIM(b.callid)) and b.agentkey  = e.agentkey and  e.sequencenumber = b.sequencenumber and e.requeuecount "
+"= b.requeuecount\nwhere not exists (select 1 from agentrecord v where v.callid = a.callid and v.departmentkey = 16) \ngr"
+"oup by a.callid, mydate, a.calltypename, type, type_unique, equipe, a.origin, a.origdestination, e.departmentkey\n) a \n"
+"group by --a.callid,\nmydate, calltypename, type_unique, equipe";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row4.mydate = null;
							} else {
	                         		
        	row4.mydate = routines.system.JDBCUtil.getString(rs_tDBInput_4, 1, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row4.calltypename = null;
							} else {
	                         		
        	row4.calltypename = routines.system.JDBCUtil.getString(rs_tDBInput_4, 2, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row4.type_unique = null;
							} else {
	                         		
        	row4.type_unique = routines.system.JDBCUtil.getString(rs_tDBInput_4, 3, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 4) {
								row4.equipe = null;
							} else {
	                         		
        	row4.equipe = routines.system.JDBCUtil.getString(rs_tDBInput_4, 4, true);
		                    }
							if(colQtyInRs_tDBInput_4 < 5) {
								row4.NB = null;
							} else {
		                          
            row4.NB = rs_tDBInput_4.getInt(5);
            if(rs_tDBInput_4.wasNull()){
                    row4.NB = null;
            }
		                    }
					

 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row5HashKey.calltypename = row4.calltypename ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.calltypename = '" + row5HashKey.calltypename + "'");
								} // G 071
							

							row5Struct row5 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.mydate = row4.mydate ;
out2_tmp.calltypename = row4.calltypename ;
out2_tmp.type = row4.type_unique ;
out2_tmp.equipe = row4.equipe ;
out2_tmp.NB = row4.NB ;
out2_tmp.Origine = row5.Origine ;
out2_tmp.DP = row5.DP ;
out2_tmp.TYPE_LIGNE = row5.TYPE_LIGNE ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFileOutputDelimited_3 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out2");
					}
					


                    StringBuilder sb_tFileOutputDelimited_3 = new StringBuilder();
                            if(out2.mydate != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.mydate
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.calltypename != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.calltypename
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.type != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.type
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.equipe != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.equipe
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.NB != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.NB
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.Origine != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.Origine
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.DP != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.DP
                        );
                            }
                            sb_tFileOutputDelimited_3.append(OUT_DELIM_tFileOutputDelimited_3);
                            if(out2.TYPE_LIGNE != null) {
                        sb_tFileOutputDelimited_3.append(
                            out2.TYPE_LIGNE
                        );
                            }
                    sb_tFileOutputDelimited_3.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_3);


                    nb_line_tFileOutputDelimited_3++;
                    resourceMap.put("nb_line_tFileOutputDelimited_3", nb_line_tFileOutputDelimited_3);

                        outtFileOutputDelimited_3.write(sb_tFileOutputDelimited_3.toString());




 


	tos_count_tFileOutputDelimited_3++;

/**
 * [tFileOutputDelimited_3 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	

 



/**
 * [tFileOutputDelimited_3 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
		if(conn_tDBInput_4 != null && !conn_tDBInput_4.isClosed()) {
			
			conn_tDBInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	



		
			
					if(outtFileOutputDelimited_3!=null) {
						outtFileOutputDelimited_3.flush();
						outtFileOutputDelimited_3.close();
					}
				
				globalMap.put("tFileOutputDelimited_3_NB_LINE",nb_line_tFileOutputDelimited_3);
				globalMap.put("tFileOutputDelimited_3_FILE_NAME",fileName_tFileOutputDelimited_3);
			
		
		
			if(isFileGenerated_tFileOutputDelimited_3 && nb_line_tFileOutputDelimited_3 == 0){
				
					filetFileOutputDelimited_3.delete();
				
			}		
		
		resourceMap.put("finish_tFileOutputDelimited_3", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_3", true);
end_Hash.put("tFileOutputDelimited_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFTPConnection_3Process(globalMap);



/**
 * [tFileOutputDelimited_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_3 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_3";

	


		if(resourceMap.get("finish_tFileOutputDelimited_3") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_3 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_3");
						if(outtFileOutputDelimited_3!=null) {
							outtFileOutputDelimited_3.flush();
							outtFileOutputDelimited_3.close();
						}
					
				
			
				if(Boolean.valueOf(String.valueOf(resourceMap.get("isFileGenerated_tFileOutputDelimited_3"))) && Integer.valueOf(String.valueOf(resourceMap.get("nb_line_tFileOutputDelimited_3"))) == 0){
					
						((java.io.File)resourceMap.get("filetFileOutputDelimited_3")).delete();
					
				}		
			
		}
	

 



/**
 * [tFileOutputDelimited_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_3", false);
		start_Hash.put("tFTPConnection_3", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_3";

	
		int tos_count_tFTPConnection_3 = 0;
		

 
int connectionTimeout_tFTPConnection_3 = Integer.valueOf(0);
    org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_3 = null;



	class MyTrust_tFTPConnection_3 {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
 
				String decryptedKeyStorePassword_tFTPConnection_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:HpqFoROhA9WtldlNCSev/xnyMCI/RTDy6hjTCDKBXlE=");
			ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"), decryptedKeyStorePassword_tFTPConnection_3.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
    javax.net.ssl.SSLContext sslContext_tFTPConnection_3 = null;
    javax.net.ssl.TrustManager[] trustManager_tFTPConnection_3 = null;
    javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_3 = null;
    MyTrust_tFTPConnection_3 myTrust_tFTPConnection_3 = null;

    try {
        sslContext_tFTPConnection_3 = javax.net.ssl.SSLContext.getInstance("SSL");
        myTrust_tFTPConnection_3 = new MyTrust_tFTPConnection_3();
        trustManager_tFTPConnection_3 = myTrust_tFTPConnection_3.getTrustManagers();
        sslContext_tFTPConnection_3.init(null, trustManager_tFTPConnection_3, new java.security.SecureRandom());
        sslSocketFactory_tFTPConnection_3 = sslContext_tFTPConnection_3.getSocketFactory();

        if(("true").equals(System.getProperty("http.proxySet")) ){
            String httpProxyHost = System.getProperty("http.proxyHost");
            int httpProxyPort = Integer.getInteger("http.proxyPort");
            String httpProxyUser = System.getProperty("http.proxyUser");
            String httpProxyPass = System.getProperty("http.proxyPassword");

            ftp_tFTPConnection_3 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_3, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = "ftps.toucantoco.com" + ":" + 990;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

                String httpProxyHost = proxyAddress.getAddress().getHostAddress();
                int httpProxyPort = proxyAddress.getPort();
                String httpProxyUser = "";
                String httpProxyPass = ""; //leave it empty if proxy creds weren't specified

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
                if (proxyCreds != null) {
                    httpProxyUser = proxyCreds.getUser();
                    httpProxyPass = proxyCreds.getPass();
                }

                ftp_tFTPConnection_3 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_3, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

            } else { //no http proxy for ftp host defined
                ftp_tFTPConnection_3 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_3);
            }
        } else {
            ftp_tFTPConnection_3 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_3);
        }

        ftp_tFTPConnection_3.setControlEncoding("ISO-8859-15");


        if (connectionTimeout_tFTPConnection_3 > 0) {
            ftp_tFTPConnection_3.setDefaultTimeout(connectionTimeout_tFTPConnection_3);
        }

        ftp_tFTPConnection_3.connect("ftps.toucantoco.com",990);
        ftp_tFTPConnection_3.setRemoteVerificationEnabled(true);
 
	final String decryptedPassword_tFTPConnection_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:4biGLhUcV5gDJtJYoLb5LYU+XPQmcK0spno8+FSmFTStDP/Iy/iO2uc+AjGicQXxvR5yAX5SVzWNvAqR");

        boolean isLoginSuccessful_tFTPConnection_3 = ftp_tFTPConnection_3.login("hauts-de-seine-habitat", decryptedPassword_tFTPConnection_3);

        if (!isLoginSuccessful_tFTPConnection_3) {
            throw new RuntimeException("Login failed");
        }

        ftp_tFTPConnection_3.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
            ftp_tFTPConnection_3.execPBSZ(0);
            ftp_tFTPConnection_3.execPROT("P");
    } catch (Exception e) {
        throw e;
    }

        ftp_tFTPConnection_3.enterLocalPassiveMode();
    globalMap.put("conn_tFTPConnection_3", ftp_tFTPConnection_3);

 



/**
 * [tFTPConnection_3 begin ] stop
 */
	
	/**
	 * [tFTPConnection_3 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_3";

	

 


	tos_count_tFTPConnection_3++;

/**
 * [tFTPConnection_3 main ] stop
 */
	
	/**
	 * [tFTPConnection_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_3";

	

 



/**
 * [tFTPConnection_3 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_3";

	

 



/**
 * [tFTPConnection_3 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_3 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_3";

	

 

ok_Hash.put("tFTPConnection_3", true);
end_Hash.put("tFTPConnection_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFTPPut_3Process(globalMap);



/**
 * [tFTPConnection_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_3 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_3";

	

 



/**
 * [tFTPConnection_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_3_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPPut_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_3", false);
		start_Hash.put("tFTPPut_3", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_3";

	
		int tos_count_tFTPPut_3 = 0;
		


int nb_file_tFTPPut_3 = 0;

		org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_3 = null;
		String rootDir_tFTPPut_3 = null;
			ftp_tFTPPut_3 = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("conn_tFTPConnection_3");
			
			
			rootDir_tFTPPut_3 = ftp_tFTPPut_3.printWorkingDirectory();
		String remotedir_tFTPPut_3 = ("./Satisfactory").replaceAll("\\\\", "/");

		boolean cwdSuccess_tFTPPut_3 = ftp_tFTPPut_3.changeWorkingDirectory(remotedir_tFTPPut_3);

		if (!cwdSuccess_tFTPPut_3) {
			throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_3.getReplyString());
		}

		java.util.List<java.util.Map<String,String>> listtFTPPut_3 = new java.util.ArrayList<java.util.Map<String,String>>();

			java.util.Map<String,String> maptFTPPut_30 = new java.util.HashMap<String,String>();
			maptFTPPut_30.put("Satisfactory_ACD_comptage.csv", "");
			listtFTPPut_3.add(maptFTPPut_30);
		String localdirtFTPPut_3 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory";
		
		for (java.util.Map<String, String> maptFTPPut_3 : listtFTPPut_3) {

 



/**
 * [tFTPPut_3 begin ] stop
 */
	
	/**
	 * [tFTPPut_3 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_3";

	

try{
        String currentStatus_tFTPPut_3 = "No file transfered.";
        globalMap.put("tFTPPut_3_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_3 = maptFTPPut_3.keySet();
        boolean needRename_tFTPPut_3 = false;
        for (String keytFTPPut_3 : keySettFTPPut_3){
            if(keytFTPPut_3 == null || "".equals(keytFTPPut_3)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_3 =  localdirtFTPPut_3;
            String filemasktFTPPut_3 = keytFTPPut_3;
            String dirtFTPPut_3 = null;
                String masktFTPPut_3 = filemasktFTPPut_3.replaceAll("\\\\", "/") ;
            int itFTPPut_3 = masktFTPPut_3.lastIndexOf('/');
            if (itFTPPut_3!=-1){
                dirtFTPPut_3 = masktFTPPut_3.substring(0, itFTPPut_3);
                masktFTPPut_3 = masktFTPPut_3.substring(itFTPPut_3+1);
            }
            if (dirtFTPPut_3!=null && !"".equals(dirtFTPPut_3)) tempdirtFTPPut_3 = tempdirtFTPPut_3 + "/" + dirtFTPPut_3;
                masktFTPPut_3 = masktFTPPut_3.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
            final String finalMasktFTPPut_3 = masktFTPPut_3;
            java.io.File[] listingstFTPPut_3 = null;
            java.io.File filetFTPPut_3 = new java.io.File(tempdirtFTPPut_3);
            if (filetFTPPut_3.isDirectory()) {
                listingstFTPPut_3 = filetFTPPut_3.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_3).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }

            java.util.List<String> remoteExistsFiles_tFTPPut_3 = new java.util.ArrayList<String>();

            String[] ftpFileNames_tFTPPut_3 = ftp_tFTPPut_3.listNames();
            for (String ftpFileName : ftpFileNames_tFTPPut_3) {
                if("".equals(maptFTPPut_3.get(keytFTPPut_3))){
                    if (ftpFileName.matches(masktFTPPut_3)) {
                        remoteExistsFiles_tFTPPut_3.add(ftpFileName);
                    }
                }else{
                    if (ftpFileName.matches(maptFTPPut_3.get(keytFTPPut_3))) {
                        remoteExistsFiles_tFTPPut_3.add(ftpFileName);
                    }
                }
            }

            if(listingstFTPPut_3 != null && listingstFTPPut_3.length > 0){
                for (int mtFTPPut_3 = 0; mtFTPPut_3 < listingstFTPPut_3.length; mtFTPPut_3++){
                    if (listingstFTPPut_3[mtFTPPut_3].getName().matches(masktFTPPut_3)){
                        java.io.File file_in_localDir_tFTPPut_3 = listingstFTPPut_3[mtFTPPut_3];
                        java.io.FileInputStream file_stream_tFTPPut_3 = new java.io.FileInputStream(file_in_localDir_tFTPPut_3);
                        globalMap.put("tFTPPut_3_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_3.contains(file_in_localDir_tFTPPut_3.getName()));
                        String newName_tFTPPut_3 = ("".equals(maptFTPPut_3.get(keytFTPPut_3)))?file_in_localDir_tFTPPut_3.getName():maptFTPPut_3.get(keytFTPPut_3);
                            needRename_tFTPPut_3 = true;
                            if ((remoteExistsFiles_tFTPPut_3.contains(newName_tFTPPut_3))){
                                ftp_tFTPPut_3.deleteFile(newName_tFTPPut_3);
                            }
                            ftp_tFTPPut_3.storeFile(file_in_localDir_tFTPPut_3.getName(), file_stream_tFTPPut_3);

                            globalMap.put("tFTPPut_3_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_3.contains(newName_tFTPPut_3));

                        file_stream_tFTPPut_3.close();
                        nb_file_tFTPPut_3++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if (!((maptFTPPut_3.get(keytFTPPut_3) == null) || maptFTPPut_3.get(keytFTPPut_3).isEmpty() || keytFTPPut_3.equals(maptFTPPut_3.get(keytFTPPut_3)))){
                try{
                    if(needRename_tFTPPut_3){
                        ftp_tFTPPut_3.rename(keytFTPPut_3, maptFTPPut_3.get(keytFTPPut_3));
                    }
                    globalMap.put("tFTPPut_3_CURRENT_STATUS", "File rename OK.");
                }catch(IOException e_tFTPPut_3){
                    globalMap.put("tFTPPut_3_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_3;
                }
            }
            needRename_tFTPPut_3 = false;
        }
    }catch(java.lang.Exception e_tFTPPut_3){
            throw(e_tFTPPut_3);
    }

 


	tos_count_tFTPPut_3++;

/**
 * [tFTPPut_3 main ] stop
 */
	
	/**
	 * [tFTPPut_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPPut_3";

	

 



/**
 * [tFTPPut_3 process_data_begin ] stop
 */
	
	/**
	 * [tFTPPut_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPPut_3";

	

 



/**
 * [tFTPPut_3 process_data_end ] stop
 */
	
	/**
	 * [tFTPPut_3 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_3";

	

	}
	  		ftp_tFTPPut_3.changeWorkingDirectory(rootDir_tFTPPut_3);
	
	
globalMap.put("tFTPPut_3_NB_FILE",nb_file_tFTPPut_3);


 

ok_Hash.put("tFTPPut_3", true);
end_Hash.put("tFTPPut_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFTPClose_3Process(globalMap);



/**
 * [tFTPPut_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_3 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_3";

	

 



/**
 * [tFTPPut_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_3_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPClose_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_3", false);
		start_Hash.put("tFTPClose_3", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_3";

	
		int tos_count_tFTPClose_3 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_3");
	 if (connObj != null) {
      try {
			
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_3_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_3 begin ] stop
 */
	
	/**
	 * [tFTPClose_3 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_3";

	

 


	tos_count_tFTPClose_3++;

/**
 * [tFTPClose_3 main ] stop
 */
	
	/**
	 * [tFTPClose_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_3";

	

 



/**
 * [tFTPClose_3 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_3";

	

 



/**
 * [tFTPClose_3 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_3 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_3";

	

 

ok_Hash.put("tFTPClose_3", true);
end_Hash.put("tFTPClose_3", System.currentTimeMillis());




/**
 * [tFTPClose_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_3 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_3";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_3");
	 if (connObj != null) {   
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
     
  }
 



/**
 * [tFTPClose_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_3_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tDBInput_1 - inputs:(after_tDBInput_2) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				String driverClass_tDBInput_1 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_1 = java.lang.Class.forName(driverClass_tDBInput_1);
				String dbUser_tDBInput_1 = "";
				
				 
	final String decryptedPassword_tDBInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:U/uobeM21KRUvtCyks4uzKTl6olJoihYPVNWkQ==");
				
				String dbPwd_tDBInput_1 = decryptedPassword_tDBInput_1;
				
		    String port_tDBInput_1 = "1433";
		    String dbname_tDBInput_1 = "HDSHData" ;
			String url_tDBInput_1 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_1)) {
		    	url_tDBInput_1 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_1)) {
				url_tDBInput_1 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_1 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_1 = "";
				
				conn_tDBInput_1 = java.sql.DriverManager.getConnection(url_tDBInput_1,dbUser_tDBInput_1,dbPwd_tDBInput_1);
		        
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT T_DEF_LOCALISATION.CD_LOCALI1,\n		T_DEF_LOCALISATION.VILLE,\n		T_DEF_LOCALISATION.DP,\n		T_DEF_LOCALISATION.DT\nFROM"
+"	T_DEF_LOCALISATION";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row2.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(1);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row2.CD_LOCALI1 = tmpContent_tDBInput_1;
                }
            } else {
                row2.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row2.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row2.VILLE = tmpContent_tDBInput_1;
                }
            } else {
                row2.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row2.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(3);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row2.DP = tmpContent_tDBInput_1;
                }
            } else {
                row2.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row2.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(4);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row2.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row2.DT = tmpContent_tDBInput_1;
                }
            } else {
                row2.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.CD_LOCALI1 = row2.CD_LOCALI1;
				
				row2_HashRow.VILLE = row2.VILLE;
				
				row2_HashRow.DP = row2.DP;
				
				row2_HashRow.DT = row2.DT;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
		if(conn_tDBInput_1 != null && !conn_tDBInput_1.isClosed()) {
			
			conn_tDBInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String Origine;

				public String getOrigine () {
					return this.Origine;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String TYPE_LIGNE;

				public String getTYPE_LIGNE () {
					return this.TYPE_LIGNE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.calltypename == null) ? 0 : this.calltypename.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.calltypename == null) {
							if (other.calltypename != null)
								return false;
						
						} else if (!this.calltypename.equals(other.calltypename))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.calltypename = this.calltypename;
	            other.Origine = this.Origine;
	            other.DP = this.DP;
	            other.TYPE_LIGNE = this.TYPE_LIGNE;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.calltypename = this.calltypename;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.calltypename = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.calltypename,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Origine = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.TYPE_LIGNE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Origine, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.TYPE_LIGNE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("calltypename="+calltypename);
		sb.append(",Origine="+Origine);
		sb.append(",DP="+DP);
		sb.append(",TYPE_LIGNE="+TYPE_LIGNE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.calltypename, other.calltypename);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tDBInput_5 - inputs:(after_tDBInput_4) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_2 - inputs:(row4,row5) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tDBInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_5", false);
		start_Hash.put("tDBInput_5", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_5";

	
		int tos_count_tDBInput_5 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_5 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_5 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_5  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_5, talendToDBArray_tDBInput_5); 
		    int nb_line_tDBInput_5 = 0;
		    java.sql.Connection conn_tDBInput_5 = null;
				String driverClass_tDBInput_5 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_5 = java.lang.Class.forName(driverClass_tDBInput_5);
				String dbUser_tDBInput_5 = "";
				
				 
	final String decryptedPassword_tDBInput_5 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:Kxx5dCMyfvlOU/bUbkzpbIgO5R+nWjS06eh//g==");
				
				String dbPwd_tDBInput_5 = decryptedPassword_tDBInput_5;
				
		    String port_tDBInput_5 = "1433";
		    String dbname_tDBInput_5 = "HDSHData" ;
			String url_tDBInput_5 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_5)) {
		    	url_tDBInput_5 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_5)) {
				url_tDBInput_5 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_5 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_5 = "";
				
				conn_tDBInput_5 = java.sql.DriverManager.getConnection(url_tDBInput_5,dbUser_tDBInput_5,dbPwd_tDBInput_5);
		        
		    
			java.sql.Statement stmt_tDBInput_5 = conn_tDBInput_5.createStatement();

		    String dbquery_tDBInput_5 = "SELECT\ncalltypename,\nOrigine,\nDP,\nTYPE_LIGNE\n FROM T_DEF_LIGNE_SATISFACTORY";
			

            	globalMap.put("tDBInput_5_QUERY",dbquery_tDBInput_5);
		    java.sql.ResultSet rs_tDBInput_5 = null;

		    try {
		    	rs_tDBInput_5 = stmt_tDBInput_5.executeQuery(dbquery_tDBInput_5);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_5 = rs_tDBInput_5.getMetaData();
		    	int colQtyInRs_tDBInput_5 = rsmd_tDBInput_5.getColumnCount();

		    String tmpContent_tDBInput_5 = null;
		    
		    
		    while (rs_tDBInput_5.next()) {
		        nb_line_tDBInput_5++;
		        
							if(colQtyInRs_tDBInput_5 < 1) {
								row5.calltypename = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(1);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.calltypename = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.calltypename = tmpContent_tDBInput_5;
                }
            } else {
                row5.calltypename = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 2) {
								row5.Origine = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(2);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.Origine = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.Origine = tmpContent_tDBInput_5;
                }
            } else {
                row5.Origine = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 3) {
								row5.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(3);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.DP = tmpContent_tDBInput_5;
                }
            } else {
                row5.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_5 < 4) {
								row5.TYPE_LIGNE = null;
							} else {
	                         		
           		tmpContent_tDBInput_5 = rs_tDBInput_5.getString(4);
            if(tmpContent_tDBInput_5 != null) {
            	if (talendToDBList_tDBInput_5 .contains(rsmd_tDBInput_5.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row5.TYPE_LIGNE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_5);
            	} else {
                	row5.TYPE_LIGNE = tmpContent_tDBInput_5;
                }
            } else {
                row5.TYPE_LIGNE = null;
            }
		                    }
					





 



/**
 * [tDBInput_5 begin ] stop
 */
	
	/**
	 * [tDBInput_5 main ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 


	tos_count_tDBInput_5++;

/**
 * [tDBInput_5 main ] stop
 */
	
	/**
	 * [tDBInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.calltypename = row5.calltypename;
				
				row5_HashRow.Origine = row5.Origine;
				
				row5_HashRow.DP = row5.DP;
				
				row5_HashRow.TYPE_LIGNE = row5.TYPE_LIGNE;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_5 end ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

	}
}finally{
	if (rs_tDBInput_5 != null) {
		rs_tDBInput_5.close();
	}
	if (stmt_tDBInput_5 != null) {
		stmt_tDBInput_5.close();
	}
		if(conn_tDBInput_5 != null && !conn_tDBInput_5.isClosed()) {
			
			conn_tDBInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_5_NB_LINE",nb_line_tDBInput_5);

 

ok_Hash.put("tDBInput_5", true);
end_Hash.put("tDBInput_5", System.currentTimeMillis());




/**
 * [tDBInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_5 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_5";

	

 



/**
 * [tDBInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";

	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Satisfactory = new byte[0];
    static byte[] commonByteArray_HAPPI_Satisfactory = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String calltypename;

				public String getCalltypename () {
					return this.calltypename;
				}
				
			    public String Origine;

				public String getOrigine () {
					return this.Origine;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String TYPE_LIGNE;

				public String getTYPE_LIGNE () {
					return this.TYPE_LIGNE;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.calltypename == null) ? 0 : this.calltypename.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.calltypename == null) {
							if (other.calltypename != null)
								return false;
						
						} else if (!this.calltypename.equals(other.calltypename))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.calltypename = this.calltypename;
	            other.Origine = this.Origine;
	            other.DP = this.DP;
	            other.TYPE_LIGNE = this.TYPE_LIGNE;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.calltypename = this.calltypename;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Satisfactory.length) {
				if(length < 1024 && commonByteArray_HAPPI_Satisfactory.length == 0) {
   					commonByteArray_HAPPI_Satisfactory = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Satisfactory = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Satisfactory, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Satisfactory, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Satisfactory) {

        	try {

        		int length = 0;
		
					this.calltypename = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.calltypename,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.Origine = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.TYPE_LIGNE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.Origine, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.TYPE_LIGNE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("calltypename="+calltypename);
		sb.append(",Origine="+Origine);
		sb.append(",DP="+DP);
		sb.append(",TYPE_LIGNE="+TYPE_LIGNE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.calltypename, other.calltypename);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tDBInput_6 - inputs:(after_tDBInput_3) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_3 - inputs:(row3,row6) outputs:(copyOfout2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tDBInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_6", false);
		start_Hash.put("tDBInput_6", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_6";

	
		int tos_count_tDBInput_6 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_6 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_6 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_6  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_6, talendToDBArray_tDBInput_6); 
		    int nb_line_tDBInput_6 = 0;
		    java.sql.Connection conn_tDBInput_6 = null;
				String driverClass_tDBInput_6 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_6 = java.lang.Class.forName(driverClass_tDBInput_6);
				String dbUser_tDBInput_6 = "";
				
				 
	final String decryptedPassword_tDBInput_6 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:YJeRcR54SXdHnuZh2UVlwW9wJQKN8ftEeaxHAw==");
				
				String dbPwd_tDBInput_6 = decryptedPassword_tDBInput_6;
				
		    String port_tDBInput_6 = "1433";
		    String dbname_tDBInput_6 = "HDSHData" ;
			String url_tDBInput_6 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_6)) {
		    	url_tDBInput_6 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_6)) {
				url_tDBInput_6 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_6 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_6 = "";
				
				conn_tDBInput_6 = java.sql.DriverManager.getConnection(url_tDBInput_6,dbUser_tDBInput_6,dbPwd_tDBInput_6);
		        
		    
			java.sql.Statement stmt_tDBInput_6 = conn_tDBInput_6.createStatement();

		    String dbquery_tDBInput_6 = "SELECT\ncalltypename,\nOrigine,\nDP,\nTYPE_LIGNE\n FROM T_DEF_LIGNE_SATISFACTORY";
			

            	globalMap.put("tDBInput_6_QUERY",dbquery_tDBInput_6);
		    java.sql.ResultSet rs_tDBInput_6 = null;

		    try {
		    	rs_tDBInput_6 = stmt_tDBInput_6.executeQuery(dbquery_tDBInput_6);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_6 = rs_tDBInput_6.getMetaData();
		    	int colQtyInRs_tDBInput_6 = rsmd_tDBInput_6.getColumnCount();

		    String tmpContent_tDBInput_6 = null;
		    
		    
		    while (rs_tDBInput_6.next()) {
		        nb_line_tDBInput_6++;
		        
							if(colQtyInRs_tDBInput_6 < 1) {
								row6.calltypename = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(1);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.calltypename = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.calltypename = tmpContent_tDBInput_6;
                }
            } else {
                row6.calltypename = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 2) {
								row6.Origine = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(2);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.Origine = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.Origine = tmpContent_tDBInput_6;
                }
            } else {
                row6.Origine = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 3) {
								row6.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(3);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.DP = tmpContent_tDBInput_6;
                }
            } else {
                row6.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_6 < 4) {
								row6.TYPE_LIGNE = null;
							} else {
	                         		
           		tmpContent_tDBInput_6 = rs_tDBInput_6.getString(4);
            if(tmpContent_tDBInput_6 != null) {
            	if (talendToDBList_tDBInput_6 .contains(rsmd_tDBInput_6.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row6.TYPE_LIGNE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_6);
            	} else {
                	row6.TYPE_LIGNE = tmpContent_tDBInput_6;
                }
            } else {
                row6.TYPE_LIGNE = null;
            }
		                    }
					





 



/**
 * [tDBInput_6 begin ] stop
 */
	
	/**
	 * [tDBInput_6 main ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 


	tos_count_tDBInput_6++;

/**
 * [tDBInput_6 main ] stop
 */
	
	/**
	 * [tDBInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row6");
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.calltypename = row6.calltypename;
				
				row6_HashRow.Origine = row6.Origine;
				
				row6_HashRow.DP = row6.DP;
				
				row6_HashRow.TYPE_LIGNE = row6.TYPE_LIGNE;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_6 end ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

	}
}finally{
	if (rs_tDBInput_6 != null) {
		rs_tDBInput_6.close();
	}
	if (stmt_tDBInput_6 != null) {
		stmt_tDBInput_6.close();
	}
		if(conn_tDBInput_6 != null && !conn_tDBInput_6.isClosed()) {
			
			conn_tDBInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_6_NB_LINE",nb_line_tDBInput_6);

 

ok_Hash.put("tDBInput_6", true);
end_Hash.put("tDBInput_6", System.currentTimeMillis());




/**
 * [tDBInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_6 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_6";

	

 



/**
 * [tDBInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";

	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_6_SUBPROCESS_STATE", 1);
	}
	

public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";

	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tFTPConnection_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";

	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPConnection_1", false);
		start_Hash.put("tFTPConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPConnection_1";

	
		int tos_count_tFTPConnection_1 = 0;
		

 
int connectionTimeout_tFTPConnection_1 = Integer.valueOf(0);
    org.apache.commons.net.ftp.FTPSClient ftp_tFTPConnection_1 = null;



	class MyTrust_tFTPConnection_1 {

		private javax.net.ssl.TrustManager[] getTrustManagers() 
		throws java.security.KeyStoreException, java.security.NoSuchAlgorithmException, 
			java.security.cert.CertificateException, java.security.UnrecoverableKeyException,
			java.io.IOException {
			java.security.KeyStore ks = java.security.KeyStore.getInstance("JKS");
 
				String decryptedKeyStorePassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:6Dyp4jagYizBwu2Q5US0eNcUAzY0kDzFNkvA8UDgK+E=");
			ks.load(new java.io.FileInputStream("C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/keystore"), decryptedKeyStorePassword_tFTPConnection_1.toCharArray());
			javax.net.ssl.TrustManagerFactory tmf = javax.net.ssl.TrustManagerFactory.getInstance(javax.net.ssl.KeyManagerFactory.getDefaultAlgorithm());
			tmf.init(ks);
			return tmf.getTrustManagers();
		}
	}
    javax.net.ssl.SSLContext sslContext_tFTPConnection_1 = null;
    javax.net.ssl.TrustManager[] trustManager_tFTPConnection_1 = null;
    javax.net.ssl.SSLSocketFactory sslSocketFactory_tFTPConnection_1 = null;
    MyTrust_tFTPConnection_1 myTrust_tFTPConnection_1 = null;

    try {
        sslContext_tFTPConnection_1 = javax.net.ssl.SSLContext.getInstance("SSL");
        myTrust_tFTPConnection_1 = new MyTrust_tFTPConnection_1();
        trustManager_tFTPConnection_1 = myTrust_tFTPConnection_1.getTrustManagers();
        sslContext_tFTPConnection_1.init(null, trustManager_tFTPConnection_1, new java.security.SecureRandom());
        sslSocketFactory_tFTPConnection_1 = sslContext_tFTPConnection_1.getSocketFactory();

        if(("true").equals(System.getProperty("http.proxySet")) ){
            String httpProxyHost = System.getProperty("http.proxyHost");
            int httpProxyPort = Integer.getInteger("http.proxyPort");
            String httpProxyUser = System.getProperty("http.proxyUser");
            String httpProxyPass = System.getProperty("http.proxyPassword");

            ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

        } else if ("local".equals(System.getProperty("http.proxySet"))) {
            String uriString = "ftps.toucantoco.com" + ":" + 990;
            java.net.Proxy proxyToUse = org.talend.proxy.TalendProxySelector.getInstance().getProxyForUriString(uriString);

            if (!proxyToUse.equals(java.net.Proxy.NO_PROXY)) {
                java.net.InetSocketAddress proxyAddress = (java.net.InetSocketAddress) proxyToUse.address();

                String httpProxyHost = proxyAddress.getAddress().getHostAddress();
                int httpProxyPort = proxyAddress.getPort();
                String httpProxyUser = "";
                String httpProxyPass = ""; //leave it empty if proxy creds weren't specified

                org.talend.proxy.ProxyCreds proxyCreds = org.talend.proxy.TalendProxyAuthenticator.getInstance().getCredsForProxyURI(httpProxyHost + ":" + httpProxyPort);
                if (proxyCreds != null) {
                    httpProxyUser = proxyCreds.getUser();
                    httpProxyPass = proxyCreds.getPass();
                }

                ftp_tFTPConnection_1 = new org.talend.ftp.HTTPProxyFTPSClient(true, sslContext_tFTPConnection_1, httpProxyHost, httpProxyPort, httpProxyUser, httpProxyPass);

            } else { //no http proxy for ftp host defined
                ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
            }
        } else {
            ftp_tFTPConnection_1 = new org.talend.ftp.SSLSessionReuseFTPSClient(true, sslContext_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.setControlEncoding("ISO-8859-15");


        if (connectionTimeout_tFTPConnection_1 > 0) {
            ftp_tFTPConnection_1.setDefaultTimeout(connectionTimeout_tFTPConnection_1);
        }

        ftp_tFTPConnection_1.connect("ftps.toucantoco.com",990);
        ftp_tFTPConnection_1.setRemoteVerificationEnabled(true);
 
	final String decryptedPassword_tFTPConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:n6tqyQIAGa3Tz7HNL+Gba8NHV2DN3mk698DHVv9HY+TdUz/Q2u34pIkEZVlVCo+iDJGoUeeg9FfparjQ");

        boolean isLoginSuccessful_tFTPConnection_1 = ftp_tFTPConnection_1.login("hauts-de-seine-habitat", decryptedPassword_tFTPConnection_1);

        if (!isLoginSuccessful_tFTPConnection_1) {
            throw new RuntimeException("Login failed");
        }

        ftp_tFTPConnection_1.setFileType(org.apache.commons.net.ftp.FTP.BINARY_FILE_TYPE);
            ftp_tFTPConnection_1.execPBSZ(0);
            ftp_tFTPConnection_1.execPROT("P");
    } catch (Exception e) {
        throw e;
    }

        ftp_tFTPConnection_1.enterLocalPassiveMode();
    globalMap.put("conn_tFTPConnection_1", ftp_tFTPConnection_1);

 



/**
 * [tFTPConnection_1 begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 main ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 


	tos_count_tFTPConnection_1++;

/**
 * [tFTPConnection_1 main ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPConnection_1 end ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 

ok_Hash.put("tFTPConnection_1", true);
end_Hash.put("tFTPConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFTPPut_1Process(globalMap);



/**
 * [tFTPConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPConnection_1";

	

 



/**
 * [tFTPConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPConnection_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPPut_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tFTPPut_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPPut_1", false);
		start_Hash.put("tFTPPut_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPPut_1";

	
		int tos_count_tFTPPut_1 = 0;
		


int nb_file_tFTPPut_1 = 0;

		org.apache.commons.net.ftp.FTPSClient ftp_tFTPPut_1 = null;
		String rootDir_tFTPPut_1 = null;
			ftp_tFTPPut_1 = (org.apache.commons.net.ftp.FTPSClient)globalMap.get("conn_tFTPConnection_1");
			
			
			rootDir_tFTPPut_1 = ftp_tFTPPut_1.printWorkingDirectory();
		String remotedir_tFTPPut_1 = ("./Satisfactory").replaceAll("\\\\", "/");

		boolean cwdSuccess_tFTPPut_1 = ftp_tFTPPut_1.changeWorkingDirectory(remotedir_tFTPPut_1);

		if (!cwdSuccess_tFTPPut_1) {
			throw new RuntimeException("Failed to change remote directory. " + ftp_tFTPPut_1.getReplyString());
		}

		java.util.List<java.util.Map<String,String>> listtFTPPut_1 = new java.util.ArrayList<java.util.Map<String,String>>();

			java.util.Map<String,String> maptFTPPut_10 = new java.util.HashMap<String,String>();
			maptFTPPut_10.put("Satisfactory_ARAVIS.csv", "");
			listtFTPPut_1.add(maptFTPPut_10);
		String localdirtFTPPut_1 = "C:/Users/DKHUON/Desktop/HAPPI/FTPToucan/satisfactory";
		
		for (java.util.Map<String, String> maptFTPPut_1 : listtFTPPut_1) {

 



/**
 * [tFTPPut_1 begin ] stop
 */
	
	/**
	 * [tFTPPut_1 main ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

try{
        String currentStatus_tFTPPut_1 = "No file transfered.";
        globalMap.put("tFTPPut_1_CURRENT_STATUS", "No file transfered.");
        java.util.Set<String> keySettFTPPut_1 = maptFTPPut_1.keySet();
        boolean needRename_tFTPPut_1 = false;
        for (String keytFTPPut_1 : keySettFTPPut_1){
            if(keytFTPPut_1 == null || "".equals(keytFTPPut_1)){
                System.err.println("file name invalid!");
                continue;
            }
            String tempdirtFTPPut_1 =  localdirtFTPPut_1;
            String filemasktFTPPut_1 = keytFTPPut_1;
            String dirtFTPPut_1 = null;
                String masktFTPPut_1 = filemasktFTPPut_1.replaceAll("\\\\", "/") ;
            int itFTPPut_1 = masktFTPPut_1.lastIndexOf('/');
            if (itFTPPut_1!=-1){
                dirtFTPPut_1 = masktFTPPut_1.substring(0, itFTPPut_1);
                masktFTPPut_1 = masktFTPPut_1.substring(itFTPPut_1+1);
            }
            if (dirtFTPPut_1!=null && !"".equals(dirtFTPPut_1)) tempdirtFTPPut_1 = tempdirtFTPPut_1 + "/" + dirtFTPPut_1;
                masktFTPPut_1 = masktFTPPut_1.replaceAll("\\.", "\\\\.").replaceAll("\\*", ".*");
            final String finalMasktFTPPut_1 = masktFTPPut_1;
            java.io.File[] listingstFTPPut_1 = null;
            java.io.File filetFTPPut_1 = new java.io.File(tempdirtFTPPut_1);
            if (filetFTPPut_1.isDirectory()) {
                listingstFTPPut_1 = filetFTPPut_1.listFiles(new java.io.FileFilter() {
                    public boolean accept(java.io.File pathname) {
                        boolean result = false;
                        if (pathname != null && pathname.isFile()) {
                                result = java.util.regex.Pattern.compile(finalMasktFTPPut_1).matcher(pathname.getName()).find();
                            }
                        return result;
                    }
                });
            }

            java.util.List<String> remoteExistsFiles_tFTPPut_1 = new java.util.ArrayList<String>();

            String[] ftpFileNames_tFTPPut_1 = ftp_tFTPPut_1.listNames();
            for (String ftpFileName : ftpFileNames_tFTPPut_1) {
                if("".equals(maptFTPPut_1.get(keytFTPPut_1))){
                    if (ftpFileName.matches(masktFTPPut_1)) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }else{
                    if (ftpFileName.matches(maptFTPPut_1.get(keytFTPPut_1))) {
                        remoteExistsFiles_tFTPPut_1.add(ftpFileName);
                    }
                }
            }

            if(listingstFTPPut_1 != null && listingstFTPPut_1.length > 0){
                for (int mtFTPPut_1 = 0; mtFTPPut_1 < listingstFTPPut_1.length; mtFTPPut_1++){
                    if (listingstFTPPut_1[mtFTPPut_1].getName().matches(masktFTPPut_1)){
                        java.io.File file_in_localDir_tFTPPut_1 = listingstFTPPut_1[mtFTPPut_1];
                        java.io.FileInputStream file_stream_tFTPPut_1 = new java.io.FileInputStream(file_in_localDir_tFTPPut_1);
                        globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(file_in_localDir_tFTPPut_1.getName()));
                        String newName_tFTPPut_1 = ("".equals(maptFTPPut_1.get(keytFTPPut_1)))?file_in_localDir_tFTPPut_1.getName():maptFTPPut_1.get(keytFTPPut_1);
                            needRename_tFTPPut_1 = true;
                            if ((remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1))){
                                ftp_tFTPPut_1.deleteFile(newName_tFTPPut_1);
                            }
                            ftp_tFTPPut_1.storeFile(file_in_localDir_tFTPPut_1.getName(), file_stream_tFTPPut_1);

                            globalMap.put("tFTPPut_1_CURRENT_FILE_EXISTS", remoteExistsFiles_tFTPPut_1.contains(newName_tFTPPut_1));

                        file_stream_tFTPPut_1.close();
                        nb_file_tFTPPut_1++;
                    }
                }
            }else{
                System.err.println("No match file exist!");
            }

            //do rename
            if (!((maptFTPPut_1.get(keytFTPPut_1) == null) || maptFTPPut_1.get(keytFTPPut_1).isEmpty() || keytFTPPut_1.equals(maptFTPPut_1.get(keytFTPPut_1)))){
                try{
                    if(needRename_tFTPPut_1){
                        ftp_tFTPPut_1.rename(keytFTPPut_1, maptFTPPut_1.get(keytFTPPut_1));
                    }
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename OK.");
                }catch(IOException e_tFTPPut_1){
                    globalMap.put("tFTPPut_1_CURRENT_STATUS", "File rename fail.");
                    throw e_tFTPPut_1;
                }
            }
            needRename_tFTPPut_1 = false;
        }
    }catch(java.lang.Exception e_tFTPPut_1){
            System.err.print(e_tFTPPut_1.getMessage());
    }

 


	tos_count_tFTPPut_1++;

/**
 * [tFTPPut_1 main ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPPut_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPPut_1 end ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

	}
	  		ftp_tFTPPut_1.changeWorkingDirectory(rootDir_tFTPPut_1);
	
	
globalMap.put("tFTPPut_1_NB_FILE",nb_file_tFTPPut_1);


 

ok_Hash.put("tFTPPut_1", true);
end_Hash.put("tFTPPut_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFTPClose_1Process(globalMap);



/**
 * [tFTPPut_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPPut_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPPut_1";

	

 



/**
 * [tFTPPut_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPPut_1_SUBPROCESS_STATE", 1);
	}
	

public void tFTPClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFTPClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFTPClose_1", false);
		start_Hash.put("tFTPClose_1", System.currentTimeMillis());
		
	
	currentComponent="tFTPClose_1";

	
		int tos_count_tFTPClose_1 = 0;
		
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {
      try {
			
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
			
      } catch (Exception e) {
           globalMap.put("tFTPClose_1_ERROR_MESSAGE", e.getMessage()); 
           throw e;
      }
  }
 



/**
 * [tFTPClose_1 begin ] stop
 */
	
	/**
	 * [tFTPClose_1 main ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 


	tos_count_tFTPClose_1++;

/**
 * [tFTPClose_1 main ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tFTPClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 



/**
 * [tFTPClose_1 process_data_end ] stop
 */
	
	/**
	 * [tFTPClose_1 end ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	

 

ok_Hash.put("tFTPClose_1", true);
end_Hash.put("tFTPClose_1", System.currentTimeMillis());




/**
 * [tFTPClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFTPClose_1 finally ] start
	 */

	

	
	
	currentComponent="tFTPClose_1";

	
	 Object connObj = globalMap.get("conn_tFTPConnection_1");
	 if (connObj != null) {   
              org.apache.commons.net.ftp.FTPSClient conn = (org.apache.commons.net.ftp.FTPSClient) connObj;
              conn.disconnect();
     
  }
 



/**
 * [tFTPClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFTPClose_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Satisfactory SatisfactoryClass = new Satisfactory();

        int exitCode = SatisfactoryClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Satisfactory.class.getClassLoader().getResourceAsStream("happi/satisfactory_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Satisfactory.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}



this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Satisfactory");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();
    closeFtpConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }



    private void closeFtpConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tFTPConnection_2");
            if (obj_conn != null) {
                ((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
            }
            obj_conn = globalMap.remove("conn_tFTPConnection_3");
            if (obj_conn != null) {
                ((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
            }
            obj_conn = globalMap.remove("conn_tFTPConnection_1");
            if (obj_conn != null) {
                ((org.apache.commons.net.ftp.FTPSClient) obj_conn).disconnect();
            }
        } catch (java.lang.Exception e) {
        }
    }








    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));


            connections.put("conn_tFTPConnection_2", globalMap.get("conn_tFTPConnection_2"));
            connections.put("conn_tFTPConnection_3", globalMap.get("conn_tFTPConnection_3"));
            connections.put("conn_tFTPConnection_1", globalMap.get("conn_tFTPConnection_1"));





        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     348698 characters generated by Talend Open Studio for Data Integration 
 *     on the 3 octobre 2024 10:52:37 CEST
 ************************************************************************************************/