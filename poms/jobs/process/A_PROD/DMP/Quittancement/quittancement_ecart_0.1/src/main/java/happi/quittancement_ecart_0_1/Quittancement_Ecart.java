// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package happi.quittancement_ecart_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Quittancement_Ecart Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 7.3.1.20200219_1130
 * @status 
 */
public class Quittancement_Ecart implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Quittancement_Ecart";
	private final String projectName = "HAPPI";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Quittancement_Ecart.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Quittancement_Ecart.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tDBConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFilterRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputExcel_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDBInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDBConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDBInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	





public void tDBConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tDBConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBConnection_1", false);
		start_Hash.put("tDBConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tDBConnection_1";

	
		int tos_count_tDBConnection_1 = 0;
		
	

	
			String url_tDBConnection_1 = "jdbc:jtds:sqlserver://" + "ACGSQL01" ;
		String port_tDBConnection_1 = "1433";
		String dbname_tDBConnection_1 = "ACGINFO1" ;
    	if (!"".equals(port_tDBConnection_1)) {
    		url_tDBConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tDBConnection_1)) {
    		
				url_tDBConnection_1 += "//" + "ACGINFO1"; 
    	}
		url_tDBConnection_1 += ";appName=" + projectName + ";" + "instance=DECISIONNELLE";  
	String dbUser_tDBConnection_1 = "";
	
	
		 
	final String decryptedPassword_tDBConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:5uGlSuujPTA7rxfUUuQQIgLwWrra7AeOveWOOw==");
		String dbPwd_tDBConnection_1 = decryptedPassword_tDBConnection_1;
	
	
	java.sql.Connection conn_tDBConnection_1 = null;
	
		
			String driverClass_tDBConnection_1 = "net.sourceforge.jtds.jdbc.Driver";
			java.lang.Class jdbcclazz_tDBConnection_1 = java.lang.Class.forName(driverClass_tDBConnection_1);
			globalMap.put("driverClass_tDBConnection_1", driverClass_tDBConnection_1);
		
			conn_tDBConnection_1 = java.sql.DriverManager.getConnection(url_tDBConnection_1,dbUser_tDBConnection_1,dbPwd_tDBConnection_1);

		globalMap.put("conn_tDBConnection_1", conn_tDBConnection_1);
	if (null != conn_tDBConnection_1) {
		
			conn_tDBConnection_1.setAutoCommit(false);
	}

	globalMap.put("dbschema_tDBConnection_1", "");

	globalMap.put("db_tDBConnection_1",  "ACGINFO1");

	globalMap.put("conn_tDBConnection_1",conn_tDBConnection_1);
	
	globalMap.put("shareIdentitySetting_tDBConnection_1",  false);

 



/**
 * [tDBConnection_1 begin ] stop
 */
	
	/**
	 * [tDBConnection_1 main ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 


	tos_count_tDBConnection_1++;

/**
 * [tDBConnection_1 main ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tDBConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tDBConnection_1 end ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 

ok_Hash.put("tDBConnection_1", true);
end_Hash.put("tDBConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tDBInput_1Process(globalMap);



/**
 * [tDBConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tDBConnection_1";

	

 



/**
 * [tDBConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class outStruct implements routines.system.IPersistableRow<outStruct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal Code_SocieteProprietaire;

				public BigDecimal getCode_SocieteProprietaire () {
					return this.Code_SocieteProprietaire;
				}
				
			    public String Libelle_SocieteProprietaire;

				public String getLibelle_SocieteProprietaire () {
					return this.Libelle_SocieteProprietaire;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public BigDecimal DossierFacturation;

				public BigDecimal getDossierFacturation () {
					return this.DossierFacturation;
				}
				
			    public String NomClient;

				public String getNomClient () {
					return this.NomClient;
				}
				
			    public String PrenomClient;

				public String getPrenomClient () {
					return this.PrenomClient;
				}
				
			    public String Vacant;

				public String getVacant () {
					return this.Vacant;
				}
				
			    public String Code_NatureFacturation;

				public String getCode_NatureFacturation () {
					return this.Code_NatureFacturation;
				}
				
			    public String Libelle_NatureFacturation;

				public String getLibelle_NatureFacturation () {
					return this.Libelle_NatureFacturation;
				}
				
			    public String Code_TypeFacturation;

				public String getCode_TypeFacturation () {
					return this.Code_TypeFacturation;
				}
				
			    public String ReferencePatrimoine;

				public String getReferencePatrimoine () {
					return this.ReferencePatrimoine;
				}
				
			    public String NaturePatrimoine;

				public String getNaturePatrimoine () {
					return this.NaturePatrimoine;
				}
				
			    public String Code_FamilleRubrique;

				public String getCode_FamilleRubrique () {
					return this.Code_FamilleRubrique;
				}
				
			    public String Code_LibelleRubrique;

				public String getCode_LibelleRubrique () {
					return this.Code_LibelleRubrique;
				}
				
			    public BigDecimal Num_RubriqueFacture;

				public BigDecimal getNum_RubriqueFacture () {
					return this.Num_RubriqueFacture;
				}
				
			    public String Libelle_Rubrique;

				public String getLibelle_Rubrique () {
					return this.Libelle_Rubrique;
				}
				
			    public BigDecimal Montant_Quittance_Total;

				public BigDecimal getMontant_Quittance_Total () {
					return this.Montant_Quittance_Total;
				}
				
			    public BigDecimal Montant_Chiffre_Total;

				public BigDecimal getMontant_Chiffre_Total () {
					return this.Montant_Chiffre_Total;
				}
				
			    public BigDecimal Montant_Quittance_Loyer;

				public BigDecimal getMontant_Quittance_Loyer () {
					return this.Montant_Quittance_Loyer;
				}
				
			    public BigDecimal Montant_Chiffre_Loyer;

				public BigDecimal getMontant_Chiffre_Loyer () {
					return this.Montant_Chiffre_Loyer;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.Code_SocieteProprietaire = (BigDecimal) dis.readObject();
					
					this.Libelle_SocieteProprietaire = readString(dis);
					
					this.DT = readString(dis);
					
					this.DP = readString(dis);
					
						this.DossierFacturation = (BigDecimal) dis.readObject();
					
					this.NomClient = readString(dis);
					
					this.PrenomClient = readString(dis);
					
					this.Vacant = readString(dis);
					
					this.Code_NatureFacturation = readString(dis);
					
					this.Libelle_NatureFacturation = readString(dis);
					
					this.Code_TypeFacturation = readString(dis);
					
					this.ReferencePatrimoine = readString(dis);
					
					this.NaturePatrimoine = readString(dis);
					
					this.Code_FamilleRubrique = readString(dis);
					
					this.Code_LibelleRubrique = readString(dis);
					
						this.Num_RubriqueFacture = (BigDecimal) dis.readObject();
					
					this.Libelle_Rubrique = readString(dis);
					
						this.Montant_Quittance_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Total = (BigDecimal) dis.readObject();
					
						this.Montant_Quittance_Loyer = (BigDecimal) dis.readObject();
					
						this.Montant_Chiffre_Loyer = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.Code_SocieteProprietaire);
					
					// String
				
						writeString(this.Libelle_SocieteProprietaire,dos);
					
					// String
				
						writeString(this.DT,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DossierFacturation);
					
					// String
				
						writeString(this.NomClient,dos);
					
					// String
				
						writeString(this.PrenomClient,dos);
					
					// String
				
						writeString(this.Vacant,dos);
					
					// String
				
						writeString(this.Code_NatureFacturation,dos);
					
					// String
				
						writeString(this.Libelle_NatureFacturation,dos);
					
					// String
				
						writeString(this.Code_TypeFacturation,dos);
					
					// String
				
						writeString(this.ReferencePatrimoine,dos);
					
					// String
				
						writeString(this.NaturePatrimoine,dos);
					
					// String
				
						writeString(this.Code_FamilleRubrique,dos);
					
					// String
				
						writeString(this.Code_LibelleRubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Num_RubriqueFacture);
					
					// String
				
						writeString(this.Libelle_Rubrique,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Total);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Quittance_Loyer);
					
					// BigDecimal
				
       			    	dos.writeObject(this.Montant_Chiffre_Loyer);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Code_SocieteProprietaire="+String.valueOf(Code_SocieteProprietaire));
		sb.append(",Libelle_SocieteProprietaire="+Libelle_SocieteProprietaire);
		sb.append(",DT="+DT);
		sb.append(",DP="+DP);
		sb.append(",DossierFacturation="+String.valueOf(DossierFacturation));
		sb.append(",NomClient="+NomClient);
		sb.append(",PrenomClient="+PrenomClient);
		sb.append(",Vacant="+Vacant);
		sb.append(",Code_NatureFacturation="+Code_NatureFacturation);
		sb.append(",Libelle_NatureFacturation="+Libelle_NatureFacturation);
		sb.append(",Code_TypeFacturation="+Code_TypeFacturation);
		sb.append(",ReferencePatrimoine="+ReferencePatrimoine);
		sb.append(",NaturePatrimoine="+NaturePatrimoine);
		sb.append(",Code_FamilleRubrique="+Code_FamilleRubrique);
		sb.append(",Code_LibelleRubrique="+Code_LibelleRubrique);
		sb.append(",Num_RubriqueFacture="+String.valueOf(Num_RubriqueFacture));
		sb.append(",Libelle_Rubrique="+Libelle_Rubrique);
		sb.append(",Montant_Quittance_Total="+String.valueOf(Montant_Quittance_Total));
		sb.append(",Montant_Chiffre_Total="+String.valueOf(Montant_Chiffre_Total));
		sb.append(",Montant_Quittance_Loyer="+String.valueOf(Montant_Quittance_Loyer));
		sb.append(",Montant_Chiffre_Loyer="+String.valueOf(Montant_Chiffre_Loyer));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(outStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public String LB_SOCPROP;

				public String getLB_SOCPROP () {
					return this.LB_SOCPROP;
				}
				
			    public BigDecimal ID_DOSCLIE;

				public BigDecimal getID_DOSCLIE () {
					return this.ID_DOSCLIE;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String ON_PSEUCLI;

				public String getON_PSEUCLI () {
					return this.ON_PSEUCLI;
				}
				
			    public String CD_NATFACT;

				public String getCD_NATFACT () {
					return this.CD_NATFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SIO_CD_FAM_RUB;

				public String getSIO_CD_FAM_RUB () {
					return this.SIO_CD_FAM_RUB;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal LOY_FACT_TOT;

				public BigDecimal getLOY_FACT_TOT () {
					return this.LOY_FACT_TOT;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				
			    public BigDecimal LOY_CHIF_TOT;

				public BigDecimal getLOY_CHIF_TOT () {
					return this.LOY_CHIF_TOT;
				}
				
			    public BigDecimal TOU_CHIF_TOT;

				public BigDecimal getTOU_CHIF_TOT () {
					return this.TOU_CHIF_TOT;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
					this.LB_SOCPROP = readString(dis);
					
						this.ID_DOSCLIE = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.ON_PSEUCLI = readString(dis);
					
					this.CD_NATFACT = readString(dis);
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.CD_PATRIM = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SIO_CD_FAM_RUB = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.LOY_FACT_TOT = (BigDecimal) dis.readObject();
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
						this.LOY_CHIF_TOT = (BigDecimal) dis.readObject();
					
						this.TOU_CHIF_TOT = (BigDecimal) dis.readObject();
					
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// String
				
						writeString(this.LB_SOCPROP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_DOSCLIE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.ON_PSEUCLI,dos);
					
					// String
				
						writeString(this.CD_NATFACT,dos);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SIO_CD_FAM_RUB,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOY_FACT_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOY_CHIF_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_CHIF_TOT);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",LB_SOCPROP="+LB_SOCPROP);
		sb.append(",ID_DOSCLIE="+String.valueOf(ID_DOSCLIE));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",ON_PSEUCLI="+ON_PSEUCLI);
		sb.append(",CD_NATFACT="+CD_NATFACT);
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",CD_PATRIM="+CD_PATRIM);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SIO_CD_FAM_RUB="+SIO_CD_FAM_RUB);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",LOY_FACT_TOT="+String.valueOf(LOY_FACT_TOT));
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
		sb.append(",LOY_CHIF_TOT="+String.valueOf(LOY_CHIF_TOT));
		sb.append(",TOU_CHIF_TOT="+String.valueOf(TOU_CHIF_TOT));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tDBInput_1Struct implements routines.system.IPersistableRow<after_tDBInput_1Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal CD_SOCPROP;

				public BigDecimal getCD_SOCPROP () {
					return this.CD_SOCPROP;
				}
				
			    public String LB_SOCPROP;

				public String getLB_SOCPROP () {
					return this.LB_SOCPROP;
				}
				
			    public BigDecimal ID_DOSCLIE;

				public BigDecimal getID_DOSCLIE () {
					return this.ID_DOSCLIE;
				}
				
			    public BigDecimal NO_DOSFACT;

				public BigDecimal getNO_DOSFACT () {
					return this.NO_DOSFACT;
				}
				
			    public String ON_PSEUCLI;

				public String getON_PSEUCLI () {
					return this.ON_PSEUCLI;
				}
				
			    public String CD_NATFACT;

				public String getCD_NATFACT () {
					return this.CD_NATFACT;
				}
				
			    public String LB_NATFACT;

				public String getLB_NATFACT () {
					return this.LB_NATFACT;
				}
				
			    public String CD_TYPE_FA;

				public String getCD_TYPE_FA () {
					return this.CD_TYPE_FA;
				}
				
			    public String CD_PATRIM;

				public String getCD_PATRIM () {
					return this.CD_PATRIM;
				}
				
			    public String SIO_LB_NATLOC;

				public String getSIO_LB_NATLOC () {
					return this.SIO_LB_NATLOC;
				}
				
			    public String SIO_CD_FAM_RUB;

				public String getSIO_CD_FAM_RUB () {
					return this.SIO_CD_FAM_RUB;
				}
				
			    public String SID_LB_FAM_RUB;

				public String getSID_LB_FAM_RUB () {
					return this.SID_LB_FAM_RUB;
				}
				
			    public BigDecimal NO_RUB_FA;

				public BigDecimal getNO_RUB_FA () {
					return this.NO_RUB_FA;
				}
				
			    public String LB_RUBCOUR;

				public String getLB_RUBCOUR () {
					return this.LB_RUBCOUR;
				}
				
			    public BigDecimal LOY_FACT_TOT;

				public BigDecimal getLOY_FACT_TOT () {
					return this.LOY_FACT_TOT;
				}
				
			    public BigDecimal TOU_FACT_TOT;

				public BigDecimal getTOU_FACT_TOT () {
					return this.TOU_FACT_TOT;
				}
				
			    public BigDecimal LOY_CHIF_TOT;

				public BigDecimal getLOY_CHIF_TOT () {
					return this.LOY_CHIF_TOT;
				}
				
			    public BigDecimal TOU_CHIF_TOT;

				public BigDecimal getTOU_CHIF_TOT () {
					return this.TOU_CHIF_TOT;
				}
				
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.CD_SOCPROP = (BigDecimal) dis.readObject();
					
					this.LB_SOCPROP = readString(dis);
					
						this.ID_DOSCLIE = (BigDecimal) dis.readObject();
					
						this.NO_DOSFACT = (BigDecimal) dis.readObject();
					
					this.ON_PSEUCLI = readString(dis);
					
					this.CD_NATFACT = readString(dis);
					
					this.LB_NATFACT = readString(dis);
					
					this.CD_TYPE_FA = readString(dis);
					
					this.CD_PATRIM = readString(dis);
					
					this.SIO_LB_NATLOC = readString(dis);
					
					this.SIO_CD_FAM_RUB = readString(dis);
					
					this.SID_LB_FAM_RUB = readString(dis);
					
						this.NO_RUB_FA = (BigDecimal) dis.readObject();
					
					this.LB_RUBCOUR = readString(dis);
					
						this.LOY_FACT_TOT = (BigDecimal) dis.readObject();
					
						this.TOU_FACT_TOT = (BigDecimal) dis.readObject();
					
						this.LOY_CHIF_TOT = (BigDecimal) dis.readObject();
					
						this.TOU_CHIF_TOT = (BigDecimal) dis.readObject();
					
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CD_SOCPROP);
					
					// String
				
						writeString(this.LB_SOCPROP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID_DOSCLIE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_DOSFACT);
					
					// String
				
						writeString(this.ON_PSEUCLI,dos);
					
					// String
				
						writeString(this.CD_NATFACT,dos);
					
					// String
				
						writeString(this.LB_NATFACT,dos);
					
					// String
				
						writeString(this.CD_TYPE_FA,dos);
					
					// String
				
						writeString(this.CD_PATRIM,dos);
					
					// String
				
						writeString(this.SIO_LB_NATLOC,dos);
					
					// String
				
						writeString(this.SIO_CD_FAM_RUB,dos);
					
					// String
				
						writeString(this.SID_LB_FAM_RUB,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NO_RUB_FA);
					
					// String
				
						writeString(this.LB_RUBCOUR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOY_FACT_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_FACT_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LOY_CHIF_TOT);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TOU_CHIF_TOT);
					
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_SOCPROP="+String.valueOf(CD_SOCPROP));
		sb.append(",LB_SOCPROP="+LB_SOCPROP);
		sb.append(",ID_DOSCLIE="+String.valueOf(ID_DOSCLIE));
		sb.append(",NO_DOSFACT="+String.valueOf(NO_DOSFACT));
		sb.append(",ON_PSEUCLI="+ON_PSEUCLI);
		sb.append(",CD_NATFACT="+CD_NATFACT);
		sb.append(",LB_NATFACT="+LB_NATFACT);
		sb.append(",CD_TYPE_FA="+CD_TYPE_FA);
		sb.append(",CD_PATRIM="+CD_PATRIM);
		sb.append(",SIO_LB_NATLOC="+SIO_LB_NATLOC);
		sb.append(",SIO_CD_FAM_RUB="+SIO_CD_FAM_RUB);
		sb.append(",SID_LB_FAM_RUB="+SID_LB_FAM_RUB);
		sb.append(",NO_RUB_FA="+String.valueOf(NO_RUB_FA));
		sb.append(",LB_RUBCOUR="+LB_RUBCOUR);
		sb.append(",LOY_FACT_TOT="+String.valueOf(LOY_FACT_TOT));
		sb.append(",TOU_FACT_TOT="+String.valueOf(TOU_FACT_TOT));
		sb.append(",LOY_CHIF_TOT="+String.valueOf(LOY_CHIF_TOT));
		sb.append(",TOU_CHIF_TOT="+String.valueOf(TOU_CHIF_TOT));
		sb.append(",CD_LOCALI1="+CD_LOCALI1);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tDBInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tDBInput_3Process(globalMap);
		tDBInput_4Process(globalMap);

		row1Struct row1 = new row1Struct();
outStruct out = new outStruct();
row2Struct row2 = new row2Struct();
row3Struct row3 = new row3Struct();
row4Struct row4 = new row4Struct();
row5Struct row5 = new row5Struct();
row10Struct row10 = new row10Struct();
row11Struct row11 = new row11Struct();







	
	/**
	 * [tFileOutputExcel_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_1", false);
		start_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tFileOutputExcel_1 = 0;
		


		int columnIndex_tFileOutputExcel_1 = 0;
		
		String fileName_tFileOutputExcel_1="C:/Users/DKHUON/Desktop/HAPPI/Export/Loyer à 0.xlsx";
		int nb_line_tFileOutputExcel_1 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_1 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_1.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_1.setAppend(false,false);
		xlsxTool_tFileOutputExcel_1.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_1.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_1 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_1 = chm_tFileOutputExcel_1.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_1", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_1) {
			
				xlsxTool_tFileOutputExcel_1.prepareXlsxFile(fileName_tFileOutputExcel_1);
			
		}
		
		xlsxTool_tFileOutputExcel_1.setFont("");
		
		if (xlsxTool_tFileOutputExcel_1.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_1.addRow();
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Code_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Libelle_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DT");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DP");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("DossierFacturation");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NomClient");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("PrenomClient");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Vacant");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Code_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Libelle_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Code_TypeFacturation");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("ReferencePatrimoine");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("NaturePatrimoine");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Code_FamilleRubrique");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Code_LibelleRubrique");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Num_RubriqueFacture");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Libelle_Rubrique");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Montant_Quittance_Total");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Montant_Chiffre_Total");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Montant_Quittance_Loyer");
		
		xlsxTool_tFileOutputExcel_1.addCellValue("Montant_Chiffre_Loyer");
		
		nb_line_tFileOutputExcel_1++; 
		
	}
		

 



/**
 * [tFileOutputExcel_1 begin ] stop
 */



	
	/**
	 * [tFilterRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_1", false);
		start_Hash.put("tFilterRow_1", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFilterRow_1 = 0;
		
    int nb_line_tFilterRow_1 = 0;
    int nb_line_ok_tFilterRow_1 = 0;
    int nb_line_reject_tFilterRow_1 = 0;

    class Operator_tFilterRow_1 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_1(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_1 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_2", false);
		start_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFileOutputExcel_2 = 0;
		


		int columnIndex_tFileOutputExcel_2 = 0;
		
		String fileName_tFileOutputExcel_2="C:/Users/DKHUON/Desktop/HAPPI/Export/Hors Loyer+Charge.xlsx";
		int nb_line_tFileOutputExcel_2 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_2 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_2.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_2.setAppend(false,false);
		xlsxTool_tFileOutputExcel_2.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_2.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_2 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_2 = chm_tFileOutputExcel_2.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_2", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_2) {
			
				xlsxTool_tFileOutputExcel_2.prepareXlsxFile(fileName_tFileOutputExcel_2);
			
		}
		
		xlsxTool_tFileOutputExcel_2.setFont("");
		
		if (xlsxTool_tFileOutputExcel_2.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_2.addRow();
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Code_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Libelle_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DT");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DP");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("DossierFacturation");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NomClient");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("PrenomClient");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Vacant");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Code_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Libelle_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Code_TypeFacturation");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("ReferencePatrimoine");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("NaturePatrimoine");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Code_FamilleRubrique");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Code_LibelleRubrique");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Num_RubriqueFacture");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Libelle_Rubrique");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Montant_Quittance_Total");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Montant_Chiffre_Total");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Montant_Quittance_Loyer");
		
		xlsxTool_tFileOutputExcel_2.addCellValue("Montant_Chiffre_Loyer");
		
		nb_line_tFileOutputExcel_2++; 
		
	}
		

 



/**
 * [tFileOutputExcel_2 begin ] stop
 */



	
	/**
	 * [tFilterRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_2", false);
		start_Hash.put("tFilterRow_2", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tFilterRow_2 = 0;
		
    int nb_line_tFilterRow_2 = 0;
    int nb_line_ok_tFilterRow_2 = 0;
    int nb_line_reject_tFilterRow_2 = 0;

    class Operator_tFilterRow_2 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_2(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_2 begin ] stop
 */





	
	/**
	 * [tFileOutputExcel_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputExcel_4", false);
		start_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tFileOutputExcel_4 = 0;
		


		int columnIndex_tFileOutputExcel_4 = 0;
		
		String fileName_tFileOutputExcel_4="C:/Users/DKHUON/Desktop/HAPPI/Export/Loyer à 0 vacant.xlsx";
		int nb_line_tFileOutputExcel_4 = 0;
		org.talend.ExcelTool xlsxTool_tFileOutputExcel_4 = new org.talend.ExcelTool();
		
		xlsxTool_tFileOutputExcel_4.setSheet("Sheet1");
		xlsxTool_tFileOutputExcel_4.setAppend(false,false);
		xlsxTool_tFileOutputExcel_4.setRecalculateFormula(false);
		xlsxTool_tFileOutputExcel_4.setXY(false,0,0,false);
		
		java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object> chm_tFileOutputExcel_4 = (java.util.concurrent.ConcurrentHashMap<java.lang.Object, java.lang.Object>) globalMap.get("concurrentHashMap");
		java.lang.Object lockObj_tFileOutputExcel_4 = chm_tFileOutputExcel_4.computeIfAbsent("EXCEL_OUTPUT_LOCK_OBJ_tFileOutputExcel_4", k -> new Object());
		synchronized (lockObj_tFileOutputExcel_4) {
			
				xlsxTool_tFileOutputExcel_4.prepareXlsxFile(fileName_tFileOutputExcel_4);
			
		}
		
		xlsxTool_tFileOutputExcel_4.setFont("");
		
		if (xlsxTool_tFileOutputExcel_4.getStartRow() == 0){
		
		xlsxTool_tFileOutputExcel_4.addRow();
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Code_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Libelle_SocieteProprietaire");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("DT");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("DP");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("DossierFacturation");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("NomClient");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("PrenomClient");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Vacant");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Code_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Libelle_NatureFacturation");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Code_TypeFacturation");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("ReferencePatrimoine");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("NaturePatrimoine");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Code_FamilleRubrique");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Code_LibelleRubrique");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Num_RubriqueFacture");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Libelle_Rubrique");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Montant_Quittance_Total");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Montant_Chiffre_Total");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Montant_Quittance_Loyer");
		
		xlsxTool_tFileOutputExcel_4.addCellValue("Montant_Chiffre_Loyer");
		
		nb_line_tFileOutputExcel_4++; 
		
	}
		

 



/**
 * [tFileOutputExcel_4 begin ] stop
 */



	
	/**
	 * [tFilterRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFilterRow_3", false);
		start_Hash.put("tFilterRow_3", System.currentTimeMillis());
		
	
	currentComponent="tFilterRow_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tFilterRow_3 = 0;
		
    int nb_line_tFilterRow_3 = 0;
    int nb_line_ok_tFilterRow_3 = 0;
    int nb_line_reject_tFilterRow_3 = 0;

    class Operator_tFilterRow_3 {
      private String sErrorMsg = "";
      private boolean bMatchFlag = true;
      private String sUnionFlag = "&&";

      public Operator_tFilterRow_3(String unionFlag){
        sUnionFlag = unionFlag;
        bMatchFlag =  "||".equals(unionFlag) ? false : true;
      }

      public String getErrorMsg() {
        if (sErrorMsg != null && sErrorMsg.length() > 1)
          return sErrorMsg.substring(1);
        else 
          return null;
      }

      public boolean getMatchFlag() {
        return bMatchFlag;
      }

      public void matches(boolean partMatched, String reason) {
        // no need to care about the next judgement
        if ("||".equals(sUnionFlag) && bMatchFlag){
          return;
        }

        if (!partMatched) {
          sErrorMsg += "|" + reason;
        }

        if ("||".equals(sUnionFlag))
          bMatchFlag = bMatchFlag || partMatched;
        else
          bMatchFlag = bMatchFlag && partMatched;
      }
    }

 



/**
 * [tFilterRow_3 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
outStruct out_tmp = new outStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tDBInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_1", false);
		start_Hash.put("tDBInput_1", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_1";

	
		int tos_count_tDBInput_1 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_1, talendToDBArray_tDBInput_1); 
		    int nb_line_tDBInput_1 = 0;
		    java.sql.Connection conn_tDBInput_1 = null;
				conn_tDBInput_1 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_1 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_1 = conn_tDBInput_1.createStatement();

		    String dbquery_tDBInput_1 = "SELECT\n		SID_FACTURA_GIM.CD_SOCPROP,\n		SID_FACTURA_GIM.LB_SOCPROP,\n		SID_FACTURA_GIM.ID_DOSCLIE,\n		SID_FACTURA_GIM."
+"NO_DOSFACT,\n		SID_FACTURA_GIM.ON_PSEUCLI,\n		SID_FACTURA_GIM.CD_NATFACT,\n		SID_FACTURA_GIM.LB_NATFACT,\n		SID_FACTURA_"
+"GIM.CD_TYPE_FA,\n		SID_FACTURA_GIM.CD_PATRIM,\n		SID_FACTURA_GIM.SIO_LB_NATLOC,\n		SID_FACTURA_GIM.SIO_CD_FAM_RUB,\n		SI"
+"D_FACTURA_GIM.SID_LB_FAM_RUB,\n		SID_FACTURA_GIM.NO_RUB_FA,\n		SID_FACTURA_GIM.LB_RUBCOUR,\n		SID_FACTURA_GIM.LOY_FACT_T"
+"OT,\n		SID_FACTURA_GIM.TOU_FACT_TOT,\n		SID_FACTURA_GIM.LOY_CHIF_TOT,\n		SID_FACTURA_GIM.TOU_CHIF_TOT,\n		SID_FACTURA_GI"
+"M.CD_LOCALI1\nFROM	SID_FACTURA_GIM\nwhere SID_FACTURA_GIM.DT_ANNEE = 2020\nAND SID_FACTURA_GIM.DT_MOIS  = 12\n--and SID_"
+"FACTURA_GIM.SIO_CD_FAM_RUB='CHA'\n";
			

            	globalMap.put("tDBInput_1_QUERY",dbquery_tDBInput_1);
		    java.sql.ResultSet rs_tDBInput_1 = null;

		    try {
		    	rs_tDBInput_1 = stmt_tDBInput_1.executeQuery(dbquery_tDBInput_1);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_1 = rs_tDBInput_1.getMetaData();
		    	int colQtyInRs_tDBInput_1 = rsmd_tDBInput_1.getColumnCount();

		    String tmpContent_tDBInput_1 = null;
		    
		    
		    while (rs_tDBInput_1.next()) {
		        nb_line_tDBInput_1++;
		        
							if(colQtyInRs_tDBInput_1 < 1) {
								row1.CD_SOCPROP = null;
							} else {
		                          
            row1.CD_SOCPROP = rs_tDBInput_1.getBigDecimal(1);
            if(rs_tDBInput_1.wasNull()){
                    row1.CD_SOCPROP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 2) {
								row1.LB_SOCPROP = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(2);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_SOCPROP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LB_SOCPROP = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.LB_SOCPROP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 3) {
								row1.ID_DOSCLIE = null;
							} else {
		                          
            row1.ID_DOSCLIE = rs_tDBInput_1.getBigDecimal(3);
            if(rs_tDBInput_1.wasNull()){
                    row1.ID_DOSCLIE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 4) {
								row1.NO_DOSFACT = null;
							} else {
		                          
            row1.NO_DOSFACT = rs_tDBInput_1.getBigDecimal(4);
            if(rs_tDBInput_1.wasNull()){
                    row1.NO_DOSFACT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 5) {
								row1.ON_PSEUCLI = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(5);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(5).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.ON_PSEUCLI = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.ON_PSEUCLI = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.ON_PSEUCLI = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 6) {
								row1.CD_NATFACT = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(6);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(6).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_NATFACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_NATFACT = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_NATFACT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 7) {
								row1.LB_NATFACT = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(7);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(7).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_NATFACT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LB_NATFACT = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.LB_NATFACT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 8) {
								row1.CD_TYPE_FA = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(8);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(8).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_TYPE_FA = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_TYPE_FA = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_TYPE_FA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 9) {
								row1.CD_PATRIM = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(9);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(9).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_PATRIM = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_PATRIM = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_PATRIM = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 10) {
								row1.SIO_LB_NATLOC = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(10);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(10).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIO_LB_NATLOC = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SIO_LB_NATLOC = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.SIO_LB_NATLOC = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 11) {
								row1.SIO_CD_FAM_RUB = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(11);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(11).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SIO_CD_FAM_RUB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SIO_CD_FAM_RUB = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.SIO_CD_FAM_RUB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 12) {
								row1.SID_LB_FAM_RUB = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(12);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(12).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.SID_LB_FAM_RUB = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.SID_LB_FAM_RUB = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.SID_LB_FAM_RUB = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 13) {
								row1.NO_RUB_FA = null;
							} else {
		                          
            row1.NO_RUB_FA = rs_tDBInput_1.getBigDecimal(13);
            if(rs_tDBInput_1.wasNull()){
                    row1.NO_RUB_FA = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 14) {
								row1.LB_RUBCOUR = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(14);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(14).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.LB_RUBCOUR = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.LB_RUBCOUR = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.LB_RUBCOUR = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 15) {
								row1.LOY_FACT_TOT = null;
							} else {
		                          
            row1.LOY_FACT_TOT = rs_tDBInput_1.getBigDecimal(15);
            if(rs_tDBInput_1.wasNull()){
                    row1.LOY_FACT_TOT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 16) {
								row1.TOU_FACT_TOT = null;
							} else {
		                          
            row1.TOU_FACT_TOT = rs_tDBInput_1.getBigDecimal(16);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOU_FACT_TOT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 17) {
								row1.LOY_CHIF_TOT = null;
							} else {
		                          
            row1.LOY_CHIF_TOT = rs_tDBInput_1.getBigDecimal(17);
            if(rs_tDBInput_1.wasNull()){
                    row1.LOY_CHIF_TOT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 18) {
								row1.TOU_CHIF_TOT = null;
							} else {
		                          
            row1.TOU_CHIF_TOT = rs_tDBInput_1.getBigDecimal(18);
            if(rs_tDBInput_1.wasNull()){
                    row1.TOU_CHIF_TOT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_1 < 19) {
								row1.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_1 = rs_tDBInput_1.getString(19);
            if(tmpContent_tDBInput_1 != null) {
            	if (talendToDBList_tDBInput_1 .contains(rsmd_tDBInput_1.getColumnTypeName(19).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_1);
            	} else {
                	row1.CD_LOCALI1 = tmpContent_tDBInput_1.trim();
                }
            } else {
                row1.CD_LOCALI1 = null;
            }
		                    }
					





 



/**
 * [tDBInput_1 begin ] stop
 */
	
	/**
	 * [tDBInput_1 main ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 


	tos_count_tDBInput_1++;

/**
 * [tDBInput_1 main ] stop
 */
	
	/**
	 * [tDBInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row1");
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row8HashKey.CD_LOCALI1 = row1.CD_LOCALI1 ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.CD_LOCALI1 = '" + row8HashKey.CD_LOCALI1 + "'");
								} // G 071
							

							row8Struct row8 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row13HashKey.ID_DOSCLIE = row1.ID_DOSCLIE ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.ID_DOSCLIE = '" + row13HashKey.ID_DOSCLIE + "'");
								} // G 071
							

							row13Struct row13 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out = null;


// # Output table : 'out'
out_tmp.Code_SocieteProprietaire = row1.CD_SOCPROP ;
out_tmp.Libelle_SocieteProprietaire = row1.LB_SOCPROP ;
out_tmp.DT = row8.DT ;
out_tmp.DP = row8.DP ;
out_tmp.DossierFacturation = row1.NO_DOSFACT;
out_tmp.NomClient = row13.NOM_CLIENT ;
out_tmp.PrenomClient = row13.PRE_CLIENT ;
out_tmp.Vacant = row1.ON_PSEUCLI ;
out_tmp.Code_NatureFacturation = row1.CD_NATFACT;
out_tmp.Libelle_NatureFacturation = row1.LB_NATFACT;
out_tmp.Code_TypeFacturation = row1.CD_TYPE_FA;
out_tmp.ReferencePatrimoine = row1.CD_PATRIM;
out_tmp.NaturePatrimoine = row1.SIO_LB_NATLOC;
out_tmp.Code_FamilleRubrique = row1.SIO_CD_FAM_RUB;
out_tmp.Code_LibelleRubrique = row1.SID_LB_FAM_RUB;
out_tmp.Num_RubriqueFacture = row1.NO_RUB_FA;
out_tmp.Libelle_Rubrique = row1.LB_RUBCOUR;
out_tmp.Montant_Quittance_Total = row1.TOU_FACT_TOT;
out_tmp.Montant_Chiffre_Total = row1.TOU_CHIF_TOT ;
out_tmp.Montant_Quittance_Loyer = row1.LOY_FACT_TOT ;
out_tmp.Montant_Chiffre_Loyer = row1.LOY_CHIF_TOT ;
out = out_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out"
if(out != null) { 



	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"out");
					}
					


	row2 = new row2Struct();
						
	row2.Code_SocieteProprietaire = out.Code_SocieteProprietaire;								
	row2.Libelle_SocieteProprietaire = out.Libelle_SocieteProprietaire;								
	row2.DT = out.DT;								
	row2.DP = out.DP;								
	row2.DossierFacturation = out.DossierFacturation;								
	row2.NomClient = out.NomClient;								
	row2.PrenomClient = out.PrenomClient;								
	row2.Vacant = out.Vacant;								
	row2.Code_NatureFacturation = out.Code_NatureFacturation;								
	row2.Libelle_NatureFacturation = out.Libelle_NatureFacturation;								
	row2.Code_TypeFacturation = out.Code_TypeFacturation;								
	row2.ReferencePatrimoine = out.ReferencePatrimoine;								
	row2.NaturePatrimoine = out.NaturePatrimoine;								
	row2.Code_FamilleRubrique = out.Code_FamilleRubrique;								
	row2.Code_LibelleRubrique = out.Code_LibelleRubrique;								
	row2.Num_RubriqueFacture = out.Num_RubriqueFacture;								
	row2.Libelle_Rubrique = out.Libelle_Rubrique;								
	row2.Montant_Quittance_Total = out.Montant_Quittance_Total;								
	row2.Montant_Chiffre_Total = out.Montant_Chiffre_Total;								
	row2.Montant_Quittance_Loyer = out.Montant_Quittance_Loyer;								
	row2.Montant_Chiffre_Loyer = out.Montant_Chiffre_Loyer;			
	row4 = new row4Struct();
						
	row4.Code_SocieteProprietaire = out.Code_SocieteProprietaire;								
	row4.Libelle_SocieteProprietaire = out.Libelle_SocieteProprietaire;								
	row4.DT = out.DT;								
	row4.DP = out.DP;								
	row4.DossierFacturation = out.DossierFacturation;								
	row4.NomClient = out.NomClient;								
	row4.PrenomClient = out.PrenomClient;								
	row4.Vacant = out.Vacant;								
	row4.Code_NatureFacturation = out.Code_NatureFacturation;								
	row4.Libelle_NatureFacturation = out.Libelle_NatureFacturation;								
	row4.Code_TypeFacturation = out.Code_TypeFacturation;								
	row4.ReferencePatrimoine = out.ReferencePatrimoine;								
	row4.NaturePatrimoine = out.NaturePatrimoine;								
	row4.Code_FamilleRubrique = out.Code_FamilleRubrique;								
	row4.Code_LibelleRubrique = out.Code_LibelleRubrique;								
	row4.Num_RubriqueFacture = out.Num_RubriqueFacture;								
	row4.Libelle_Rubrique = out.Libelle_Rubrique;								
	row4.Montant_Quittance_Total = out.Montant_Quittance_Total;								
	row4.Montant_Chiffre_Total = out.Montant_Chiffre_Total;								
	row4.Montant_Quittance_Loyer = out.Montant_Quittance_Loyer;								
	row4.Montant_Chiffre_Loyer = out.Montant_Chiffre_Loyer;			
	row10 = new row10Struct();
						
	row10.Code_SocieteProprietaire = out.Code_SocieteProprietaire;								
	row10.Libelle_SocieteProprietaire = out.Libelle_SocieteProprietaire;								
	row10.DT = out.DT;								
	row10.DP = out.DP;								
	row10.DossierFacturation = out.DossierFacturation;								
	row10.NomClient = out.NomClient;								
	row10.PrenomClient = out.PrenomClient;								
	row10.Vacant = out.Vacant;								
	row10.Code_NatureFacturation = out.Code_NatureFacturation;								
	row10.Libelle_NatureFacturation = out.Libelle_NatureFacturation;								
	row10.Code_TypeFacturation = out.Code_TypeFacturation;								
	row10.ReferencePatrimoine = out.ReferencePatrimoine;								
	row10.NaturePatrimoine = out.NaturePatrimoine;								
	row10.Code_FamilleRubrique = out.Code_FamilleRubrique;								
	row10.Code_LibelleRubrique = out.Code_LibelleRubrique;								
	row10.Num_RubriqueFacture = out.Num_RubriqueFacture;								
	row10.Libelle_Rubrique = out.Libelle_Rubrique;								
	row10.Montant_Quittance_Total = out.Montant_Quittance_Total;								
	row10.Montant_Chiffre_Total = out.Montant_Chiffre_Total;								
	row10.Montant_Quittance_Loyer = out.Montant_Quittance_Loyer;								
	row10.Montant_Chiffre_Loyer = out.Montant_Chiffre_Loyer;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tFilterRow_1 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row2");
					}
					

          row3 = null;
    Operator_tFilterRow_1 ope_tFilterRow_1 = new Operator_tFilterRow_1("&&");
            ope_tFilterRow_1.matches((row2.Montant_Quittance_Loyer == null? false : row2.Montant_Quittance_Loyer.compareTo(ParserUtils.parseTo_BigDecimal(String.valueOf(0))) == 0)
                           , "Montant_Quittance_Loyer.compareTo(0) == 0 failed");
		 	
            ope_tFilterRow_1.matches((row2.Code_FamilleRubrique == null? false : row2.Code_FamilleRubrique.compareTo("LOY") == 0)
                           , "Code_FamilleRubrique.compareTo(\"LOY\") == 0 failed");
            ope_tFilterRow_1.matches((row2.Vacant == null? false : row2.Vacant.compareTo("N") == 0)
                           , "Vacant.compareTo(\"N\") == 0 failed");
    
    if (ope_tFilterRow_1.getMatchFlag()) {
              if(row3 == null){ 
                row3 = new row3Struct();
              }
               row3.Code_SocieteProprietaire = row2.Code_SocieteProprietaire;
               row3.Libelle_SocieteProprietaire = row2.Libelle_SocieteProprietaire;
               row3.DT = row2.DT;
               row3.DP = row2.DP;
               row3.DossierFacturation = row2.DossierFacturation;
               row3.NomClient = row2.NomClient;
               row3.PrenomClient = row2.PrenomClient;
               row3.Vacant = row2.Vacant;
               row3.Code_NatureFacturation = row2.Code_NatureFacturation;
               row3.Libelle_NatureFacturation = row2.Libelle_NatureFacturation;
               row3.Code_TypeFacturation = row2.Code_TypeFacturation;
               row3.ReferencePatrimoine = row2.ReferencePatrimoine;
               row3.NaturePatrimoine = row2.NaturePatrimoine;
               row3.Code_FamilleRubrique = row2.Code_FamilleRubrique;
               row3.Code_LibelleRubrique = row2.Code_LibelleRubrique;
               row3.Num_RubriqueFacture = row2.Num_RubriqueFacture;
               row3.Libelle_Rubrique = row2.Libelle_Rubrique;
               row3.Montant_Quittance_Total = row2.Montant_Quittance_Total;
               row3.Montant_Chiffre_Total = row2.Montant_Chiffre_Total;
               row3.Montant_Quittance_Loyer = row2.Montant_Quittance_Loyer;
               row3.Montant_Chiffre_Loyer = row2.Montant_Chiffre_Loyer;    
      nb_line_ok_tFilterRow_1++;
    } else {
      nb_line_reject_tFilterRow_1++;
    }

nb_line_tFilterRow_1++;

 


	tos_count_tFilterRow_1++;

/**
 * [tFilterRow_1 main ] stop
 */
	
	/**
	 * [tFilterRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_begin ] stop
 */
// Start of branch "row3"
if(row3 != null) { 



	
	/**
	 * [tFileOutputExcel_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row3");
					}
					

				xlsxTool_tFileOutputExcel_1.addRow();
									   				
	    				if(row3.Code_SocieteProprietaire != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Code_SocieteProprietaire.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Libelle_SocieteProprietaire != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Libelle_SocieteProprietaire));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.DT != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.DT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.DP != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.DP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.DossierFacturation != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.DossierFacturation.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NomClient != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.NomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.PrenomClient != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.PrenomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Vacant != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Vacant));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Code_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Code_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Libelle_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Libelle_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Code_TypeFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Code_TypeFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.ReferencePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.ReferencePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.NaturePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.NaturePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Code_FamilleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Code_FamilleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Code_LibelleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Code_LibelleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Num_RubriqueFacture != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Num_RubriqueFacture.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Libelle_Rubrique != null) {
    				
							xlsxTool_tFileOutputExcel_1.addCellValue(String.valueOf(row3.Libelle_Rubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Montant_Quittance_Total != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Montant_Quittance_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Montant_Chiffre_Total != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Montant_Chiffre_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Montant_Quittance_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Montant_Quittance_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
									   				
	    				if(row3.Montant_Chiffre_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_1.addCellValue((row3.Montant_Chiffre_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_1.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_1++;
				
 


	tos_count_tFileOutputExcel_1++;

/**
 * [tFileOutputExcel_1 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 process_data_end ] stop
 */

} // End of branch "row3"




	
	/**
	 * [tFilterRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 process_data_end ] stop
 */




	
	/**
	 * [tFilterRow_2 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row4");
					}
					

          row5 = null;
    Operator_tFilterRow_2 ope_tFilterRow_2 = new Operator_tFilterRow_2("&&");
            ope_tFilterRow_2.matches((row4.Code_NatureFacturation == null? false : row4.Code_NatureFacturation.compareTo("1") != 0)
                           , "Code_NatureFacturation.compareTo(\"1\") != 0 failed");
    
    if (ope_tFilterRow_2.getMatchFlag()) {
              if(row5 == null){ 
                row5 = new row5Struct();
              }
               row5.Code_SocieteProprietaire = row4.Code_SocieteProprietaire;
               row5.Libelle_SocieteProprietaire = row4.Libelle_SocieteProprietaire;
               row5.DT = row4.DT;
               row5.DP = row4.DP;
               row5.DossierFacturation = row4.DossierFacturation;
               row5.NomClient = row4.NomClient;
               row5.PrenomClient = row4.PrenomClient;
               row5.Vacant = row4.Vacant;
               row5.Code_NatureFacturation = row4.Code_NatureFacturation;
               row5.Libelle_NatureFacturation = row4.Libelle_NatureFacturation;
               row5.Code_TypeFacturation = row4.Code_TypeFacturation;
               row5.ReferencePatrimoine = row4.ReferencePatrimoine;
               row5.NaturePatrimoine = row4.NaturePatrimoine;
               row5.Code_FamilleRubrique = row4.Code_FamilleRubrique;
               row5.Code_LibelleRubrique = row4.Code_LibelleRubrique;
               row5.Num_RubriqueFacture = row4.Num_RubriqueFacture;
               row5.Libelle_Rubrique = row4.Libelle_Rubrique;
               row5.Montant_Quittance_Total = row4.Montant_Quittance_Total;
               row5.Montant_Chiffre_Total = row4.Montant_Chiffre_Total;
               row5.Montant_Quittance_Loyer = row4.Montant_Quittance_Loyer;
               row5.Montant_Chiffre_Loyer = row4.Montant_Chiffre_Loyer;    
      nb_line_ok_tFilterRow_2++;
    } else {
      nb_line_reject_tFilterRow_2++;
    }

nb_line_tFilterRow_2++;

 


	tos_count_tFilterRow_2++;

/**
 * [tFilterRow_2 main ] stop
 */
	
	/**
	 * [tFilterRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_begin ] stop
 */
// Start of branch "row5"
if(row5 != null) { 



	
	/**
	 * [tFileOutputExcel_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row5");
					}
					

				xlsxTool_tFileOutputExcel_2.addRow();
									   				
	    				if(row5.Code_SocieteProprietaire != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Code_SocieteProprietaire.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Libelle_SocieteProprietaire != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Libelle_SocieteProprietaire));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.DT != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.DT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.DP != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.DP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.DossierFacturation != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.DossierFacturation.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.NomClient != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.NomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.PrenomClient != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.PrenomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Vacant != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Vacant));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Code_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Code_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Libelle_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Libelle_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Code_TypeFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Code_TypeFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.ReferencePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.ReferencePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.NaturePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.NaturePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Code_FamilleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Code_FamilleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Code_LibelleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Code_LibelleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Num_RubriqueFacture != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Num_RubriqueFacture.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Libelle_Rubrique != null) {
    				
							xlsxTool_tFileOutputExcel_2.addCellValue(String.valueOf(row5.Libelle_Rubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Montant_Quittance_Total != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Montant_Quittance_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Montant_Chiffre_Total != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Montant_Chiffre_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Montant_Quittance_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Montant_Quittance_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
									   				
	    				if(row5.Montant_Chiffre_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_2.addCellValue((row5.Montant_Chiffre_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_2.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_2++;
				
 


	tos_count_tFileOutputExcel_2++;

/**
 * [tFileOutputExcel_2 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 process_data_end ] stop
 */

} // End of branch "row5"




	
	/**
	 * [tFilterRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 process_data_end ] stop
 */




	
	/**
	 * [tFilterRow_3 main ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row10");
					}
					

          row11 = null;
    Operator_tFilterRow_3 ope_tFilterRow_3 = new Operator_tFilterRow_3("&&");
            ope_tFilterRow_3.matches((row10.Montant_Chiffre_Loyer == null? false : row10.Montant_Chiffre_Loyer.compareTo(ParserUtils.parseTo_BigDecimal(String.valueOf(0))) == 0)
                           , "Montant_Chiffre_Loyer.compareTo(0) == 0 failed");
		 	
            ope_tFilterRow_3.matches((row10.Code_FamilleRubrique == null? false : row10.Code_FamilleRubrique.compareTo("LOY") == 0)
                           , "Code_FamilleRubrique.compareTo(\"LOY\") == 0 failed");
            ope_tFilterRow_3.matches((row10.Vacant == null? false : row10.Vacant.compareTo("O") == 0)
                           , "Vacant.compareTo(\"O\") == 0 failed");
    
    if (ope_tFilterRow_3.getMatchFlag()) {
              if(row11 == null){ 
                row11 = new row11Struct();
              }
               row11.Code_SocieteProprietaire = row10.Code_SocieteProprietaire;
               row11.Libelle_SocieteProprietaire = row10.Libelle_SocieteProprietaire;
               row11.DT = row10.DT;
               row11.DP = row10.DP;
               row11.DossierFacturation = row10.DossierFacturation;
               row11.NomClient = row10.NomClient;
               row11.PrenomClient = row10.PrenomClient;
               row11.Vacant = row10.Vacant;
               row11.Code_NatureFacturation = row10.Code_NatureFacturation;
               row11.Libelle_NatureFacturation = row10.Libelle_NatureFacturation;
               row11.Code_TypeFacturation = row10.Code_TypeFacturation;
               row11.ReferencePatrimoine = row10.ReferencePatrimoine;
               row11.NaturePatrimoine = row10.NaturePatrimoine;
               row11.Code_FamilleRubrique = row10.Code_FamilleRubrique;
               row11.Code_LibelleRubrique = row10.Code_LibelleRubrique;
               row11.Num_RubriqueFacture = row10.Num_RubriqueFacture;
               row11.Libelle_Rubrique = row10.Libelle_Rubrique;
               row11.Montant_Quittance_Total = row10.Montant_Quittance_Total;
               row11.Montant_Chiffre_Total = row10.Montant_Chiffre_Total;
               row11.Montant_Quittance_Loyer = row10.Montant_Quittance_Loyer;
               row11.Montant_Chiffre_Loyer = row10.Montant_Chiffre_Loyer;    
      nb_line_ok_tFilterRow_3++;
    } else {
      nb_line_reject_tFilterRow_3++;
    }

nb_line_tFilterRow_3++;

 


	tos_count_tFilterRow_3++;

/**
 * [tFilterRow_3 main ] stop
 */
	
	/**
	 * [tFilterRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_begin ] stop
 */
// Start of branch "row11"
if(row11 != null) { 



	
	/**
	 * [tFileOutputExcel_4 main ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row11");
					}
					

				xlsxTool_tFileOutputExcel_4.addRow();
									   				
	    				if(row11.Code_SocieteProprietaire != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Code_SocieteProprietaire.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Libelle_SocieteProprietaire != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Libelle_SocieteProprietaire));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.DT != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.DT));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.DP != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.DP));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.DossierFacturation != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.DossierFacturation.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.NomClient != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.NomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.PrenomClient != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.PrenomClient));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Vacant != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Vacant));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Code_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Code_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Libelle_NatureFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Libelle_NatureFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Code_TypeFacturation != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Code_TypeFacturation));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.ReferencePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.ReferencePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.NaturePatrimoine != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.NaturePatrimoine));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Code_FamilleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Code_FamilleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Code_LibelleRubrique != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Code_LibelleRubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Num_RubriqueFacture != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Num_RubriqueFacture.setScale(0, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Libelle_Rubrique != null) {
    				
							xlsxTool_tFileOutputExcel_4.addCellValue(String.valueOf(row11.Libelle_Rubrique));
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Montant_Quittance_Total != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Montant_Quittance_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Montant_Chiffre_Total != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Montant_Chiffre_Total.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Montant_Quittance_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Montant_Quittance_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
									   				
	    				if(row11.Montant_Chiffre_Loyer != null) {
    						
							xlsxTool_tFileOutputExcel_4.addCellValue((row11.Montant_Chiffre_Loyer.setScale(4, java.math.RoundingMode.HALF_UP)).doubleValue());
	    				} else {
	    					xlsxTool_tFileOutputExcel_4.addCellNullValue();
	    				}
					
    			nb_line_tFileOutputExcel_4++;
				
 


	tos_count_tFileOutputExcel_4++;

/**
 * [tFileOutputExcel_4 main ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputExcel_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 process_data_end ] stop
 */

} // End of branch "row11"




	
	/**
	 * [tFilterRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */

} // End of branch "out"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_1 end ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

	}
}finally{
	if (rs_tDBInput_1 != null) {
		rs_tDBInput_1.close();
	}
	if (stmt_tDBInput_1 != null) {
		stmt_tDBInput_1.close();
	}
}
globalMap.put("tDBInput_1_NB_LINE",nb_line_tDBInput_1);

 

ok_Hash.put("tDBInput_1", true);
end_Hash.put("tDBInput_1", System.currentTimeMillis());




/**
 * [tDBInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tFilterRow_1 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	
    globalMap.put("tFilterRow_1_NB_LINE", nb_line_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_OK", nb_line_ok_tFilterRow_1);
    globalMap.put("tFilterRow_1_NB_LINE_REJECT", nb_line_reject_tFilterRow_1);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFilterRow_1", true);
end_Hash.put("tFilterRow_1", System.currentTimeMillis());




/**
 * [tFilterRow_1 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

	
	
	
			xlsxTool_tFileOutputExcel_1.writeExcel(fileName_tFileOutputExcel_1,true);
	
		
			nb_line_tFileOutputExcel_1 = nb_line_tFileOutputExcel_1 -1;
		
		globalMap.put("tFileOutputExcel_1_NB_LINE",nb_line_tFileOutputExcel_1);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_1", true);
end_Hash.put("tFileOutputExcel_1", System.currentTimeMillis());




/**
 * [tFileOutputExcel_1 end ] stop
 */







	
	/**
	 * [tFilterRow_2 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	
    globalMap.put("tFilterRow_2_NB_LINE", nb_line_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_OK", nb_line_ok_tFilterRow_2);
    globalMap.put("tFilterRow_2_NB_LINE_REJECT", nb_line_reject_tFilterRow_2);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tFilterRow_2", true);
end_Hash.put("tFilterRow_2", System.currentTimeMillis());




/**
 * [tFilterRow_2 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

	
	
	
			xlsxTool_tFileOutputExcel_2.writeExcel(fileName_tFileOutputExcel_2,true);
	
		
			nb_line_tFileOutputExcel_2 = nb_line_tFileOutputExcel_2 -1;
		
		globalMap.put("tFileOutputExcel_2_NB_LINE",nb_line_tFileOutputExcel_2);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_2", true);
end_Hash.put("tFileOutputExcel_2", System.currentTimeMillis());




/**
 * [tFileOutputExcel_2 end ] stop
 */







	
	/**
	 * [tFilterRow_3 end ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	
    globalMap.put("tFilterRow_3_NB_LINE", nb_line_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_OK", nb_line_ok_tFilterRow_3);
    globalMap.put("tFilterRow_3_NB_LINE_REJECT", nb_line_reject_tFilterRow_3);
    

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tFilterRow_3", true);
end_Hash.put("tFilterRow_3", System.currentTimeMillis());




/**
 * [tFilterRow_3 end ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 end ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

	
	
	
			xlsxTool_tFileOutputExcel_4.writeExcel(fileName_tFileOutputExcel_4,true);
	
		
			nb_line_tFileOutputExcel_4 = nb_line_tFileOutputExcel_4 -1;
		
		globalMap.put("tFileOutputExcel_4_NB_LINE",nb_line_tFileOutputExcel_4);
		
		

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tFileOutputExcel_4", true);
end_Hash.put("tFileOutputExcel_4", System.currentTimeMillis());




/**
 * [tFileOutputExcel_4 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
				try{
					
	
	/**
	 * [tDBInput_1 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_1";

	

 



/**
 * [tDBInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";

	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tFilterRow_1 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_1";

	

 



/**
 * [tFilterRow_1 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_1";

	

 



/**
 * [tFileOutputExcel_1 finally ] stop
 */







	
	/**
	 * [tFilterRow_2 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_2";

	

 



/**
 * [tFilterRow_2 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_2";

	

 



/**
 * [tFileOutputExcel_2 finally ] stop
 */







	
	/**
	 * [tFilterRow_3 finally ] start
	 */

	

	
	
	currentComponent="tFilterRow_3";

	

 



/**
 * [tFilterRow_3 finally ] stop
 */

	
	/**
	 * [tFileOutputExcel_4 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputExcel_4";

	

 



/**
 * [tFileOutputExcel_4 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CD_LOCALI1 == null) ? 0 : this.CD_LOCALI1.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.CD_LOCALI1 == null) {
							if (other.CD_LOCALI1 != null)
								return false;
						
						} else if (!this.CD_LOCALI1.equals(other.CD_LOCALI1))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            other.VILLE = this.VILLE;
	            other.DP = this.DP;
	            other.DT = this.DT;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.CD_LOCALI1 = this.CD_LOCALI1;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VILLE = readString(dis,ois);
					
						this.DP = readString(dis,ois);
					
						this.DT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VILLE, dos, oos);
					
						writeString(this.DP, dos, oos);
					
						writeString(this.DT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CD_LOCALI1, other.CD_LOCALI1);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public String CD_LOCALI1;

				public String getCD_LOCALI1 () {
					return this.CD_LOCALI1;
				}
				
			    public String VILLE;

				public String getVILLE () {
					return this.VILLE;
				}
				
			    public String DP;

				public String getDP () {
					return this.DP;
				}
				
			    public String DT;

				public String getDT () {
					return this.DT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
					this.CD_LOCALI1 = readString(dis);
					
					this.VILLE = readString(dis);
					
					this.DP = readString(dis);
					
					this.DT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CD_LOCALI1,dos);
					
					// String
				
						writeString(this.VILLE,dos);
					
					// String
				
						writeString(this.DP,dos);
					
					// String
				
						writeString(this.DT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CD_LOCALI1="+CD_LOCALI1);
		sb.append(",VILLE="+VILLE);
		sb.append(",DP="+DP);
		sb.append(",DT="+DT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row8Struct row8 = new row8Struct();





	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tReplicate_2 - inputs:(row7) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row8,row13) outputs:(out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tReplicate_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_2", false);
		start_Hash.put("tReplicate_2", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_2";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tReplicate_2 = 0;
		

 



/**
 * [tReplicate_2 begin ] stop
 */



	
	/**
	 * [tDBInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_3", false);
		start_Hash.put("tDBInput_3", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_3";

	
		int tos_count_tDBInput_3 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_3 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_3 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_3  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_3, talendToDBArray_tDBInput_3); 
		    int nb_line_tDBInput_3 = 0;
		    java.sql.Connection conn_tDBInput_3 = null;
				String driverClass_tDBInput_3 = "net.sourceforge.jtds.jdbc.Driver";
			    java.lang.Class jdbcclazz_tDBInput_3 = java.lang.Class.forName(driverClass_tDBInput_3);
				String dbUser_tDBInput_3 = "";
				
				 
	final String decryptedPassword_tDBInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("enc:routine.encryption.key.v1:VSlBkEGvvk2xiV5VMIWIYsjlaIO1RplhHSf7TQ==");
				
				String dbPwd_tDBInput_3 = decryptedPassword_tDBInput_3;
				
		    String port_tDBInput_3 = "1433";
		    String dbname_tDBInput_3 = "HDSHData" ;
			String url_tDBInput_3 = "jdbc:jtds:sqlserver://" + "SRVTOU01" ;
		    if (!"".equals(port_tDBInput_3)) {
		    	url_tDBInput_3 += ":" + "1433";
		    }
		    if (!"".equals(dbname_tDBInput_3)) {
				url_tDBInput_3 += "//" + "HDSHData"; 
		    }
		    url_tDBInput_3 += ";appName=" + projectName + ";" + "";
		    String dbschema_tDBInput_3 = "";
				
				conn_tDBInput_3 = java.sql.DriverManager.getConnection(url_tDBInput_3,dbUser_tDBInput_3,dbPwd_tDBInput_3);
		        
		    
			java.sql.Statement stmt_tDBInput_3 = conn_tDBInput_3.createStatement();

		    String dbquery_tDBInput_3 = "select *  from T_DEF_LOCALISATION";
			

            	globalMap.put("tDBInput_3_QUERY",dbquery_tDBInput_3);
		    java.sql.ResultSet rs_tDBInput_3 = null;

		    try {
		    	rs_tDBInput_3 = stmt_tDBInput_3.executeQuery(dbquery_tDBInput_3);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_3 = rs_tDBInput_3.getMetaData();
		    	int colQtyInRs_tDBInput_3 = rsmd_tDBInput_3.getColumnCount();

		    String tmpContent_tDBInput_3 = null;
		    
		    
		    while (rs_tDBInput_3.next()) {
		        nb_line_tDBInput_3++;
		        
							if(colQtyInRs_tDBInput_3 < 1) {
								row7.CD_LOCALI1 = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(1);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row7.CD_LOCALI1 = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row7.CD_LOCALI1 = tmpContent_tDBInput_3;
                }
            } else {
                row7.CD_LOCALI1 = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 2) {
								row7.VILLE = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(2);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row7.VILLE = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row7.VILLE = tmpContent_tDBInput_3;
                }
            } else {
                row7.VILLE = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 3) {
								row7.DP = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(3);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row7.DP = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row7.DP = tmpContent_tDBInput_3;
                }
            } else {
                row7.DP = null;
            }
		                    }
							if(colQtyInRs_tDBInput_3 < 4) {
								row7.DT = null;
							} else {
	                         		
           		tmpContent_tDBInput_3 = rs_tDBInput_3.getString(4);
            if(tmpContent_tDBInput_3 != null) {
            	if (talendToDBList_tDBInput_3 .contains(rsmd_tDBInput_3.getColumnTypeName(4).toUpperCase(java.util.Locale.ENGLISH))) {
            		row7.DT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_3);
            	} else {
                	row7.DT = tmpContent_tDBInput_3;
                }
            } else {
                row7.DT = null;
            }
		                    }
					





 



/**
 * [tDBInput_3 begin ] stop
 */
	
	/**
	 * [tDBInput_3 main ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 


	tos_count_tDBInput_3++;

/**
 * [tDBInput_3 main ] stop
 */
	
	/**
	 * [tDBInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_2 main ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row7");
					}
					


	row8 = new row8Struct();
						
	row8.CD_LOCALI1 = row7.CD_LOCALI1;								
	row8.VILLE = row7.VILLE;								
	row8.DP = row7.DP;								
	row8.DT = row7.DT;			


 


	tos_count_tReplicate_2++;

/**
 * [tReplicate_2 main ] stop
 */
	
	/**
	 * [tReplicate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

 



/**
 * [tReplicate_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row8");
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.CD_LOCALI1 = row8.CD_LOCALI1;
				
				row8_HashRow.VILLE = row8.VILLE;
				
				row8_HashRow.DP = row8.DP;
				
				row8_HashRow.DT = row8.DT;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

 



/**
 * [tReplicate_2 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_3 end ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

	}
}finally{
	if (rs_tDBInput_3 != null) {
		rs_tDBInput_3.close();
	}
	if (stmt_tDBInput_3 != null) {
		stmt_tDBInput_3.close();
	}
		if(conn_tDBInput_3 != null && !conn_tDBInput_3.isClosed()) {
			
			conn_tDBInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
		}
}
globalMap.put("tDBInput_3_NB_LINE",nb_line_tDBInput_3);

 

ok_Hash.put("tDBInput_3", true);
end_Hash.put("tDBInput_3", System.currentTimeMillis());




/**
 * [tDBInput_3 end ] stop
 */

	
	/**
	 * [tReplicate_2 end ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tReplicate_2", true);
end_Hash.put("tReplicate_2", System.currentTimeMillis());




/**
 * [tReplicate_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_3 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_3";

	

 



/**
 * [tDBInput_3 finally ] stop
 */

	
	/**
	 * [tReplicate_2 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_2";

	

 



/**
 * [tReplicate_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";

	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID_DOSCLIE;

				public BigDecimal getID_DOSCLIE () {
					return this.ID_DOSCLIE;
				}
				
			    public String NOM_CLIENT;

				public String getNOM_CLIENT () {
					return this.NOM_CLIENT;
				}
				
			    public String PRE_CLIENT;

				public String getPRE_CLIENT () {
					return this.PRE_CLIENT;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID_DOSCLIE == null) ? 0 : new Double(this.ID_DOSCLIE.doubleValue()).hashCode());
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.ID_DOSCLIE == null) {
							if (other.ID_DOSCLIE != null)
								return false;
						
						} else if ((other.ID_DOSCLIE == null) || (this.ID_DOSCLIE.compareTo(other.ID_DOSCLIE)!=0))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID_DOSCLIE = this.ID_DOSCLIE;
	            other.NOM_CLIENT = this.NOM_CLIENT;
	            other.PRE_CLIENT = this.PRE_CLIENT;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.ID_DOSCLIE = this.ID_DOSCLIE;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.ID_DOSCLIE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID_DOSCLIE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOM_CLIENT = readString(dis,ois);
					
						this.PRE_CLIENT = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOM_CLIENT, dos, oos);
					
						writeString(this.PRE_CLIENT, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_DOSCLIE="+String.valueOf(ID_DOSCLIE));
		sb.append(",NOM_CLIENT="+NOM_CLIENT);
		sb.append(",PRE_CLIENT="+PRE_CLIENT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID_DOSCLIE, other.ID_DOSCLIE);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_HAPPI_Quittancement_Ecart = new byte[0];
    static byte[] commonByteArray_HAPPI_Quittancement_Ecart = new byte[0];

	
			    public BigDecimal ID_DOSCLIE;

				public BigDecimal getID_DOSCLIE () {
					return this.ID_DOSCLIE;
				}
				
			    public String NOM_CLIENT;

				public String getNOM_CLIENT () {
					return this.NOM_CLIENT;
				}
				
			    public String PRE_CLIENT;

				public String getPRE_CLIENT () {
					return this.PRE_CLIENT;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_HAPPI_Quittancement_Ecart.length) {
				if(length < 1024 && commonByteArray_HAPPI_Quittancement_Ecart.length == 0) {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[1024];
				} else {
   					commonByteArray_HAPPI_Quittancement_Ecart = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_HAPPI_Quittancement_Ecart, 0, length);
			strReturn = new String(commonByteArray_HAPPI_Quittancement_Ecart, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_HAPPI_Quittancement_Ecart) {

        	try {

        		int length = 0;
		
						this.ID_DOSCLIE = (BigDecimal) dis.readObject();
					
					this.NOM_CLIENT = readString(dis);
					
					this.PRE_CLIENT = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID_DOSCLIE);
					
					// String
				
						writeString(this.NOM_CLIENT,dos);
					
					// String
				
						writeString(this.PRE_CLIENT,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID_DOSCLIE="+String.valueOf(ID_DOSCLIE));
		sb.append(",NOM_CLIENT="+NOM_CLIENT);
		sb.append(",PRE_CLIENT="+PRE_CLIENT);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tDBInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDBInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row13Struct row13 = new row13Struct();





	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tReplicate_3 - inputs:(row12) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row8,row13) outputs:(out)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tReplicate_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_3", false);
		start_Hash.put("tReplicate_3", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_3";

	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tReplicate_3 = 0;
		

 



/**
 * [tReplicate_3 begin ] stop
 */



	
	/**
	 * [tDBInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tDBInput_4", false);
		start_Hash.put("tDBInput_4", System.currentTimeMillis());
		
	
	currentComponent="tDBInput_4";

	
		int tos_count_tDBInput_4 = 0;
		
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tDBInput_4 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tDBInput_4 = new java.util.ArrayList();
			String[] talendToDBArray_tDBInput_4  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tDBInput_4, talendToDBArray_tDBInput_4); 
		    int nb_line_tDBInput_4 = 0;
		    java.sql.Connection conn_tDBInput_4 = null;
				conn_tDBInput_4 = (java.sql.Connection)globalMap.get("conn_tDBConnection_1");
				
			String dbschema_tDBInput_4 = (String)globalMap.get("dbschema_tDBConnection_1");
		    
			java.sql.Statement stmt_tDBInput_4 = conn_tDBInput_4.createStatement();

		    String dbquery_tDBInput_4 = "SELECT\n	a.ID_DOSCLIE,\n	a.NOM_CLIENT,\n	a.PRE_CLIENT\nFROM	DOSS_CLIEN a\n";
			

            	globalMap.put("tDBInput_4_QUERY",dbquery_tDBInput_4);
		    java.sql.ResultSet rs_tDBInput_4 = null;

		    try {
		    	rs_tDBInput_4 = stmt_tDBInput_4.executeQuery(dbquery_tDBInput_4);
		    	java.sql.ResultSetMetaData rsmd_tDBInput_4 = rs_tDBInput_4.getMetaData();
		    	int colQtyInRs_tDBInput_4 = rsmd_tDBInput_4.getColumnCount();

		    String tmpContent_tDBInput_4 = null;
		    
		    
		    while (rs_tDBInput_4.next()) {
		        nb_line_tDBInput_4++;
		        
							if(colQtyInRs_tDBInput_4 < 1) {
								row12.ID_DOSCLIE = null;
							} else {
		                          
            row12.ID_DOSCLIE = rs_tDBInput_4.getBigDecimal(1);
            if(rs_tDBInput_4.wasNull()){
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 2) {
								row12.NOM_CLIENT = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(2);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(2).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.NOM_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.NOM_CLIENT = tmpContent_tDBInput_4.trim();
                }
            } else {
                row12.NOM_CLIENT = null;
            }
		                    }
							if(colQtyInRs_tDBInput_4 < 3) {
								row12.PRE_CLIENT = null;
							} else {
	                         		
           		tmpContent_tDBInput_4 = rs_tDBInput_4.getString(3);
            if(tmpContent_tDBInput_4 != null) {
            	if (talendToDBList_tDBInput_4 .contains(rsmd_tDBInput_4.getColumnTypeName(3).toUpperCase(java.util.Locale.ENGLISH))) {
            		row12.PRE_CLIENT = FormatterUtils.formatUnwithE(tmpContent_tDBInput_4);
            	} else {
                	row12.PRE_CLIENT = tmpContent_tDBInput_4.trim();
                }
            } else {
                row12.PRE_CLIENT = null;
            }
		                    }
					





 



/**
 * [tDBInput_4 begin ] stop
 */
	
	/**
	 * [tDBInput_4 main ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 


	tos_count_tDBInput_4++;

/**
 * [tDBInput_4 main ] stop
 */
	
	/**
	 * [tDBInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_3 main ] start
	 */

	

	
	
	currentComponent="tReplicate_3";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row12");
					}
					


	row13 = new row13Struct();
						
	row13.ID_DOSCLIE = row12.ID_DOSCLIE;								
	row13.NOM_CLIENT = row12.NOM_CLIENT;								
	row13.PRE_CLIENT = row12.PRE_CLIENT;			


 


	tos_count_tReplicate_3++;

/**
 * [tReplicate_3 main ] stop
 */
	
	/**
	 * [tReplicate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_3";

	

 



/**
 * [tReplicate_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1,"row13");
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID_DOSCLIE = row13.ID_DOSCLIE;
				
				row13_HashRow.NOM_CLIENT = row13.NOM_CLIENT;
				
				row13_HashRow.PRE_CLIENT = row13.PRE_CLIENT;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";

	

 



/**
 * [tReplicate_3 process_data_end ] stop
 */



	
	/**
	 * [tDBInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 process_data_end ] stop
 */
	
	/**
	 * [tDBInput_4 end ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

	}
}finally{
	if (rs_tDBInput_4 != null) {
		rs_tDBInput_4.close();
	}
	if (stmt_tDBInput_4 != null) {
		stmt_tDBInput_4.close();
	}
}
globalMap.put("tDBInput_4_NB_LINE",nb_line_tDBInput_4);

 

ok_Hash.put("tDBInput_4", true);
end_Hash.put("tDBInput_4", System.currentTimeMillis());




/**
 * [tDBInput_4 end ] stop
 */

	
	/**
	 * [tReplicate_3 end ] start
	 */

	

	
	
	currentComponent="tReplicate_3";

	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tReplicate_3", true);
end_Hash.put("tReplicate_3", System.currentTimeMillis());




/**
 * [tReplicate_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDBInput_4 finally ] start
	 */

	

	
	
	currentComponent="tDBInput_4";

	

 



/**
 * [tDBInput_4 finally ] stop
 */

	
	/**
	 * [tReplicate_3 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_3";

	

 



/**
 * [tReplicate_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";

	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDBInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    

    public static void main(String[] args){
        final Quittancement_Ecart Quittancement_EcartClass = new Quittancement_Ecart();

        int exitCode = Quittancement_EcartClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("monitoring"));

    	
    	

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Quittancement_Ecart.class.getClassLoader().getResourceAsStream("happi/quittancement_ecart_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Quittancement_Ecart.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                //defaultProps is in order to keep the original context value
                if(context != null && context.isEmpty()) {
	                defaultProps.load(inContext);
	                context = new ContextProperties(defaultProps);
                }
                
                inContext.close();
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tDBConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tDBConnection_1) {
globalMap.put("tDBConnection_1_SUBPROCESS_STATE", -1);

e_tDBConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Quittancement_Ecart");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tDBConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tDBConnection_1", globalMap.get("conn_tDBConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--monitoring") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     243394 characters generated by Talend Open Studio for Data Integration 
 *     on the 30 mars 2021 10:54:25 CEST
 ************************************************************************************************/